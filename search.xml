<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Angular 基礎｜從 Todo List 認識四種資料綁定</title>
    <url>/angular-binding/</url>
    <content><![CDATA[<p>本篇主要在認識四種資料綁定，使用 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3Rhc3RlanMvdG9kb212Yw==">todoMVC<i class="fa fa-external-link-alt"></i></span> 提供的模板樣式練習。</p>
<ul>
<li>可參考 <a href="https://heidiliu2020.github.io/angular-todolist/">DEMO</a> / <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2hlaWRpbGl1MjAyMC9hbmd1bGFyLXRvZG9saXN0">Github<i class="fa fa-external-link-alt"></i></span>，這是合併 TodoList 和 Pomodoro 兩種功能的小專案，透過實作來練習資料綁定。</li>
</ul>
<span id="more"></span>

<h2 id="資料綁定-Data-Binding"><a href="#資料綁定-Data-Binding" class="headerlink" title="資料綁定 Data Binding"></a>資料綁定 Data Binding</h2><blockquote>
<p>斯斯有兩種，資料綁定有四種。</p>
</blockquote>
<p>下圖出自於 <span class="exturl" data-url="aHR0cHM6Ly9hbmd1bGFyLnR3L2d1aWRlL2FyY2hpdGVjdHVyZS1jb21wb25lbnRz">Angular 官網<i class="fa fa-external-link-alt"></i></span>：</p>
<p><img src="https://i.imgur.com/avqYqaV.png"></p>
<p>資料綁定（Data Binding）是 Angular 用來協調 Component（TypeScript）與 Template（HTML）互相傳遞資料的機制，依照方向性的不同，可分為四種綁定方式：</p>
<ul>
<li>內嵌綁定/插值（Interpolation）<ul>
<li><code>&#123;&#123;value&#125;&#125;</code></li>
</ul>
</li>
<li>屬性綁定（Property Binding）<ul>
<li><code>[propertyName] = &#39;value&#39;</code></li>
<li><code>[attr.attributeName] = &#39;value&#39;</code></li>
</ul>
</li>
<li>事件綁定（Event Binding）<ul>
<li><code>(eventName) = &#39;someMethod($event)&#39;</code></li>
<li><code>(eventName.key) = &#39;someMethod($event)&#39;</code></li>
</ul>
</li>
<li>雙向綁定（Two-Way Binding）<ul>
<li><code>[(ngModel)] = &#39;property&#39;</code></li>
</ul>
</li>
</ul>
<p>前三種均屬於單向綁定（One-Way Binding）；第四種雙向綁定，則是屬性綁定加上事件綁定的組合。</p>
<br/>

<h2 id="內嵌綁定（插值）"><a href="#內嵌綁定（插值）" class="headerlink" title="內嵌綁定（插值）"></a>內嵌綁定（插值）</h2><ul>
<li>單向性：value 改變 HTML 跟著變<ul>
<li>Component 變數→Template 值</li>
</ul>
</li>
<li>使用方法：直接在 HTML 中插入變數 <code>&#123;&#123;value&#125;&#125;</code></li>
</ul>
<p>以下為範例：</p>
<ul>
<li>app.component.html：在 Template 在要嵌入的地方加上<code>&#123;&#123;雙大括號&#125;&#125;</code></li>
</ul>
<pre class="line-numbers language-htmlmixed" data-language="htmlmixed"><code class="language-htmlmixed">&lt;h1&gt;&#123;&#123;title&#125;&#125;&lt;&#x2F;h1&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ul>
<li>app.component.ts：變數 title 一旦改變，會連動更新 HTML h1 的內容</li>
</ul>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> Component <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'@angular/core'</span><span class="token punctuation">;</span>

<span class="token decorator"><span class="token at operator">@</span><span class="token function">Component</span></span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
  selector<span class="token operator">:</span> <span class="token string">'app-root'</span><span class="token punctuation">,</span>
  templateUrl<span class="token operator">:</span> <span class="token string">'./app.component.html'</span><span class="token punctuation">,</span>
  styleUrls<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'./app.component.css'</span><span class="token punctuation">]</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">AppComponent</span> <span class="token punctuation">&#123;</span>
  title <span class="token operator">=</span> <span class="token string">'Todo List'</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="屬性綁定"><a href="#屬性綁定" class="headerlink" title="屬性綁定"></a>屬性綁定</h2><ul>
<li>單向性：value 改變會影響 property，HTML 跟著改變<ul>
<li>Component 變數→Template 值</li>
</ul>
</li>
<li>使用方法：在 HTML 中的屬性加上 <code>[property]=&quot;value&quot;</code></li>
</ul>
<p>以下為範例：</p>
<ul>
<li>todo-list.component.ts：新增一個 inputHint 變數</li>
</ul>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> Component <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'@angular/core'</span><span class="token punctuation">;</span>

<span class="token decorator"><span class="token at operator">@</span><span class="token function">Component</span></span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
  selector<span class="token operator">:</span> <span class="token string">'app-root'</span><span class="token punctuation">,</span>
  templateUrl<span class="token operator">:</span> <span class="token string">'./app.component.html'</span><span class="token punctuation">,</span>
  styleUrls<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'./app.component.css'</span><span class="token punctuation">]</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">TodoListComponent</span> <span class="token keyword">implements</span> <span class="token class-name">OnInit</span> <span class="token punctuation">&#123;</span>
  inputHint <span class="token operator">=</span> <span class="token string">'Add New Todo Here...'</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>todo-list.component.html：變數 inputHint 一旦改變，會連動更新 input 的 placeholder 內容</li>
</ul>
<pre class="line-numbers language-htmlmixed" data-language="htmlmixed"><code class="language-htmlmixed">&lt;input class&#x3D;&quot;todo-input&quot; [placeholder]&#x3D;&quot;inputHint&quot; autofocus&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>結果如下：</p>
<p><img src="https://i.imgur.com/AoZhrIi.png"></p>
<p>根據使用的 property 又分以下幾種，常用於根據綁定 value 布林值決定顯示或移除：</p>
<ul>
<li>Emelent property：例如綁定路徑、是否鎖住按鈕等等</li>
</ul>
<pre class="line-numbers language-htmlmixed" data-language="htmlmixed"><code class="language-htmlmixed">&lt;img [src]&#x3D;&quot;imageUrl&quot;&gt;

&lt;button [disabled]&#x3D;&quot;!isValid&quot;&gt;Save&lt;&#x2F;button&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<ul>
<li>Component property：使用對象為 Component，常用於傳入資料</li>
</ul>
<pre class="line-numbers language-htmlmixed" data-language="htmlmixed"><code class="language-htmlmixed">&lt;hero-detail [hero]&#x3D;&quot;currentHero&quot;&gt;&lt;&#x2F;hero-detail&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ul>
<li>Class property：CSS 類別</li>
</ul>
<pre class="line-numbers language-htmlmixed" data-language="htmlmixed"><code class="language-htmlmixed">&lt;li [class.completed]&#x3D;&quot;todo.done&quot;&gt;&lt;&#x2F;li&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ul>
<li>Attribute property：CSS 屬性</li>
</ul>
<pre class="line-numbers language-htmlmixed" data-language="htmlmixed"><code class="language-htmlmixed">[attr.attributeName] &#x3D; &quot;statement&quot;

 &lt;label [attr.contenteditable]&#x3D;&quot;!todo.done&quot;&gt;&lt;&#x2F;label&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<ul>
<li>Style property：CSS 風格</li>
</ul>
<pre class="line-numbers language-htmlmixed" data-language="htmlmixed"><code class="language-htmlmixed">&lt;button [style.color] &#x3D; &quot;isValid ? &#39;green&#39;: &#39;red&#39;&quot;&gt;Save&lt;&#x2F;button&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ul>
<li>Directive property： ngClass 和 ngStyle 是 Angular 提供動態設置 CSS 的方法</li>
</ul>
<pre class="line-numbers language-htmlmixed" data-language="htmlmixed"><code class="language-htmlmixed">&lt;li [ngClass]&#x3D;&quot;&#123;completed: todo.done&#125;&quot;&gt;&lt;&#x2F;li&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h2 id="事件綁定"><a href="#事件綁定" class="headerlink" title="事件綁定"></a>事件綁定</h2><ul>
<li>單向性：一旦觸發指定 event，就會呼叫 TypeScript 中的 someMethod 方法<ul>
<li>Template 發送事件→Component 呼叫方法</li>
</ul>
</li>
<li>使用方法：在 HTML 中的加入 <code>(event)=&quot;someMethod()&quot;</code></li>
</ul>
<p>以下為範例：</p>
<ul>
<li>app.component.ts：宣告 onClick() 方法</li>
</ul>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">AppComponent</span> <span class="token punctuation">&#123;</span>
  <span class="token function">onClick</span><span class="token punctuation">(</span>value<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">&#123;</span>
      <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"Hello "</span> <span class="token operator">+</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>app.component.html：在 HTML 設定 Click 事件，觸發時就會呼叫 TypeScipt 的 onClick 方法</li>
</ul>
<pre class="line-numbers language-htmlmixed" data-language="htmlmixed"><code class="language-htmlmixed">&lt;button (click)&#x3D;&quot;onClick(&#39;World&#39;)&quot;&gt;Click Me!&lt;&#x2F;button&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>結果如下：</p>
<iframe src="https://codesandbox.io/embed/event-binding-6gs11?fontsize=14&hidenavigation=1&theme=dark"
     style="width:80%; height:200px; border:0; border-radius: 4px; overflow:hidden;"
     title="Event Binding"
     allow="accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking"
     sandbox="allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts"
   ></iframe>

<h2 id="雙向綁定：屬性-事件"><a href="#雙向綁定：屬性-事件" class="headerlink" title="雙向綁定：屬性 + 事件"></a>雙向綁定：屬性 + 事件</h2><blockquote>
<p>[()] 符號口訣：Banana is in the Box!（香蕉在箱子裡）</p>
</blockquote>
<ul>
<li>雙向性：Component 或 Template 其中一方的值改變，另一方也會跟著變<ul>
<li>Component ⇄ Template </li>
</ul>
</li>
<li>使用方法：在 HTML 加入 <code>[(ngModel)]</code> 語法，使用前需要先在 AppModule 引用 FormsModule</li>
<li>通常用於 <code>&lt;input&gt;</code>、<code>&lt;textarte&gt;</code> 等表單元素</li>
</ul>
<p>以新增 Todo 功能為例：</p>
<ul>
<li>todo-list.component.ts：宣告一個 todos 陣列、變數 todo 和 addTodo() 方法</li>
</ul>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> Component <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'@angular/core'</span><span class="token punctuation">;</span>

<span class="token decorator"><span class="token at operator">@</span><span class="token function">Component</span></span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
  selector<span class="token operator">:</span> <span class="token string">'app-todo-list'</span><span class="token punctuation">,</span>
  templateUrl<span class="token operator">:</span> <span class="token string">'./todo-list.component.html'</span><span class="token punctuation">,</span>
  styleUrls<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'./todo-list.component.css'</span><span class="token punctuation">]</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">TodoListComponent</span> <span class="token punctuation">&#123;</span>
  todos <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  todo <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>
  
  <span class="token comment">// 新增 Todo 功能</span>
  <span class="token function">addTodo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>todo<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>    <span class="token comment">// input 為空則返回</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>todos<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>     <span class="token comment">// 把狀態暫存在 model</span>
      text<span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>todo<span class="token punctuation">,</span>  <span class="token comment">// todo 內容</span>
      done<span class="token operator">:</span> <span class="token boolean">false</span>       <span class="token comment">// 是否已完成</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>todo <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>    <span class="token comment">// 新增完就清空</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>todo-list.component.html：分別在 input 設定 Enter 事件，以及 button 設定 Click 事件，觸發事件時就會呼叫 addTodo() 方法</li>
</ul>
<pre class="line-numbers language-htmlmixed" data-language="htmlmixed"><code class="language-htmlmixed">&lt;input
  class&#x3D;&quot;todo-input&quot; [placeholder]&#x3D;&quot;inputHint&quot; 
  [(ngModel)]&#x3D;&quot;todo&quot; (keyup.enter)&#x3D;&quot;addTodo()&quot;
&gt;
&lt;button class&#x3D;&quot;btn-add&quot; (click)&#x3D;&quot;addTodo()&quot;&gt;&lt;&#x2F;button&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>使用 <code>[(ngModel)]</code> 語法，要記得在 app.module.ts 引入 FormsModule：</p>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> NgModule <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'@angular/core'</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> BrowserModule <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'@angular/platform-browser'</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> FormsModule <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'@angular/forms'</span><span class="token punctuation">;</span>  <span class="token comment">//NgModel lives here</span>

<span class="token decorator"><span class="token at operator">@</span><span class="token function">NgModule</span></span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
  <span class="token comment">// ...</span>
  imports<span class="token operator">:</span> <span class="token punctuation">[</span>
    BrowserModule<span class="token punctuation">,</span> 
    FormsModule  <span class="token comment">//import the FormsModule before binding with [(ngModel)]</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
  
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="實作：刪除-Todo-功能"><a href="#實作：刪除-Todo-功能" class="headerlink" title="實作：刪除 Todo 功能"></a>實作：刪除 Todo 功能</h3><p>在上述範例中，我們完成了新增 Todo 功能，接著要實作刪除 Todo：</p>
<ul>
<li>todo-list.component.html<ul>
<li><code>*ngIf</code>: 透過判斷式控制資料顯示與否</li>
<li><code>*ngFor</code>: 透過迴圈顯示多筆資料</li>
<li>使用內建的 pipe: uppercase 會統一將輸出轉成大寫</li>
<li>在 button 元素加上事件綁定 click</li>
</ul>
</li>
</ul>
<pre class="line-numbers language-htmlmixed" data-language="htmlmixed"><code class="language-htmlmixed">&lt;section class&#x3D;&quot;main&quot; *ngIf&#x3D;&quot;todos.length &gt; 0&quot;&gt;
  &lt;ul class&#x3D;&quot;todo-list&quot;&gt;
    &lt;li *ngFor&#x3D;&quot;let item of todos&quot;&gt;
      &lt;div class&#x3D;&quot;view&quot;&gt;
        &lt;input class&#x3D;&quot;toggle&quot; type&#x3D;&quot;checkbox&quot;&gt;
        &lt;label&gt;&#123;&#123;item.text | uppercase&#125;&#125;&lt;&#x2F;label&gt;
        &lt;button class&#x3D;&quot;btn-destroy&quot; (click)&#x3D;&quot;removeTodo(item)&quot;&gt;&lt;&#x2F;button&gt;
      &lt;&#x2F;div&gt;
    &lt;&#x2F;li&gt;
  &lt;&#x2F;ul&gt;
&lt;&#x2F;section&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>todo-list.component.ts：觸發 click 事件時就會呼叫 removeTodo 方法</li>
</ul>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token function">removeTodo</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>todos<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>todos<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<br>

<h2 id="補充：淺談-NgClass-與-NgStyle"><a href="#補充：淺談-NgClass-與-NgStyle" class="headerlink" title="補充：淺談 NgClass 與 NgStyle"></a>補充：淺談 NgClass 與 NgStyle</h2><p>NgClass 與 NgStyle 是 Angular 提供的指令，可用來動態改變 DOM 元素的 CSS，以下和原生屬性與不同綁定方式進行比較：</p>
<ul>
<li>Native attributes：靜態使用單一 / 多個樣式</li>
<li>Class 和 Style Bindings：動態使用單一樣式</li>
<li>使用 NgClass 和 NgStyle：動態使用單一 / 多個樣式</li>
</ul>
<pre class="line-numbers language-htmlmixed" data-language="htmlmixed"><code class="language-htmlmixed">&lt;!-- Native Attributes --&gt;
&lt;input class&#x3D;&quot;is-danger&quot; style&#x3D;&quot;border: none; color: blue&quot;&gt;

&lt;!-- Angular Bindings --&gt;
&lt;input [class.is-danger]&#x3D;&quot;isDanger&quot; [style.border]&#x3D;&quot;hasborder&quot;&gt;

&lt;!-- ngClass --&gt;
&lt;input [ngClass]&#x3D;&quot;&#123;&#39;is-danger&#39;: isDanger, &#39;myButton&#39;: true&#125;&quot;&gt;
&lt;input [ngClass]&#x3D;&quot;isDangerButton&quot;&gt;

&lt;!-- ngStyle --&gt;
&lt;input [ngStyle]&#x3D;&quot;&#123;&#39;border&#39;: hasBorder, &#39;color&#39;: colorProp&#125;&quot;&gt;
&lt;input [ngStyle]&#x3D;&quot;hasColorBorder&quot;&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>至於優缺點，以下方程式碼為例：</p>
<ul>
<li>動態使用單一樣式<ul>
<li>可讀性高</li>
</ul>
</li>
</ul>
<pre class="line-numbers language-htmlmixed" data-language="htmlmixed"><code class="language-htmlmixed">&lt;li [class.completes]&#x3D;&quot;todo.isDoing&quot;
    [class.editing]&#x3D;&quot;todo.isEditing&quot;
    [style.font-size.px]&#x3D;&quot;fontSize&quot;&gt;
&lt;&#x2F;li&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>動態使用多種樣式<ul>
<li>可透過物件形式，一次表達多種樣式</li>
<li>Angular 8 版本以後，官方推薦直接以 [class] 或 [style] 撰寫，而不使用 [ngClass] 或 [ngStyle]</li>
</ul>
</li>
</ul>
<pre class="line-numbers language-htmlmixed" data-language="htmlmixed"><code class="language-htmlmixed">&lt;li [class]&#x3D;&quot;&#123;completed: todo.isDone, editing: todo.isEditing&#125;&quot; 
    [style]&#x3D;&quot;&#123;&#39;font-size&#39;: fontSize + &#39;px&#39; &#125;&quot;&gt;
&lt;&#x2F;li&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>兩者可達成相同效果，依照需求和習慣選用即可！</p>
<p>參考資料：</p>
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmpvaG53dS5jYy9hcnRpY2xlL2FuZ3VsYXItNC0lRTYlOTUlOTklRTUlQUQlQjgtZGF0YS1iaW5kaW5nLmh0bWw=">Angular 4 教學 - Data Binding<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9pdGhlbHAuaXRob21lLmNvbS50dy9hcnRpY2xlcy8xMDE5MzkxNw==">[功能介紹-2] 資料繫結的模版語法<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC85NTQ5MDcwNg==">精通Angular之NgClass和NgStyle<i class="fa fa-external-link-alt"></i></span></li>
</ul>
]]></content>
      <categories>
        <category>Front-End</category>
        <category>Angular</category>
      </categories>
      <tags>
        <tag>Angular</tag>
      </tags>
  </entry>
  <entry>
    <title>初探 Angular｜基本介紹與環境建置</title>
    <url>/angular-cli/</url>
    <content><![CDATA[<h2 id="關於-Angular"><a href="#關於-Angular" class="headerlink" title="關於 Angular"></a>關於 Angular</h2><blockquote>
<p>The modern web developer’s platform（一套框架，多種平臺）</p>
</blockquote>
<span id="more"></span>

<p><img src="https://i.imgur.com/I9XUKCr.png"></p>
<p>Angular 是由 Google 開發，基於 TypeScript 編寫的 JavaScript 前端框架，常和同為三大框架的 React 和 Vue 比較。</p>
<p>1.x 版的 AngularJS 其實還算是函式庫，直到 Angular 2 版本出現之後，與其說是一套框架，更常被稱作是一個開發平台，因為 Angular 強大的地方在於，整合了非常多功能給開發者使用：</p>
<ul>
<li>i18n - 多國語系化</li>
<li>Animation - 動畫</li>
<li>Router - 提供路由機制開發 SPA </li>
<li><span class="exturl" data-url="aHR0cHM6Ly9jbGkuYW5ndWxhci5pby8=">Angular CLI<i class="fa fa-external-link-alt"></i></span> - 命令列工具，可用來建立專案、建立應用和函式庫程式碼</li>
<li>Material - Google 力推的 Material 網頁設計框架</li>
<li>Augury - 官方出版的 Google Chrome 開發者工具，用於分析頁面中所用元件的狀態與方法</li>
</ul>
<blockquote>
<p>可參考 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL1RlYW1TdHVRL3NraWxsLW1hcC9ibG9iL21hc3Rlci9kYXRhL2Rlc2lnbmJ5U3R1US9wbmctQW5ndWxhcjItYnktU3R1US5wbmc=">Angular 2 skill map<i class="fa fa-external-link-alt"></i></span>。</p>
</blockquote>
<h3 id="Angular-基本架構"><a href="#Angular-基本架構" class="headerlink" title="Angular 基本架構"></a>Angular 基本架構</h3><p>以下是官網提供的 Angular 架構圖：</p>
<p><img src="https://i.imgur.com/TevuOoo.png"></p>
<p>Angular App 主要由這八個元素構成：</p>
<ul>
<li>Metadata 元資料、描述資料<ul>
<li>在 <code>@Component</code>、<code>@NgModule</code> 裝飾器函式中，用於描述該元件的附加資料</li>
<li>元資料中指定的樣式只會作用於該元件</li>
</ul>
</li>
<li>Template：模板，呈現畫面<ul>
<li>權重：Template Input Variable（模板輸入變數）= Template Reference Variable（模板參考變數） &gt; Component Variable</li>
</ul>
</li>
<li>Component：元件，為最小 UI 單位<ul>
<li>Directive + Template 的組合</li>
</ul>
</li>
<li>Dependency Injection：倚賴注入<ul>
<li>DI 是一種 Design Pattern，為了將功能集中，減少相依性的設計模式</li>
</ul>
</li>
<li>Service：服務，針對特定事情處理邏輯</li>
<li>Directive：指令，有三種呈現形式<ul>
<li>Component 元件，擁有樣板的指令</li>
<li>Structural Directive 結構指令<ul>
<li>修改檢視結構</li>
<li>如：<code>*ngFor</code>、<code>*ngIf</code>、<code>NgSwitch</code>，星號是用來簡化復雜語法的「語法糖」</li>
</ul>
</li>
<li>Attribute Directive 屬性指令<ul>
<li>改變元素的外觀或行為</li>
<li>如：<code>NgClass</code>、<code>NgStyle</code>、<code>NgModel</code></li>
</ul>
</li>
</ul>
</li>
<li>Data Binding：資料綁定<ul>
<li>Property Binding 屬性單向綁定</li>
<li>Event Binding 事件單向綁定</li>
<li>Two Way Binding 屬性與事件雙向綁定</li>
</ul>
</li>
<li>Module：模組，打包功能以實現功能模組化</li>
</ul>
<p>參考資料：</p>
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL21hcnNoYWw2MDQvYmxvZy9pc3N1ZXMvMg==">Angular小教室 - 用Note List了解頁面基本元素 (基礎篇)<i class="fa fa-external-link-alt"></i></span></li>
</ul>
<hr>
<h2 id="環境建置"><a href="#環境建置" class="headerlink" title="環境建置"></a>環境建置</h2><blockquote>
<p>詳細可參考 <span class="exturl" data-url="aHR0cHM6Ly9hbmd1bGFyLmlvL2RvY3M=">Angular 官方文件<i class="fa fa-external-link-alt"></i></span>。</p>
</blockquote>
<h3 id="前置作業"><a href="#前置作業" class="headerlink" title="前置作業"></a>前置作業</h3><p>要執行一個簡單的 Angular 應用，可使用 Angular CLI 工具來加速開發，建議使用 <span class="exturl" data-url="aHR0cHM6Ly9ub2RlanMub3JnL2VuLw==">Node.js<i class="fa fa-external-link-alt"></i></span> 的 npm 套件管理工具來安裝 Angular CLI。</p>
<p>可在終端機輸入下方指令，查看版本資訊，確認是否有安裝成功：</p>
<pre class="line-numbers language-none"><code class="language-none">$ node -v<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h3 id="第一步：安裝-Angular-CLI"><a href="#第一步：安裝-Angular-CLI" class="headerlink" title="第一步：安裝 Angular CLI"></a>第一步：安裝 Angular CLI</h3><p>使用 Angular CLI 開發工具，可透過 ng 命令，快速產生 Directive 元件、服務元件（Service Component）、管線元件（Pipe Component），或是路由設定，並執行多種開發任務，比如測試、打包和釋出。</p>
<p>輸入下方指令進行安裝：</p>
<pre class="line-numbers language-none"><code class="language-none">$ npm install -g @angular&#x2F;cli<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p><img src="https://i.imgur.com/vT0Tdas.png"></p>
<p>如果是在 mac 系統，指令必須加上 <code>sudo</code>，切換成管理員帳戶才有權限安裝：</p>
<pre class="line-numbers language-none"><code class="language-none">$ sudo npm install -g @angular&#x2F;cli<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>可輸入 <code>ng version</code> 或是 <code>ng v</code> 指令查看版本資訊，確認是否安裝成功，畫面如下：</p>
<p><img src="https://i.imgur.com/uKEUiSA.png"></p>
<h3 id="第二步：建立-Angular-初始專案"><a href="#第二步：建立-Angular-初始專案" class="headerlink" title="第二步：建立 Angular 初始專案"></a>第二步：建立 Angular 初始專案</h3><p>透過 <code>new</code> 指令，可在當前目錄建立一個 Angluar 工作空間 （Workspace），並初始化 Angular 專案所需要的配置：</p>
<pre class="line-numbers language-none"><code class="language-none">$ ng new my-app<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p><img src="https://i.imgur.com/IKVBKmI.png"></p>
<p>安裝需要一段時間，完成後會出現 <code>Packages installed successfully. Successfully initialized git.</code> 這段文字：</p>
<p><img src="https://i.imgur.com/kQvlGXB.png"></p>
<p>除了透過 NPM 安裝必要套件，還會利用 Git 進行版本控制，並完成第一次提交（commit）。</p>
<h3 id="第三步：啟動開發伺服器"><a href="#第三步：啟動開發伺服器" class="headerlink" title="第三步：啟動開發伺服器"></a>第三步：啟動開發伺服器</h3><p>在本地端 build 和 serve 專案，並運行在 <code>http://localhost:4200/</code>：</p>
<pre class="line-numbers language-none"><code class="language-none">$ cd my-app
$ ng serve --open<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p><img src="https://i.imgur.com/Fm81XkW.png"></p>
<ul>
<li>ng serve 指令會啟動開發伺服器，並監視檔案變化，一旦有改變就會重新建構應用</li>
<li><code>--open</code> 或簡寫 <code>-o</code> 可自動開啟瀏覽器</li>
</ul>
<p>預設畫面如下：</p>
<p><img src="https://i.imgur.com/FspJDDM.png"></p>
<h3 id="VSCode-擴充套件：Angular-Extension-Pack"><a href="#VSCode-擴充套件：Angular-Extension-Pack" class="headerlink" title="VSCode 擴充套件：Angular Extension Pack"></a>VSCode 擴充套件：Angular Extension Pack</h3><p>若使用 VSCode（Visual Studio Code）編輯器，可安裝一個叫做 Angular Extension Pack 的擴充套件，整合了 Angular 相關擴充套件方便使用：</p>
<p><img src="https://i.imgur.com/tda1vFZ.png"></p>
<h2 id="預設專案架構"><a href="#預設專案架構" class="headerlink" title="預設專案架構"></a>預設專案架構</h2><blockquote>
<p>詳細可參考這篇：<span class="exturl" data-url="aHR0cHM6Ly9pdGhlbHAuaXRob21lLmNvbS50dy9hcnRpY2xlcy8xMDIwMzUzNA==">[Angular 深入淺出三十天] Day 04 - 資料夾結構說明<i class="fa fa-external-link-alt"></i></span>。</p>
</blockquote>
<p>建立好 Angular 專案之後，預設架構如下：</p>
<p><img src="https://i.imgur.com/YAtLAJT.png"></p>
<ul>
<li>根目錄 my-app：一個新的 workspace</li>
<li>子目錄 src/：主要開發原始碼<ul>
<li>app/：包含整個網頁應用程式的 Module、Component、Service</li>
<li>assets/：圖片等靜態資源</li>
<li>environments/：環境變數設定檔</li>
</ul>
</li>
<li>子目錄 e2e/：E2E 測試的程式碼</li>
<li>browserslist：用來定義專案支援的瀏覽器與版本</li>
<li>angular.json：Angular CLI 設定檔</li>
<li>karma.conf.js：<span class="exturl" data-url="aHR0cHM6Ly9rYXJtYS1ydW5uZXIuZ2l0aHViLmlvLzMuMC9pbmRleC5odG1s">Karma<i class="fa fa-external-link-alt"></i></span> 設定檔，用來進行單元測試，專案建立時會預設使用這套工具</li>
<li>tsconfig.json：TypeScript 編譯設定檔</li>
<li>tslint.json：TSLint 設定檔，為 TypeScript 的格式驗證工具，提高程式碼可讀性、偵測功能性錯誤</li>
<li>其他相關配置檔案</li>
</ul>
<h3 id="從建立-Component-開始"><a href="#從建立-Component-開始" class="headerlink" title="從建立 Component 開始"></a>從建立 Component 開始</h3><p>透過 Angular CLI 提供的指令，我們能快速建立一個專案架構，其中最常使用 ng generate 來產生 Component、Service、Pipe 等檔案的程式碼。</p>
<p>指令如下：</p>
<pre class="line-numbers language-none"><code class="language-none">$ ng generate component &lt;name&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>或簡化成：</p>
<pre class="line-numbers language-none"><code class="language-none">$ ng g c &lt;name&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>舉例來說，如果要建立一個叫做 todo-list 的 Component，指令是 <code>ng g c todo-list</code>，接著 Angular 就會建立四個檔案，以及更新 app.module.ts：</p>
<p><img src="https://i.imgur.com/HDeeSVB.png"></p>
<ul>
<li>todo-list.component.html：模板 Template</li>
<li>todo-list.component.spec.ts：執行 ng test 命令會透過 Karma 進行測試</li>
<li>todo-list.component.ts：元件 Component</li>
<li>todo-list.component.css：樣式</li>
</ul>
<h2 id="小結"><a href="#小結" class="headerlink" title="小結"></a>小結</h2><p>因為工作需要，而開始接觸 Angular 這套前端框架，卻也了解到這套工具涵括的功能種類眾多！</p>
<p>雖然一時半刻還無法消化，但其實也不是說剛開始就要完全了解，有些概念還是和 React 有相似之處，總之就先跟著官網提供的<span class="exturl" data-url="aHR0cHM6Ly9hbmd1bGFyLnR3L3R1dG9yaWFs">練習指南<i class="fa fa-external-link-alt"></i></span>，一步一步跟著實作，慢慢踏入 Angular 的世界！</p>
<p>參考資料：</p>
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9pdGhlbHAuaXRob21lLmNvbS50dy91c2Vycy8yMDEwOTY0NS9pcm9ubWFuLzM3NjI=">Angular 全集中筆記 系列<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9pdGhlbHAuaXRob21lLmNvbS50dy91c2Vycy8yMDA5MDcyOC9pcm9ubWFuLzE2MDA=">Angular 深入淺出三十天 系列<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9pdGhlbHAuaXRob21lLmNvbS50dy91c2Vycy8yMDAyMDYxNy9pcm9ubWFuLzE2MzA=">Angular 大師之路 系列<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLm1pbmlhc3AuY29tL3Bvc3QvMjAxNi8wNy8yNi9JbnRyb2R1Y3Rpb24tdG8tQW5ndWxhci0y">前端工程的夢幻逸品：Angular 2 開發框架介紹
<i class="fa fa-external-link-alt"></i></span></li>
</ul>
]]></content>
      <categories>
        <category>Front-End</category>
        <category>Angular</category>
      </categories>
  </entry>
  <entry>
    <title>Angular 延伸｜ NGXS 狀態管理入門</title>
    <url>/angular-ngxs/</url>
    <content><![CDATA[<p>本篇主要是認識 NGXS 這套狀態管理工具，瞭解基本概念，以及和 NGRX 使用上的差異。</p>
<span id="more"></span>

<h2 id="NGXS-簡介"><a href="#NGXS-簡介" class="headerlink" title="NGXS 簡介"></a>NGXS 簡介</h2><ul>
<li>用於 Angular 的狀態管理框架（State Management），使用 RxJS 管理程式中的所有狀態</li>
<li>通常應用於大型專案，需處理較複雜的狀態管理</li>
<li>為單一 Store<ul>
<li>優點：可循環調用其他 State 的 Action、統一使用 dispatch  調度 action</li>
<li>缺點：需統一管理所有的 Action、Action 類型不能重複</li>
</ul>
</li>
</ul>
<h2 id="安裝-NGXS"><a href="#安裝-NGXS" class="headerlink" title="安裝 NGXS"></a>安裝 NGXS</h2><ol>
<li>透過 npm 安裝 @ngxs/store 套件</li>
</ol>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">npm install @ngxs<span class="token operator">/</span>store<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>b. 在 <code>app.module.ts</code> 引入 <code>NgxsModule</code></p>
<pre class="line-numbers language-tsx" data-language="tsx"><code class="language-tsx"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> BrowserModule <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'@angular/platform-browser'</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> NgModule <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'@angular/core'</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> NgxsModule <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'@ngxs/store'</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> AppComponent <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'./app.component'</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> environment <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"src/environments/environment"</span>

<span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
  declarations<span class="token operator">:</span> <span class="token punctuation">[</span>
								 AppComponent
								<span class="token punctuation">]</span><span class="token punctuation">,</span>
  imports<span class="token operator">:</span> <span class="token punctuation">[</span>
						BrowserModule<span class="token punctuation">,</span> 
            NgxsModule<span class="token punctuation">.</span><span class="token function">forRoot</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>                    <span class="token comment">// 註冊 state</span>
							developmentMode<span class="token operator">:</span> <span class="token operator">!</span>environment<span class="token punctuation">.</span>production<span class="token punctuation">.</span> <span class="token comment">// 開發模式，可進行額外檢查</span>
						<span class="token punctuation">&#125;</span><span class="token punctuation">)</span> 
           <span class="token punctuation">]</span><span class="token punctuation">,</span>
  providers<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  bootstrap<span class="token operator">:</span> <span class="token punctuation">[</span>AppComponent<span class="token punctuation">]</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">AppModule</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="NGXS-基本概念"><a href="#NGXS-基本概念" class="headerlink" title="NGXS 基本概念"></a>NGXS 基本概念</h2><p>NGXS 包含四個概念，以下是官網介紹：</p>
<ul>
<li>Store: Global state container, action dispatcher and selector</li>
<li>Actions: Class describing the action to take and its associated metadata</li>
<li>State: Class definition of the state</li>
<li>Selects: State slice selectors</li>
</ul>
<p><img src="/images/pasted-1.png" alt="upload successful"></p>
<h3 id="建立-State：定義狀態容器的類"><a href="#建立-State：定義狀態容器的類" class="headerlink" title="建立 State：定義狀態容器的類"></a>建立 State：定義狀態容器的類</h3><ul>
<li>State 是單純的 class 檔</li>
<li>透過 <code>ng g class &lt;&lt;state file name&gt;&gt;</code> 指令產生 ts 檔案<ul>
<li>例如：<code>ng g class todos.state</code>，Class 名稱會是 <code>TodosState</code></li>
</ul>
</li>
<li><code>todos.state.ts</code>：  <pre class="line-numbers language-tsx" data-language="tsx"><code class="language-tsx"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> Injectable <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'@angular/core'</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> State <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'@ngxs/store'</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">TodoItem</span> <span class="token punctuation">&#123;</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter"><span class="token keyword">public</span> content<span class="token operator">:</span> string</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">TodosStateModel</span> <span class="token punctuation">&#123;</span>
  dataset<span class="token operator">:</span> TodoItem<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token decorator"><span class="token at operator">@</span><span class="token function">State</span></span><span class="token operator">&lt;</span>TodosStateModel<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token comment">// 用來描述 state 狀態，定義資料型別</span>
  name<span class="token operator">:</span> <span class="token string">'todos'</span><span class="token punctuation">,</span>          <span class="token comment">// state 在 store 的名稱</span>
  defaults<span class="token operator">:</span> <span class="token punctuation">&#123;</span>             <span class="token comment">// 預設值</span>
    dataset<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">TodosState</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
</ul>
<p>建立完 state 之後，再到 <code>app.module.ts</code><br> 的 <code>NgxsModule.forRoot([])</code> 引入 State：</p>
<pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token operator">...</span>
<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> TodosState <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'./todos.state'</span><span class="token punctuation">;</span>

<span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
  declarations<span class="token operator">:</span> <span class="token punctuation">[</span>AppComponent<span class="token punctuation">]</span><span class="token punctuation">,</span>
  imports<span class="token operator">:</span> <span class="token punctuation">[</span>
						BrowserModule<span class="token punctuation">,</span> 
            NgxsModule<span class="token punctuation">.</span><span class="token function">forRoot</span><span class="token punctuation">(</span><span class="token punctuation">[</span>TodosState<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>  
							developmentMode<span class="token operator">:</span> <span class="token operator">!</span>environment<span class="token punctuation">.</span>production<span class="token punctuation">.</span>
						<span class="token punctuation">&#125;</span><span class="token punctuation">)</span> 
           <span class="token punctuation">]</span><span class="token punctuation">,</span>
  providers<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  bootstrap<span class="token operator">:</span> <span class="token punctuation">[</span>AppComponent<span class="token punctuation">]</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">AppModule</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="建立-Actions：要執行的方法"><a href="#建立-Actions：要執行的方法" class="headerlink" title="建立 Actions：要執行的方法"></a>建立 Actions：要執行的方法</h3><ul>
<li>可直接在 state class 底下，設定要被執行的 action 方法</li>
<li>addTodo(StateContenxt<T>, ActionClass? )<ul>
<li>StateContenxt<T>：取得可操作此 state 的 context 物件，內建幾種方法：<ul>
<li>getState(): T：取得目前 state 的值</li>
<li>setState(val: T)：重新建立 or 重設目前 state 的值</li>
<li>patchState(val: part<T>)：更新目前 state 的值</li>
<li>dispatch([actions])：觸發一或多個 actions，可傳入陣列</li>
</ul>
</li>
<li>ActionClass：取得 action 對應的 Class 實體</li>
</ul>
</li>
<li><code>todos.state.ts</code>：</li>
</ul>
<pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> State<span class="token punctuation">,</span> Action<span class="token punctuation">,</span> StateContext <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'@ngxs/store'</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">TodoItem</span> <span class="token punctuation">&#123;</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter"><span class="token keyword">public</span> content<span class="token operator">:</span> string</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">TodosStateModel</span> <span class="token punctuation">&#123;</span>
  dataset<span class="token operator">:</span> TodoItem<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">ADDTODO</span> <span class="token punctuation">&#123;</span>
  payload<span class="token operator">:</span> TodoItem<span class="token punctuation">;</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token operator">:</span> string</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>payload <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TodoItem</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

@State<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">TodosStateModel</span></span><span class="token punctuation">></span></span><span class="token plain-text">(</span><span class="token punctuation">&#123;</span>
  name<span class="token operator">:</span> <span class="token string">'todos'</span><span class="token punctuation">,</span>
  defaults<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    dataset<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token plain-text">)
export class TodosState </span><span class="token punctuation">&#123;</span>
    <span class="token function">constructor</span><span class="token punctuation">(</span>
	    <span class="token keyword">private</span> apiService<span class="token operator">:</span> ApiService     <span class="token comment">// 可注入 service，如：呼叫 API</span>
		<span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span>
    
    @<span class="token function">Action</span><span class="token punctuation">(</span><span class="token constant">ADDTODO</span><span class="token punctuation">)</span>                     <span class="token comment">// 定義 action 名稱</span>
	 	<span class="token function">addTodo</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> getState<span class="token punctuation">,</span> setState <span class="token punctuation">&#125;</span><span class="token operator">:</span> StateContext<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">TodosStateModel</span></span><span class="token punctuation">></span></span><span class="token plain-text">, </span><span class="token punctuation">&#123;</span> payload <span class="token punctuation">&#125;</span><span class="token plain-text">: ADDTODO) </span><span class="token punctuation">&#123;</span>
				<span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>apiService<span class="token punctuation">.</span><span class="token function">todoApi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>  <span class="token comment">// 呼叫 API</span>
					<span class="token function">tap</span><span class="token punctuation">(</span><span class="token parameter">_</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
						<span class="token keyword">const</span> state <span class="token operator">=</span> <span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 取得目前 state 值</span>
		        <span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>                   <span class="token comment">// 重新設定 state 值</span>
		          <span class="token operator">...</span>state<span class="token punctuation">,</span>
		          dataset<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token operator">...</span>state<span class="token punctuation">.</span>dataset<span class="token punctuation">,</span> payload<span class="token punctuation">]</span>
		        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
					<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
				<span class="token punctuation">)</span>
  	<span class="token punctuation">&#125;</span><span class="token plain-text">
&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="Store：全域-State-的容器"><a href="#Store：全域-State-的容器" class="headerlink" title="Store：全域 State 的容器"></a>Store：全域 State 的容器</h3><ul>
<li>Store 是 action 的 Dispatcher 和 Selector</li>
<li>透過 <code>store.dispatch(new AddTodo(&#39;title&#39;))</code> 方法，執行對應的 Action 和取得資料</li>
<li><code>app.component.ts</code></li>
</ul>
<pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> Component <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'@angular/core'</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> Store<span class="token punctuation">,</span> Select <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'@ngxs/store'</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> Observable <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'rxjs/Observable'</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> TodoItem <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'./todos.state'</span><span class="token punctuation">;</span>

@<span class="token function">Component</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
  selector<span class="token operator">:</span> <span class="token string">'app-root'</span><span class="token punctuation">,</span>
  templateUrl<span class="token operator">:</span> <span class="token string">'./app.component.html'</span><span class="token punctuation">,</span>
  styleUrls<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'./app.component.css'</span><span class="token punctuation">]</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">AppComponent</span> <span class="token punctuation">&#123;</span>
  title <span class="token operator">=</span> <span class="token string">'app'</span><span class="token punctuation">;</span>
  @<span class="token function">Select</span><span class="token punctuation">(</span><span class="token string">'todos.dataset'</span><span class="token punctuation">)</span> todos<span class="token operator">:</span> Observable<span class="token operator">&lt;</span>TodoItem<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span><span class="token punctuation">;</span>

  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter"><span class="token keyword">private</span> store<span class="token operator">:</span> Store</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="Select：從全域-Store-容器中取得特定-State"><a href="#Select：從全域-Store-容器中取得特定-State" class="headerlink" title="Select：從全域 Store 容器中取得特定 State"></a>Select：從全域 Store 容器中取得特定 State</h3><ul>
<li><code>@Select</code>：如上方範例，可透過 path 訂閱指定 state，其資料型態為 Observable<ul>
<li>若不使用 <code>@Select</code> 裝飾器，也可改寫成 <code>store.select()</code> 語法，如下：</li>
</ul>
</li>
</ul>
<pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">AppComponent</span> <span class="token punctuation">&#123;</span>  
  todos<span class="token operator">:</span> Observable<span class="token operator">&lt;</span>TodoItem<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span><span class="token punctuation">;</span>

  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter"><span class="token keyword">private</span> store<span class="token operator">:</span> Store</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>todos <span class="token operator">=</span> store<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token parameter">state</span> <span class="token operator">=></span> state<span class="token punctuation">.</span>todos<span class="token punctuation">.</span>dataset<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>建立一個簡易的 Todo List 模板：</p>
<ul>
<li><code>app.component.html</code></li>
</ul>
<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">*ngFor</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>let item of todos | async<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    &#123;&#123; item.content &#125;&#125;
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">#todoInput</span> <span class="token punctuation">/></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">(click)</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>addTodo(todoInput)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Add Todo<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>透過 <code>store.dispatch([actions])</code> 可執行一至多個 actions，回傳值為 Observable：</p>
<ul>
<li><code>app.component.ts</code></li>
</ul>
<pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token function">addTodo</span><span class="token punctuation">(</span><span class="token parameter">input</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ADDTODO</span><span class="token punctuation">(</span>input<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token parameter">state</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'state: '</span><span class="token punctuation">,</span> state<span class="token punctuation">)</span><span class="token punctuation">;</span>
    input<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="實際應用：Todo-List"><a href="#實際應用：Todo-List" class="headerlink" title="實際應用：Todo List"></a>實際應用：Todo List</h2><p>根據上方程式碼，可參考下方範例：</p>
<p><span class="exturl" data-url="aHR0cHM6Ly9hbmd1bGFyLWl2eS10YmJtMWIuc3RhY2tibGl0ei5pby8=">https://angular-ivy-tbbm1b.stackblitz.io/<i class="fa fa-external-link-alt"></i></span></p>
<p>總結使用 Ngxs 步驟如下：</p>
<ol>
<li>建立 State Class</li>
<li>建立 Action Class</li>
<li>將 State Class 引入 NgxsModule</li>
<li>在 Component 透過 <code>@Select</code> 訂閱指定狀態</li>
<li>在 Component 透過 <code>store.dispatch()</code> 方法執行 action</li>
</ol>
<h2 id="NGXS-vs-NGRX"><a href="#NGXS-vs-NGRX" class="headerlink" title="NGXS vs NGRX"></a>NGXS vs <span class="exturl" data-url="aHR0cHM6Ly9uZ3J4LmlvLw==">NGRX<i class="fa fa-external-link-alt"></i></span></h2><ul>
<li>均能夠搭配 Angular 的依賴注入使用</li>
<li>均為 CQRS 模式（Command Query Responsibility Segregation）：將模型分為讀取資料和寫入資料的架構模式</li>
<li>NGXS 使用裝飾器定義 State、Action，隱藏 reducers、effects 概念，並使用 TypeScript 定義類別，有效減少模板文件</li>
<li>Redux + RxJS + Angular：NGXS 與 NGRX 雖然同樣遵循 Redux 機制，但前者 NGXS 更貼近 RxJS 設計，在處理資料流上能有效減少開發成本</li>
</ul>
<h2 id="延遲載入"><a href="#延遲載入" class="headerlink" title="延遲載入"></a>延遲載入</h2><ul>
<li>NgxsModule.forRoot([])：在根 module 註冊 state</li>
<li>NgxsModule.forFeature([])：使用 forFeature 註冊 state，以實現延遲載入（Lazy Loading Modules ）</li>
</ul>
<h2 id="小結"><a href="#小結" class="headerlink" title="小結"></a>小結</h2><p>自己在過去專案中並沒有使用過 NGXS 來管理狀態，剛好最近接手的案子有碰到，才趁著機會研究前人撰寫的程式碼邏輯。</p>
<p>和 React 組件分層設計，須仰賴 Redux 狀態管理不同；Angualr 本身內建的 Service 概念，搭配 RxJS 使用，其實就能應對較複雜的狀態管理。再透過引入使用 NGXS ，更能有效簡化程式碼，以便後續維護。</p>
<h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><ul>
<li><strong><span class="exturl" data-url="aHR0cHM6Ly9uZ3hzLmlvLw==">NGXS: Introduction<i class="fa fa-external-link-alt"></i></span></strong></li>
<li><strong><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmtldmlueWFuZy5uZXQvMjAxOC8wMy8zMC9hbmd1bGFyLW5neHMv">[Angular] 第一次體驗NGXS<i class="fa fa-external-link-alt"></i></span></strong></li>
<li><strong><span class="exturl" data-url="aHR0cHM6Ly9zZWdtZW50ZmF1bHQuY29tL2EvMTE5MDAwMDAxNjUxMzY4NA==">ngxs入门- SegmentFault 思否<i class="fa fa-external-link-alt"></i></span></strong></li>
<li><strong><span class="exturl" data-url="aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC80NTEyMTc3NQ==">Angular 真的需要状态管理么？ - 知乎专栏<i class="fa fa-external-link-alt"></i></span></strong></li>
</ul>
]]></content>
      <categories>
        <category>Front-End</category>
        <category>Angular</category>
      </categories>
      <tags>
        <tag>Angular</tag>
        <tag>Front-End</tag>
        <tag>NGXS</tag>
      </tags>
  </entry>
  <entry>
    <title>[week 14] 後端基礎：資料庫 &amp; 系統設計</title>
    <url>/backend-system-design/</url>
    <content><![CDATA[<blockquote>
<p>本篇為「程式導師實驗計畫：Lesson 8-2 之資料庫」這門課程的學習筆記。如有錯誤歡迎指正。</p>
</blockquote>
<span id="more"></span>
<h2 id="學習目標"><a href="#學習目標" class="headerlink" title="學習目標"></a>學習目標</h2><ul>
<li>瞭解 NoSQL 和 SQL 的差別</li>
<li>瞭解什麼是 ACID 原則</li>
<li>什麼是 Transaction（交易）</li>
<li>為什麼需要 Lock（資料鎖定）</li>
<li>瞭解什麼是 Google Public DNS</li>
<li>瞭解什麼是系統設計</li>
</ul>
<hr>
<h2 id="NoSQL（Not-Only-SQL）"><a href="#NoSQL（Not-Only-SQL）" class="headerlink" title="NoSQL（Not Only SQL）"></a>NoSQL（Not Only SQL）</h2><p>非關聯式資料庫，例如 <span class="exturl" data-url="aHR0cHM6Ly93d3cubW9uZ29kYi5jb20vY2xvdWQvYXRsYXMvbHAvdHJ5Mj91dG1fc291cmNlPWdvb2dsZSZ1dG1fY2FtcGFpZ249Z3NfYXBhY190YWl3YW5fc2VhcmNoX2JyYW5kX2F0bGFzX2Rlc2t0b3AmdXRtX3Rlcm09bW9uZ29kYiZ1dG1fbWVkaXVtPWNwY19wYWlkX3NlYXJjaCZ1dG1fYWQ9ZSZ1dG1fYWRfY2FtcGFpZ25faWQ9NjQ5ODU1NDA5MCZnY2xpZD1DajBLQ1Fqd3VMXzhCUkNYQVJJc0FHaUM1MUEyZm5uOGN5MEpRUGRmR0dHQ2x1c3MwUHVCQ0c5NngzLU56VGZTRTlqeTBpYkFKTVRMeTFJYUFoQXBFQUx3X3djQg==">mongodb<i class="fa fa-external-link-alt"></i></span>；與之對應的是關聯式資料庫，例如之前實作 PHP 留言板使用的 MySQL。</p>
<ol>
<li>沒有 Schema，可以想像成存 JSON 資料進 Database</li>
<li>使用 key-value 儲存</li>
<li>不支援 JOIN，因為是非關聯式資料庫</li>
<li>通常用來存一些結構不固定的資料，例如：log</li>
</ol>
<h3 id="NoSQL-跟-SQL-的差別在哪裡？"><a href="#NoSQL-跟-SQL-的差別在哪裡？" class="headerlink" title="NoSQL 跟 SQL 的差別在哪裡？"></a>NoSQL 跟 SQL 的差別在哪裡？</h3><p>SQL（Structured Query Language），中文為「結構化查詢語言」，是一種專門用來管理與查詢「關聯式資料庫」的程式語言。與之相對的是 NoSQL（Not Only SQL），「非關聯式資料庫」，也就是不限定為關聯式資料庫的資料庫管理系統。</p>
<p>以下是關聯式與非關聯式資料庫的差別：</p>
<h4 id="關聯式資料庫（RDBMS）"><a href="#關聯式資料庫（RDBMS）" class="headerlink" title="關聯式資料庫（RDBMS）"></a>關聯式資料庫（RDBMS）</h4><ul>
<li>全名：Relational Database Management System</li>
<li>以 SQL 語言操作</li>
<li>儲存方式：使用不同 table 存取不同類型的內容</li>
<li>特性：資料之間保有相關性，也避免不相關的資料互相干擾</li>
<li>常見程式：MySQL、PostgreSQL、Microsoft SQL Server</li>
<li>例如：會員資料庫，其中明確關聯是會員 ID</li>
</ul>
<h4 id="非關聯式資料庫（NoSQL）"><a href="#非關聯式資料庫（NoSQL）" class="headerlink" title="非關聯式資料庫（NoSQL）"></a>非關聯式資料庫（NoSQL）</h4><ul>
<li>全名：Not Only SQL</li>
<li>不限定使用 SQL 語言</li>
<li>儲存方式：使用 key-value 儲存資料，且沒有 Schema，可想像成把 JSON 資料存進資料庫</li>
<li>特性：彈性較高，通常用來存一些結構不固定的資料，因此不支援 JOIN</li>
<li>常見程式：mongoDB</li>
<li>例如：存取 log 日誌、社交網站上的大量資訊（文章被分享、按讚數等）</li>
</ul>
<p>參考資料：</p>
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cuaXRob21lLmNvbS50dy9uZXdzLzkyNTA2">了解NoSQL不可不知的5項觀念<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9hd3MuYW1hem9uLmNvbS90dy9ub3NxbC8=">NoSQL (非關聯式) 資料庫如何運作？<i class="fa fa-external-link-alt"></i></span></li>
</ul>
<hr>
<h2 id="Transaction-交易"><a href="#Transaction-交易" class="headerlink" title="Transaction 交易"></a>Transaction 交易</h2><ul>
<li>可解釋為一筆交易。</li>
<li>例如：A 轉帳 100 元給 B，要確保 A 少 20 元的同時 B 多了 20 元。</li>
</ul>
<p>實際應用：</p>
<ol>
<li>轉帳</li>
<li>購物（一次買多個品項）</li>
<li>其他一次牽扯到多個 query 的操作</li>
</ol>
<h2 id="ACID-原則"><a href="#ACID-原則" class="headerlink" title="ACID 原則"></a>ACID 原則</h2><p>為了保證 Transaction 的正確性，執行資料庫事務須符合的四個特性：</p>
<p>在執行資料庫事務時，為了保證 Transaction（交易）的正確性，必須符合 ACID 四個特性：</p>
<ol>
<li>原子性 atomicity：全部失敗 or 全部成功<ul>
<li>例如：小明轉帳 100 元給小美，成功的話小明 -100 元，小美 +100 元；失敗的話資料不會有任何變化。</li>
</ul>
</li>
<li>一致性 consistency：維持資料的一致性<ul>
<li>例如：交易前後，錢的總數均不會改變。</li>
</ul>
</li>
<li>隔離性 isolation：多筆交易不會互相影響，也就是不能同時變動同一個值<ul>
<li>例如：小明只有 100 元，如果要同時轉帳 100 元給小美和小華，會產生負值這樣的系統錯誤。因此交易時使用需要 Lock 鎖，鎖定交易資料，即可避免同時修改到同一個值。</li>
</ul>
</li>
<li>持久性 durability：交易成功之後，寫入的資料不會不見</li>
</ol>
<p>參考資料：</p>
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cuemhpaHUuY29tL3F1ZXN0aW9uLzMxMzQ2Mzky">如何理解數據庫事務中的一致性的概念？<i class="fa fa-external-link-alt"></i></span></li>
</ul>
<h3 id="如何在-MySQL-執行-Transaction"><a href="#如何在-MySQL-執行-Transaction" class="headerlink" title="如何在 MySQL 執行 Transaction"></a>如何在 MySQL 執行 Transaction</h3><p>一個 Transaction 可同時執行多個 SQL，以下列程式碼為例：</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token variable">$conn</span><span class="token operator">-></span><span class="token function">autocommit</span><span class="token punctuation">(</span><span class="token constant boolean">FALSE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 避免每次自動變成 transaction</span>
<span class="token variable">$conn</span><span class="token operator">-></span><span class="token function">begin_transaction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 開始 transaction</span>
<span class="token variable">$conn</span><span class="token operator">-></span><span class="token function">query</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"update from money set amount = 20"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$conn</span><span class="token operator">-></span><span class="token function">query</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"update from money set sum = 10"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$conn</span><span class="token operator">-></span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 當發出 commit 後才會執行</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<hr>
<h2 id="Lock-資料鎖定"><a href="#Lock-資料鎖定" class="headerlink" title="Lock 資料鎖定"></a>Lock 資料鎖定</h2><p>資料庫的交易資料鎖定。</p>
<p>當多筆交易在讀取或寫入資料時，彼此會相互影響。因此為了交易的並行性與獨立性，需透過做「記號」來標記該資料狀態正在被讀取或寫入，其他交易則根據該記號決定能否執行其他操作，而這個記號就是所謂的 lock（交易鎖定）。但由於鎖定後會需要等待執行，也須考慮到效能上的損耗。</p>
<p>程式碼範例如下：</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token variable">$conn</span><span class="token operator">-></span><span class="token function">autocommit</span><span class="token punctuation">(</span><span class="token constant boolean">FALSE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$conn</span><span class="token operator">-></span><span class="token function">begin_transaction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$conn</span><span class="token operator">-></span><span class="token function">query</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"SELECT amount from products where id = 1 for update"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 加上 for update: 更新後就會把這行鎖起來，沒有指定欄位的話會鎖住 Schema</span>
<span class="token variable">$conn</span><span class="token operator">-></span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="什麼情況需要-Lock-鎖"><a href="#什麼情況需要-Lock-鎖" class="headerlink" title="什麼情況需要 Lock 鎖"></a>什麼情況需要 Lock 鎖</h3><p>舉例來說，當某個商品限定數量，造成搶購時可能會發生「超賣」情形，此現象又稱作 race condition（競爭危害）。若能在交易時加上 lock，即可避免同時讀取和寫入同一筆資料時產生的資料衝突，避免系統發生錯誤。</p>
<p>參考資料：</p>
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cucWEta25vd2hvdy5jb20vP3A9Mzgz">資料庫的交易鎖定 Locks<i class="fa fa-external-link-alt"></i></span></li>
</ul>
<hr>
<h2 id="再探-DNS"><a href="#再探-DNS" class="headerlink" title="再探 DNS"></a>再探 DNS</h2><p>在課程<a href="https://heidiliu2020.github.io/http-protocol/">第四週的網路基礎概論</a>時我們也曾提過 DNS（域名系統）。</p>
<ul>
<li>全名是 Domain Name System</li>
<li>負責將域名轉換成 IP 位置。可將 DNS 伺服器作為一個分散式資料庫<ul>
<li>域名（Domain）：即常用的網址。google.com 就是一個域名，類似景點名稱</li>
<li>IP 位置：每個主機都有個 IP 位置，是網路溝通的地址。由四個數字組成，範圍是 0 ~ 255</li>
</ul>
</li>
<li>功能類似網路上的電話簿，我們在搜尋網站的同時，是由 DNS 提供將網站名稱（域名）轉成號碼（IP 位置）的目錄服務</li>
</ul>
<h3 id="Google-有提供的公開的-DNS，對-Google-的好處以及對一般大眾的好處？"><a href="#Google-有提供的公開的-DNS，對-Google-的好處以及對一般大眾的好處？" class="headerlink" title="Google 有提供的公開的 DNS，對 Google 的好處以及對一般大眾的好處？"></a>Google 有提供的公開的 DNS，對 Google 的好處以及對一般大眾的好處？</h3><h4 id="對-Google-的好處"><a href="#對-Google-的好處" class="headerlink" title="對 Google 的好處"></a>對 Google 的好處</h4><ul>
<li>透過搜尋引擎來蒐集大數據，藉以分析使用者行為，以應用於商業目的</li>
<li>日後可提供更符合該使用地區的資料，或是投放更精準的廣告</li>
</ul>
<h4 id="對一般大眾的好處"><a href="#對一般大眾的好處" class="headerlink" title="對一般大眾的好處"></a>對一般大眾的好處</h4><ul>
<li>使用免費</li>
<li>提升網路安全性，例如：擋下惡意網站訊息</li>
<li>加速瀏覽體驗：可能增加上網速度</li>
<li>直接取得 DNS 查詢結果：因為已經快取，就不需查詢上層 DNS 記錄</li>
</ul>
<hr>
<h2 id="系統設計"><a href="#系統設計" class="headerlink" title="系統設計"></a>系統設計</h2><p>系統設計為了能夠穩定地提供高效率的服務，其實必須不斷思考，當使用者增加，需要擴展系統來增進效能時，可能遇到哪些問題、解決方式還有其優缺點。</p>
<p>通常會由下列兩個觀點作切入：</p>
<ul>
<li>擴展性（Scalability）：每當投入更多的資源，例如多增加一台伺服器，系統的效能（performance）也能成比例地增加。</li>
<li>可用性（Availability）：系統任何時候都要能回應使用者的請求，簡單來說，就是希望系統掛掉的時間越少越好。</li>
</ul>
<p>以下是有關系統設計的名詞解釋：</p>
<h3 id="Load-Balancer（負載平衡器）"><a href="#Load-Balancer（負載平衡器）" class="headerlink" title="Load Balancer（負載平衡器）"></a>Load Balancer（負載平衡器）</h3><p>提供類似路由器的功能，幫忙自動分配新進來的請求要導到哪一台 Server。</p>
<h3 id="主從模式（Master-slave）"><a href="#主從模式（Master-slave）" class="headerlink" title="主從模式（Master-slave）"></a>主從模式（Master-slave）</h3><p>資料的變動一律透過 Master 完成，它會再將結果同步到各個 slave。這種設計特別適合讀取的頻率大於寫入的系統。例如購物網站。可大幅減少資料庫的負擔。</p>
<h3 id="Sticky-sessions（會話保持）"><a href="#Sticky-sessions（會話保持）" class="headerlink" title="Sticky sessions（會話保持）"></a>Sticky sessions（會話保持）</h3><p>解決 Load Balancer 遺失狀態的問題，將用戶端與服務器之間建立的多個連接，都發送到相同的服務器進行處理。</p>
<h3 id="Single-Point-of-Failure（單點故障）"><a href="#Single-Point-of-Failure（單點故障）" class="headerlink" title="Single Point of Failure（單點故障）"></a>Single Point of Failure（單點故障）</h3><p>系統中一旦失效，就會讓整個系統無法運作的部件，例如負載均衡器就是脆弱的單點，解決方法如引入冗餘來故障轉移。</p>
<h3 id="資料庫快取"><a href="#資料庫快取" class="headerlink" title="資料庫快取"></a>資料庫快取</h3><p>資料庫的傳輸速度，是影響整個系統效能最大的因素，因此存取資料庫其實是一個高成本的行為。為了減少對資料庫的存取，我們可利用「快取（Cache）」，也就是將曾經查詢過的結果保存起來。通常會再加上有效期限，過期後快取結果就消失。</p>
<p>藉由快取機制，可大幅降低資料庫的負擔，使應用程式伺服器處理請求的速度更快，進而提升整個系統的效能。</p>
<h2 id="hw1：短網址系統設計"><a href="#hw1：短網址系統設計" class="headerlink" title="hw1：短網址系統設計"></a>hw1：短網址系統設計</h2><p>請你畫出一張短網址服務的後端系統架構圖，越詳細越好，可以考慮到如何增進效能、scaling 以及備份資料。</p>
<p>沒靈感的話可參考：短网址(short URL)系统的原理及其实现，或是用「短網址 系統設計」之類的關鍵字去搜尋。</p>
<hr>
<p>最後完成的短網址系統設計示意圖如下：</p>
<p><img src="https://i.imgur.com/ODL6mPz.png"></p>
<p>參考資料：</p>
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9tZWRpdW0uY29tLyVFNSVCRSU4QyVFNyVBQiVBRiVFNiU5NiVCMCVFNiU4OSU4QiVFNiU5RCU5MS9iYWNrZW5kLWFyY2hpdGVjdHVyZS0xMDEtNWM0MjVlNzYwYTEz">系統設計101—大型系統的演進（上）<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj0tVzlGX19EM29ZNA==">CS75 (Summer 2012) Lecture 9 Scalability Harvard Web Development David Malan<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cDovL3d3dy5heXF5Lm5ldC9ibG9nL3NjYWxhYmlsaXR5XyVlNyViMyViYiVlNyViYiU5ZiVlOCVhZSViZSVlOCVhZSVhMSVlNyVhYyU5NCVlOCVhZSViMDEv">Scalability_系統設計筆記1<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cuaXRyZWFkMDEuY29tL2FydGljbGVzLzE0NzUyNDE2MjYuaHRtbA==">負載均衡常見問題之會話保持-粘滯會話(Sticky Sessions)<i class="fa fa-external-link-alt"></i></span></li>
</ul>
]]></content>
      <categories>
        <category>Back-End</category>
        <category>Database</category>
      </categories>
      <tags>
        <tag>Back-End</tag>
        <tag>System Design</tag>
        <tag>Database</tag>
      </tags>
  </entry>
  <entry>
    <title>[week 8] 傳送資料的方式 &amp; 瀏覽器的限制</title>
    <url>/browser-and-ajax/</url>
    <content><![CDATA[<blockquote>
<p>本篇為 <span class="exturl" data-url="aHR0cHM6Ly9saWRlbXkuY29tL3AvZmUxMDItamF2YXNjcmlwdA==">[FE102] 前端必備：JavaScript<i class="fa fa-external-link-alt"></i></span> 這門課程的學習筆記。如有錯誤歡迎指正。</p>
</blockquote>
<p>當我們運用 JavaScript 在網頁進行操作時，主要可分為下列三大面向：</p>
<ol>
<li>介面（Interface）：如何改變介面</li>
<li>事件（Event）：如何監聽事件並做出反應</li>
<li>資料（Data）：如何和伺服器交換資料</li>
</ol>
<span id="more"></span>

<blockquote>
<p>以下主要探討「改變介面」與「事件監聽」的部分。</p>
</blockquote>
<h2 id="使用-Node-js-與在瀏覽器上呼叫-API-的差別"><a href="#使用-Node-js-與在瀏覽器上呼叫-API-的差別" class="headerlink" title="使用 Node.js 與在瀏覽器上呼叫 API 的差別"></a>使用 Node.js 與在瀏覽器上呼叫 API 的差別</h2><h3 id="Node-js"><a href="#Node-js" class="headerlink" title="Node.js"></a>Node.js</h3><ul>
<li>是直接發出 request 到 Server，再直接收到 Server 的 request</li>
<li>中間不會受到任何限制</li>
</ul>
<p><img src="https://i.imgur.com/pOzNqr8.png"></p>
<h3 id="瀏覽器上"><a href="#瀏覽器上" class="headerlink" title="瀏覽器上"></a>瀏覽器上</h3><ul>
<li>透過瀏覽器發出 request 到 Server，再透過瀏覽器接收 Server 的 response</li>
<li>中間可能會受瀏覽器處理影響，必須按照瀏覽器的規則獲取資料</li>
</ul>
<p><img src="https://i.imgur.com/FCaXrNH.png"></p>
<h2 id="傳送資料的方式-表單-form"><a href="#傳送資料的方式-表單-form" class="headerlink" title="傳送資料的方式 - 表單 form"></a>傳送資料的方式 - 表單 form</h2><pre class="line-numbers language-htmlmixed" data-language="htmlmixed"><code class="language-htmlmixed">&lt;div class&#x3D;&quot;app&quot;&gt;
  &lt;form method&#x3D;&quot;GET&quot; action&#x3D;&quot;https:&#x2F;&#x2F;google.com&quot;&gt;
    username：&lt;input name&#x3D;&quot;username&quot;&#x2F;&gt;
    &lt;input type&#x3D;&quot;submit&quot;&gt;
  &lt;&#x2F;form&gt;
&lt;&#x2F;div&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>實際上 request 流程（和 JavaScript 無關）：</p>
<ol>
<li>透過 <code>GET</code> 送出 request 給 google 網頁</li>
<li>表單的參數會附加在網址上：<code>https://google.com/?username=123</code>，因此登入帳密通常會以 <code>POST</code> 指令送出</li>
<li>瀏覽器接收 response（<code>301</code>：轉址），因此會換頁</li>
</ol>
<h2 id="傳送資料的方式-AJAX"><a href="#傳送資料的方式-AJAX" class="headerlink" title="傳送資料的方式 - AJAX"></a>傳送資料的方式 - AJAX</h2><p>Ajax，全名是「Asynchronous JavaScript and XML」，重點是 Asynchronous（非同步）。</p>
<ul>
<li>JavaScript：使用的程式語言</li>
<li>XML：Client 與 Server 的資料交換格式。近年由於 JSON 等格式的流行，使用 AJAX 處理的資料已不限於 XML</li>
</ul>
<p>Ajax 並非單一技術，而是 JavaScript 以「非同步」方式與伺服器交換資料的統稱。使網頁不須換頁，就能即時更新渲染畫面。</p>
<h3 id="Ajax-實現非同步請求（Asynchronous-Request）"><a href="#Ajax-實現非同步請求（Asynchronous-Request）" class="headerlink" title="Ajax 實現非同步請求（Asynchronous Request）"></a>Ajax 實現非同步請求（Asynchronous Request）</h3><p>以 Javascript 程式碼作為範例，可使用 Ajax 這項技術得到 Server 端資料：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 首先建立了一個 XMLHttpRequest 物件</span>
<span class="token keyword">const</span> request <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment">// 當 load 的時候就會執行 function</span>
request<span class="token punctuation">.</span><span class="token function-variable function">onload</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// 判斷 request 是否成功</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>request<span class="token punctuation">.</span>status <span class="token operator">>=</span> <span class="token number">200</span> <span class="token operator">&amp;&amp;</span> request<span class="token punctuation">.</span>status <span class="token operator">&lt;</span> <span class="token number">400</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span>responseText<span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'error'</span><span class="token punctuation">)</span>　　<span class="token comment">// 若失敗．可印出 request.status 得知狀態</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">// 當 request 有錯誤就執行 function</span>
request<span class="token punctuation">.</span><span class="token function-variable function">onerror</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'error'</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">// 要發 request 到哪個地方；true 是非同步，false 是同步</span>
request<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">'GET'</span><span class="token punctuation">,</span> <span class="token string">'https://reqres.in/api/users'</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
<span class="token comment">// 發出 request</span>
request<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>也可改寫成監聽事件語法，會得到相同結果：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">request<span class="token punctuation">.</span><span class="token function-variable function">onload</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// 事件反應...</span>
<span class="token punctuation">&#125;</span>

<span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 可改寫成 <span class="token operator">--</span><span class="token operator">></span>
request<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'load'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// 事件反應...</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="使用-AJAX-的好處"><a href="#使用-AJAX-的好處" class="headerlink" title="使用 AJAX 的好處"></a>使用 AJAX 的好處</h3><ol>
<li>瀏覽不中斷（即不需要換頁）：可提高使用者體驗</li>
<li>只需進行局部內容的資料抽換：降低資料量，提高網頁效率</li>
<li>用 Ajax 和表單傳送資料的差異，在於如何處理「回傳結果」：</li>
</ol>
<ul>
<li>表單：是以 html 來傳送資料，當瀏覽器接收到 response 後，頁面就會重新刷新。</li>
<li>Ajax：當瀏覽器接收 response，會轉傳資料至 JavaScript，進行局部內容的資料抽換，不須換頁就能即時更新頁面。</li>
</ul>
<p>參考資料：<span class="exturl" data-url="aHR0cHM6Ly90dy5hbHBoYWNhbXAuY28vYmxvZy9hamF4LWFzeW5jaHJvbm91cy1yZXF1ZXN0">什麼是 Ajax？ 搞懂非同步請求 (Asynchronous request)概念<i class="fa fa-external-link-alt"></i></span></p>
<hr>
<h2 id="瀏覽器的限制-同源政策與跨網域問題"><a href="#瀏覽器的限制-同源政策與跨網域問題" class="headerlink" title="瀏覽器的限制 - 同源政策與跨網域問題"></a>瀏覽器的限制 - 同源政策與跨網域問題</h2><p>當我們發出 request 給 Google 網頁時，會出現下列訊息，顯示無法取得 response：</p>
<p><img src="https://i.imgur.com/YJCjsgp.png"></p>
<p>這是因為瀏覽器為了安全性而設置的同源政策。一旦脫離瀏覽器，就不會有這些限制。</p>
<h3 id="Same-Origin-Policy-同源政策"><a href="#Same-Origin-Policy-同源政策" class="headerlink" title="Same Origin Policy 同源政策"></a>Same Origin Policy 同源政策</h3><ul>
<li>兩個網頁具有相同網域、埠號（如果有）以及主機位置</li>
<li>具備相同協定：http 和 https 要分開來看</li>
</ul>
<p>以瀏覽器來說，預設不同來源會擋掉 response，解決方法如 CORS。</p>
<h3 id="CORS-跨來源資源共用"><a href="#CORS-跨來源資源共用" class="headerlink" title="CORS 跨來源資源共用"></a>CORS 跨來源資源共用</h3><ul>
<li>全名是 Cross-origin Resource Sharing（CORS）</li>
<li>由於同源政策的限制，不同來源要跨網域時，就必須使用這項規則</li>
</ul>
<p>只要 Server 端在 response header 加上 <code>access-control-allow-origin: *</code>：</p>
<ul>
<li><code>*</code>：代表所有來源均可存取</li>
<li>非同源的網域均可以從 Server 存取 response</li>
</ul>
<p>補充資料：<span class="exturl" data-url="aHR0cHM6Ly9ibG9nLnRlY2hicmlkZ2UuY2MvMjAxNy8wNS8yMC9hcGktYWpheC1jb3JzLWFuZC1qc29ucC8=">輕鬆理解 Ajax 與跨來源請求<i class="fa fa-external-link-alt"></i></span></p>
<hr>
<h3 id="傳送資料的方式-JSONP（補充）"><a href="#傳送資料的方式-JSONP（補充）" class="headerlink" title="傳送資料的方式 - JSONP（補充）"></a>傳送資料的方式 - JSONP（補充）</h3><blockquote>
<p>此方法已經很少使用，僅作為補充。</p>
</blockquote>
<p>首先要瞭解下列元素不受同源政策管理：</p>
<ul>
<li><code>&lt;img&gt;</code> ：圖片沒有安全性問題</li>
<li><code>&lt;script&gt;</code>：能夠引入不同源的 JS</li>
</ul>
<h4 id="JSOPN"><a href="#JSOPN" class="headerlink" title="JSOPN"></a>JSOPN</h4><ul>
<li>JSON，全名是 JSON with padding，這裡的 padding 是填充的意思</li>
<li>是資料格式JSON的一種「使用模式」，和 CORS 同樣能讓網頁從別的網域要資料</li>
</ul>
<p>透過 JSONP 資料格式，我們可以先藉由 <code>&lt;script src = &quot;要 GET 資料的網域名稱&quot;&gt;&lt;/script&gt;</code> 讀取網頁的 JS 資訊，再透過指定的 function 進行輸出，就能夠拿到想要的資料。</p>
<h3 id="單向傳送資料的應用（補充）"><a href="#單向傳送資料的應用（補充）" class="headerlink" title="單向傳送資料的應用（補充）"></a>單向傳送資料的應用（補充）</h3><p>透過在某個元素裡面塞 <code>src=&quot;域名&quot;</code>，得知使用者是否有打開網頁或其他操作。</p>
<ul>
<li>例如：</li>
</ul>
<pre class="line-numbers language-htmlmixed" data-language="htmlmixed"><code class="language-htmlmixed">&lt;!-- 在圖片塞一個透明的方塊，也不會被使用者察覺 --&gt;
&lt;img width&#x3D;&quot;1&quot; height&#x3D;&quot;1&quot; src&#x3D;&quot;https:&#x2F;&#x2F;user.com&#x2F;id&#x3D;134&quot;&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>一旦使用者打開網頁，將透過 src 傳遞訊息到 Server 端，即可得知使用者進到該頁面。可應用在 email 上，確認使用者是否已經打開信件或廣告，得以進行追蹤。</p>
<hr>
<h2 id="綜合示範：抓取資料並顯示"><a href="#綜合示範：抓取資料並顯示" class="headerlink" title="綜合示範：抓取資料並顯示"></a>綜合示範：抓取資料並顯示</h2><p>以下列程式碼為例：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>head<span class="token operator">></span>
  <span class="token operator">&lt;</span>meta charset<span class="token operator">=</span><span class="token string">"utf-8"</span> <span class="token operator">/</span><span class="token operator">></span>
  <span class="token operator">&lt;</span>title<span class="token operator">></span><span class="token constant">FE102</span> 抓取資料並顯示<span class="token operator">&lt;</span><span class="token operator">/</span>title<span class="token operator">></span>
  <span class="token operator">&lt;</span>style<span class="token operator">></span>
    body <span class="token punctuation">&#123;</span>
      font<span class="token operator">-</span>size<span class="token operator">:</span> <span class="token number">38</span>px<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token punctuation">.</span>profile <span class="token punctuation">&#123;</span>
      border<span class="token operator">:</span> <span class="token number">1</span>px solid #<span class="token number">333</span><span class="token punctuation">;</span>
      margin<span class="token operator">-</span>top<span class="token operator">:</span> <span class="token number">20</span>px<span class="token punctuation">;</span>
      display<span class="token operator">:</span> inline<span class="token operator">-</span>flex<span class="token punctuation">;</span>
      align<span class="token operator">-</span>items<span class="token operator">:</span> center<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token punctuation">.</span>profile__name <span class="token punctuation">&#123;</span>
      margin<span class="token operator">:</span> <span class="token number">0</span>px <span class="token number">10</span>px<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token operator">&lt;</span><span class="token operator">/</span>style<span class="token operator">></span>
<span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">></span>

<span class="token operator">&lt;</span>body<span class="token operator">></span>

  <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> container <span class="token operator">--</span><span class="token operator">></span>
  <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"app"</span><span class="token operator">></span>
  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>

  <span class="token operator">&lt;</span>script<span class="token operator">></span>
    <span class="token comment">// 使用 AJAX 的方法</span>
    <span class="token keyword">const</span> request <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">const</span> container <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.app'</span><span class="token punctuation">)</span>

    <span class="token comment">// 當 load 的時候就會執行 function</span>
    <span class="token comment">// 也可寫成：request.addEventListener('load', function() &#123;...&#125;)</span>
    request<span class="token punctuation">.</span><span class="token function-variable function">onload</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>request<span class="token punctuation">.</span>status <span class="token operator">>=</span> <span class="token number">200</span> <span class="token operator">&amp;&amp;</span> request<span class="token punctuation">.</span>status <span class="token operator">&lt;</span> <span class="token number">400</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">const</span> response <span class="token operator">=</span> request<span class="token punctuation">.</span>responseText
        <span class="token keyword">const</span> json <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span>
        <span class="token keyword">const</span> users <span class="token operator">=</span> json<span class="token punctuation">.</span>data
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> users<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
          <span class="token keyword">const</span> div <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span>
          div<span class="token punctuation">.</span>classList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">'profile'</span><span class="token punctuation">)</span>
          div<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">
              &lt;div class="profile__name"></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>users<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>first_name<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>users<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>last_name<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">&lt;/div>
              &lt;img class="profile__img" src="</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>users<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>avatar<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">" />
            </span><span class="token template-punctuation string">`</span></span>
          container<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>div<span class="token punctuation">)</span>
        <span class="token punctuation">&#125;</span>
      <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token comment">// request 如果有錯誤就執行</span>
    request<span class="token punctuation">.</span><span class="token function-variable function">onerror</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'error'</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>
    <span class="token comment">// 要發 request 到哪個地方</span>
    request<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">'GET'</span><span class="token punctuation">,</span> <span class="token string">'https://reqres.in/api/users'</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token comment">//true 是要非同步</span>
    <span class="token comment">// 把 request 傳出去</span>
    request<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

  <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>
<span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>也就是說，利用 AJAX 送出一個 HTTP 請求，必須有三個步驟：</p>
<h3 id="1-建立一個-XMLHttpRequest-物件"><a href="#1-建立一個-XMLHttpRequest-物件" class="headerlink" title="1. 建立一個 XMLHttpRequest 物件"></a>1. 建立一個 XMLHttpRequest 物件</h3><ul>
<li>XMLHttpRequest 是一個 JavaScript 準備好的物件，主是要拿來發送 request 與接收 response。</li>
<li><code>const request = new XMLHttpRequest()</code></li>
</ul>
<h3 id="2-開啟一個-url-open"><a href="#2-開啟一個-url-open" class="headerlink" title="2. 開啟一個 url .open()"></a>2. 開啟一個 url .open()</h3><ul>
<li><code>request.open(method, url[, async[, user[, password]]])</code></li>
<li>參數分別為：Method、URL、同步/非同步、使用者、密碼</li>
</ul>
<h3 id="3-發起一個請求-send"><a href="#3-發起一個請求-send" class="headerlink" title="3. 發起一個請求 .send()"></a>3. 發起一個請求 .send()</h3><ul>
<li><code>request.send()</code></li>
</ul>
<p>完成這三個步驟就完成送出一個 HTTP 請求，但我們還需要透過「監聽載入」來取得資料：<code>.onload</code>，當 load 時就會執行該 function。</p>
<h3 id="「監聽載入」有兩種寫法"><a href="#「監聽載入」有兩種寫法" class="headerlink" title="「監聽載入」有兩種寫法"></a>「監聽載入」有兩種寫法</h3><ul>
<li><code>目標.onload = function() &#123; … &#125;</code></li>
<li><code>目標.addEventListener(&#39;load&#39;, function() &#123; … &#125;)</code></li>
</ul>
<h3 id="相關-api-指令"><a href="#相關-api-指令" class="headerlink" title="相關 api 指令"></a>相關 api 指令</h3><ul>
<li><code>.responseText</code>：拿到資料</li>
<li><code>.status</code>：拿到 Http status code 狀態碼</li>
</ul>
<p>參考資料：</p>
<ol>
<li><span class="exturl" data-url="aHR0cHM6Ly9tZWRpdW0uY29tL0BtaWFoc3V3b3JrLyVFNyVBQyVBQyVFNCVCOSU5RCVFOSU4MCVCMS0lRTklODAlOEYlRTklODElOEUlRTclODAlOEYlRTglQTYlQkQlRTUlOTklQTglRTQlQkElQTQlRTYlOEYlOUIlRTglQjMlODclRTYlOTYlOTktJUU4JUExJUE4JUU1JTk2JUFFLWFqYXgteG1saHR0cHJlcXVlc3QtZmVmODA4NTZkYTE2">[第九週]透過瀏覽器交換資料 — 表單、AJAX、XMLHttpRequest<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9tZWRpdW0uY29tL0BtaWFoc3V3b3JrLyVFNyVBQyVBQyVFNCVCOSU5RCVFOSU4MCVCMS0lRTklODAlOEYlRTklODElOEUlRTclODAlOEYlRTglQTYlQkQlRTUlOTklQTglRTQlQkElQTQlRTYlOEYlOUIlRTglQjMlODclRTYlOTYlOTktJUU1JTkwJThDJUU2JUJBJTkwJUU2JTk0JUJGJUU3JUFEJTk2LWNvcnMtJUU3JUFDJUFDJUU0JUI4JTg5JUU3JUE4JUFFJUU2JTk2JUI5JUU1JUJDJThGLWpzb25wLWU0NTYwMzg4NjI4Nw==">[第九週]透過瀏覽器交換資料 — 同源政策、CORS、第三種方式 JSONP<i class="fa fa-external-link-alt"></i></span></li>
</ol>
]]></content>
      <categories>
        <category>Front-End</category>
        <category>Internet</category>
      </categories>
      <tags>
        <tag>Front-End</tag>
        <tag>JavaScript</tag>
        <tag>API</tag>
      </tags>
  </entry>
  <entry>
    <title>[week 16] 淺談 JavaScript：同步與非同步 &amp; Callback Function &amp; Event Loop</title>
    <url>/callback-event-loop/</url>
    <content><![CDATA[<p>本篇為 <span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmh1bGkudHcvMjAxOS8xMC8wNC9qYXZhc2NyaXB0LWFzeW5jLXN5bmMtYW5kLWNhbGxiYWNrLw==">JavaScript 中的同步與非同步（上）：先成為 callback 大師吧！<i class="fa fa-external-link-alt"></i></span> 這篇文章的學習筆記。</p>
<span id="more"></span>

<h2 id="JavaScript-的執行環境"><a href="#JavaScript-的執行環境" class="headerlink" title="JavaScript 的執行環境"></a>JavaScript 的執行環境</h2><p>JavaScript 是一個程式語言，會有程式語言本身規範能用的東西，例如 var 宣告變數，if else 判斷式，或者是使用 function 宣告函式。</p>
<p>但如果是使用 DOM 物件操作 body 並反映在瀏覽器畫面上，這其實是由瀏覽器提供，讓 JavaScript 能透過 document 這個物件與瀏覽器進行溝通。</p>
<p>其他還有像是用來計時的 setTimeout 與 setInterval，拿來做 AJAX 的 XMLHttpRequest 與 fetch，這些都是瀏覽器這個執行環境所提供的東西。</p>
<p>除了瀏覽器以外，Node.js 其實也是 JavaScript 的一個執行環境，而非單純提供套件的 Library。如同官網所言：</p>
<blockquote>
<p>Node.js® is a JavaScript runtime built on Chrome’s V8 JavaScript engine.</p>
</blockquote>
<h3 id="瀏覽器-vs-Node-js"><a href="#瀏覽器-vs-Node-js" class="headerlink" title="瀏覽器 vs Node.js"></a>瀏覽器 vs Node.js</h3><p>JS 程式碼可以選擇跑在瀏覽器上，透過瀏覽器這個執行環境提供的東西操控畫面，或是發送 Request。</p>
<p>也可以選擇跑在 Node.js 這個執行環境上面，就可以利用 Node.js 提供的東西，例如使用 file system（控制檔案的介面），或是利用 http這個模組來寫 server。</p>
<p>可參考下方示意圖：</p>
<p><img src="https://i.imgur.com/nP7n8as.png"></p>
<p>也就是說，執行環境不同，能夠使用的就不同，執行方式也會不同。</p>
<p>以瀏覽器來說，是用 <code>&lt;script src=&quot;index.js&quot;&gt;</code> 引入一個 JavaScript 檔案，然後就可以在瀏覽器上執行。</p>
<p>以 Node.js 來說，則必須先在電腦上安裝 Node.js 這個執行環境，然後以 CLI 的方式輸入 <code>node index.js</code> 這個指令來執行。</p>
<h2 id="阻塞與非阻塞"><a href="#阻塞與非阻塞" class="headerlink" title="阻塞與非阻塞"></a>阻塞與非阻塞</h2><p>前面有提過 Node.js 有提供控制檔案的介面，讓我們能夠寫 JavaScript 程式碼來讀取與寫入檔案。</p>
<p>以下方程式碼作為範例：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> file <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">readFileSync</span><span class="token punctuation">(</span><span class="token string">'./README.md'</span><span class="token punctuation">)</span> <span class="token comment">// 在這邊等好幾秒才往下執行</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span>
  
<span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">99999999</span><span class="token punctuation">;</span> i<span class="token operator">+=</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>
  
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>上面這段程式碼，意思是先引入 Node.js 提供的內建模組 fs，再來使用 fs.readFileSync 來讀取檔案，最後把檔案的內容用 console.log 給印出來。</p>
<p>但因為程式碼在讀取檔案之前會卡住，必須等到執行完畢並且拿到回傳值為止，程式才會繼續往下執行，這種情況就稱為阻塞（blocking）。</p>
<p>難道不能用非阻塞（non-blocking）的方式讀取檔案嗎？有的！我們能使用 readFile 的 method 來進行。以下為程式碼範例：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 讀取內建 fs 模組</span>
<span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span>
  
<span class="token comment">// 定義讀取檔案完成以後，要執行的 function</span>
<span class="token keyword">function</span> <span class="token function">readFileFinished</span><span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> data</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
  
<span class="token comment">// 讀取檔案，第二個參數是 callback function</span>
fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">'./README.md'</span><span class="token punctuation">,</span> readFileFinished<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>可發現 readFile 的用法跟 readFileSync 差不多，但兩種讀取檔案的方式差別在於：</p>
<h4 id="readFileSync"><a href="#readFileSync" class="headerlink" title="readFileSync"></a>readFileSync</h4><ul>
<li>有回傳值，回傳值就是檔案內容</li>
<li>必須等到回傳後才能繼續往下執行，也因此會造成阻塞</li>
</ul>
<h4 id="readFile"><a href="#readFile" class="headerlink" title="readFile"></a>readFile</h4><ul>
<li>多了一個參數，而且要傳進參數的是一個 function</li>
<li>執行完即可跳到下一行，檔案讀取完畢以後會把結果傳進 callback function</li>
</ul>
<p>而這同時也是 blocking 與 non-blocking 的差別，在不討論 JavaScript 的其他層面來說：</p>
<h4 id="阻塞（blocking）"><a href="#阻塞（blocking）" class="headerlink" title="阻塞（blocking）"></a>阻塞（blocking）</h4><p>代表執行時程式會卡住，會直接回傳結果，因此必須等檔案讀取完畢才能執行下一行。例如 readFileSync。</p>
<h4 id="非阻塞（non-blocking）"><a href="#非阻塞（non-blocking）" class="headerlink" title="非阻塞（non-blocking）"></a>非阻塞（non-blocking）</h4><p>代表執行時不會卡住，但執行結果不會放在回傳值，而是透過回呼函式（callback function）來接收結果。例如 readFile。</p>
<h2 id="Callback-function"><a href="#Callback-function" class="headerlink" title="Callback function"></a>Callback function</h2><p>callback function 的意思其實就是：「當某事發生的時候，請利用這個 function 通知我」。</p>
<p>通常 callback function 會簡化成匿名函式（Anonymous function）的寫法，也就是直接在第二個參數的地方宣告一個 function。</p>
<p>常見的形式會像這樣：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 讀取內建 fs 模組</span>
<span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span>
  
<span class="token comment">// 讀取檔案</span>
fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">'./README.md'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> data</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>在使用 callback function 時，需注意常見的錯誤：</p>
<ul>
<li>傳進去的參數是 callback function，是一個「function」，而不是 function 執行後的結果</li>
<li>舉例來說，fn 是一個 function；fn() 則是執行 function，並且會把執行完的回傳結果當作 callback function</li>
</ul>
<p>這裡以 setTimeout() 來作為範例：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 正確</span>
<span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">,</span> tick<span class="token punctuation">)</span>
<span class="token keyword">function</span> <span class="token function">tick</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'時間到！'</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>

<span class="token operator">===</span>以下是錯誤範例<span class="token operator">===</span>

<span class="token comment">// 錯誤</span>
<span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">,</span> <span class="token function">tick</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">function</span> <span class="token function">tick</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'時間到！'</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// 上面錯誤會等同於</span>
<span class="token keyword">let</span> fn <span class="token operator">=</span> <span class="token function">tick</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">,</span> fn<span class="token punctuation">)</span>
<span class="token keyword">function</span> <span class="token function">tick</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'時間到！'</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="Node-js-上的同步與非同步"><a href="#Node-js-上的同步與非同步" class="headerlink" title="Node.js 上的同步與非同步"></a>Node.js 上的同步與非同步</h2><p>其實到這邊已經差不多把同步與非同步的觀念講完了。而在 <span class="exturl" data-url="aHR0cHM6Ly9ub2RlanMub3JnL2VuL2RvY3MvZ3VpZGVzL2Jsb2NraW5nLXZzLW5vbi1ibG9ja2luZy8=">Node.js 的官方文件<i class="fa fa-external-link-alt"></i></span>是這麼說的：</p>
<blockquote>
<p>Blocking methods execute synchronously and non-blocking methods execute asynchronously.</p>
</blockquote>
<p>阻塞的方法會同步地（synchronously）執行，而非阻塞的方法會非同步地（asynchronously）執行。</p>
<p>因此，當我們討論到 JavaScript 的同步與非同步問題時，基本上可以把非同步跟非阻塞劃上等號。</p>
<p>如果執行一個同步的方法（例如 readFileSync），就一定會阻塞；如果執行一個非同步的方法（例如 readFile），就一定不會阻塞。</p>
<p>也就是說，其實我們可以直接把上段重點改成：</p>
<ul>
<li>同步（synchronous）：代表執行時程式會卡住，會直接回傳結果，因此必須等檔案讀取完畢才能執行下一行。例如 readFileSync</li>
<li>非同步（asynchronous）：代表執行時不會卡住，但執行結果不會放在回傳值，而是透過回呼函式（callback function）來接收結果。例如 readFile</li>
</ul>
<h2 id="瀏覽器上的同步與非同步"><a href="#瀏覽器上的同步與非同步" class="headerlink" title="瀏覽器上的同步與非同步"></a>瀏覽器上的同步與非同步</h2><p>前面是以 Node.js 當做例子，再來回到我們熟悉的瀏覽器。</p>
<p>假設我們今天在 JavaScript 有一個函式叫做 假設我們有一個函式叫做getAPIResponse，能後和後端 API 串接拿取資料。</p>
<p>同步版本：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> response <span class="token operator">=</span> <span class="token function">getAPIResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>JavaScript 執行後會一直等到回傳後，才會繼續執行下一行程式碼。假如今天要等到 10 秒後，API Server 才會回傳資料，這段期間等於說讓執行 JavaScript 的執行緒（thread）凍結。</p>
<p>在瀏覽器裡面，負責執行 JavaScript 的叫做 main thread，負責處理跟畫面渲染相關的也是 main thread。換句話說，如果這個 thread 凍結 10 秒，會造成無法點擊畫面，因為瀏覽器沒有資源去處理其他事情。</p>
<p>而瀏覽器裡執行 JavaScript 的 main thread 同時也負責畫面的 render，因此非同步顯得更加重要而且必須，否則等待的時候畫面會凍結，就像電腦當機了一樣。</p>
<p>那麼依照之前所學的，把程式碼改成非同步，也就是利用 callback function 來接收結果。這裡有三種寫法，解果都會相同：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 範例一：額外宣告函式</span>
<span class="token keyword">function</span> <span class="token function">handleResponst</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>
<span class="token function">getAPIResponse</span><span class="token punctuation">(</span>handleResponst<span class="token punctuation">)</span>
  
<span class="token comment">// 範例二：匿名函式</span>
<span class="token function">getAPIResponse</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> response</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
  
<span class="token comment">// 範例三：利用 ES6 箭頭函式簡化過後</span>
<span class="token function">getAPIResponse</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> response</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<hr>
<h2 id="Event-Loop"><a href="#Event-Loop" class="headerlink" title="Event Loop"></a>Event Loop</h2><blockquote>
<p>推薦影片：<span class="exturl" data-url="aHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj04YUdoWlFrb0ZiUQ==">What the heck is the event loop anyway? | Philip Roberts | JSConf EU<i class="fa fa-external-link-alt"></i></span><br>影片中的 Demo：<span class="exturl" data-url="aHR0cDovL2xhdGVudGZsaXAuY29tL2xvdXBlLz9jb2RlPUpDNXZiaWduWW5WMGRHOXVKeXdnSjJOc2FXTnJKeXdnWm5WdVkzUnBiMjRnYjI1RGJHbGpheWdwSUhzS0lDQWdJSE5sZEZScGJXVnZkWFFvWm5WdVkzUnBiMjRnZEdsdFpYSW9LU0I3Q2lBZ0lDQWdJQ0FnWTI5dWMyOXNaUzVzYjJjb0oxbHZkU0JqYkdsamEyVmtJSFJvWlNCaWRYUjBiMjRoSnlrN0lDQWdJQW9nSUNBZ2ZTd2dNakF3TUNrN0NuMHBPd29LWTI5dWMyOXNaUzVzYjJjb0lraHBJU0lwT3dvS2MyVjBWR2x0Wlc5MWRDaG1kVzVqZEdsdmJpQjBhVzFsYjNWMEtDa2dld29nSUNBZ1kyOXVjMjlzWlM1c2IyY29Ja05zYVdOcklIUm9aU0JpZFhSMGIyNGhJaWs3Q24wc0lEVXdNREFwT3dvS1kyOXVjMjlzWlM1c2IyY29JbGRsYkdOdmJXVWdkRzhnYkc5MWNHVXVJaWs3ISEhUEdKMWRIUnZiajVEYkdsamF5QnRaU0U4TDJKMWRIUnZiajQ9">Event Loop 流程<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
<p>因為 JavaScript 是單執行緒（single thread）的程式語言，用白話文解釋就是「JavaScript 一次只能做一件事情」，因此 JS 中等待執行的任務會被放入 Call Stack。</p>
<p>JavaScript 在調用一個執行環境時，其實會經過兩個階段：</p>
<ol>
<li>建立階段：呼叫堆疊（Call Stack）</li>
</ol>
<p>當開始執行 JavaScript 時，會先進入 Global EC。直到我們呼叫一個 function 時，才會建立一個新的執行環境繼續往 Global EC 的上層依序堆疊。</p>
<p>而尚未被執行的任務會進入 call stack，裡面會放著每個 function 執行時需要用到的資源，以及記錄 function 執行的順序。</p>
<p>這些過程都發生在開始執行內部程式碼之前，也就是建立階段。對 JS 引擎來說，屬於執行前的編譯階段，而 hoisting 就是在此階段進行處理。</p>
<ol start="2">
<li>執行階段：執行堆疊（Execution Stack）</li>
</ol>
<p>接著 JavaScript 會優先處理執行堆疊中最上面的執行環境。一旦執行完該 function 後，該執行環境就會從最上面被移除（pop off），同時儲存在該 function 中的資訊也會被銷毀，然後再回到之前的執行環境，直到回到 Global EC 為止。</p>
<p>可參考下方示意圖：</p>
<p><img src="https://i.imgur.com/SiRxsOL.png"><br>（參考來源：<span class="exturl" data-url="aHR0cHM6Ly9kZXYudG8vYWhtZWR0YWhpci93aGF0LWlzLXRoZS1leGVjdXRpb24tY29udGV4dC1leGVjdXRpb24tc3RhY2stc2NvcGUtY2hhaW4taW4tanMtMjZuYyVFRiVCQyU4OQ==">https://dev.to/ahmedtahir/what-is-the-execution-context-execution-stack-scope-chain-in-js-26nc）<i class="fa fa-external-link-alt"></i></span></p>
<p>但 call stack 能夠存取的內容是有限的，一旦超出 stack 負荷就有可能出現錯誤 stack overflow。例如遞迴呼叫一個 function 十萬次，因為 stack 沒辦法存這麼多東西，就會拋出錯誤。</p>
<p>既然 JavaScript 同一個時間只能執行一件事，那要如何達到非同步操作呢？回到先前談的執行環境。</p>
<p>這裡以 setTimeout 為例：</p>
<p>setTimeout(fn, 2000) 只是在告訴瀏覽器說：「2 秒以後幫我呼叫 fn 這個 function」，瀏覽器就可以開另外一個 thread 去計時，而不是利用 main thread 做這件事。</p>
<p>當這些其他 thread 的事情做完以後，要再重新丟回 main thread 執行 JavaScript，這就是 Event Loop 在做的事情。</p>
<p>可參考這張 Event Loop 示意圖：</p>
<p><img src="https://i.imgur.com/F4oAQmS.png"></p>
<p>（圖片來源：<span class="exturl" data-url="aHR0cHM6Ly9tZWRpdW0uY29tL0BSYWh1bHgxL3VuZGVyc3RhbmRpbmctZXZlbnQtbG9vcC1jYWxsLXN0YWNrLWV2ZW50LWpvYi1xdWV1ZS1pbi1qYXZhc2NyaXB0LTYzZGNkMmM3MWVjZA==">Understanding Event Loop, Call Stack, Event &amp; Job Queue in Javascript<i class="fa fa-external-link-alt"></i></span>）</p>
<p>以執行 setTimeout(fn, 2000) 這行程式碼來說，步驟可想像成：</p>
<ol>
<li>執行 setTimeout(fn, 2000)，先把 setTimeout(fn, 2000) 丟到 call stack 去執行</li>
<li>因為 setTimeout 屬於 Web API，會告訴瀏覽器「設定計時，經過 2000 毫秒以後呼叫 fn」</li>
<li>執行結束，從 call stack 移除任務</li>
<li>當瀏覽器計時 2000 毫秒後，會呼叫 fn 並丟到 callback queue 等待執行</li>
</ol>
<p>接著是 Event Loop，藉由這個機制不斷偵測 call stack 是否為空，如果是空的，就把 callback queue 裡面的東西丟到 call stack。</p>
<p>Event Loop 其實有 loop（迴圈）概念在，可以表示成這樣：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// 如果 call stack 為空 且 callback quere 有排程</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>callStack<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> callbackQueue<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// 拿出 callbackQueue 的第一個元素，並放到 callStack</span>
    callStack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>callbackQueue<span class="token punctuation">.</span><span class="token function">dequeue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>簡單來說，非同步的 callback function 會先被放到 callback queue，並且等到 call stack 為空時候才被 Event loop 丟進去 call stack，真正負責執行的還是 JavaScript 的 main thread。</p>
<h3 id="牛刀小試"><a href="#牛刀小試" class="headerlink" title="牛刀小試"></a>牛刀小試</h3><p>再舉一個常見例子，下面程式碼中應該哪行會先被執行？</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'零秒出手'</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'hello'</span><span class="token punctuation">)</span>
<span class="token comment">// hello</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>思考方式：</p>
<ol>
<li>在 0ms 後，callback function 會被放到 callback queue 中等待執行</li>
<li>因為 call stack 還不是空的，這裡會先繼續執行 console.log(‘hello’)</li>
<li>執行結束，call stack 被清空</li>
<li>event loop 才會把 callback 放到 call stack</li>
<li>執行 callback 裡面的 console.log(‘零秒出手’)</li>
</ol>
<p>因此輸出順序會先是 <code>hello</code>，然後才是 <code>零秒出手</code>。</p>
<hr>
<h2 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h2><p>閱讀完這篇文章，原本對 callback 概念薄弱的自己，對同步與非同步又有了新的一層認識。</p>
<p>尤其是前幾天才剛學完有關 <span class="exturl" data-url="aHR0cHM6Ly9oYWNrbWQuaW8vQEhlaWRpLUxpdS9ub3RlLWpzMjAxLWhvaXN0aW5n">Hoisting<i class="fa fa-external-link-alt"></i></span> 的運作原理，瞭解什麼是執行環境以及執行堆疊以後，再回來看 Event Loop 似乎也更能夠理解當中的執行流程。</p>
<p>是說現在再次看到 Node.js 是 JavaScript 的 runtime（執行環境）這句話時，會想到 Execution context 中文也被翻成執行環境，但兩者指的對象不同。前者指的是「執行時系統」（run-time system）；後者指的是 JavaScript 在執行時會建立的環境，又可分為全域與函式執行環境。翻成中文的壞處就是容易撞名混淆，還是讓自己盡量去理解原文的意思。</p>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>[week 1] Command Line 入門 &amp; 基本指令</title>
    <url>/command-line/</url>
    <content><![CDATA[<blockquote>
<p>本篇為 <span class="exturl" data-url="aHR0cHM6Ly9saWRlbXkuY29tL3AvY21kMTAxLWNvbW1hbmQtbGluZQ==">[CMD101] Command Line 超新手入門<i class="fa fa-external-link-alt"></i></span>和 <span class="exturl" data-url="aHR0cHM6Ly9saWRlbXkuY29tL3AvY3MxMDEtY29kaW5n">[CS101] 初心者的計概與 coding 火球術<i class="fa fa-external-link-alt"></i></span> 這兩門課程的學習筆記。</p>
</blockquote>
<pre class="line-numbers language-none"><code class="language-none">學習目標：

 說得出程式如何執行
 理解寫程式的本質只是一行行的指令
 了解前端與後端的區別
 能說出從發出一個 request 到接收 response 中間發生的事
 了解不同載具的差異在哪（Desktop、Mobile、Web）
 了瞭解基本的 command line 指令<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id=""><a href="#" class="headerlink" title=""></a><span id="more"></span></h2><h2 id="關於寫程式這件事"><a href="#關於寫程式這件事" class="headerlink" title="關於寫程式這件事"></a>關於寫程式這件事</h2><p>就是對電腦下指令（程式碼），讓電腦執行我們想要的動作（解決問題）。</p>
<h2 id="條列式的重要性"><a href="#條列式的重要性" class="headerlink" title="條列式的重要性"></a>條列式的重要性</h2><p>試著用「程式化思考」將解法以標準化的格式呈現。</p>
<blockquote>
<p>範例：「給你一串文字，問你裡面有沒有 p」</p>
</blockquote>
<pre class="line-numbers language-none"><code class="language-none">1. 假設 n 是 1，length 是字串長度，
   A 設成 -1 代表找到的位置，p 是要找到的字   &#x2F;&#x2F;字串不會有負數，若小於零代表找不到

2. 看第 n 個字是不是 p，是的話 A&#x3D;n　　&#x2F;&#x2F;把 A 設成 n 的值，若 n&#x3D;3，即在第 3 個數找到 p

3. 把 n+1，如果 n+1 大於 length 的話，就跳到第 5 步　　&#x2F;&#x2F;條件機制

4. 跳回第 2 步　　&#x2F;&#x2F;迴圈的概念

5. 如果 A &lt; 0，代表沒出現過；否則 A 就是答案<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<hr>
<h2 id="Command-Line-是什麼？"><a href="#Command-Line-是什麼？" class="headerlink" title="Command Line 是什麼？"></a>Command Line 是什麼？</h2><ul>
<li>操控電腦的方法大致上分兩種類型：</li>
</ul>
<ol>
<li><strong>GUI（Graphical User Interface，圖形化介面）</strong>：一般習慣使用的電腦操作介面，透過設計出的「圖形」來下指令。</li>
<li><strong>CLI（Command Line Interface，命令列介面）</strong>：透過「純文字」來達成指定動作。</li>
</ol>
<ul>
<li>兩種都可以用來和電腦溝通；但有些伺服器可能沒有 GUI （例如 database），這種情況就只能使用 CLI 來進行操作。</li>
</ul>
<h2 id="環境設置"><a href="#環境設置" class="headerlink" title="環境設置"></a>環境設置</h2><ul>
<li>要執行 Command Line 指令，必須先根據作業系統安裝 Command Line Tool：</li>
</ul>
<ol>
<li>Windows：<span class="exturl" data-url="aHR0cHM6Ly9naXRmb3J3aW5kb3dzLm9yZy8=">git-bash<i class="fa fa-external-link-alt"></i></span>（推薦）、<span class="exturl" data-url="aHR0cHM6Ly9ibG9nLm1pbmlhc3AuY29tL3Bvc3QvMjAxNS8wOS8yNy9Vc2VmdWwtdG9vbC1DbWRlcg==">Cmder<i class="fa fa-external-link-alt"></i></span></li>
<li>Mac：<span class="exturl" data-url="aHR0cDovL2h1bGkubG9nZG93bi5jb20vcG9zdHMvNDAyMTQ3LWl0ZXJtMi16c2gtYmV0dGVyLWVudmlyb25tZW50">iTerm2<i class="fa fa-external-link-alt"></i></span></li>
</ol>
<ul>
<li>或是使用 <span class="exturl" data-url="aHR0cHM6Ly9iZWxsYXJkLm9yZy9qc2xpbnV4Lw==">JSLinux<i class="fa fa-external-link-alt"></i></span> （<span class="exturl" data-url="aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3dpa2kvSnNsaW51eA==">以 JavaScript 寫成的 Linux 模擬器<i class="fa fa-external-link-alt"></i></span>）來統一環境，即可在瀏覽器介面進行測試。</li>
</ul>
<h2 id="基本指令介紹"><a href="#基本指令介紹" class="headerlink" title="基本指令介紹"></a>基本指令介紹</h2><blockquote>
<p>所謂的「指令」其實也是由程式寫成，我們藉由輸入指令來執行程式。</p>
</blockquote>
<h4 id="pwd（Print-Working-Directory）：印出目前所在位置"><a href="#pwd（Print-Working-Directory）：印出目前所在位置" class="headerlink" title="pwd（Print Working Directory）：印出目前所在位置"></a><code>pwd</code>（Print Working Directory）：印出目前所在位置</h4><h4 id="ls（List）：印出當前位置檔案清單"><a href="#ls（List）：印出當前位置檔案清單" class="headerlink" title="ls（List）：印出當前位置檔案清單"></a><code>ls</code>（List）：印出當前位置檔案清單</h4><ul>
<li><code>ls-l</code>：長格式（long），顯示有關檔案的詳細資訊</li>
<li><code>ls-a</code>：列出所有檔案（包括隱藏檔）</li>
</ul>
<h4 id="cd（Change-Directory）-切換目前資料夾"><a href="#cd（Change-Directory）-切換目前資料夾" class="headerlink" title="cd（Change Directory） 切換目前資料夾"></a><code>cd</code>（Change Directory） 切換目前資料夾</h4><ul>
<li><code>cd ..</code>：回到上一層資料夾</li>
<li><code>cd ~</code>：回到 home 目錄（我的文件）</li>
<li><code>cd /</code>：回到根目錄<ul>
<li>絕對路徑：「一定由根目錄 / 寫起」<br><code>cd /Users/share/data</code></li>
<li>相對路徑：「不是由 / 寫起」<br><code>cd test</code></li>
</ul>
</li>
<li>範例：「若要從 /downloads/test/data 到 /downloads/test/media 底下時」<br>可以寫 <code>cd ../media</code>：先回到上一層，再進入 media 資料夾<br>也可寫 <code>cd ~/downloads/test/media</code>：直接用絕對路徑進入</li>
</ul>
<p><img src="https://i.imgur.com/emeMG2h.png" alt="cd 語法練習"></p>
<blockquote>
<p>小技巧：直接把圖形介面的資料夾拖到 CLI 裡，就會自動輸入那個資料夾的絕對路徑。可節省打字時間。</p>
</blockquote>
<h4 id="clear：清空螢幕"><a href="#clear：清空螢幕" class="headerlink" title="clear：清空螢幕"></a><code>clear</code>：清空螢幕</h4><h4 id="touch：碰一下"><a href="#touch：碰一下" class="headerlink" title="touch：碰一下"></a><code>touch</code>：碰一下</h4><ul>
<li>作用 1：touch 現有的檔案，會修改檔案時間成當前時間</li>
<li>作用 2：若檔案不存在，則會新增檔案</li>
</ul>
<h4 id="mkdir：MaKe-DIRectory-新增資料夾"><a href="#mkdir：MaKe-DIRectory-新增資料夾" class="headerlink" title="mkdir：MaKe DIRectory 新增資料夾"></a><code>mkdir</code>：MaKe DIRectory 新增資料夾</h4><h4 id="rm：ReMove-刪除檔案（註：有關刪除指令需慎用）"><a href="#rm：ReMove-刪除檔案（註：有關刪除指令需慎用）" class="headerlink" title="rm：ReMove 刪除檔案（註：有關刪除指令需慎用）"></a><code>rm</code>：ReMove 刪除檔案（註：有關刪除指令需慎用）</h4><h4 id="rmdir：刪除資料夾"><a href="#rmdir：刪除資料夾" class="headerlink" title="rmdir：刪除資料夾"></a><code>rmdir</code>：刪除資料夾</h4><ul>
<li>也可用 <code>rm -r</code> 指令來刪除檔案或資料夾</li>
</ul>
<h4 id="cp：CoPy-複製"><a href="#cp：CoPy-複製" class="headerlink" title="cp：CoPy 複製"></a><code>cp</code>：CoPy 複製</h4><ul>
<li>範例 1. <code>cp data data_2</code>：複製出一個 data_2 檔案</li>
<li>範例 2. <code>cp -r deep deep2</code>：複製出一個 deep2 資料夾</li>
</ul>
<h4 id="mv：MoVe-移動檔案-or-更改檔名"><a href="#mv：MoVe-移動檔案-or-更改檔名" class="headerlink" title="mv：MoVe 移動檔案 or 更改檔名"></a><code>mv</code>：MoVe 移動檔案 or 更改檔名</h4><ul>
<li>作用 1：當找到該資料夾時，檔案會<strong>移到資料夾裡</strong><ul>
<li>範例：<code>mv data folder</code>：將 data 檔案移到 folder 資料夾裡</li>
</ul>
</li>
<li>作用 2：當找不到該資料夾，則會<strong>更改檔案名稱</strong><ul>
<li>範例：<code>mv data test</code>：將 data 檔案名稱更改為 test</li>
</ul>
</li>
</ul>
<h4 id="vim：進入文字編輯器"><a href="#vim：進入文字編輯器" class="headerlink" title="vim：進入文字編輯器"></a><code>vim</code>：進入文字編輯器</h4><blockquote>
<p>本來想說沒問題，結果還真的卡很久無法回到上層介面 Orz<br>需按下 [ESC] 按鍵回到一般指令模式，才能下 <code>:wq</code> 指令存檔（write）並離開 （quit)。</p>
</blockquote>
<h4 id="參考-vim-介紹："><a href="#參考-vim-介紹：" class="headerlink" title="參考 vim 介紹："></a>參考 vim 介紹：</h4><p>可分為普通模式跟編輯模式：</p>
<ul>
<li>按鍵 i：進入編輯模式</li>
<li>按鍵 Esc：進入普通模式</li>
<li><code>:q</code> 退出</li>
<li><code>:wq</code> 存檔（write）後退出（quit)</li>
<li><code>:q!</code> 不存檔直接退出</li>
</ul>
<p>參考資料：</p>
<ol>
<li><span class="exturl" data-url="aHR0cDovL3d3dy52aXh1YWwubmV0L2Jsb2cvYXJjaGl2ZXMvMjM0">vi 與 vim 的指令整理<i class="fa fa-external-link-alt"></i></span>、</li>
<li><span class="exturl" data-url="aHR0cDovL2xpbnV4LnZiaXJkLm9yZy9saW51eF9iYXNpYy8wMzEwdmkucGhw">鳥哥的 Linux 私房菜– 第九章、vim 程式編輯器<i class="fa fa-external-link-alt"></i></span></li>
</ol>
<h2 id="更多常用指令"><a href="#更多常用指令" class="headerlink" title="更多常用指令"></a>更多常用指令</h2><h4 id="date：印出當前日期"><a href="#date：印出當前日期" class="headerlink" title="date：印出當前日期"></a><code>date</code>：印出當前日期</h4><h4 id="top（Table-Of-Processes）：印出所有-Process，可持續偵測程序運作的狀態（按-q-鍵離開）"><a href="#top（Table-Of-Processes）：印出所有-Process，可持續偵測程序運作的狀態（按-q-鍵離開）" class="headerlink" title="top（Table Of Processes）：印出所有 Process，可持續偵測程序運作的狀態（按 q 鍵離開）"></a><code>top</code>（Table Of Processes）：印出所有 Process，可持續偵測程序運作的狀態（按 q 鍵離開）</h4><h4 id="cat（CATenate）：查看檔案內容"><a href="#cat（CATenate）：查看檔案內容" class="headerlink" title="cat（CATenate）：查看檔案內容"></a><code>cat</code>（CATenate）：查看檔案內容</h4><h4 id="less：分頁式印出檔案"><a href="#less：分頁式印出檔案" class="headerlink" title="less：分頁式印出檔案"></a><code>less</code>：分頁式印出檔案</h4><h4 id="grep：抓取特定關鍵字"><a href="#grep：抓取特定關鍵字" class="headerlink" title="grep：抓取特定關鍵字"></a><code>grep</code>：抓取特定關鍵字</h4><h4 id="echo：印出字串"><a href="#echo：印出字串" class="headerlink" title="echo：印出字串"></a><code>echo</code>：印出字串</h4><h4 id="（pipe）：把前面的輸入「變成」後面的輸出"><a href="#（pipe）：把前面的輸入「變成」後面的輸出" class="headerlink" title="|（pipe）：把前面的輸入「變成」後面的輸出"></a><code>|</code>（pipe）：把前面的輸入「變成」後面的輸出</h4><ul>
<li>範例：<code>cat file.txt | grep hi </code>：從印出的 file.txt 內容中，抓取字串 hi 並輸出</li>
</ul>
<h4 id="gt-（redirect）：將輸入或輸出重新導向"><a href="#gt-（redirect）：將輸入或輸出重新導向" class="headerlink" title="&gt;（redirect）：將輸入或輸出重新導向"></a><code>&gt;</code>（redirect）：將輸入或輸出重新導向</h4><ul>
<li>範例 1：<code>date &gt; time.txt</code>：將 <code>date</code> 輸出到 <code>time.txt</code><br>　　再輸入 <code>cat time.txt</code>，會顯示出 <code>Sun May 31 20:29:57 UTC 2020</code></li>
<li>範例 2：<code>echo &quot;123&quot; &gt; 123.txt</code>：印出 123 到 123.txt<br>　 1. 若輸入 <code>echo &quot;456&quot; &gt; 123.txt</code>：顯示 456，檔案會被全部覆蓋<br>　 2. 若輸入 <code>echo &quot;456&quot; &gt;&gt; 123.txt</code>：顯示 123456，兩個 <code>&gt;</code> 會新增內容在最後</li>
</ul>
<h4 id="wget：下載檔案"><a href="#wget：下載檔案" class="headerlink" title="wget：下載檔案"></a><code>wget</code>：下載檔案</h4><ul>
<li>範例：輸入 <code>wget https://www.google.com.tw/</code>，即可下載 Google 首頁的網頁原始碼（index.html）</li>
</ul>
<h4 id="curl：送出-request，可用來測試-API"><a href="#curl：送出-request，可用來測試-API" class="headerlink" title="curl：送出 request，可用來測試 API"></a><code>curl</code>：送出 request，可用來測試 API</h4><hr>
<h3 id="補充：檔案格式"><a href="#補充：檔案格式" class="headerlink" title="補充：檔案格式"></a>補充：檔案格式</h3><ul>
<li>內容是一回事，如何解讀是另一回事</li>
<li>在電腦裡的任何檔案，其實都是以純文字組成，可用不同格式進行解析</li>
<li>可以透過設定副檔名（如：文件.pdf、圖片.jpg）幫助電腦辨別格式</li>
</ul>
<p>參考資料：</p>
<ol>
<li><span class="exturl" data-url="aHR0cHM6Ly95YWtpbWhzdS5jb20vcHJvamVjdC9wcm9qZWN0X3cxX0NvbW1hbmRMaW5lLmh0bWw=">[第一週] Command Line - Terminal、基本指令介紹<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLnRlY2hicmlkZ2UuY2MvMjAxNy8xMi8yMy9saW51eC1jb21tbmQtbGluZS10dXRvcmlhbC8=">Linux Command 命令列指令與基本操作入門教學<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLm1pbmlhc3AuY29tL3Bvc3QvMjAxNS8wOS8yNy9Vc2VmdWwtdG9vbC1DbWRlcg==">介紹好用工具：Cmder ( 具有 Linux 溫度的 Windows 命令提示字元工具 )<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cDovL2h1bGkubG9nZG93bi5jb20vcG9zdHMvNDAyMTQ3LWl0ZXJtMi16c2gtYmV0dGVyLWVudmlyb25tZW50">[心得] iTerm2 + zsh，打造更好的工作環境<i class="fa fa-external-link-alt"></i></span></li>
</ol>
]]></content>
      <categories>
        <category>lidemy</category>
      </categories>
      <tags>
        <tag>lidemy</tag>
        <tag>terminal</tag>
      </tags>
  </entry>
  <entry>
    <title>[學習筆記] CSS 自訂標號圖示、段落縮排效果</title>
    <url>/css-list-style/</url>
    <content><![CDATA[<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cud2liaWJpLmNvbS9pbmZvLnBocD90aWQ9Q1NTX2xpc3Qtc3R5bGVfJUU1JTg4JTk3JUU4JUExJUE4JUU1JUIxJUFDJUU2JTgwJUE3">CSS list-style 列表屬性
<i class="fa fa-external-link-alt"></i></span></li>
<li>更多項目標籤寫法參考：<span class="exturl" data-url="aHR0cHM6Ly93d3cud2liaWJpLmNvbS9pbmZvLnBocD90aWQ9MzU5">CSS list-style-type<i class="fa fa-external-link-alt"></i></span></li>
</ul>
<span id="more"></span>

<h2 id="CSS-中的標號圖示"><a href="#CSS-中的標號圖示" class="headerlink" title="CSS 中的標號圖示"></a>CSS 中的標號圖示</h2><p>在 HTML &amp; CSS 中，想要建立段落標號樣式，可透過下列幾種方法：</p>
<ul>
<li>第一種：<code>&lt;span&gt;</code> 行內標籤<ul>
<li>可插入 icon，但用在排序會較不符合語意化</li>
</ul>
</li>
</ul>
<pre class="line-numbers language-htmlmixed" data-language="htmlmixed"><code class="language-htmlmixed">&lt;li&gt;&lt;span&gt;(1)&lt;&#x2F;span&gt;這是第一項&lt;&#x2F;li&gt;

&lt;li&gt;&lt;mat-icon class&#x3D;&quot;cat&quot;&gt;&lt;&#x2F;mat-icon&gt;這是一隻貓&lt;&#x2F;li&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<ul>
<li>第二種：使用 ul（無序）、ol（有序）項目標籤<ul>
<li>透過 li::before 自訂標號圖示，同樣可插入 icon</li>
</ul>
</li>
</ul>
<h3 id="ul-li-或-ol-li-項目標籤"><a href="#ul-li-或-ol-li-項目標籤" class="headerlink" title="ul li 或 ol, li 項目標籤"></a>ul li 或 ol, li 項目標籤</h3><p>在 HTML 中，可根據是否需呈現排序項目，使用 ol li 標籤；若不需排序，就直接使用 ul li 標籤。</p>
<p>可參考以下範例：</p>
<pre class="line-numbers language-htmlmixed" data-language="htmlmixed"><code class="language-htmlmixed">&lt;!-- 無序列 --&gt;
&lt;ul&gt;
　&lt;li&gt;星期一&lt;&#x2F;li&gt;
　&lt;li&gt;星期二&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;

&lt;!-- 有序列 --&gt;
&lt;ol&gt;
　&lt;li&gt;星期一&lt;&#x2F;li&gt;
　&lt;li&gt;星期二&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>輸出效果如下：</p>
<ul>
<li>星期一</li>
<li>星期二</li>
</ul>
<ol>
<li>星期一</li>
<li>星期二</li>
</ol>
<h2 id="CSS-list-style-列表屬性"><a href="#CSS-list-style-列表屬性" class="headerlink" title="CSS list-style 列表屬性"></a>CSS list-style 列表屬性</h2><p>CSS 列表屬性，可用來調整列表的顯示功能，也就是上述提到的 ul li 或 ol li 項目標籤。</p>
<p>以下介紹幾種列表屬性：</p>
<ul>
<li>list-style-type：修改列表開頭符號</li>
<li>list-style-image：修改列表開頭小圖示</li>
<li>list-style-position：修改列表的顯示位置</li>
</ul>
<h3 id="list-style-type-屬性：修改列表開頭顯示符號"><a href="#list-style-type-屬性：修改列表開頭顯示符號" class="headerlink" title="list-style-type 屬性：修改列表開頭顯示符號"></a>list-style-type 屬性：修改列表開頭顯示符號</h3><p>我們可透過 <code>&lt;ul&gt;</code>, <code>&lt;ol&gt;</code> 元素的 type 屬性，改變開頭編號的種類，如以下範例：</p>
<pre class="line-numbers language-htmlmixed" data-language="htmlmixed"><code class="language-htmlmixed">&lt;!-- 小寫字母 --&gt;
&lt;ul style&#x3D;&quot;list-style-type:lower-alpha;&quot;&gt;
　&lt;li&gt;lower-alpha&lt;&#x2F;li&gt;
　&lt;li&gt;lower-alpha&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;

&lt;!-- 羅馬字母 --&gt;
&lt;ul style&#x3D;&quot;list-style-type: lower-roman;&quot;&gt;
  &lt;li&gt;lower-roman&lt;&#x2F;li&gt;
  &lt;li&gt;lower-roman&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>輸出效果如下：</p>
<pre class="line-numbers language-none"><code class="language-none">a. lower-alpha
b. lower-alpha

i. lower-roman
ii. lower-roman<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="list-style-image-屬性：修改列表開頭為小圖示"><a href="#list-style-image-屬性：修改列表開頭為小圖示" class="headerlink" title="list-style-image 屬性：修改列表開頭為小圖示"></a>list-style-image 屬性：修改列表開頭為小圖示</h3><ul>
<li>HTML 標籤</li>
</ul>
<pre class="line-numbers language-htmlmixed" data-language="htmlmixed"><code class="language-htmlmixed">&lt;ul&gt;
　&lt;li&gt;開頭符號為圖示的清單&lt;&#x2F;li&gt;
　&lt;li&gt;開頭符號為圖示的清單&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>CSS 樣式</li>
</ul>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">ul li</span> <span class="token punctuation">&#123;</span>
　list-style-image<span class="token punctuation">:</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span><span class="token string url">'圖片路徑.svg'</span><span class="token punctuation">)</span></span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<h3 id="list-style-position：修改列表的顯示位置"><a href="#list-style-position：修改列表的顯示位置" class="headerlink" title="list-style-position：修改列表的顯示位置"></a>list-style-position：修改列表的顯示位置</h3><ul>
<li>HTML 標籤</li>
</ul>
<pre class="line-numbers language-htmlmixed" data-language="htmlmixed"><code class="language-htmlmixed">&lt;ul class&#x3D;&quot;p1&quot;&gt;
　&lt;li&gt;這是在標籤範圍之內顯示&lt;&#x2F;li&gt;
　&lt;li&gt;這是在標籤範圍之內顯示&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;

&lt;ul class&#x3D;&quot;p2&quot;&gt;
　&lt;li&gt;這是在標籤範圍之外顯示&lt;&#x2F;li&gt;
　&lt;li&gt;這是在標籤範圍之外顯示&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>CSS 樣式</li>
</ul>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token comment">/* 項目符號在 li 範圍內 */</span>
<span class="token selector">ul.p1</span> <span class="token punctuation">&#123;</span>
　list-style-position<span class="token punctuation">:</span> inside<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">/* 項目符號在 li 範圍外（預設值） */</span>
<span class="token selector">ul.p2</span> <span class="token punctuation">&#123;</span>
　list-style-position<span class="token punctuation">:</span> outside<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">/* 可用來確認 li 項目位置 */</span>
<span class="token selector">li</span> <span class="token punctuation">&#123;</span>
　border<span class="token punctuation">:</span> 1px #cccccc solid<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<hr>
<h2 id="Custom-List-Style-自訂標號樣式"><a href="#Custom-List-Style-自訂標號樣式" class="headerlink" title="Custom List Style 自訂標號樣式"></a>Custom List Style 自訂標號樣式</h2><p>假如不想使用 ul, ol 標籤預設樣式，也可透過下列步驟來自訂標號樣式：</p>
<ul>
<li>在 ol 取消預設樣式，並自訂一個標號變數</li>
</ul>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">ol</span> <span class="token punctuation">&#123;</span>
  <span class="token property">list-style</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>
  <span class="token property">counter-reset</span><span class="token punctuation">:</span> my-counter<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>在 ol li 使用自訂標號，可透過 text-indent 修改段落縮排：</li>
</ul>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">ol li</span> <span class="token punctuation">&#123;</span>
<span class="token comment">/*  使用自訂標號  */</span>
  <span class="token property">counter-increment</span><span class="token punctuation">:</span> my-counter<span class="token punctuation">;</span>
<span class="token comment">/* 段落首行縮排 */</span>
  <span class="token property">text-indent</span><span class="token punctuation">:</span> -1em<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>透過偽元素 <code>li::before</code> 使用自訂標號樣式，例如 (1)，即可插入想要的符號．或也可以替換成 url 路徑插入圖示：</li>
</ul>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token comment">/* 代表在自訂變數前後加上 ( ) */</span>
<span class="token selector">ol li::before</span> <span class="token punctuation">&#123;</span>
  <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">"("</span><span class="token function">counter</span><span class="token punctuation">(</span>my-counter<span class="token punctuation">)</span> <span class="token string">")"</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>完成的 CSS 樣式如下：</p>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">ol</span> <span class="token punctuation">&#123;</span>
  <span class="token property">list-style</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>
<span class="token comment">/*  命名自訂標號變數  */</span>
  <span class="token property">counter-reset</span><span class="token punctuation">:</span> my-counter<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token selector">ol li</span> <span class="token punctuation">&#123;</span>
<span class="token comment">/*  使用自訂標號  */</span>
  <span class="token property">counter-increment</span><span class="token punctuation">:</span> my-counter<span class="token punctuation">;</span>
<span class="token comment">/* 段落首行縮排 */</span>
  <span class="token property">text-indent</span><span class="token punctuation">:</span> -1em<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">/* 以偽元素自訂標號樣式 */</span>
<span class="token selector">ol li::before</span> <span class="token punctuation">&#123;</span>
  <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">"("</span><span class="token function">counter</span><span class="token punctuation">(</span>my-counter<span class="token punctuation">)</span> <span class="token string">")"</span><span class="token punctuation">;</span>
  <span class="token property">color</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span>
  <span class="token property">font-weight</span><span class="token punctuation">:</span> bold<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>以下 DEMO 樣式渲染結果：</li>
</ul>
<iframe height="265" style="width: 100%;" scrolling="no" title="Custom List Style - 自訂標號樣式" src="https://codepen.io/heidiliu2020/embed/PoWXJLv?height=265&theme-id=dark&default-tab=css,result" frameborder="no" loading="lazy" allowtransparency="true" allowfullscreen="true">
  See the Pen <a href='https://codepen.io/heidiliu2020/pen/PoWXJLv'>Custom List Style - 自訂標號樣式</a> by Heidi-Liu
  (<a href='https://codepen.io/heidiliu2020'>@heidiliu2020</a>) on <a href='https://codepen.io'>CodePen</a>.
</iframe>
]]></content>
      <categories>
        <category>Front-End</category>
        <category>HTML &amp; CSS</category>
      </categories>
      <tags>
        <tag>Front-End</tag>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>[week 13] 前端進階 - 如何優化執行 CSS 效能</title>
    <url>/css-optimization/</url>
    <content><![CDATA[<h2 id="前端優化"><a href="#前端優化" class="headerlink" title="前端優化"></a>前端優化</h2><p>關於前端優化方式，可從下列幾個方向進行：</p>
<ul>
<li>資源本身的大小</li>
<li>資源載入的方式</li>
<li>資源執行的方式<span id="more"></span>
<h2 id="CSS-優化"><a href="#CSS-優化" class="headerlink" title="CSS 優化"></a>CSS 優化</h2></li>
</ul>
<h3 id="節省資源大小"><a href="#節省資源大小" class="headerlink" title="節省資源大小"></a>節省資源大小</h3><ul>
<li>Minify：省略空白字元，電腦可直接辨識<ul>
<li>例如：<code>nps sass --style=compressed main.sass masin.css</code></li>
</ul>
</li>
<li>gzip*：壓縮，會進行編碼，通常是在 server 端進行，電腦會經過解碼後再使用</li>
</ul>
<p>通常會先進行 Minify 再進行 gzip*，藉此壓縮資源大小。</p>
<h3 id="載入方式"><a href="#載入方式" class="headerlink" title="載入方式"></a>載入方式</h3><ul>
<li>Critical CSS：分批載入，先載入重要的部分<ul>
<li>例如：把 navbar、banner 樣式放到 index.html，在讀取 css 之前即可先被載入</li>
</ul>
</li>
</ul>
<p><img src="https://i.imgur.com/sywJHI7.png"></p>
<ul>
<li>CSS Sprites：將每個小檔案打包後，只需發出一個 Request  ，載入完成後再拆開引用<ul>
<li>例如：將小圖片打包成大圖片，再取用需要的區塊</li>
</ul>
</li>
</ul>
<p><img src="https://i.imgur.com/XV6V5ak.png"></p>
<ul>
<li>Cache*：將資料暫存在瀏覽器，只有第一次登入網站需下載，之後就能快速讀取暫存檔</li>
</ul>
<p><img src="https://i.imgur.com/8n3U6Qj.png"></p>
<h3 id="執行方式"><a href="#執行方式" class="headerlink" title="執行方式"></a>執行方式</h3><ul>
<li><p>選擇器：降低選擇器的複雜性</p>
<ul>
<li>例如：使用 Sass 巢狀語法時，需考慮到編譯後程式碼的複雜性</li>
</ul>
</li>
<li><p>屬性渲染：需考慮到屬性載入的順序</p>
<ul>
<li>例如：特效網頁或有 SEO 考量的網站，需注意動畫或特效會在哪個階段匯入</li>
</ul>
</li>
</ul>
<hr>
<h2 id="CSS-Sprites-與-Data-URI-的優缺點"><a href="#CSS-Sprites-與-Data-URI-的優缺點" class="headerlink" title="CSS Sprites 與 Data URI 的優缺點"></a>CSS Sprites 與 Data URI 的優缺點</h2><h3 id="CSS-Sprites"><a href="#CSS-Sprites" class="headerlink" title="CSS Sprites"></a>CSS Sprites</h3><p>CSS Sprite 是將頁面中所使用到的小圖片整合到一張大圖上。也就是說，在加載一個包含多個圖片的頁面上時，只需使用一個HTTP請求而不需要 JavaScript 代碼。</p>
<ul>
<li>優點：減少 http 請求</li>
<li>缺點：圖片合併定位費時費力</li>
</ul>
<h4 id="使用技巧"><a href="#使用技巧" class="headerlink" title="使用技巧"></a>使用技巧</h4><ul>
<li>切圖前就需構思拼接好圖片</li>
<li>排序有序，便於後期維護。有利於 background-position 定位</li>
<li>定位時避免使用 right, bottom 等</li>
<li>合理預留空白位置（空太多檔案變大，太小引起圖示重疊）</li>
</ul>
<h3 id="Data-URI"><a href="#Data-URI" class="headerlink" title="Data URI"></a>Data URI</h3><p>image data URI 是將圖片資源轉換為 base64 字串格式嵌到頁面或樣式中。不需要圖片的請求連結。</p>
<ul>
<li>優點：<ul>
<li>減少 HTTP 請求</li>
<li>避免某些檔案跨域</li>
<li>無圖片快取等問題</li>
</ul>
</li>
<li>缺點：<ul>
<li>相容性（IE6,7 不相容，可使用 MHTML 來解決）</li>
<li>瀏覽器不會快取該圖片</li>
<li>增加 css 檔案大小</li>
<li>編碼成本及維護</li>
</ul>
</li>
</ul>
<h4 id="使用技巧-1"><a href="#使用技巧-1" class="headerlink" title="使用技巧"></a>使用技巧</h4><ul>
<li>data URI 可使用在：<ul>
<li>圖片尺寸很小，使用一條 http 請求有點浪費，如：漸變背景框</li>
<li>圖片在全站大規模使用，且很少被更新的，如：loading 圖</li>
</ul>
</li>
<li>標籤語法<ul>
<li>data：取得資料協議</li>
<li>image/png：取得資料的協議名稱（注意這裡也圖片資源也可以使用字型等）</li>
<li>base64：資料編碼方式</li>
<li>iVBOR…：編碼後資料</li>
</ul>
</li>
</ul>
<p>參考資料：</p>
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9jb2RlcnR3LmNvbS8lRTUlODklOEQlRTclQUIlQUYlRTklOTYlOEIlRTclOTklQkMvMTg0MDAzLyNvdXRsaW5lX18x">主流CSS image比較<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cub3NjaGluYS5uZXQvdHJhbnNsYXRlL2Nzcy1zcHJpdGVzLXZzLWRhdGEtdXJpcy13aGljaC1pcy1mYXN0ZXItb24tbW9iaWxlP3ByaW50">CSS Sprites vs. Data URIs:在移动端，谁更快？<i class="fa fa-external-link-alt"></i></span></li>
</ul>
]]></content>
      <categories>
        <category>Front-End</category>
        <category>HTML &amp; CSS</category>
      </categories>
      <tags>
        <tag>Front-End</tag>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>[week 6] CSS - 認識基礎標籤 &amp; 屬性</title>
    <url>/css/</url>
    <content><![CDATA[<blockquote>
<p>本篇為 <span class="exturl" data-url="aHR0cHM6Ly9saWRlbXkuY29tL3AvZmUxMDEtaHRtbC1jc3M=">[FE101] 前端基礎：HTML 與 CSS<i class="fa fa-external-link-alt"></i></span> 這門課程的學習筆記。如有錯誤歡迎指正。</p>
</blockquote>
<pre class="line-numbers language-none"><code class="language-none">學習目標:

 P1 你知道 CSS 是什麼
 P1 你知道 inline、block 跟 inline-block 的區別
 P1 你知道什麼是 box model
 P1 你知道 position 的所有屬性及其差別
 P2 你知道 :hover, :before, :after
 P2 你知道 :nth-child 的各種用法
 P2 你熟悉 CSS selector，可以輕鬆選到想選到的元素<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<span id="more"></span>
<h2 id="什麼是-CSS？"><a href="#什麼是-CSS？" class="headerlink" title="什麼是 CSS？"></a>什麼是 CSS？</h2><p>Cascading Style Sheets 階層式樣式表</p>
<h2 id="如何引入-CSS"><a href="#如何引入-CSS" class="headerlink" title="如何引入 CSS"></a>如何引入 CSS</h2><h3 id="使用內部-CSS"><a href="#使用內部-CSS" class="headerlink" title="使用內部 CSS"></a>使用內部 CSS</h3><ol>
<li>直接在 body 的元素內加上 <code>style=&quot;&quot;</code></li>
</ol>
<pre class="line-numbers language-htmlmixed" data-language="htmlmixed"><code class="language-htmlmixed">&lt;html&gt;
  &lt;head&gt;
    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;
    &lt;title&gt;網頁前端&lt;&#x2F;title&gt;
  &lt;&#x2F;head&gt;
  &lt;body&gt;
    &lt;!--   文字變紅色 --&gt;
    &lt;div style&#x3D;&quot;color: red;&quot;&gt;
      網頁前端課程
    &lt;&#x2F;div&gt;

  &lt;&#x2F;body&gt;
&lt;&#x2F;html&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ol start="2">
<li>在 head 裡加上 <code>&lt;style&gt;</code> 標籤：</li>
</ol>
<pre class="line-numbers language-htmlmixed" data-language="htmlmixed"><code class="language-htmlmixed">&lt;html&gt;
  &lt;head&gt;
    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;
    &lt;title&gt;網頁前端&lt;&#x2F;title&gt;
        &lt;style&gt;
          div &#123;
            color: blue;
          &#125;
        &lt;&#x2F;style&gt;
  &lt;&#x2F;head&gt;
  &lt;body&gt;
    &lt;!--   文字變藍色 --&gt;
    &lt;div&gt;
      網頁前端課程
    &lt;&#x2F;div&gt;
  &lt;&#x2F;body&gt;
&lt;&#x2F;html&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="使用外部-CSS"><a href="#使用外部-CSS" class="headerlink" title="使用外部 CSS"></a>使用外部 CSS</h3><p>使用 <code>&lt;link&gt;</code> 元素，從外部引用 CSS 檔，這是一個空白的元素（不需要結束標記）：</p>
<ul>
<li><p><code>href</code>：指定 CSS 檔的路徑，通常放在 css 或 styles 資料夾</p>
</li>
<li><p><code>rel</code>：表示 HTML 頁面與連結其連結檔案的關係，連到 CSS 檔其值應為 stylesheet</p>
<p>將 style.css 引入 index.html 為例：</p>
</li>
</ul>
<pre class="line-numbers language-htmlmixed" data-language="htmlmixed"><code class="language-htmlmixed">&lt;!DOCTYPE html&gt;
&lt;html lang&#x3D;&quot;en&quot;&gt;
&lt;head&gt;
  &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;
  &lt;meta name&#x3D;&quot;viewport&quot; content&#x3D;&quot;width&#x3D;device-width, initial-scale&#x3D;1.0&quot;&gt;
  &lt;title&gt;網頁前端&lt;&#x2F;title&gt;
    &lt;link rel&#x3D;&quot;stylesheet&quot; href&#x3D;&quot;css&#x2F;style.css&quot; &gt;
&lt;&#x2F;head&gt;
&lt;body&gt;
  網頁前端課程
&lt;&#x2F;body&gt;
&lt;&#x2F;html&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>內部引入的兩種方法，因不易維護而較少使用。使用外部引入的優點如下：</p>
<ol>
<li>將內容和外觀分開，結構較清楚</li>
<li>可在不同頁面使用同一個樣式規則，不需修改每個檔案，便於維護</li>
</ol>
<h2 id="CSS-Selector"><a href="#CSS-Selector" class="headerlink" title="CSS Selector"></a>CSS Selector</h2><p>利用 CSS 選取器，可將規則套用在 HTML 文件的特定元素上，寫法如下：</p>
<pre class="line-numbers language-htmlmixed" data-language="htmlmixed"><code class="language-htmlmixed">&lt;!-- 選取器 --&gt;
selector &#123;
  &lt;!--   宣告（分成屬性和值兩個部分） --&gt;
  attribute: value;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="全域選擇器"><a href="#全域選擇器" class="headerlink" title="全域選擇器"></a>全域選擇器</h3><ul>
<li>Universal Selector：套用到文件的所有元素。</li>
</ul>
<pre class="line-numbers language-htmlmixed" data-language="htmlmixed"><code class="language-htmlmixed">&lt;!-- 所有背景均為藍色 --&gt;
* &#123;
  background: blue
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="標籤選取器"><a href="#標籤選取器" class="headerlink" title="標籤選取器"></a>標籤選取器</h3><ul>
<li>找出符合的元素名稱。</li>
</ul>
<pre class="line-numbers language-htmlmixed" data-language="htmlmixed"><code class="language-htmlmixed">&lt;!-- 將所有 &lt;h3&gt; 元素套用該樣式 --&gt;
h3 &#123;
  color: red
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="類別選取器"><a href="#類別選取器" class="headerlink" title="類別選取器"></a>類別選取器</h3><ul>
<li>CLASS Selector：找出 class 屬性值符合句號後之值的元素。</li>
</ul>
<pre class="line-numbers language-htmlmixed" data-language="htmlmixed"><code class="language-htmlmixed">&lt;!-- 找出所有 class 屬性之值為 note 的元素 --&gt;
.note &#123;&#125;

&lt;!-- 找出所有 class 屬性之值為 note 的 &lt;h3&gt; 元素 --&gt;
h3.note&#123;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="ID-選取器"><a href="#ID-選取器" class="headerlink" title="ID 選取器"></a>ID 選取器</h3><ul>
<li>和 class 的最大不同，在於整個網頁上 id 只能有一個。</li>
</ul>
<pre class="line-numbers language-htmlmixed" data-language="htmlmixed"><code class="language-htmlmixed">&lt;!-- 找出 id 為 name 的元素 --&gt;
#name &#123;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h3 id="子元素選取器"><a href="#子元素選取器" class="headerlink" title="子元素選取器"></a>子元素選取器</h3><ul>
<li>利用 <code>&gt;</code> 區隔兩個元素，表示在有父子關係的元素才會套用。</li>
<li>與後代選取器的差異在於中間不能插入其他元素。</li>
</ul>
<pre class="line-numbers language-htmlmixed" data-language="htmlmixed"><code class="language-htmlmixed">&lt;!-- 找出任何身為 &lt;li&gt; 元素之子的 &lt;a&gt; 元素 --&gt;
li &gt; a &#123;
  color: red;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="後代選取器"><a href="#後代選取器" class="headerlink" title="後代選取器"></a>後代選取器</h3><ul>
<li>利用空白鍵區隔兩個元素。</li>
<li>中間可堆疊其他元素。</li>
</ul>
<pre class="line-numbers language-htmlmixed" data-language="htmlmixed"><code class="language-htmlmixed">&lt;!-- 找出任何位在 &lt;li&gt; 元素內的 &lt;a&gt; 元素 --&gt;
li a &#123;
  color: yellow;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="偽類選取器"><a href="#偽類選取器" class="headerlink" title="偽類選取器"></a>偽類選取器</h3><blockquote>
<p><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQ1NTL1BzZXVkby1jbGFzc2Vz">Pseudo-classes 偽類一覽表<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
<p>以 hover（滑鼠滑入的樣式）為例：</p>
<pre class="line-numbers language-htmlmixed" data-language="htmlmixed"><code class="language-htmlmixed">&lt;!-- 當滑鼠移至任何 a 連結上時，背景會變成黃色 --&gt;
a:hover &#123;
  background: yellow
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>參考資料：<span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2xzLmNvbS9jc3NyZWYvY3NzX3NlbGVjdG9ycy5hc3A=">CSS Selectors Reference - W3Schools<i class="fa fa-external-link-alt"></i></span></p>
<h3 id="nth-child-n-選擇器"><a href="#nth-child-n-選擇器" class="headerlink" title="nth-child(n) 選擇器"></a>nth-child(n) 選擇器</h3><p>參考資料：<span class="exturl" data-url="aHR0cHM6Ly93d3cuaXRyZWFkMDEuY29tL2NvbnRlbnQvMTU0MTEwNTgyMy5odG1s">CSS選取第幾個標籤元素：nth-child(n)、first-child、last-child<i class="fa fa-external-link-alt"></i></span></p>
<h3 id="CSS-Selector-的權重計算方式"><a href="#CSS-Selector-的權重計算方式" class="headerlink" title="CSS Selector 的權重計算方式"></a>CSS Selector 的權重計算方式</h3><p>當選擇器作用在同一元素上時：</p>
<ul>
<li>兩個權重不同：權重值高的規則生效</li>
<li>兩個權重相同：後面覆蓋前面</li>
</ul>
<p>權重由高到低如下：</p>
<pre class="line-numbers language-none"><code class="language-none">!important &gt; inline style &gt; id &gt; class &gt; tag &gt; *<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>各類選擇器：</p>
<ul>
<li>!important：權重最高，但在實際開發過程，幾乎不會使用 !important 來覆蓋其他規則</li>
<li>inline style 行內樣式<ul>
<li>權重為 1-0-0-0</li>
</ul>
</li>
<li>id 選擇器（<code>#</code>）<ul>
<li>權重為 0-1-0-0</li>
</ul>
</li>
<li>class 類別選擇器、pseudo class 偽類選擇器、attribute 屬性選擇器<ul>
<li>權重為 0-0-1-0</li>
</ul>
</li>
<li>tag 標籤選擇器、pseudo elements 偽元素選擇器<ul>
<li>權重為 0-0-0-1</li>
</ul>
</li>
<li>萬用選擇器（<code>*</code>）：選擇所有元素<ul>
<li>預設為 0-0-0-0</li>
</ul>
</li>
</ul>
<p>參考資料：</p>
<ol>
<li><span class="exturl" data-url="aHR0cHM6Ly9tdWtpLnR3L3RlY2gvY3NzLXNwZWNpZmljaXR5LWRvY3VtZW50Lw==">強烈推薦收藏好物 – CSS Specificity (CSS 權重一覽)<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC81YWZhOThiZjUxODgyNTQyYzgzMmU1ZWM=">你對 CSS 權重真的足夠了解嗎？<i class="fa fa-external-link-alt"></i></span></li>
</ol>
<hr>
<h2 id="box-model-盒模型"><a href="#box-model-盒模型" class="headerlink" title="box model 盒模型"></a>box model 盒模型</h2><p>盒模型又稱為區塊模型，意思是所有 HTML 元素均可被視為一個盒子。我們能透過 CSS 控制內距、外距、邊框屬性，來調整盒子的外觀及位置。</p>
<p><img src="https://i.imgur.com/HzfLkAY.png" alt="box model"></p>
<p>盒模型的組成由外而內分別為：</p>
<ul>
<li>margin（外邊距）</li>
<li>border（邊框）</li>
<li>padding（內邊距）</li>
<li>content（內容）</li>
</ul>
<h3 id="box-sizing-屬性"><a href="#box-sizing-屬性" class="headerlink" title="box-sizing 屬性"></a>box-sizing 屬性</h3><p>透過這個屬性，我們能控制盒模型長寬的計算方式。</p>
<p>以長寬同樣為 150px 的 box 為例：</p>
<iframe height="265" style="width: 100%;" scrolling="no" title="Box Model" src="https://codepen.io/heidiliu2020/embed/GRoeoaO?height=265&theme-id=dark&default-tab=html,result" frameborder="no" allowtransparency="true" allowfullscreen="true">
  See the Pen <a href='https://codepen.io/heidiliu2020/pen/GRoeoaO'>Box Model</a> by Heidi-Liu
  (<a href='https://codepen.io/heidiliu2020'>@heidiliu2020</a>) on <a href='https://codepen.io'>CodePen</a>.
</iframe>

<p>我們可以使用 DevTool 看盒模型：</p>
<ul>
<li><code>box-sizing: content-box</code>：為預設屬性。「內容」就等於長寬度。</li>
</ul>
<p><img src="https://i.imgur.com/euaGSlb.png" alt="content-box"><br>加上 border 和 padding 會導致元素實際大小比設定值還大。</p>
<ul>
<li><code>box-sizing: border-box</code>：「邊框到邊框之間的範圍」等於長寬度。</li>
</ul>
<p><img src="https://i.imgur.com/BdytGoL.png" alt="border-box"><br>此時長寬設定會套用到 border、padding、content。</p>
<p>而 margin 在兩種盒模型都是額外加上去的，並不會影響盒子長寬。</p>
<p>參考資料：</p>
<ol>
<li><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvemgtQ04vZG9jcy9XZWIvR3VpZGUvQ1NTL0dldHRpbmdfc3RhcnRlZC9Cb3hlcw==">盒模型- Web 开发者指南| MDN<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cud2liaWJpLmNvbS9pbmZvLnBocD90aWQ9Q1NTX2JveF9tb2RlbF8lRTclOUIlOTIlRTUlQUQlOTAlRTYlQTglQTElRTUlOUUlOEI=">CSS box model 盒子模型- Wibibi<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9tZWRpdW0uY29tL3Bhc3Npb25yZWQvY3NzJUU2JThFJTkyJUU3JTg5JTg4JUU1JTlGJUJBJUU3JUE0JThFJUU4JUE3JTgwJUU1JUJGJUI1LSVFNCVCOCU4MC1ib3gtbW9kZWwtMTNhOWEzZGZlODRm">CSS排版基礎觀念（一）—— box-model<i class="fa fa-external-link-alt"></i></span></li>
</ol>
<hr>
<h2 id="display-inline-block-跟-inline-block-的差別"><a href="#display-inline-block-跟-inline-block-的差別" class="headerlink" title="display: inline, block 跟 inline-block 的差別"></a>display: inline, block 跟 inline-block 的差別</h2><p>display 是 CSS 中用於控制排版的屬性。每個 HTML 元素都有一個預設的 display 值，大部分的元素可分為 block（區塊元素）和 inline（行內元素）兩類：</p>
<h3 id="block：區塊元素"><a href="#block：區塊元素" class="headerlink" title="block：區塊元素"></a>block：區塊元素</h3><ul>
<li>元素寬度預設會占滿整行</li>
<li>可設定寬高/margin/padding，但會占滿一整行</li>
<li>常見區塊元素：div、h1~h6、p、ul、li 等</li>
</ul>
<h3 id="inline：行內元素"><a href="#inline：行內元素" class="headerlink" title="inline：行內元素"></a>inline：行內元素</h3><ul>
<li>元素可在同一行內呈現</li>
<li>無法設定寬高，元素的寬高靠內容物撐開</li>
<li>仍可設定上下 margin/padding，但字仍在行內，排版不會隨設定改變</li>
<li>常見行內元素：a、span、input、img 等</li>
</ul>
<h3 id="inline-block：行內區塊元素"><a href="#inline-block：行內區塊元素" class="headerlink" title="inline-block：行內區塊元素"></a>inline-block：行內區塊元素</h3><ul>
<li>以 inline 方式呈現：可水平排列</li>
<li>擁有 block 的屬性：可設定元素的寬高/margin/padding</li>
</ul>
<h3 id="以長寬同樣為-100px-的-box-為例："><a href="#以長寬同樣為-100px-的-box-為例：" class="headerlink" title="以長寬同樣為 100px 的 box 為例："></a>以長寬同樣為 100px 的 box 為例：</h3><h4 id="display-block"><a href="#display-block" class="headerlink" title="display: block"></a><code>display: block</code></h4><p><img src="https://i.imgur.com/jx5DjYZ.png" alt="block"></p>
<h4 id="display-inline"><a href="#display-inline" class="headerlink" title="display: inline"></a><code>display: inline</code></h4><p><img src="https://i.imgur.com/SBjWPnH.png" alt="inline"></p>
<h4 id="display-inline-block"><a href="#display-inline-block" class="headerlink" title="display: inline-block"></a><code>display: inline-block</code></h4><p><img src="https://i.imgur.com/I4pokc3.png" alt="inline-block"></p>
<h3 id="以文字排版為例："><a href="#以文字排版為例：" class="headerlink" title="以文字排版為例："></a>以文字排版為例：</h3><iframe height="265" style="width: 100%;" scrolling="no" title="Box Model" src="https://codepen.io/heidiliu2020/embed/xxZBNPR?height=265&theme-id=dark&default-tab=html,result" frameborder="no" allowtransparency="true" allowfullscreen="true">
  See the Pen <a href='https://codepen.io/heidiliu2020/pen/xxZBNPR'>display</a> by Heidi-Liu
  (<a href='https://codepen.io/heidiliu2020'>@heidiliu2020</a>) on <a href='https://codepen.io'>CodePen</a>.
</iframe>

<h3 id="Display-實戰篇：以製作圖文小卡為例"><a href="#Display-實戰篇：以製作圖文小卡為例" class="headerlink" title="Display 實戰篇：以製作圖文小卡為例"></a>Display 實戰篇：以製作圖文小卡為例</h3><iframe height="327" style="width: 100%;" scrolling="no" title="Display 實戰：切出圖文小卡" src="https://codepen.io/heidiliu2020/embed/VweNLwm?height=327&theme-id=dark&default-tab=css,result" frameborder="no" allowtransparency="true" allowfullscreen="true">
  See the Pen <a href='https://codepen.io/heidiliu2020/pen/VweNLwm'>Display 實戰：切出圖文小卡</a> by Heidi-Liu
  (<a href='https://codepen.io/heidiliu2020'>@heidiliu2020</a>) on <a href='https://codepen.io'>CodePen</a>.
</iframe>

<p>參考資料：</p>
<ol>
<li><span class="exturl" data-url="aHR0cHM6Ly9tZWRpdW0uY29tL0B3ZW5keTE5OTI4OC9jc3MlRTYlOTUlOTklRTUlQUQlQjgtJUU5JTk3JTlDJUU2JTk2JUJDZGlzcGxheS1pbmxpbmUtaW5saW5lLWJsb2NrLWJsb2NrJUU3JTlBJTg0JUU1JUI3JUFFJUU1JTg4JUE1LTEwMzRmMzhlZGE4Mg==">CSS教學-關於display:inline、block、inline-block的差別<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9pdGhlbHAuaXRob21lLmNvbS50dy9hcnRpY2xlcy8xMDIwNDk1Ng==">金魚都能懂網頁設計入門 : 網頁兩大主角 (鐵人賽第十天)<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly96aC10dy5sZWFybmxheW91dC5jb20vZGlzcGxheS5odG1s">關於”display” 屬性 - CSS<i class="fa fa-external-link-alt"></i></span></li>
</ol>
<hr>
<h2 id="Position-屬性"><a href="#Position-屬性" class="headerlink" title="Position 屬性"></a>Position 屬性</h2><ul>
<li>position 屬性可用來指定元素定位方式，以進行版面配置。</li>
<li>當我們使用定位元素時，若元素方框重疊，可搭配 z-index 屬性設定元素堆疊順序。</li>
</ul>
<h3 id="static：正常流向"><a href="#static：正常流向" class="headerlink" title="static：正常流向"></a>static：正常流向</h3><ul>
<li>為預設值。在瀏覽器中會依照預設配置，由上而下自動排列</li>
</ul>
<h3 id="relative：相對定位"><a href="#relative：相對定位" class="headerlink" title="relative：相對定位"></a>relative：相對定位</h3><ul>
<li>以「原本顯示的位置」作為基準，且該元素原本所佔的空間仍會保留</li>
</ul>
<h3 id="absolute：絕對定位"><a href="#absolute：絕對定位" class="headerlink" title="absolute：絕對定位"></a>absolute：絕對定位</h3><ul>
<li>跳脫排版流，不會影響頁面其他元素</li>
<li>以「基準元素」左上角為起點，進行絕對位移。基準元素是往上層找的「第一個 position 不是 static 的元素」，才可作為定位點</li>
<li>若沒有指定基準元素，預設是以 body 元素（整個視窗）左上角為起點</li>
</ul>
<h3 id="fixed：固定定位"><a href="#fixed：固定定位" class="headerlink" title="fixed：固定定位"></a>fixed：固定定位</h3><ul>
<li>跳脫排版流。是一種絕對定位，同樣不影響其他元素</li>
<li>將元素固定在瀏覽器視窗的相對位置，捲動頁面時仍會在固定位置</li>
</ul>
<h3 id="以文字排版為例：-1"><a href="#以文字排版為例：-1" class="headerlink" title="以文字排版為例："></a>以文字排版為例：</h3><iframe height="265" style="width: 100%;" scrolling="no" title="定位元素：relative, absolute, fixed" src="https://codepen.io/heidiliu2020/embed/BajbgEK?height=265&theme-id=dark&default-tab=html,result" frameborder="no" allowtransparency="true" allowfullscreen="true">
  See the Pen <a href='https://codepen.io/heidiliu2020/pen/BajbgEK'>定位元素：relative, absolute, fixed</a> by Heidi-Liu
  (<a href='https://codepen.io/heidiliu2020'>@heidiliu2020</a>) on <a href='https://codepen.io'>CodePen</a>.
</iframe>

<h3 id="Position-實戰篇：以製作彈窗為例"><a href="#Position-實戰篇：以製作彈窗為例" class="headerlink" title="Position 實戰篇：以製作彈窗為例"></a>Position 實戰篇：以製作彈窗為例</h3><iframe height="265" style="width: 100%;" scrolling="no" title="Position 實戰：製作彈窗" src="https://codepen.io/heidiliu2020/embed/xxZBobX?height=265&theme-id=dark&default-tab=css,result" frameborder="no" allowtransparency="true" allowfullscreen="true">
  See the Pen <a href='https://codepen.io/heidiliu2020/pen/xxZBobX'>Position 實戰：製作彈窗</a> by Heidi-Liu
  (<a href='https://codepen.io/heidiliu2020'>@heidiliu2020</a>) on <a href='https://codepen.io'>CodePen</a>.
</iframe>

<p>參考資料：</p>
<ol>
<li><span class="exturl" data-url="aHR0cHM6Ly96aC10dy5sZWFybmxheW91dC5jb20vcG9zaXRpb24uaHRtbA==">關於position 屬性 - 學習CSS 版面配置<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cud2liaWJpLmNvbS9pbmZvLnBocD90aWQ9MTU2">CSS position 位置屬性（定位） - Wibibi<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9tZWRpdW0uY29tL3VpLXV4JUU3JUI3JUI0JUU1JThBJTlGJUU1JTlEJThBL3Bvc2l0aW9uLSVFNSVCMSVBQyVFNiU4MCVBNyVFNyU5QSU4NCVFNSU5RiVCQSVFNyVBNCU4RSVFNiVBNiU4MiVFNSVCRiVCNS01OTMxMjU0ZTUyMDM=">position 屬性的基礎概念 - Medium<i class="fa fa-external-link-alt"></i></span></li>
</ol>
<hr>
<h2 id="水平置中："><a href="#水平置中：" class="headerlink" title="水平置中："></a>水平置中：</h2><h3 id="margin-auto"><a href="#margin-auto" class="headerlink" title="margin: auto;"></a><code>margin: auto;</code></h3><p>設定左右外邊距（margin-left 與 margin-right）為 auto 可達成水平居中。</p>
<p>參考資料：<span class="exturl" data-url="aHR0cHM6Ly96aC10dy5sZWFybmxheW91dC5jb20vbWFyZ2luLWF1dG8uaHRtbA==">學習 CSS 版面配置<i class="fa fa-external-link-alt"></i></span></p>
<h2 id="補充：盒模型為什麼無法貼邊？"><a href="#補充：盒模型為什麼無法貼邊？" class="headerlink" title="補充：盒模型為什麼無法貼邊？"></a>補充：盒模型為什麼無法貼邊？</h2><p>盒模型在瀏覽器中會有默認的外邊距。此時只要利用 CSS Reset 即可解決空隙問題。</p>
<h3 id="CSS-Reset"><a href="#CSS-Reset" class="headerlink" title="CSS Reset"></a>CSS Reset</h3><ul>
<li>方法一：利用全域選擇器</li>
</ul>
<pre class="line-numbers language-htmlmixed" data-language="htmlmixed"><code class="language-htmlmixed">* &#123;
  margin: 0;
  padding: 0;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>方法二：直接對元素進行設定</li>
</ul>
<pre class="line-numbers language-htmlmixed" data-language="htmlmixed"><code class="language-htmlmixed">&#x2F;* 設定基底字體大小 *&#x2F;
html &#123;
  font-size: 12px;
&#125;
&#x2F;* 取消預設空隙 *&#x2F;
html, body, h1, h2, h3, h4, p&#123;
  padding: 0;
  margin: 0 ;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="CSS-Reset-與-CSS-normalize"><a href="#CSS-Reset-與-CSS-normalize" class="headerlink" title="CSS Reset 與 CSS normalize"></a>CSS Reset 與 CSS normalize</h3><ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9tZXllcndlYi5jb20vZXJpYy90b29scy9jc3MvcmVzZXQv">CSS Reset<i class="fa fa-external-link-alt"></i></span></li>
</ul>
<p>優點：統整、重置了各個瀏覽器的樣式設定。<br>缺點：必須全部重新做設定，比較沒有彈性。且在使用開發者工具時，會看到一大坨的繼承鏈（inheritance chain）。</p>
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9uZWNvbGFzLmdpdGh1Yi5pby9ub3JtYWxpemUuY3NzLw==">Normalize.css<i class="fa fa-external-link-alt"></i></span></li>
</ul>
<p>最大的特色就是保留原本預設 HTML 標籤的樣式，僅針對不同瀏覽器與各版本間不相容的標籤進行些微調整。</p>
<p>參考資料：<br><span class="exturl" data-url="aHR0cHM6Ly9pdGhlbHAuaXRob21lLmNvbS50dy9hcnRpY2xlcy8xMDE5NjUyOA==">Day21：小事之CSS Reset 與CSS normalize<i class="fa fa-external-link-alt"></i></span></p>
<h2 id="切版注意事項"><a href="#切版注意事項" class="headerlink" title="切版注意事項"></a>切版注意事項</h2><h3 id="盡量不要把高度寫死"><a href="#盡量不要把高度寫死" class="headerlink" title="盡量不要把高度寫死"></a>盡量不要把高度寫死</h3><p>例如：.header、.content、.footer 不用寫死高度，以內容撐出高度，並用 padding 產生留白，往後若更動內容才不易跑版。</p>
<h3 id="如何垂直置中？"><a href="#如何垂直置中？" class="headerlink" title="如何垂直置中？"></a>如何垂直置中？</h3><ul>
<li>加上 padding 留白</li>
<li>使用行高，但僅限只有一行字的時候才能使用</li>
</ul>
<p>原理：「DIV 區塊的高度設定 = 文字的 line-height（行高）」</p>
<h3 id="如何水平置中？"><a href="#如何水平置中？" class="headerlink" title="如何水平置中？"></a>如何水平置中？</h3><ul>
<li>文字水平置中：<code>text-align: center</code> </li>
<li>區塊元素本身置中：<code>margin: 0 auto</code></li>
</ul>
<hr>
<h2 id="如何讓-img-自適應容器大小"><a href="#如何讓-img-自適應容器大小" class="headerlink" title="如何讓 img 自適應容器大小"></a>如何讓 img 自適應容器大小</h2><p>不管容器有多大，只要將 img 的寬高設定成 100 %（這裡的100%是相對於父級寬高而言）就能自適應容器大小。</p>
<p>參考資料：<span class="exturl" data-url="aHR0cHM6Ly93d3cuaXRyZWFkMDEuY29tL2NvbnRlbnQvMTU0NjY3MzI1MC5odG1s">css讓圖片自適應容器（div）大小- IT閱讀 - ITREAD01.COM<i class="fa fa-external-link-alt"></i></span></p>
<h2 id="CSS-屬性用法紀錄"><a href="#CSS-屬性用法紀錄" class="headerlink" title="CSS 屬性用法紀錄"></a>CSS 屬性用法紀錄</h2><ol>
<li><p><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmphLWFueXRoaW5nLmNvbS8yMDE4LzAxLzE3L2Nzcy0lRTglQUUlOTMlRTklODElOEUlRTklOTUlQjclRTclOUElODQlRTYlOTYlODclRTUlQUQlOTclRTklOUElQjElRTglOTclOEYlRTglQUUlOEEtY3NzLXRvLW1ha2UtdGV4dC1vdmVyZmxvdy1lbGVnYW50LWlzLXdpdGgtZWxsaXBzZXMtc2luZ2xlLW9yLW11bHRpcGxlLWxpbmVzLw==">CSS 限制字數/行數，讓過長的文字隱藏變”…”<i class="fa fa-external-link-alt"></i></span></p>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token comment">/* 修飾過長的文字，ellipsis：用點點點來表示被切斷的字串 */</span>
<span class="token property">text-overflow</span><span class="token punctuation">:</span> ellipsis<span class="token punctuation">;</span>
<span class="token comment">/* 不進行換行 */</span>
<span class="token property">white-space</span><span class="token punctuation">:</span> nowrap<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNjcGx1cy5jb20vY29udGVudC9jc3MzLWJveC1zaGFkb3c=">box-shadow 屬性的參數<i class="fa fa-external-link-alt"></i></span></p>
<pre class="line-numbers language-css" data-language="css"><code class="language-css">  <span class="token comment">/* 投影方式 X軸偏移 Y軸偏移 模糊半徑 擴展半徑 顏色&#125;*/</span>
<span class="token property">box-shadow</span><span class="token punctuation">:</span>inset x-offset y-offset blur-radius spread-radius color<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
</li>
<li><p><span class="exturl" data-url="aHR0cHM6Ly93d3cubWlud3QuY29tL3dlYmRlc2lnbi1kZXYvY3NzLzIxNTM4Lmh0bWw=">[教學] CSS3 半透明背景的四種設定方法 (RGBa、HSLa、Opacity、HEX)<i class="fa fa-external-link-alt"></i></span></p>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token property">opacity</span><span class="token punctuation">:</span> x
<span class="token comment">/* x　取值 0~1，該區塊元素均會調整透明度 */</span>
<span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">rgba</span><span class="token punctuation">(</span>red<span class="token punctuation">,</span> green<span class="token punctuation">,</span> blue<span class="token punctuation">,</span> alpha<span class="token punctuation">)</span>
<span class="token comment">/* alpha 代表透明度，取值 0~1 */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>決定換行的屬性</p>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token comment">/* 預設不換行 */</span>
<span class="token property">flex-wrap</span><span class="token punctuation">:</span> no-wrap<span class="token punctuation">;</span>
<span class="token comment">/* 換行 */</span>
<span class="token property">flex-wrap</span><span class="token punctuation">:</span> wrap<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>文字跑板問題</p>
</li>
</ol>
<ul>
<li><code>word-break</code>：文字斷行效果</li>
</ul>
<p><code>word-break: break-all;</code>：遇到邊界就換行</p>
<ul>
<li><code>white-space</code>：如何處理元素內的空白</li>
</ul>
<p><code>white-space: pre-line;</code>：自動合併多個空白，但保留換行符號</p>
]]></content>
      <categories>
        <category>Front-End</category>
        <category>HTML &amp; CSS</category>
      </categories>
      <tags>
        <tag>Front-End</tag>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>【學習筆記】如何使用 Docusaurus &amp; React 快速架設靜態網站</title>
    <url>/docusaurus-react-blog/</url>
    <content><![CDATA[<p><img src="https://i.imgur.com/7UpoFaC.jpg"></p>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>這是繼 HackMD 和 Hexo 之後，找到的下一個據點，打從第一眼看到 docs 版面配置，就在心底讚嘆：「這不就是我一直想做的功能嗎！」</p>
<p>能夠快速把過去所學的知識打包起來，並以有效率的方式整理，適用於內容驅動型的網站，並且內建支援夜間模式轉換功能。此外，使用的還是快被自己遺忘 React.js 語法，簡直一石多鳥，相見恨晚。</p>
<p>於是乎，這篇筆記就誕生了。</p>
<span id="more"></span>

<p>主要會介紹如何使用 Docusaurus 搭配 React 快速架設個人網站。文章可分為下列幾個部分：</p>
<ul>
<li>前言</li>
<li>什麼是 Docusaurus？<ul>
<li>為什麼選擇 Docusaurus？</li>
</ul>
</li>
<li>環境建置</li>
<li>專案架構<ul>
<li>Docusaurus 設定檔</li>
<li>建立模板頁面</li>
<li>支援 TypeScript 語法</li>
</ul>
</li>
</ul>
<h2 id="什麼是-Docusaurus？"><a href="#什麼是-Docusaurus？" class="headerlink" title="什麼是 Docusaurus？"></a>什麼是 Docusaurus？</h2><p><img src="https://i.imgur.com/BNVL8zg.png"></p>
<blockquote>
<p>Document（文件）+ saurus（恐龍）= Docusaurus<br>一直覺得這名字很難記，透過拆字希望能幫助記憶:3</p>
</blockquote>
<p><span class="exturl" data-url="aHR0cHM6Ly9kb2N1c2F1cnVzLmlvL2RvY3M=">Docusaurus<i class="fa fa-external-link-alt"></i></span> 是由 <span class="exturl" data-url="aHR0cHM6Ly9vcGVuc291cmNlLmZiLmNvbS8=">Facebook 推出<i class="fa fa-external-link-alt"></i></span>的開源靜態網站生成工具，以 React 技術構建，提供快速建置以文檔內容為核心的網站。</p>
<h3 id="為什麼選擇-Docusaurus？"><a href="#為什麼選擇-Docusaurus？" class="headerlink" title="為什麼選擇 Docusaurus？"></a>為什麼選擇 Docusaurus？</h3><p><img src="https://i.imgur.com/UuV6bh4.png"></p>
<p>開頭有提到 Docusaurus 幾項特點，再參照官網說明後整理如下：</p>
<ul>
<li>支援 Markdown 擴充格式 <span class="exturl" data-url="aHR0cHM6Ly9tZHhqcy5jb20v">MDX<i class="fa fa-external-link-alt"></i></span></li>
<li>可在文檔中編寫 <span class="exturl" data-url="aHR0cHM6Ly96aC1oYW50LnJlYWN0anMub3JnL2RvY3MvaW50cm9kdWNpbmctanN4Lmh0bWw=">JSX<i class="fa fa-external-link-alt"></i></span> 語法，並渲染為 React 的 component</li>
<li>支援 i18n，可使用 <span class="exturl" data-url="aHR0cHM6Ly9jcm93ZGluLmNvbS8=">Crowdin<i class="fa fa-external-link-alt"></i></span> 將文檔翻譯成 70 多種語言</li>
<li>文檔版本控制</li>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cuYWxnb2xpYS5jb20v">algolia<i class="fa fa-external-link-alt"></i></span> 搜索功能</li>
<li>實際應用範例：<span class="exturl" data-url="aHR0cHM6Ly9jcmVhdGUtcmVhY3QtYXBwLmRldi8=">Create React App<i class="fa fa-external-link-alt"></i></span>、<span class="exturl" data-url="aHR0cHM6Ly9yZWFjdG5hdGl2ZS5kZXYv">React Native<i class="fa fa-external-link-alt"></i></span>、<span class="exturl" data-url="aHR0cHM6Ly9ndWxwanMuY29tLw==">Gulp<i class="fa fa-external-link-alt"></i></span> 等，更多可參考<span class="exturl" data-url="aHR0cHM6Ly9kb2N1c2F1cnVzLmlvL3poLUNOL3Nob3djYXNl">官網列表<i class="fa fa-external-link-alt"></i></span></li>
</ul>
<h2 id="環境建置"><a href="#環境建置" class="headerlink" title="環境建置"></a>環境建置</h2><blockquote>
<p>詳細教學可參考<span class="exturl" data-url="aHR0cHM6Ly90dXRvcmlhbC5kb2N1c2F1cnVzLmlvL2RvY3MvaW50cm8=">官網連結<i class="fa fa-external-link-alt"></i></span>。</p>
</blockquote>
<p>步驟如下：</p>
<ol>
<li>初始化專案</li>
</ol>
<pre class="line-numbers language-none"><code class="language-none">$ npx @docusaurus&#x2F;init@latest init my-website classic
$ npx docusaurus --version<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<ol start="2">
<li>切換路徑至剛才建立好的專案底下</li>
</ol>
<pre class="line-numbers language-none"><code class="language-none">$ cd my-blog<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ol start="3">
<li>運行專案 </li>
</ol>
<pre class="line-numbers language-none"><code class="language-none">$ npm run start<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ol start="4">
<li>即可在 <code>http://localhost:3000/</code> 看到專案預設頁面如下，自動建立了首頁和 Tutorial、Blog 兩個文檔頁面： </li>
</ol>
<p><img src="https://i.imgur.com/4Ypjr15.png"></p>
<ol start="5">
<li>在部署前，需將網站資料打包到 <code>/build</code> 資料夾中，即可在 GitHub 等平台部署靜態網頁</li>
</ol>
<pre class="line-numbers language-none"><code class="language-none">$ npm run build<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h2 id="專案架構"><a href="#專案架構" class="headerlink" title="專案架構"></a>專案架構</h2><p>以下是官網提供的範例架構：</p>
<pre class="line-numbers language-none"><code class="language-none">my-website         &#x2F;&#x2F; 根目錄
├── blog           &#x2F;&#x2F; 部落格文章
│   ├── 2019-05-28-hola.md
│   ├── 2019-05-29-hello-world.md
│   └── 2020-05-30-welcome.md
├── docs           &#x2F;&#x2F; 文檔
│   ├── doc1.md
│   ├── doc2.md
│   ├── doc3.md
│   └── mdx.md
├── src
│   ├── css        &#x2F;&#x2F; 樣式管理
│   │   └── custom.css
│   └── pages      &#x2F;&#x2F; 頁面管理
│       ├── styles.module.css
│       └── index.js
├── static        &#x2F;&#x2F; 放置靜態檔案
│   └── img
├── docusaurus.config.js  &#x2F;&#x2F; 專案配置
├── package.json
├── README.md
├── sidebars.js           &#x2F;&#x2F; docs 側邊欄配置
└── yarn.lock<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>blog<ul>
<li>預設名稱：blog-examples-from-docusaurus)</li>
<li>路由：<code>/blog</code></li>
<li>存放 blog markdown 檔，也就是部落格文章</li>
<li>文檔名稱需符合 <code>yyyy-mm-dd-file-name.md</code></li>
</ul>
</li>
<li>docs<ul>
<li>預設名稱：docs-examples-from-docusaurus</li>
<li>路由：<code>/docs</code></li>
<li>存放 markdown 文檔</li>
</ul>
</li>
<li>src<ul>
<li>css<ul>
<li>custom.css 用來自定義樣式</li>
</ul>
</li>
<li>pages<ul>
<li>預設的 index.js 包含 Home Component</li>
<li>可用來新增頁面和對應路由，參考<span class="exturl" data-url="aHR0cHM6Ly9kb2N1c2F1cnVzLmlvL2RvY3MvY3JlYXRpbmctcGFnZXM=">官網教學<i class="fa fa-external-link-alt"></i></span></li>
</ul>
</li>
</ul>
</li>
<li>static<ul>
<li>存放靜態資源，例如圖片檔</li>
</ul>
</li>
<li>docusaurus.config.js<ul>
<li>網站配置設定檔</li>
<li>等同於 Docusaurus v1 中的 siteConfig.js 檔</li>
</ul>
</li>
<li>sidebars.js<ul>
<li>自定義 docs 側邊欄</li>
</ul>
</li>
</ul>
<p>接著開啟剛才建置完成的專案目錄，docs 資料夾內的文檔對應頁面如下：</p>
<p><img src="https://i.imgur.com/Rkpmx9z.png"></p>
<h3 id="Docusaurus-網站相關配置"><a href="#Docusaurus-網站相關配置" class="headerlink" title="Docusaurus 網站相關配置"></a>Docusaurus 網站相關配置</h3><p>其中 <span class="exturl" data-url="aHR0cHM6Ly9kb2N1c2F1cnVzLmlvL2RvY3MvZG9jdXNhdXJ1cy5jb25maWcuanM=">docusaurus.config.js<i class="fa fa-external-link-alt"></i></span> 這個檔案，主要用來設定框架配置：</p>
<h4 id="Required-fields-必要配置"><a href="#Required-fields-必要配置" class="headerlink" title="Required fields 必要配置"></a>Required fields 必要配置</h4><ul>
<li>網站名稱、連結、根目錄</li>
</ul>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  title<span class="token operator">:</span> <span class="token string">'Docusaurus'</span><span class="token punctuation">,</span>
  url<span class="token operator">:</span> <span class="token string">'https://docusaurus.io'</span><span class="token punctuation">,</span>
  baseUrl<span class="token operator">:</span> <span class="token string">'/'</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="Optional-fields-自選配置"><a href="#Optional-fields-自選配置" class="headerlink" title="Optional fields 自選配置"></a>Optional fields 自選配置</h4><ul>
<li>網站圖示、網站標語</li>
</ul>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  favicon<span class="token operator">:</span> <span class="token string">'/img/favicon.ico'</span><span class="token punctuation">,</span>
  tagline<span class="token operator">:</span>
    <span class="token string">'Docusaurus makes it easy to maintain Open Source documentation websites.'</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>i18n 多國語系</li>
</ul>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  i18n<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    defaultLocale<span class="token operator">:</span> <span class="token string">'zh-TW'</span><span class="token punctuation">,</span>     <span class="token comment">// 預設語系</span>
    locales<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'en'</span><span class="token punctuation">,</span> <span class="token string">'zh-TW'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>   <span class="token comment">// 語系配置</span>
    localeConfigs<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
      en<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
        label<span class="token operator">:</span> <span class="token string">'English'</span><span class="token punctuation">,</span>
        direction<span class="token operator">:</span> <span class="token string">'ltr'</span><span class="token punctuation">,</span>       <span class="token comment">// 閱讀方向為左到右</span>
      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
      <span class="token string">'zh-TW'</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
        label<span class="token operator">:</span> <span class="token string">'繁體中文（台灣）'</span><span class="token punctuation">,</span>
        direction<span class="token operator">:</span> <span class="token string">'ltr'</span><span class="token punctuation">,</span>
      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>GitHub 用戶、專案、主機名稱，用於專案部署</li>
</ul>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// Docusaurus' organization is facebook</span>
  organizationName<span class="token operator">:</span> <span class="token string">'facebook'</span><span class="token punctuation">,</span>
  projectName<span class="token operator">:</span> <span class="token string">'docusaurus'</span><span class="token punctuation">,</span>
 githubHost<span class="token operator">:</span> <span class="token string">'github.com'</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>自定義主題外觀：例如 navbar、footer</li>
</ul>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  themeConfig<span class="token operator">:</span> <span class="token punctuation">&#123;</span>              <span class="token comment">// 自定義主題配置</span>
    hideableSidebar<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>   <span class="token comment">// 側邊欄可否收起展開</span>
    colorMode<span class="token operator">:</span> <span class="token punctuation">&#123;</span>              <span class="token comment">// 深淺色配置</span>
      defaultMode<span class="token operator">:</span> <span class="token string">'light'</span><span class="token punctuation">,</span>
      disableSwitch<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
      respectPrefersColorScheme<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
      switchConfig<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
        darkIcon<span class="token operator">:</span> <span class="token string">'🌙'</span><span class="token punctuation">,</span>
        lightIcon<span class="token operator">:</span> <span class="token string">'\u2600'</span><span class="token punctuation">,</span>
        <span class="token comment">// React inline style object</span>
        <span class="token comment">// see https://reactjs.org/docs/dom-elements.html#style</span>
        darkIconStyle<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
          marginLeft<span class="token operator">:</span> <span class="token string">'2px'</span><span class="token punctuation">,</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
        lightIconStyle<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
          marginLeft<span class="token operator">:</span> <span class="token string">'1px'</span><span class="token punctuation">,</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    navbar<span class="token operator">:</span> <span class="token punctuation">&#123;</span>                 <span class="token comment">// 導覽列</span>
      title<span class="token operator">:</span> <span class="token string">'Site Title'</span><span class="token punctuation">,</span>    <span class="token comment">// 網站標題</span>
      logo<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
        alt<span class="token operator">:</span> <span class="token string">'Site Logo'</span><span class="token punctuation">,</span>
        src<span class="token operator">:</span> <span class="token string">'img/logo.svg'</span><span class="token punctuation">,</span>
      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
      items<span class="token operator">:</span> <span class="token punctuation">[</span>                <span class="token comment">// 導覽列 => docs, blog...等</span>
        <span class="token punctuation">&#123;</span>
          to<span class="token operator">:</span> <span class="token string">'docs/docusaurus.config.js'</span><span class="token punctuation">,</span>
          activeBasePath<span class="token operator">:</span> <span class="token string">'docs'</span><span class="token punctuation">,</span>
          label<span class="token operator">:</span> <span class="token string">'docusaurus.config.js'</span><span class="token punctuation">,</span>
          position<span class="token operator">:</span> <span class="token string">'left'</span><span class="token punctuation">,</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
        <span class="token comment">// ... other links</span>
      <span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    footer<span class="token operator">:</span> <span class="token punctuation">&#123;</span>               <span class="token comment">// 底部區塊配置</span>
      style<span class="token operator">:</span> <span class="token string">'dark'</span><span class="token punctuation">,</span>
      links<span class="token operator">:</span> <span class="token punctuation">[</span>
        <span class="token punctuation">&#123;</span>
          title<span class="token operator">:</span> <span class="token string">'Docs'</span><span class="token punctuation">,</span>
          items<span class="token operator">:</span> <span class="token punctuation">[</span>
            <span class="token punctuation">&#123;</span>
              label<span class="token operator">:</span> <span class="token string">'Docs'</span><span class="token punctuation">,</span>
              to<span class="token operator">:</span> <span class="token string">'docs/doc1'</span><span class="token punctuation">,</span>
            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
          <span class="token punctuation">]</span><span class="token punctuation">,</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
        <span class="token comment">// ... other links</span>
      <span class="token punctuation">]</span><span class="token punctuation">,</span>
      logo<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
        alt<span class="token operator">:</span> <span class="token string">'Facebook Open Source Logo'</span><span class="token punctuation">,</span>
        src<span class="token operator">:</span> <span class="token string">'https://docusaurus.io/img/oss_logo.png'</span><span class="token punctuation">,</span>
      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
      copyright<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Copyright © </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getFullYear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> Facebook, Inc.</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token comment">// You can also put own HTML here</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>plugins 插件</li>
</ul>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  plugins<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<ul>
<li>themes 主題</li>
</ul>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  themes<span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token comment">// 互動式程式碼編輯器</span>
    require<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'@docusaurus/theme-live-codeblock'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token comment">// 搜尋功能</span>
    require<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'@docusaurus/theme-search-algolia'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token comment">// 程式碼高亮顯示</span>
    require<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'@docusaurus/theme-classic'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>customFields：因 Docusaurus 不允許 <code>docusaurus.config.js</code> 檔案中存在未知欄位，可在此區塊自定義欄位</li>
</ul>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  customFields<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    admin<span class="token operator">:</span> <span class="token string">'endi'</span><span class="token punctuation">,</span>
    superman<span class="token operator">:</span> <span class="token string">'lol'</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>scripts：<code>&lt;script&gt;</code> 經過編譯後會插入 HTML 的 <code>&lt;head&gt;</code></li>
</ul>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  scripts<span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token comment">// String format.</span>
    <span class="token string">'https://docusaurus.io/script.js'</span><span class="token punctuation">,</span>
    <span class="token comment">// Object format.</span>
    <span class="token punctuation">&#123;</span>
      src<span class="token operator">:</span>
        <span class="token string">'https://cdnjs.cloudflare.com/ajax/libs/clipboard.js/2.0.0/clipboard.min.js'</span><span class="token punctuation">,</span>
      async<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token comment">// 是否同步</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h3 id="建立模板頁面"><a href="#建立模板頁面" class="headerlink" title="建立模板頁面"></a>建立模板頁面</h3><p><img src="https://i.imgur.com/7vcwgeU.png"></p>
<pre class="line-numbers language-none"><code class="language-none">---
id: intro
title: 啦啦啦
---

這是我的 *新文件内容<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>markdown 內容<br>將你的文檔以 .md 文件的形式添加到 /docs 文件夾中，並確保每個文件都有正確的 header<br>最簡單的標題如下<br>id 是連結名稱，例如 docs/intro.html<br>title 是瀏覽器頁面的標題</p>
<h3 id="支援-TypeScript-語法"><a href="#支援-TypeScript-語法" class="headerlink" title="支援 TypeScript 語法"></a>支援 TypeScript 語法</h3><ul>
<li>在初始化專案的語法最後，加上 <code>--typescript</code>：</li>
</ul>
<pre class="line-numbers language-none"><code class="language-none">npx @docusaurus&#x2F;init@latest init my-website classic --typescript<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ul>
<li>接著安裝 typescript 需要的相關套件：</li>
</ul>
<pre class="line-numbers language-none"><code class="language-none">npm install --save-dev typescript @docusaurus&#x2F;module-type-aliases @types&#x2F;react @types&#x2F;react-router-dom @types&#x2F;react-helmet @tsconfig&#x2F;docusaurus<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ul>
<li>在位於根目錄的 tsconfig.json 檔案中，新增以下內容：</li>
</ul>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token punctuation">&#123;</span>
  <span class="token string">"extends"</span><span class="token operator">:</span> <span class="token string">"@tsconfig/docusaurus/tsconfig.json"</span><span class="token punctuation">,</span>
  <span class="token string">"include"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"src/"</span><span class="token punctuation">]</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h2><blockquote>
<p>詳細可參考<span class="exturl" data-url="aHR0cHM6Ly9kb2N1c2F1cnVzLmlvL3poLUNOL2RvY3MvZGVwbG95bWVudCNkZXBsb3lpbmctdG8tZ2l0aHViLXBhZ2Vz">官網教學<i class="fa fa-external-link-alt"></i></span>。</p>
</blockquote>
<p>過去在部署 Hexo Blog 時，就曾寫過關於<span class="exturl" data-url="aHR0cHM6Ly9oYWNrbWQuaW8vQEhlaWRpLUxpdS9ub3RlLWhleG8tZ2l0aHViIyVFOSU4MyVBOCVFNyVCRCVCMiVFNSU4OCVCMC1HaXRIdWI=">如何將專案部署到 GitHub<i class="fa fa-external-link-alt"></i></span> 的筆記，這次嘗試在 Vercel 或 Netlify 平台進行部署，以及透過設定 DNS 紀錄，達成自動轉址功能，搜尋相關設定網路上其實也有不少大神分享，因此就不再作贅述。</p>
<p>最後，這是架設好的 <span class="exturl" data-url="aHR0cHM6Ly9oZWlkaWxpdS13aWtpLm5ldGxpZnkuYXBwLw==">docusaurus2 個人網站<i class="fa fa-external-link-alt"></i></span>，沒想到很久前一直卡關的 DNS 設定，這次竟然蠻順利就達成目的了！之後會陸續把過去寫的學習筆記整理過，再彙整到小恐龍上，期許自己能夠循序漸進，每天都比昨天的自己更進步一些。</p>
<h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9lZGR5Y2hhbmcubWUvZG9jdXNhdXJ1cy12Mi1pbnRybw==">Docusaurus 2 介紹與使用<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cuZ3VzaGljaWt1LmNuL3BsL3AzRHAvemgtdHc=">10 大靜態網站生成工具<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9jaGFybGVzZmVuZy5jbi9nYXRzYnktdnMtZG9jdXNhdXJ1cy8=">基于 React 的 CMS 框架对比：Docusaurus vs. Gatsby<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmFsYW53ZWkuY29tL2Jsb2cvMjAyMS8wMy8yMS9kb2N1c2F1cnVzLWdpdGh1Yi1kZXBsb3kv">Docusaurus 配置 GitHub Action 自动发布<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmFsYW50c2FpLm5ldC9wb3N0cy8yMDE4LzA3L21pZ3JhdGUtYmxvZy10by1zc2ctZGVtby1kZXZvcHMtOC1uZXRsaWZ5LWZyZWUtc3RhdGljLXNpdGUtaG9zdGluZy1zZXJ2aWNlI1dpektNT3V0bGluZV8xNTMwNDQ5Mjc1ODU0NDkx">[部落格改版學DevOps][08]netlify 超佛心的靜態網站hosting服務 - 不只做hosting還有更多<i class="fa fa-external-link-alt"></i></span></li>
</ul>
<p><a href="https://hackmd.io/xM0LI_7bSdSf8wGNiAbqcQ"><img src="https://hackmd.io/xM0LI_7bSdSf8wGNiAbqcQ/badge" alt="hackmd-github-sync-badge"></a></p>
]]></content>
      <categories>
        <category>Blog</category>
        <category>Docusaurus</category>
      </categories>
      <tags>
        <tag>React</tag>
        <tag>Docusaurus</tag>
        <tag>Blog</tag>
      </tags>
  </entry>
  <entry>
    <title>[week 3] 設定 ESLint：用來檢查語法的工具</title>
    <url>/eslint/</url>
    <content><![CDATA[<h2 id="什麼是-ESLint？"><a href="#什麼是-ESLint？" class="headerlink" title="什麼是 ESLint？"></a>什麼是 ESLint？</h2><p>ESLint（ECMAScript + lint）是用來檢查 JavaScript 程式碼的工具。可在 commit 前檢查語法錯誤、提示潛在的 bug，藉此有效提高程式碼質量，和統一基本的 coding style。</p>
<blockquote>
<p>參考資料：</p>
<ol>
<li><span class="exturl" data-url="aHR0cHM6Ly9sYXJyeWx1LmJsb2cvaW1wcm92ZS1jb2RlLXF1YWxpdHktdXNpbmctZXNsaW50LTc0MmNmMWYzODRmMQ==">[JS] 使用 ESLint 提高程式碼品質<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9jb2RlcnR3LmNvbS8lRTclQTglOEIlRTUlQkMlOEYlRTglQUElOUUlRTglQTglODAvNjkzMzcwLw==">深入淺出eslint——關於我學習eslint的心得<i class="fa fa-external-link-alt"></i></span></li>
</ol>
</blockquote>
<span id="more"></span>
<h3 id="如何安裝"><a href="#如何安裝" class="headerlink" title="如何安裝"></a>如何安裝</h3><p>要在 Node.js 上運行 ESLint，必須安裝 npm，接著運行下列程式碼：</p>
<h4 id="npm-install-g-eslint-：安裝-eslint-套件"><a href="#npm-install-g-eslint-：安裝-eslint-套件" class="headerlink" title="npm install -g eslint ：安裝 eslint 套件"></a><code>npm install -g eslint </code>：安裝 eslint 套件</h4><p>在 package.json &gt; scripts &gt; lint，可查看 eslint 的檢查範圍：</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 代表 homeworks 底下所有的 js 檔案都要經過 eslint 的規則檢查</span>
<span class="token punctuation">&#123;</span>
	<span class="token string">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
		<span class="token string">"lint"</span><span class="token operator">:</span> <span class="token string">"eslint ./homeworks/**/*.js"</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>若程式碼均符合規則，即可順利 commit：</li>
</ul>
<p><img src="https://i.imgur.com/c9Nv0Gh.png"></p>
<ul>
<li>若有不符合規則的程式碼，則會出現下列訊息，告知幾行幾欄出現 error 需進行修正，通過才可進行 commit：</li>
</ul>
<p><img src="https://i.imgur.com/FLkbnqX.png"></p>
<hr>
<h2 id="如何忽略檢查語法"><a href="#如何忽略檢查語法" class="headerlink" title="如何忽略檢查語法"></a>如何忽略檢查語法</h2><p>若想忽略規則，可在檔案中加入 <code>eslint-disable</code> 指令。</p>
<h3 id="忽略所有規則"><a href="#忽略所有規則" class="headerlink" title="忽略所有規則"></a>忽略所有規則</h3><p>放在檔案開頭：</p>
<pre class="line-numbers language-none"><code class="language-none">&#x2F;* eslint-disable *&#x2F;                    &#x2F;&#x2F; 在該檔案關閉 ESLint<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h3 id="忽略特定規則"><a href="#忽略特定規則" class="headerlink" title="忽略特定規則"></a>忽略特定規則</h3><pre class="line-numbers language-none"><code class="language-none">&#x2F;* eslint no-unused-vars: 0 *&#x2F;            &#x2F;&#x2F; off 或 0 代表關閉規則<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h3 id="忽略單行"><a href="#忽略單行" class="headerlink" title="忽略單行"></a>忽略單行</h3><p>忽略所有規則。可分為「忽略同一行」或「忽略下一行」兩種寫法。</p>
<pre class="line-numbers language-none"><code class="language-none">var a &#x3D; 10;   &#x2F;&#x2F; eslint-disable-line

&#x2F;&#x2F; eslint-disable-next-line
var result &#x3D; &#39;&#39;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>忽略特定規則。直接在指令後面加「想要忽略的規則名稱」。</p>
<pre class="line-numbers language-none"><code class="language-none">alert(&#39;Hello&#39;);       &#x2F;&#x2F; eslint-disable-line no-alert

&#x2F;&#x2F; eslint-disable-next-line no-alert
alert(&#39;Hello&#39;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<hr>
<h2 id="eslint-報錯例子"><a href="#eslint-報錯例子" class="headerlink" title="eslint 報錯例子"></a>eslint 報錯例子</h2><h3 id="1-換行符問題"><a href="#1-換行符問題" class="headerlink" title="1. 換行符問題"></a>1. 換行符問題</h3><p><code>Expected linebreaks to be &#39;LF&#39; but found &#39;CRLF&#39; </code></p>
<p>原因：不同系統不同工具下換行符的問題。</p>
<p>解決方法：如果是 windows 系統，點擊vscode右下角，將默認 CRLF 改為 LF。</p>
<blockquote>
<p>參考資料：</p>
<ol>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cudHdibG9ncy5uZXQvYS81YmIwMjA0YzJiNzE3Nzc4MWEwZmMwMzg=">項目中 eslint 報錯： Expected linebreaks to be ‘LF’ but found ‘CRLF’<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjM0Mjk3NS9hcnRpY2xlL2RldGFpbHMvODE0ODYzNzM=">VUE項目中eslint報錯： Expected linebreaks to be ‘LF’ but found ‘CRLF’<i class="fa fa-external-link-alt"></i></span></li>
</ol>
</blockquote>
<h3 id="2-宣告變數需使用-const-或-let"><a href="#2-宣告變數需使用-const-或-let" class="headerlink" title="2. 宣告變數需使用 const 或 let"></a>2. 宣告變數需使用 const 或 let</h3><p><code>&#39;arr&#39; is never reassigned. Use &#39;const&#39; instead       prefer-const</code></p>
<p>原因：eslint 會嚴格的抓 const 跟 let 的使用，而不是用 var 宣告變數。</p>
<p>解決方法：沒有重新賦值過的變數都要用 const 宣告，其餘則是let。</p>
<ul>
<li>const（常數）：代表不變的數值。宣告時就要同時賦值，且不能再更動。</li>
<li>let：和 var 作用差不多，但 let 所宣告的變數，只在代碼塊區域內有效。也就是說，被所屬 <code>&#123; &#125;</code> 包起來的 let 變數，不會被外面（全域）影響。</li>
</ul>
<p>舉個例子：</p>
<pre class="line-numbers language-none"><code class="language-none">let price &#x3D; 20;          &#x2F;&#x2F; 全域變數
if (true) &#123;              
  let price &#x3D; 30;        &#x2F;&#x2F; 區域變數
&#125;
console.log(price)      &#x2F;&#x2F; 印出 20，因為區域變數不會覆蓋全域變數<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>參考資料：<span class="exturl" data-url="aHR0cHM6Ly9pdGhlbHAuaXRob21lLmNvbS50dy9hcnRpY2xlcy8xMDIxMzE4OA==">Day02【ES6 小筆記】變數宣告 - let、const 哪裡好？跟 var 說掰掰<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
<h4 id="3-縮排問題"><a href="#3-縮排問題" class="headerlink" title="3. 縮排問題"></a>3. 縮排問題</h4><p>原因：開頭必須使用 2 個空白來設定縮排，但 VSCode 預設是 4 個空白。</p>
<p>解決方法：</p>
<ol>
<li>點選狀態列上的 [空白:4] </li>
<li>選擇 [使用空格鍵進行縮排]</li>
<li>選擇定位點長度 2 </li>
<li>即可修改成 2 個空白設定縮排</li>
</ol>
<blockquote>
<p>參考資料：<span class="exturl" data-url="aHR0cHM6Ly9tZWRpdW0uY29tL0B5dWppZXdhbmcvcmFpbHMtdmlzdWFsLXN0dWRpby1jb2RlLSVFNCVCRiVBRSVFNiU5NCVCOS10YWIlRTglQTglQUQlRTUlQUUlOUEtNzRiMGZjNzQ4ZjI4">[Rails] Visual Studio Code 修改 Tab設定<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>ESLint</tag>
      </tags>
  </entry>
  <entry>
    <title>[week 13] Fetch &amp; Promise 補充</title>
    <url>/fetch-promise/</url>
    <content><![CDATA[<blockquote>
<p>本篇為 Limedy「Fetch 與 Promise 補充系列」課程的學習筆記。如有錯誤歡迎指正。</p>
</blockquote>
<p>以下內容將涵蓋：</p>
<ol>
<li>如何發出 HTTP 請求</li>
<li>回顧 XMLHttpRequest</li>
<li>如何使用 Fetch</li>
<li>什麼是 Promise<span id="more"></span>
</li>
</ol>
<hr>
<h2 id="如何發出-HTTP-請求"><a href="#如何發出-HTTP-請求" class="headerlink" title="如何發出 HTTP 請求"></a>如何發出 HTTP 請求</h2><p>想要在前端網頁發出 Ajax Request，可以有下列兩種方式：</p>
<ol>
<li>XMLHttpRequest</li>
<li>Fetch</li>
</ol>
<h2 id="回顧-XMLHttpRequest"><a href="#回顧-XMLHttpRequest" class="headerlink" title="回顧 XMLHttpRequest"></a>回顧 XMLHttpRequest</h2><p><a href="(https://developer.mozilla.org/zh-TW/docs/Web/API/XMLHttpRequest/Using_XMLHttpRequest)">XMLHttpRequest</a>，簡稱 XHR。在<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2hlaWRpbGl1MjAyMC9UaGlzLWlzLUNvZGVkaWFyeS9ibG9iL21hc3Rlci93ZWVrOF8lRTUlODIlQjMlRTklODAlODElRTglQjMlODclRTYlOTYlOTklRTclOUElODQlRTYlOTYlQjklRTUlQkMlOEYlRTMlODAlODElRTclODAlOEYlRTglQTYlQkQlRTUlOTklQTglRTclOUElODQlRTklOTklOTAlRTUlODglQjYubWQ=">課程第八週<i class="fa fa-external-link-alt"></i></span>時曾提到，我們可利用 XMLHttpRequest 物件來實現非同步請求，以下列程式碼為例：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">reqListener</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
 <span class="token keyword">if</span> <span class="token punctuation">(</span>request<span class="token punctuation">.</span>status <span class="token operator">>=</span> <span class="token number">200</span> <span class="token operator">&amp;&amp;</span> request<span class="token punctuation">.</span>status <span class="token operator">&lt;</span> <span class="token number">400</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span>responseText<span class="token punctuation">)</span>
 <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"err"</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">const</span> request <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
request<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"load"</span><span class="token punctuation">,</span> reqListener<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 加載失敗會回傳 error</span>
request<span class="token punctuation">.</span><span class="token function-variable function">onerror</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'error'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

request<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"GET"</span><span class="token punctuation">,</span> <span class="token string">"http://www.example.org/example.txt"</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
request<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ol>
<li>建立一個 XMLHttpRequest 物件：request</li>
<li>開啟一個 URL <code>.open()</code><ul>
<li>設定三個參數：請求方法﹑請求的 URL、是否非同步傳送請求</li>
</ul>
</li>
<li>掛載 load callback：加載完成時會呼叫 reqListener 函式</li>
<li>發起一個請求 <code>.send()</code></li>
</ol>
<p>如果利用 Fetch 來達到相同結果，程式碼如下：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">"http://www.example.org/example.txt"</span><span class="token punctuation">)</span>
 <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token operator">=></span>res<span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
 <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>console<span class="token punctuation">.</span>log<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>若不指定方法，Fetch 預設方法是使用 GET，與前者相比可發現程式碼簡潔許多。</p>
<h2 id="初探-Fetch"><a href="#初探-Fetch" class="headerlink" title="初探 Fetch"></a>初探 Fetch</h2><p>要進行 API 串接，發出 GET Request，可利用這個網站：<span class="exturl" data-url="aHR0cHM6Ly9kZXNpZ25lci5tb2NreS5pby8=">Mocky: The world easiest &amp; fastest tool to mock your APIs<i class="fa fa-external-link-alt"></i></span>，能夠自行創造 Response 並指定內容。</p>
<h3 id="如何發出-Request"><a href="#如何發出-Request" class="headerlink" title="如何發出 Request"></a>如何發出 Request</h3><p>在 index.html 加上 <code>fetch(&#39;請求的 URL&#39;)</code> 即可發出最簡單的 Resquest：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">></span>
  <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">'https://run.mocky.io/v3/d49195d4-9e5b-4b63-8b13-6f97e46eb605'</span><span class="token punctuation">)</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>使用開發者工具查看 Network，確實有收到 Response：</p>
<p><img src="https://i.imgur.com/eOZlngN.png"></p>
<p>或是直接將結果印出來，可知 fetch 其實會回傳一個 Promise：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">></span>
  <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">'https://run.mocky.io/v3/d49195d4-9e5b-4b63-8b13-6f97e46eb605'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p><img src="https://i.imgur.com/QtvlDpl.png"></p>
<hr>
<h2 id="什麼是-Promise"><a href="#什麼是-Promise" class="headerlink" title="什麼是 Promise"></a>什麼是 Promise</h2><p>Promist 是一個獨特的物件，簡單來說就是一個容器，裡面儲存著某個未來才會結束的事件（也就是非同步操作）的結果。</p>
<h3 id="then-：拿取-Promise-Response"><a href="#then-：拿取-Promise-Response" class="headerlink" title="then()：拿取 Promise Response"></a><code>then()</code>：拿取 Promise Response</h3><p>那麼該如何拿到 Promise 結果呢？我們可利用 <code>.then()</code> 來拿到 Response，如下列程式碼：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">></span>
  <span class="token keyword">function</span> <span class="token function">pringResult</span><span class="token punctuation">(</span><span class="token parameter">response</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">'https://run.mocky.io/v3/d49195d4-9e5b-4b63-8b13-6f97e46eb605'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  result<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>pringResult<span class="token punctuation">)</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><img src="https://i.imgur.com/d88g2Ox.png"></p>
<p>可把上述程式碼簡化如下：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">'https://run.mocky.io/v3/d49195d4-9e5b-4b63-8b13-6f97e46eb605'</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span> <span class="token parameter">response</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="text-amp-json-：處理-Response-Body"><a href="#text-amp-json-：處理-Response-Body" class="headerlink" title=".text() &amp; .json()：處理 Response Body"></a><code>.text()</code> &amp; <code>.json()</code>：處理 Response Body</h3><h4 id="text"><a href="#text" class="headerlink" title=".text()"></a><code>.text()</code></h4><p>利用 <code>.text()</code> 我們會同樣會得到一個 Promise，再以 <code>.then()</code> 處理，可讀取 Response 的 body：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> api200 <span class="token operator">=</span> <span class="token string">'https://run.mocky.io/v3/d49195d4-9e5b-4b63-8b13-6f97e46eb605'</span>

<span class="token function">fetch</span><span class="token punctuation">(</span>api200<span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">response</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    response<span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">text</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>確認可在瀏覽器上印出 text 內容：</p>
<p><img src="https://i.imgur.com/rqFF0In.png"></p>
<h4 id="json"><a href="#json" class="headerlink" title=".json()"></a><code>.json()</code></h4><p>若確定 Response 是 JSON 格式，可使用 <code>.json()</code> 以相同寫法來處理，回傳的結果會如同 <code>JSON.parse()</code> 幫我們轉成 json 格式：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> api200 <span class="token operator">=</span> <span class="token string">'https://run.mocky.io/v3/d49195d4-9e5b-4b63-8b13-6f97e46eb605'</span>

<span class="token function">fetch</span><span class="token punctuation">(</span>api200<span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">response</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    response<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">json</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>json<span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>確認得到 JSON 格式的結果：</p>
<p><img src="https://i.imgur.com/3ZOk7YA.png"></p>
<h3 id="簡化再簡化"><a href="#簡化再簡化" class="headerlink" title="簡化再簡化"></a>簡化再簡化</h3><p>由於 <code>response.json()</code> 這個 Promise 的回傳值是 text，我們可將程式碼簡化如下：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">fetch</span><span class="token punctuation">(</span>api200<span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">response</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> response<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">// 回傳值</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">json</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>         <span class="token comment">// then() 會將回傳值帶到 Response</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>json<span class="token punctuation">)</span>       <span class="token comment">// 取到回傳值</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>若使用 return 的寫法，可減少縮排層數，簡化程式碼的複雜程度。</p>
<h3 id="Chaining-特性"><a href="#Chaining-特性" class="headerlink" title="Chaining 特性"></a>Chaining 特性</h3><p>上述的寫法，其實是利用 Promise 具有的 Chaining 特性。</p>
<p>由於 <code>.then()</code> 裡面回傳的還是一個 promise 物件，我們可以一直使用 <code>.then()</code> 來對回傳的 promise 做處理。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">fetch</span><span class="token punctuation">(</span><span class="token punctuation">)</span> ⇒ Promise
response<span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span> ⇒ Promise
response<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span> ⇒ Promise
respose<span class="token punctuation">.</span>json<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">)</span> ⇒ Promise<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>透過這個特性，我們能夠有效減少層數，以第八週串接 twitch API 為例：</p>
<ul>
<li>Callback function</li>
</ul>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">getGames</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>
  <span class="token function">getStreams</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>
    <span class="token function">getChannel</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>
      <span class="token function">getTitle</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>
          <span class="token operator">...</span>
      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>Promise</li>
</ul>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">getGames</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token function">getStreams</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">streams</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token function">getChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">channel</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token function">getTitle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<hr>
<h2 id="如何處理-Error"><a href="#如何處理-Error" class="headerlink" title="如何處理 Error"></a>如何處理 Error</h2><p>這裡指的錯誤，並非 http status 400、500 那種錯誤，而是根本無法拿到 Response，Fetch 才會回傳錯誤訊息。</p>
<p>在過去課程中，以同步方式傳送請求，可使用 <code>try / catch</code> 來處理錯誤訊息：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// 正常執行..</span>
<span class="token punctuation">&#125;</span> <span class="token keyword">catch</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// 出錯執行..</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>但這個錯誤處理無法應用在 callback function，因為 Fetch 使用非同步方式發出請求。</p>
<h3 id="catch-：處理錯誤訊息"><a href="#catch-：處理錯誤訊息" class="headerlink" title=".catch()：處理錯誤訊息"></a><code>.catch()</code>：處理錯誤訊息</h3><p>程式碼範例如下：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">fetch</span><span class="token punctuation">(</span>api200<span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">response</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> response<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">json</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>json<span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">err</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'error'</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>再把原先的請求 URL 稍作修改，確認可接收錯誤訊息：</p>
<p><img src="https://i.imgur.com/qN3HBCE.png"></p>
<p>簡言之，我們可使用 <code>then()</code> 來接收回傳的結果，<code>catch()</code> 來接收回傳的錯誤。</p>
<h2 id="利用-Fetch-發-POST"><a href="#利用-Fetch-發-POST" class="headerlink" title="利用 Fetch 發 POST"></a>利用 Fetch 發 POST</h2><p>前面提到過，Fetch 預設方法是使用 GET，若要發出 POST Request，需帶入其他參數，以下列程式碼為例：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  name<span class="token operator">:</span> <span class="token string">'heidi'</span>
<span class="token punctuation">&#125;</span>
<span class="token function">fetch</span><span class="token punctuation">(</span>api200<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>
  method<span class="token operator">:</span> <span class="token string">'POST'</span><span class="token punctuation">,</span>
  body<span class="token operator">:</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">,</span>
  headers<span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">Headers</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
    <span class="token string">'Content-Type'</span><span class="token operator">:</span> <span class="token string">'application/json'</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">response</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> response<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">json</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>json<span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">err</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'error'</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="Fetch-使用時的注意事項"><a href="#Fetch-使用時的注意事項" class="headerlink" title="Fetch 使用時的注意事項"></a>Fetch 使用時的注意事項</h3><h4 id="Content-Type"><a href="#Content-Type" class="headerlink" title="Content-Type"></a>Content-Type</h4><ul>
<li>決定 server 如何處理 Request</li>
<li>根據不同的 Content-Type，需修改 body 如何解析接收到的資料格式</li>
</ul>
<h4 id="credential"><a href="#credential" class="headerlink" title="credential"></a>credential</h4><p>發 request 給不同來源 domain 的 API 時，並不會自動把 cookie 帶上去，需加上 <code>credentials: &#39;includes&#39;</code>，如下列程式碼：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  name<span class="token operator">:</span> <span class="token string">'heidi'</span>
<span class="token punctuation">&#125;</span>
<span class="token function">fetch</span><span class="token punctuation">(</span>api200<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>
  method<span class="token operator">:</span> <span class="token string">'POST'</span><span class="token punctuation">,</span>
  body<span class="token operator">:</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">,</span>
  credentials<span class="token operator">:</span> <span class="token string">'includes'</span><span class="token punctuation">,</span>
  headers<span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">Headers</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
    <span class="token string">'Content-Type'</span><span class="token operator">:</span> <span class="token string">'application/json'</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">response</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> response<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">json</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>json<span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">err</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'error'</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="對-mode-的誤解"><a href="#對-mode-的誤解" class="headerlink" title="對 mode 的誤解"></a>對 mode 的誤解</h4><ul>
<li><code>mode: &#39;no-cors&#39;</code> 並不能突破 CORS 限制，而是會回傳一個空的 response</li>
<li>這條指令只是跟瀏覽器說：「我沒有要拿 response，不用傳錯誤訊息給我」</li>
<li>要在瀏覽器解決 CORS 限制，必須在 Server 端加上開 CORS 的 header</li>
</ul>
<hr>
<h2 id="建立-Promise-物件"><a href="#建立-Promise-物件" class="headerlink" title="建立 Promise 物件"></a>建立 Promise 物件</h2><p>根據上述結論，要處理非同步，我們可利用 callback function 或 Promise。</p>
<p>以下程式碼示範如何建立 Promise 物件，也就是把一個 Promise 物件 new 出來：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">const</span> myPromise <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span>init<span class="token punctuation">)</span>

myPromise<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'data'</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span>       <span class="token comment">// 正確</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">err</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'err'</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>         <span class="token comment">// 錯誤</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
  
<span class="token comment">// 印出 data 3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>簡化 function 如下：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> myPromise <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>

myPromise<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'data'</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span>       <span class="token comment">// 正確</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">err</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'err'</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>         <span class="token comment">// 錯誤</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="應用範例"><a href="#應用範例" class="headerlink" title="應用範例"></a>應用範例</h3><p>透過 <code>setTimeout()</code> 結合 promise 應用：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> myPromise <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token function">setTimeout</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> <span class="token number">3000</span><span class="token punctuation">)</span>         <span class="token comment">// 3 秒後呼叫 resolve()</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>

myPromise<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'myPromise data'</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">err</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'err'</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>

<span class="token comment">// 經過 3 秒後會印出 myPromise Data undefined</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>再來利用 <code>function sleep()</code> 宣告一個叫做 myPromise 的 Promise 再回傳回去。如下列程式碼：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token parameter">ms</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">const</span> myPromise <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token parameter">resolve</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token function">setTimeout</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> ms<span class="token punctuation">)</span>      <span class="token comment">// 把秒數設為參數</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
  <span class="token keyword">return</span> myPromise<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1500</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 執行完 sleep() 會得到 Promise</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'myPromise Data'</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">err</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'err'</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>上述的 <code>sleep()</code> 函式可簡化成：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token parameter">ms</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token parameter">resolve</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token function">setTimeout</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> ms<span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>若以箭頭函式表達則是：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">sleep</span> <span class="token operator">=</span> <span class="token parameter">ms</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token parameter">resolve</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token function">setTimeout</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> ms<span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>還可以簡化成這樣，省略 return 的大括號：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">sleep</span> <span class="token operator">=</span> <span class="token parameter">ms</span> <span class="token operator">=></span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token parameter">resolve</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token function">setTimeout</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> ms<span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>最終可簡化成一行：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">sleep</span> <span class="token operator">=</span> <span class="token parameter">ms</span> <span class="token operator">=></span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token parameter">resolve</span> <span class="token operator">=></span> <span class="token function">setTimeout</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> ms<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h2 id="async-await"><a href="#async-await" class="headerlink" title="async / await"></a>async / await</h2><p>利用 <code>async / await</code> 可以用看起來像同步的語法，做到非同步的事情。</p>
<p>方法是用 async 宣告一個非同步的 function，裡面放 await 接一個 Promise 物件，會等到執行完 await 裡面的 promise 才往下執行。</p>
<p>以下列程式碼為例：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">sleep</span> <span class="token operator">=</span> <span class="token parameter">ms</span> <span class="token operator">=></span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token parameter">resolve</span> <span class="token operator">=></span> <span class="token function">setTimeout</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> ms<span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'enter main'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">await</span> <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 接一個 Promise</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'exit main'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 執行 main() 會發現兩個 console.log 會相隔一秒印出</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>對照使用 Promise 的寫法：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">sleep</span> <span class="token operator">=</span> <span class="token parameter">ms</span> <span class="token operator">=></span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token parameter">resolve</span> <span class="token operator">=></span> <span class="token function">setTimeout</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> ms<span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token keyword">function</span> <span class="token function">mainPromise</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'enter main'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'exit main'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="應用練習"><a href="#應用練習" class="headerlink" title="應用練習"></a>應用練習</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">sleep</span> <span class="token operator">=</span> <span class="token parameter">ms</span> <span class="token operator">=></span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token parameter">resolve</span> <span class="token operator">=></span> <span class="token function">setTimeout</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> ms<span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token keyword">function</span> <span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">const</span> api200 <span class="token operator">=</span> <span class="token string">'https://run.mocky.io/v3/d49195d4-9e5b-4b63-8b13-6f97e46eb605'</span>
  <span class="token keyword">return</span> <span class="token function">fetch</span><span class="token punctuation">(</span>api200<span class="token punctuation">)</span>      <span class="token comment">// 回傳執行完的結果 => Promise</span>
    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">response</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">return</span> response<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'enter main'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">await</span> <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment">// 等 1 秒</span>
  <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 接收到結果才會繼續執行</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'result'</span><span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>甚至可使用同步方式的 <code>try / catch</code> 來處理錯誤訊息：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'enter main'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">await</span> <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment">// 等 1 秒</span>
  <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'result'</span><span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'err'</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>


<p>參考資料：</p>
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cuaXRyZWFkMDEuY29tL2NvbnRlbnQvMTU3MDYwNjMyMy5odG1s">ES6入門之Promise物件<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9uaWNvbGFrYWNoYS5jb2RlcmJyaWRnZS5pby8yMDIwLzA5LzExL3N5bmMtYXN5bmMv">JavaScript 的同步與非同步 - 從 Callback function 到 Promise<i class="fa fa-external-link-alt"></i></span></li>
</ul>
]]></content>
      <categories>
        <category>Front-End</category>
      </categories>
      <tags>
        <tag>Front-End</tag>
        <tag>fetch</tag>
        <tag>promise</tag>
      </tags>
  </entry>
  <entry>
    <title>[學習筆記] 如何撰好的 Git Commit Message</title>
    <url>/git-commit-message/</url>
    <content><![CDATA[<h2 id="為什麼-Commit-Message-很重要？"><a href="#為什麼-Commit-Message-很重要？" class="headerlink" title="為什麼 Commit Message 很重要？"></a>為什麼 Commit Message 很重要？</h2><p>Git 在每次 Commit 時，需要寫下 Git Commit Message（提交說明），用來記錄提交版本更動的摘要。</p>
<blockquote>
<p>任何專案都至少由兩個以上的開發者共同合作開發。</p>
</blockquote>
<span id="more"></span>

<p>除了專案開發者，任何專案都會是跟其他開發者、以及未來的自己共同開發維護的。當不同開發者接手專案時，能藉由瀏覽 Commit Message 內容快速進入狀況，瞭解程式異動的原因，如此也利於後續的維護。</p>
<h3 id="何謂好的-Commit-Message？"><a href="#何謂好的-Commit-Message？" class="headerlink" title="何謂好的 Commit Message？"></a>何謂好的 Commit Message？</h3><p>一個好的 Git Commit Message 必須兼具 What &amp; Why &amp; How，能幫助開發者瞭解這個提交版本：</p>
<ol>
<li>做了什麼事情（What）</li>
<li>為什麼要做這件事情（Why）</li>
<li>用什麼方法做到的（How）</li>
</ol>
<h2 id="Commit-Message-的規範與準則"><a href="#Commit-Message-的規範與準則" class="headerlink" title="Commit Message 的規範與準則"></a>Commit Message 的規範與準則</h2><p>在團隊之間，撰寫 commit log 的方式應一致，也就是定義風格與內容，可透過遵守現有的慣例來實現。</p>
<p>一個 Commit Message 主要由 Header + Body + Footer 組成：</p>
<pre class="line-numbers language-htmlmixed" data-language="htmlmixed"><code class="language-htmlmixed">&lt;type&gt;(&lt;scope&gt;): &lt;subject&gt;
&lt;BLANK LINE&gt;
&lt;body&gt;
&lt;BLANK LINE&gt;
&lt;footer&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="Message-Header-lt-type-gt-lt-scope-gt-lt-subject-gt"><a href="#Message-Header-lt-type-gt-lt-scope-gt-lt-subject-gt" class="headerlink" title="Message Header: &lt;type&gt;(&lt;scope&gt;): &lt;subject&gt;"></a>Message Header: <code>&lt;type&gt;(&lt;scope&gt;): &lt;subject&gt;</code></h3><ul>
<li>type（必要）：commit 的類別<ul>
<li>如：feat, fix, docs, style, refactor, test, chore</li>
</ul>
</li>
<li>scope（可選）：commit 影響的範圍<ul>
<li>如：資料庫、控制層、模板層等，視專案不同改變</li>
</ul>
</li>
<li>subject（必要）：commit 的簡短描述<ul>
<li>不超過 50 個字元</li>
<li>結尾不加句號</li>
<li>盡量讓 Commit 單一化，一次只更動一個主題</li>
</ul>
</li>
</ul>
<h3 id="Message-Body"><a href="#Message-Body" class="headerlink" title="Message Body"></a>Message Body</h3><ul>
<li>對本次 Commit 的詳細描述，解釋 What &amp; Why &amp; How</li>
<li>可以分成多行，每一行不超過 72 個字元</li>
<li>說明程式碼變動的項目與原因，還有與先前行為的對比</li>
</ul>
<h3 id="Message-Footer"><a href="#Message-Footer" class="headerlink" title="Message Footer"></a>Message Footer</h3><ul>
<li>填寫任務編號 <code>issue #1246</code></li>
<li>BREAKING CHANGE（可略），記錄不兼容的變動，後面是對變動的描述、以及變動原因和遷移方法</li>
</ul>
<h2 id="Header：-lt-type-gt-類別規範"><a href="#Header：-lt-type-gt-類別規範" class="headerlink" title="Header：&lt;type&gt; 類別規範"></a>Header：<code>&lt;type&gt;</code> 類別規範</h2><p>type 代表提交 Commit 的類別，以下為使用慣例：</p>
<ul>
<li>feat：新增或修改功能（feature）</li>
<li>fix：修補 bug（bug fix）</li>
<li>docs：文件（documentation）</li>
<li>style：格式<ul>
<li>不影響程式碼運行的變動，例如：white-space, formatting, missing semi colons</li>
</ul>
</li>
<li>refactor：重構 <ul>
<li>不是新增功能，也非修補 bug 的程式碼變動</li>
</ul>
</li>
<li>perf：改善效能（improves performance）</li>
<li>test：增加測試（when adding missing tests）</li>
<li>chore：maintain<ul>
<li>不影響程式碼運行，建構程序或輔助工具的變動，例如修改 config、Grunt Task 任務管理工具</li>
</ul>
</li>
<li>revert：撤銷回覆先前的 commit<ul>
<li>例如：<code>revert：type(scope):subject</code></li>
</ul>
</li>
</ul>
<h3 id="Commit-Message-範例"><a href="#Commit-Message-範例" class="headerlink" title="Commit Message 範例"></a>Commit Message 範例</h3><p>以下舉幾個範例：</p>
<pre class="line-numbers language-none"><code class="language-none">feat: message 新增信件通知功能
feat(優惠券): 加入搜尋按鈕，調整畫面

fix: 圓餅圖圖例跑版
fix: 意見反應，信件看不到圖片問題

style: 統一換行符號 CRLF to LF

docs: 更新 README 相關資訊
docs: 修正型別註解

chore(submoudle): 變更 git url
chore: 調整單元測試環境

refactor(每日通知信件): 重構程式結構<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>參考資料：</p>
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly93YWRlaHVhbmdsZWFybmluZy5ibG9nc3BvdC5jb20vMjAxOS8wNS9jb21taXQtY29tbWl0LWNvbW1pdC13aHktd2hhdC1jb21taXQuaHRtbA==">Git Commit Message 這樣寫會更好，替專案引入規範與範例<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cDovL2Jsb2cuZm91cmRlc2lyZS5jb20vMjAxOC8wNy8wMy8lRTYlOTIlQjAlRTUlQUYlQUIlRTYlOUMlODklRTYlOTUlODglRTclOUElODQtZ2l0LWNvbW1pdC1tZXNzYWdlLw==">撰寫有效的 Git Commit Message<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmxvdWllLmx1LzIwMTcvMDMvMjEvJUU1JUE2JTgyJUU0JUJEJTk1JUU1JUFGJUFCJUU0JUI4JTgwJUU1JTgwJThCLWdpdC1jb21taXQtbWVzc2FnZS8jcnVsZXMwMw==">如何寫一個Git Commit Message | louie_lu’s blog<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9kb2NzLmdvb2dsZS5jb20vZG9jdW1lbnQvZC8xUXJERmNJaVBqU0xEbjNFTDE1SUp5Z05QaUhPUmdVMV9PT0FxV2ppRFU1WS9lZGl0Iw==">AngularJS Git Commit Message Conventions<i class="fa fa-external-link-alt"></i></span></li>
</ul>
]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>[week 1] 版本控制 - Git 進階指令 &amp; GitHub</title>
    <url>/git-github/</url>
    <content><![CDATA[<blockquote>
<p>本篇為 <span class="exturl" data-url="aHR0cHM6Ly9saWRlbXkuY29tL3AvZ2l0MTAx">[GIT101] Git 超新手入門<i class="fa fa-external-link-alt"></i></span> 這門課程的學習筆記。</p>
</blockquote>
<p>在上一節我們學到 <span class="exturl" data-url="aHR0cHM6Ly9oYWNrbWQuaW8vQEhlaWRpLUxpdS9ub3RlLWdpdA==">Git 基本指令<i class="fa fa-external-link-alt"></i></span>，接下來要學習什麼是 Branch（分支），以及如何送出的 Pull Request 進行共同開發，以及介紹提供視覺化介面操作 Git 的 GitHub。</p>
<pre class="line-numbers language-none"><code class="language-none">學習目標：

 知道怎麼使用 branch 並送出 Pull Request
 熟悉 Git Workflow（也就是交作業的流程）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<span id="more"></span>

<hr>
<h2 id="為什麼需要-Branch（分支）？"><a href="#為什麼需要-Branch（分支）？" class="headerlink" title="為什麼需要 Branch（分支）？"></a>為什麼需要 Branch（分支）？</h2><p> 簡言之，Branch 的作用就是讓開發過程各自獨立。</p>
<h3 id="例如：今天公司產品在開發新功能，途中發現有個嚴重的-bug-必須修正"><a href="#例如：今天公司產品在開發新功能，途中發現有個嚴重的-bug-必須修正" class="headerlink" title="例如：今天公司產品在開發新功能，途中發現有個嚴重的 bug 必須修正"></a>例如：今天公司產品在開發新功能，途中發現有個嚴重的 bug 必須修正</h3><h4 id="若以一條線的開發模式（如同上一節學的-Git-基本指令）："><a href="#若以一條線的開發模式（如同上一節學的-Git-基本指令）：" class="headerlink" title="若以一條線的開發模式（如同上一節學的 Git 基本指令）："></a>若以一條線的開發模式（<span class="exturl" data-url="aHR0cHM6Ly9oYWNrbWQuaW8vQEhlaWRpLUxpdS9ub3RlLWdpdA==">如同上一節學的 Git 基本指令<i class="fa fa-external-link-alt"></i></span>）：</h4><ol>
<li>在同一個 commit 上進行修改，容易產生衝突</li>
<li><code>穩定版 + bug fix</code> 還參雜未完成的新功能，也可能產生更多問題</li>
</ol>
<p><img src="https://i.imgur.com/MuDKdgK.png" alt="一條線開發"></p>
<h4 id="若能分成「穩定版本」和「新功能開發」，兩條分支就不會互相干擾："><a href="#若能分成「穩定版本」和「新功能開發」，兩條分支就不會互相干擾：" class="headerlink" title="若能分成「穩定版本」和「新功能開發」，兩條分支就不會互相干擾："></a>若能分成「穩定版本」和「新功能開發」，兩條分支就不會互相干擾：</h4><ol>
<li><code>穩定版 + 修好 bug</code> → 得到新的穩定版</li>
<li>待新功能開發完成，即可合併得到有新功能的版本，成為最新的穩定版</li>
</ol>
<p><img src="https://i.imgur.com/1S1hWYu.png" alt="兩條線開發"></p>
<hr>
<h2 id="操作-branch-基本指令"><a href="#操作-branch-基本指令" class="headerlink" title="操作 branch 基本指令"></a>操作 branch 基本指令</h2><p>使用 Git 進行版本控制時，系統最初會自動建立第一個 branch ，也就是 <code>master</code>。</p>
<p><img src="https://i.imgur.com/eDZEU1a.png" alt="預設分支為 master"></p>
<h3 id="git-branch-v：查看目前在哪個分支"><a href="#git-branch-v：查看目前在哪個分支" class="headerlink" title="git branch -v：查看目前在哪個分支"></a><code>git branch -v</code>：查看目前在哪個分支</h3><p>下列訊息分別表示：分支名稱、版本號、版本訊息。</p>
<p><img src="https://i.imgur.com/qbjckPW.png" alt="git branch -v 指令"></p>
<ul>
<li><code>git branch</code> ：如果後面沒接任何參數，只會顯示目前有哪些分支。</li>
</ul>
<h3 id="git-branch-lt-branchName-gt-：新增分支"><a href="#git-branch-lt-branchName-gt-：新增分支" class="headerlink" title="git branch &lt;branchName&gt;：新增分支"></a><code>git branch &lt;branchName&gt;</code>：新增分支</h3><blockquote>
<p>提醒：開發新功能之前，養成開新分支的好習慣！</p>
</blockquote>
<p><img src="https://i.imgur.com/r51pPLL.png" alt="git branch"></p>
<h3 id="git-branch-d-lt-branchName-gt-：刪除分支"><a href="#git-branch-d-lt-branchName-gt-：刪除分支" class="headerlink" title="git branch -d &lt;branchName&gt;：刪除分支"></a><code>git branch -d &lt;branchName&gt;</code>：刪除分支</h3><p><img src="https://i.imgur.com/OHjboYW.png" alt="git branch -d 指令"></p>
<h3 id="git-checkout-lt-branchName-gt-：切換分支"><a href="#git-checkout-lt-branchName-gt-：切換分支" class="headerlink" title="git checkout &lt;branchName&gt;：切換分支"></a><code>git checkout &lt;branchName&gt;</code>：切換分支</h3><p><span class="exturl" data-url="aHR0cHM6Ly9oYWNrbWQuaW8vT2hCQy14NVRSS1dGM001WlFESEJRUT9ib3RoI2dpdC1jaGVja291dA==">和上一節的切換版本指令<i class="fa fa-external-link-alt"></i></span>原理相同，這裡是將 <code>&lt;版本號碼&gt;</code> 換成 <code>&lt;分支名稱&gt;</code></p>
<ol>
<li><code>git checkout &lt;版本名稱&gt;</code>：切換版本</li>
<li><code>git checkout &lt;branchName&gt;</code>：切換分支</li>
<li><code>git branch checkout -b &lt;branchName&gt;</code>：「新增」並「切換」到該分支</li>
</ol>
<p><img src="https://i.imgur.com/oxKtRfm.png" alt="git checkout 指令"></p>
<h2 id="如何合併分支？"><a href="#如何合併分支？" class="headerlink" title="如何合併分支？"></a>如何合併分支？</h2><h3 id="git-merge-lt-branchName-gt-：把分支合併進來"><a href="#git-merge-lt-branchName-gt-：把分支合併進來" class="headerlink" title="git merge &lt;branchName&gt;：把分支合併進來"></a><code>git merge &lt;branchName&gt;</code>：把分支合併進來</h3><h4 id="範例：把分支-new-feature-合併到-master"><a href="#範例：把分支-new-feature-合併到-master" class="headerlink" title="範例：把分支 new-feature 合併到 master"></a>範例：把分支 <code>new-feature</code> 合併到 <code>master</code></h4><ol>
<li>輸入 <code>git checkout master</code> 切換到 <code>master</code> 這個分支</li>
<li>輸入 <code>git merge new-feature</code>，完成基本的分支合併<br>用 <code>git log</code> 查看版本紀錄，可知「合併」的過程會自動建立一個新版本</li>
</ol>
<p><img src="https://i.imgur.com/Mj5ABC7.png" alt="git merge 指令"></p>
<ol start="3">
<li>成功合併後，即可刪除分支 <code>new-feature</code></li>
</ol>
<p><img src="https://i.imgur.com/YZsSWZT.png" alt="合併後刪除分支"></p>
<h2 id="那在合併時發生-conflict（衝突）怎麼辦？"><a href="#那在合併時發生-conflict（衝突）怎麼辦？" class="headerlink" title="那在合併時發生 conflict（衝突）怎麼辦？"></a>那在合併時發生 conflict（衝突）怎麼辦？</h2><blockquote>
<p>所謂的衝突，就是「同一份檔案的兩個版本，裡面有一個或多個不同的內容」。</p>
</blockquote>
<p>但是 Git 無法幫你選擇哪一個當作最終版本，所以當發生衝突時，只能「自己手動調整」。</p>
<h4 id="範例：在-master-和-new-feature-這兩條支線上，均改了同一個檔案-code-js"><a href="#範例：在-master-和-new-feature-這兩條支線上，均改了同一個檔案-code-js" class="headerlink" title="範例：在 master 和 new-feature 這兩條支線上，均改了同一個檔案 code.js"></a>範例：在 <code>master</code> 和 <code>new-feature</code> 這兩條支線上，均改了同一個檔案 <code>code.js</code></h4><ol>
<li>此時若把分支 <code>new-feature</code> 合併到 <code>master</code> 上</li>
<li>顯示發生衝突，輸入 <code>git status</code> 可見提示說明：該檔案的兩個版本均有修改</li>
</ol>
<p><img src="https://i.imgur.com/G9ijEnc.png" alt="conflict"></p>
<ol start="3">
<li>進入該檔案會顯示衝突位置如下，需手動調整檔案內容</li>
</ol>
<p><img src="https://i.imgur.com/dGMmn2L.png" alt="conflict 手動調整"></p>
<p><img src="https://i.imgur.com/nCAxx1Q.png" alt="調整完成"></p>
<ol start="4">
<li>修改完後重新 commit，成功解決衝突</li>
</ol>
<p><img src="https://i.imgur.com/c3QKwyH.png" alt="conflict 解決"></p>
<hr>
<h2 id="如何共同開發專案？"><a href="#如何共同開發專案？" class="headerlink" title="如何共同開發專案？"></a>如何共同開發專案？</h2><p>熟悉 Git 的基本操作後，來談談最一開始提到的多人協作。這些被版本控制的專案，我們稱為「Repository（檔案庫）」，多人協作就是共享同一份 Repository 來完成共同開發。</p>
<h2 id="Git-vs-GitHub"><a href="#Git-vs-GitHub" class="headerlink" title="Git vs GitHub"></a>Git vs GitHub</h2><p>Git 是用來版本控制的程式。</p>
<p>GitHub 是目前全球最大的 Git Server，有許多開放原始碼的專案都是使用 Github 進行程式碼的管理。可以想成「提供存放使用 Git 專案倉庫（Repository) 的服務」。也可以不用 GitHub 選擇其他服務，或是自己架一個 Git Sever。</p>
<h3 id="GitHub：視覺化的-repository"><a href="#GitHub：視覺化的-repository" class="headerlink" title="GitHub：視覺化的 repository"></a>GitHub：視覺化的 repository</h3><p>透過 GitHub 的 GUI 介面能夠視覺化 repository，如此就可以在 repository 頁面查看該專案的 Commit 紀錄、檔案修改的歷史紀錄、修改者是誰等資訊，也可在 GitHub 執行 pull request 來進行合併。</p>
<h3 id="建立新專案"><a href="#建立新專案" class="headerlink" title="建立新專案"></a>建立新專案</h3><p><img src="https://i.imgur.com/pl31b7Q.png" alt="建立新專案"></p>
<h2 id="將本地端資料推上遠端-GitHub（Local→Remote）"><a href="#將本地端資料推上遠端-GitHub（Local→Remote）" class="headerlink" title="將本地端資料推上遠端 GitHub（Local→Remote）"></a>將本地端資料推上遠端 GitHub（Local→Remote）</h2><p>建立好新專案後，可分兩種方式開始專案：</p>
<ol>
<li>開始全新專案，再同步到 GitHub</li>
<li>已存在專案，將本地端的現存專案同步到 GitHub</li>
</ol>
<p><img src="https://i.imgur.com/Yc8mymH.png" alt="上傳本地專案到 GitHub"></p>
<h4 id="git-remote：主要是跟遠端有關的操作"><a href="#git-remote：主要是跟遠端有關的操作" class="headerlink" title="git remote：主要是跟遠端有關的操作"></a><code>git remote</code>：主要是跟遠端有關的操作</h4><ul>
<li><code>git remote add origin https://github.com/heidiliu2020/git101_test.git</code><br>代表加入遠端節點。也就是「為本地端檔案庫增加一個叫做 origin 的遠端檔案庫」。</li>
<li>這裡的 <code>origin</code> 是遠端檔案庫的代名詞，代表後面那串 GitHub 伺服器位置。如果從 Server 上 clone 下來，origin 是預設的遠端節點名稱。</li>
</ul>
<h4 id="git-push：把本地資料同步到遠端"><a href="#git-push：把本地資料同步到遠端" class="headerlink" title="git push：把本地資料同步到遠端"></a><code>git push</code>：把本地資料同步到遠端</h4><ul>
<li><code>git push -u origin &lt;branchName&gt; </code>：將本地端分支資料推到遠端分支</li>
<li><code>git push -u origin master</code>：將本地端檔案庫推到遠端檔案庫的 master 分支</li>
</ul>
<h2 id="將遠端資料拉回本地端（Remote→Local）"><a href="#將遠端資料拉回本地端（Remote→Local）" class="headerlink" title="將遠端資料拉回本地端（Remote→Local）"></a>將遠端資料拉回本地端（Remote→Local）</h2><h4 id="git-pull：把遠端資料同步到本地端"><a href="#git-pull：把遠端資料同步到本地端" class="headerlink" title="git pull：把遠端資料同步到本地端"></a><code>git pull</code>：把遠端資料同步到本地端</h4><ul>
<li><code>git pull origin &lt;branchName&gt;</code>：將遠端分支資料拉回並合併本地端分支</li>
</ul>
<h2 id="從-GitHub-Repository-複製專案"><a href="#從-GitHub-Repository-複製專案" class="headerlink" title="從 GitHub Repository 複製專案"></a>從 GitHub Repository 複製專案</h2><p>上面介紹的 Push 及 Pull 均使用於本地端現有的專案。</p>
<h3 id="git-clone：從-GitHub-下載-Repository-到本地端"><a href="#git-clone：從-GitHub-下載-Repository-到本地端" class="headerlink" title="git clone：從 GitHub 下載 Repository 到本地端"></a><code>git clone</code>：從 GitHub 下載 Repository 到本地端</h3><ol>
<li>在 GitHub 點選 <code>Clone or download</code>，可直接下載檔案</li>
</ol>
<p><img src="https://i.imgur.com/0yJIEim.png" alt="GitHub 點選 Clone"></p>
<ol start="2">
<li>或是複製網址，到 Terminal 輸入 <code>git clone &lt;網址&gt;</code>：可將內容下載到本地端</li>
</ol>
<p><img src="https://i.imgur.com/uiF2oX7.png" alt="git clone"></p>
<blockquote>
<p>但要注意使用 Clone 的 Repository 沒有權限修改，也就無法再 push 回遠端。</p>
</blockquote>
<h3 id="Fork：將別人的-Repository-複製一份成為自己的-Repository"><a href="#Fork：將別人的-Repository-複製一份成為自己的-Repository" class="headerlink" title="Fork：將別人的 Repository 複製一份成為自己的 Repository"></a><code>Fork</code>：將別人的 Repository 複製一份成為自己的 Repository</h3><ol>
<li>到想要複製的 Repository 頁面，點選 <code>Fork</code></li>
</ol>
<p><img src="https://i.imgur.com/Ms7FVgQ.png" alt="點選 fork"></p>
<ol start="2">
<li>即可複製一份 Repository 到自己的帳號底下</li>
</ol>
<p><img src="https://i.imgur.com/QKdoaYU.png" alt="fork 專案"></p>
<ol start="3">
<li>把專案 clone 到本地端，開新的 branch 進行修改</li>
<li>Push 回自己的專案</li>
<li>若為多人協作，可在自己的頁面提出 PR（pull request）給原作</li>
</ol>
<p><img src="https://i.imgur.com/leobPuk.png"></p>
<ol start="6">
<li>若原作同意修改內容，就會在他的頁面按下「Merge pull request」合併 commit</li>
</ol>
<p><img src="https://i.imgur.com/ov638xA.png"></p>
<hr>
<h3 id="補充：如何在-GitHub上同步-Fork-過來的-Repository"><a href="#補充：如何在-GitHub上同步-Fork-過來的-Repository" class="headerlink" title="補充：如何在 GitHub上同步 Fork 過來的 Repository"></a>補充：如何在 GitHub上同步 Fork 過來的 Repository</h3><ol>
<li><code>git remote -v</code>：查看目前的遠端節點。只有最一開始設的 origin 這個節點。</li>
</ol>
<p><img src="https://i.imgur.com/Dw3UoD7.png" alt="git remote -v 指令"></p>
<ol start="2">
<li><code>git remote add &lt;節點名稱&gt; &lt;網址&gt;</code>：新增一個遠端節點。</li>
</ol>
<ul>
<li><code>git remote add upstream https://github.com/Lidemy/mentor-program-4th.git</code>：為本地端檔案庫增加一個叫做 <code>upstream</code> 的遠端檔案庫。</li>
</ul>
<p><img src="https://i.imgur.com/YIsFYMS.png" alt="git remote add"></p>
<ol start="3">
<li><code>git pull upstream master</code>：把遠端 Repo 同步回本地端電腦。若發生衝突，則手動修改解決。</li>
</ol>
<p><img src="https://i.imgur.com/XFW7jEo.png" alt="git pull"></p>
<ol start="4">
<li>修改完成後，使用 <code>git commit -am &quot;同步課綱 repo&quot;</code> 重新 commit。</li>
<li><code>git push origin master</code>：同步回自己在 GitHub 的 遠端 Repo。</li>
</ol>
<blockquote>
<p>若要刪除舊有的 remote，可參考 <span class="exturl" data-url="aHR0cHM6Ly9hbmR5NjgwNHR3LmdpdGh1Yi5pby8yMDE5LzAxLzA0L2dpdC1yZW1vdmUtcmVtb3RlLw==">[Git筆記] 如何移除 remote origin<i class="fa fa-external-link-alt"></i></span>。</p>
</blockquote>
<p>想請問同步課綱 Repo，是不是就和「同步之前 Fork 過來的 Repo」情況相同呢？</p>
<ol>
<li><code>git remote add</code> 新增課綱 Repo 這個遠端節點</li>
<li><code>git pull</code> 把新課綱 Repo 同步到本地端，若發生衝突則手動解決再 <code>commit</code></li>
<li><code>git push</code> 同步回自己在 GitHub 的遠端 Repo</li>
</ol>
<p>自己依照這些步驟有成功把課綱 Repo 同步到 GitHub，想確認看看這觀念正不正確@@</p>
<hr>
<h2 id="常見狀況劇："><a href="#常見狀況劇：" class="headerlink" title="常見狀況劇："></a>常見狀況劇：</h2><h3 id="commit-message-送出後，發現打錯字了想要修改"><a href="#commit-message-送出後，發現打錯字了想要修改" class="headerlink" title="commit message 送出後，發現打錯字了想要修改"></a>commit message 送出後，發現打錯字了想要修改</h3><ol>
<li><code>git commit --amend</code>：進入 vim 編輯器，即可修改 commit message。但這個方法只能修改最後一次的 commit message</li>
</ol>
<p><img src="https://i.imgur.com/AD7xKzA.png" alt="git commit --amend"></p>
<ul>
<li>vim 編輯器介面如下，編輯完成後回到普通模式，輸入 <code>:wq</code> 存檔退出</li>
</ul>
<p><img src="https://i.imgur.com/Qc6ICVi.png" alt="Vim 編輯器"></p>
<ol start="2">
<li><code>git rebase</code>：可以修改更之前的 commit message，可參考<span class="exturl" data-url="aHR0cHM6Ly9naXRib29rLnR3L2NoYXB0ZXJzL3Jld3JpdGUtaGlzdG9yeS9jaGFuZ2UtY29tbWl0LW1lc3NhZ2UuaHRtbA==">詳細操作流程<i class="fa fa-external-link-alt"></i></span></li>
</ol>
<blockquote>
<p>補充：若是在已經 commit 而且又 push 的情形下，在本地端進行修改 commit message 可能會造成其他人的困擾。最好的方法還是 push 之前先檢查一下，避免錯的東西被放到遠端。</p>
</blockquote>
<h3 id="我-commit-了可是我又不想-commit-了"><a href="#我-commit-了可是我又不想-commit-了" class="headerlink" title="我 commit 了可是我又不想 commit 了"></a>我 commit 了可是我又不想 commit 了</h3><p><code>git reset HEAD^</code>：回到上一個 commit 的狀態，保留檔案變更，需要再 commit 來新增版本。預設是 –mixed，可參考 <span class="exturl" data-url="aHR0cHM6Ly9pdGhlbHAuaXRob21lLmNvbS50dy9hcnRpY2xlcy8xMDE4NzMwMw==">Git reset 的三種模式( soft mixed hard )比較<i class="fa fa-external-link-alt"></i></span>。</p>
<ul>
<li><code>HEAD</code> 代表最新的，<code>^</code> 代表前一個。</li>
<li>因此 <code>HEAD^</code> 就是最新 commit 的前一個狀態，也就是上一個 commit 的狀態。</li>
</ul>
<h3 id="我還沒-commit，但我想把檔案回復到上次-commit-的狀態"><a href="#我還沒-commit，但我想把檔案回復到上次-commit-的狀態" class="headerlink" title="我還沒 commit，但我想把檔案回復到上次 commit 的狀態"></a>我還沒 commit，但我想把檔案回復到上次 commit 的狀態</h3><ol>
<li><code>git checkout -- &lt;file&gt;</code>：把檔案回復到上一次 commit 的狀態</li>
<li><code>git checkout -- .</code>：把專案內的所有檔案都回復</li>
</ol>
<p><img src="https://i.imgur.com/6gSEitU.png" alt="git checkout --"></p>
<ul>
<li>也可使用 <code>git restore &lt;file&gt;</code>，和 <code>git checkout -- &lt;file&gt;</code> 作用相同。</li>
</ul>
<p><img src="https://i.imgur.com/WcRW8cK.png" alt="git restore"></p>
<h3 id="改-branch-的名稱"><a href="#改-branch-的名稱" class="headerlink" title="改 branch 的名稱"></a>改 branch 的名稱</h3><p><code>git branch -m feature</code>：將分支名稱改成 feature。</p>
<p><img src="https://i.imgur.com/keijtFp.png" alt="git branch -m 指令"></p>
<hr>
<h2 id="GitHub-Flow"><a href="#GitHub-Flow" class="headerlink" title="GitHub Flow"></a>GitHub Flow</h2><p>GitHub 建議管理專案的流程：<span class="exturl" data-url="aHR0cHM6Ly9ndWlkZXMuZ2l0aHViLmNvbS9pbnRyb2R1Y3Rpb24vZmxvdy8=">官網說明<i class="fa fa-external-link-alt"></i></span></p>
<p>當參與多人開發時：（圖片出自 <span class="exturl" data-url="aHR0cHM6Ly9hcmNjd2lraS51d3lvLmVkdS9pbmRleC5waHAvR2l0X1dvcmtmbG93">arccwiki<i class="fa fa-external-link-alt"></i></span>）</p>
<p><img src="https://i.imgur.com/p0VjqBQ.png" alt="GitHub Flow step "></p>
<ol>
<li>先 Fork 專案到自己的 repository，開新的 branch 進行開發</li>
<li>修改內容後 commit 新增版本，再 push 回自己的 repository</li>
<li>pull request 到原本專案的 repository 請求合併</li>
<li>在上面進行討論，等待對方的 code review</li>
<li>在合併前進行最終測試</li>
<li>合併成功，刪掉 branch</li>
</ol>
<hr>
<h2 id="實戰演練"><a href="#實戰演練" class="headerlink" title="實戰演練"></a>實戰演練</h2><blockquote>
<p>假設今天已經建立好本地端和遠端的 resposity，那要如何進行往後的更新呢？</p>
</blockquote>
<ol>
<li>新建一個 branch：<code>git branch joke_1</code></li>
<li>切換到該 branch：<code>git checkout joke_1</code></li>
<li>編輯檔案<code>笑話大全.txt</code></li>
<li>完成後，若有新增檔案，可使用 <code>git add .</code> 把檔案加入版本控制</li>
<li>進行 commit：<code>git commit -am “new joke”</code></li>
<li>push 本地端分支回遠端 GitHub：<code>git push origin joke_1</code></li>
<li>到 Github 查看 branch 頁面，提出 PR（pull request）</li>
<li>完成合併到遠端 master，即可刪除分支 joke_1</li>
<li>把 GitHub 更新的 master 同步到本地端：<code>git push origin master</code></li>
<li>回到本地端，使用 <code>git branch -d joke_1</code> 刪除分支，結束！</li>
</ol>
<hr>
<h2 id="客製化各個階段：Git-hook"><a href="#客製化各個階段：Git-hook" class="headerlink" title="客製化各個階段：Git hook"></a>客製化各個階段：Git hook</h2><p>用途是「當發生某事的時候通知我」。例如：當有人 commit、有人push 時通知我。</p>
<p>通常使用在 commit 或是 push 之前，用來檢查程式碼是否符合規範、是否改到不能更改的檔案、是否有放一些不該放的檔案或帳號密碼。</p>
<h2 id="補充：本地端與遠端-相關指令"><a href="#補充：本地端與遠端-相關指令" class="headerlink" title="補充：本地端與遠端 - 相關指令"></a>補充：本地端與遠端 - 相關指令</h2><ul>
<li>以下示意圖出自<span class="exturl" data-url="aHR0cHM6Ly93d3cudXRzYy51dG9yb250by5jYS9+YXRhZmxpb3ZpY2gvY3NjYzAxL2xlY3R1cmVzLzAyLWNvbmZpZy1tYW5hZ2VtZW50LTIxLS5wZGY=">此處<i class="fa fa-external-link-alt"></i></span></li>
</ul>
<p><img src="https://i.imgur.com/avOoPLF.png" alt="git terminology"></p>
<p>參考資料：</p>
<ol>
<li><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLnRlY2hicmlkZ2UuY2MvMjAxOC8wMS8xNy9sZWFybmluZy1wcm9ncmFtbWluZy1hbmQtY29kaW5nLXdpdGgtcHl0aG9uLWdpdC1hbmQtZ2l0aHViLXR1dG9yaWFsLw==">Git 與 Github 版本控制基本指令與操作入門教學<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9tZWRpdW0uY29tL0BtaWFoc3V3b3JrLyVFNyVBQyVBQyVFNCVCQSU4QyVFOSU4MCVCMS1naXQtJUU5JTgwJUIyJUU5JTlBJThFJUU0JUJEJUJGJUU3JTk0JUE4LWJyYW5jaC1tZXJnZS1hNTcxY2MwYTk1ZGU=">[第二週]Git 進階使用 Branch、Merge<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRib29rLnR3L2NoYXB0ZXJzL2dpdGh1Yi9wdXNoLXRvLWdpdGh1Yi5odG1s">Git教學：如何 Push 上傳到 GitHub？<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9ndWlkZXMuZ2l0aHViLmNvbS9pbnRyb2R1Y3Rpb24vZmxvdy8=">GitHub Guides - Understanding the GitHub flow<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9hcmNjd2lraS51d3lvLmVkdS9pbmRleC5waHAvR2l0X1dvcmtmbG93">Git Workflow - arccwiki<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRib29rLnR3L2NoYXB0ZXJzL3Jld3JpdGUtaGlzdG9yeS9jaGFuZ2UtY29tbWl0LW1lc3NhZ2UuaHRtbA==">【狀況題】修改歷史訊息<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cudXRzYy51dG9yb250by5jYS9+YXRhZmxpb3ZpY2gvY3NjYzAxL2xlY3R1cmVzLzAyLWNvbmZpZy1tYW5hZ2VtZW50LTIxLS5wZGY=">CSCC01: Configuration Management<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRib29rLnR3L2NoYXB0ZXJzL2dpdGh1Yi9zeW5jaW5nLWEtZm9yay5odG1s">【狀況題】怎麼跟上當初 fork 專案的進度？<i class="fa fa-external-link-alt"></i></span></li>
</ol>
]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Git</tag>
        <tag>GitHub</tag>
      </tags>
  </entry>
  <entry>
    <title>Git 版本控制：如何進行多人協作 &amp; 同步分支 </title>
    <url>/git-workflow/</url>
    <content><![CDATA[<h2 id="實作新功能一定要在分支進行"><a href="#實作新功能一定要在分支進行" class="headerlink" title="實作新功能一定要在分支進行"></a>實作新功能一定要在分支進行</h2><p>不管是在個人專案，還是在多人協作時，都必須記得在實作新功能時，一定要在分支上進行：</p>
<span id="more"></span>

<pre class="line-numbers language-none"><code class="language-none">$ git branch &lt;new_branch&gt;  &#x2F;&#x2F; 開新分支
$ git checkout &lt;new_branch&gt;  &#x2F;&#x2F; 切換到新分支
$ git commit -am &#39;new_commit&#39; 
$ git push origin &lt;new_branch&gt;  &#x2F;&#x2F; push 分支<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="多人協作之狀況劇"><a href="#多人協作之狀況劇" class="headerlink" title="多人協作之狀況劇"></a>多人協作之狀況劇</h2><p>在課程最一開始寫的 Git 筆記：<a href="https://heidiliu2020.github.io/git-github/">[week 1] 版本控制 - Git 進階指令 &amp; GitHub</a>，也有提到一些常見狀況劇。</p>
<p>最近在進行 Final Project 時，體驗到多人協作和個人專案的不同，有許多需要注意的地方，這裡舉幾個自己實際遇到的狀況以及解決方式：</p>
<ul>
<li>狀況一：如何同步分支</li>
<li>狀況二：如何新增要忽略版本控制的檔案</li>
<li>狀況三：如何撤回已經 push 的 branch</li>
<li>狀況四：我 commit 了可是我又不想 commit 了</li>
</ul>
<h3 id="狀況一：在-push-分支之前，該如何讓分支同步-master？"><a href="#狀況一：在-push-分支之前，該如何讓分支同步-master？" class="headerlink" title="狀況一：在 push 分支之前，該如何讓分支同步 master？"></a>狀況一：在 push 分支之前，該如何讓分支同步 master？</h3><p>當我們要 push 分支時，如果沒有先同步 master 進度，就會出現衝突問題，有兩種方式解決：</p>
<h4 id="第一種：切回-master-同步，直接再開一個新分支"><a href="#第一種：切回-master-同步，直接再開一個新分支" class="headerlink" title="第一種：切回 master 同步，直接再開一個新分支"></a>第一種：切回 master 同步，直接再開一個新分支</h4><p>這個方法可以確保新分支一定是同步遠端的狀態，缺點就是要記得先備份好要 commit 的內容，才能切回 master 同步：</p>
<pre class="line-numbers language-none"><code class="language-none">$ git checkout master  &#x2F;&#x2F; 切回 master
$ git pull origin master  &#x2F;&#x2F; 同步遠端 master
$ git branch &lt;new_branch&gt; &#x2F;&#x2F; 新開分支
$ git checkout &lt;new_branch&gt;  &#x2F;&#x2F; 切換到分支
$ git commit -am &#39;new_commit&#39; 
$ git push origin &lt;new_branch&gt; &#x2F;&#x2F; push 分支<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="第二種：繼續在舊的分支開發，需要先同步分支"><a href="#第二種：繼續在舊的分支開發，需要先同步分支" class="headerlink" title="第二種：繼續在舊的分支開發，需要先同步分支"></a>第二種：繼續在舊的分支開發，需要先同步分支</h4><p>較推薦這個方法，直接在舊分支同步遠端，就不須再另外新開分支：</p>
<pre class="line-numbers language-none"><code class="language-none">$ git pull origin master  &#x2F;&#x2F; 同步遠端 master
$ git commit -am &#39;new_commit&#39;
$ git push origin &lt;old_branch&gt; &#x2F;&#x2F; push 分支<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>依照上述其中一種方式，之後就可以在 GitHub 頁面發 PR 進行 merge，解決衝突問題。<br><br></p>
<h3 id="狀況二：不小心把要被忽略的檔案-push-上去了！"><a href="#狀況二：不小心把要被忽略的檔案-push-上去了！" class="headerlink" title="狀況二：不小心把要被忽略的檔案 push 上去了！"></a>狀況二：不小心把要被忽略的檔案 push 上去了！</h3><p>如果是在建立 <code>.gitignore</code> 之前，不小心把要被版本控制忽略的檔案給 push 上 GitHub 的話該怎麼辦呢？</p>
<p>以 React 中會自動生成的 <code>.eslintcache</code> 為例，如果在忽略之前就先把檔案 push 上去，之後多人協作要進行 merge 時，都必須解決衝突問題，這時只要按照以下步驟：</p>
<h4 id="1-切換到-master，同步專案"><a href="#1-切換到-master，同步專案" class="headerlink" title="1. 切換到 master，同步專案"></a>1. 切換到 master，同步專案</h4><pre class="line-numbers language-none"><code class="language-none">$ git pull origin master<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h4 id="2-刪掉本地端的-eslintcache-檔案"><a href="#2-刪掉本地端的-eslintcache-檔案" class="headerlink" title="2. 刪掉本地端的 .eslintcache 檔案"></a>2. 刪掉本地端的 <code>.eslintcache</code> 檔案</h4><h4 id="3-將-eslintcache-加入專案根目錄的-gitignore-忽略版本控制"><a href="#3-將-eslintcache-加入專案根目錄的-gitignore-忽略版本控制" class="headerlink" title="3. 將 .eslintcache 加入專案根目錄的 .gitignore 忽略版本控制"></a>3. 將 <code>.eslintcache</code> 加入專案根目錄的 <code>.gitignore</code> 忽略版本控制</h4><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F; .gitignore 檔案

*.eslintcache<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<h4 id="4-commit-本次操作，commit-名稱可自行修改"><a href="#4-commit-本次操作，commit-名稱可自行修改" class="headerlink" title="4. commit 本次操作，commit 名稱可自行修改"></a>4. commit 本次操作，commit 名稱可自行修改</h4><pre class="line-numbers language-none"><code class="language-none">$ git commit -am &quot;fix: remove .eslintcache&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h4 id="5-push-到-GitHub-master，這時-GitHub-上的專案就不會出現應該被忽略的檔案了"><a href="#5-push-到-GitHub-master，這時-GitHub-上的專案就不會出現應該被忽略的檔案了" class="headerlink" title="5. push 到 GitHub master，這時 GitHub 上的專案就不會出現應該被忽略的檔案了"></a>5. push 到 GitHub master，這時 GitHub 上的專案就不會出現應該被忽略的檔案了</h4><pre class="line-numbers language-none"><code class="language-none">$ git push origin master<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h4 id="6-讓其他協作者-pull-同步專案，修改完成！"><a href="#6-讓其他協作者-pull-同步專案，修改完成！" class="headerlink" title="6. 讓其他協作者 pull 同步專案，修改完成！"></a>6. 讓其他協作者 pull 同步專案，修改完成！</h4><br>

<h3 id="狀況三：我-commit-了可是我又不想-commit-了"><a href="#狀況三：我-commit-了可是我又不想-commit-了" class="headerlink" title="狀況三：我 commit 了可是我又不想 commit 了"></a>狀況三：我 commit 了可是我又不想 commit 了</h3><h4 id="回到上一個-commit-狀態，保留檔案變更，需要再-commit-來新增版本："><a href="#回到上一個-commit-狀態，保留檔案變更，需要再-commit-來新增版本：" class="headerlink" title="回到上一個 commit 狀態，保留檔案變更，需要再 commit 來新增版本："></a>回到上一個 commit 狀態，保留檔案變更，需要再 commit 來新增版本：</h4><ul>
<li>HEAD 代表最新的，^ 代表前一個，因此 HEAD^ 就是上一個 commit 的狀態</li>
<li>預設是 –mixed，可參考 <span class="exturl" data-url="aHR0cHM6Ly9pdGhlbHAuaXRob21lLmNvbS50dy9hcnRpY2xlcy8xMDE4NzMwMw==">Git reset 的三種模式（soft mixed hard）<i class="fa fa-external-link-alt"></i></span>比較</li>
</ul>
<pre class="line-numbers language-none"><code class="language-none">$ git reset HEAD^  &#x2F;&#x2F; 退回到上一個 commit，等同於 git reset HEAD~1
$ git log   &#x2F;&#x2F; 可查看版本號
$ git reset &lt;38e7e30 &gt;  &#x2F;&#x2F; 退回到 &lt;38e7e30&gt; 這個 commit<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<br>

<h3 id="狀況四：如何撤回已經-push-的-branch"><a href="#狀況四：如何撤回已經-push-的-branch" class="headerlink" title="狀況四：如何撤回已經 push 的 branch"></a>狀況四：如何撤回已經 push 的 branch</h3><h4 id="1-退回本地端的-commit-狀態"><a href="#1-退回本地端的-commit-狀態" class="headerlink" title="1. 退回本地端的 commit 狀態"></a>1. 退回本地端的 commit 狀態</h4><p>需注意這裡用 <code>git reset --hard</code> 指令，除了回到指定 commit 版本，程式碼也會回到指定版本的狀態：</p>
<pre class="line-numbers language-none"><code class="language-none">$ git log   &#x2F;&#x2F; 可查看版本號
$ git reset --hard &lt;6gye93e&gt;  &#x2F;&#x2F; 退回到 &lt;6gye93e&gt; 這個 commit<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h4 id="2-強制-push-本地端-branch-到遠端"><a href="#2-強制-push-本地端-branch-到遠端" class="headerlink" title="2. 強制 push 本地端 branch 到遠端"></a>2. 強制 push 本地端 branch 到遠端</h4><p>由於本地端分支版本低於遠端分支版本，這裡必須使用 <code>--force</code> 來強制 push 想要拆掉重做的 branch：</p>
<pre class="line-numbers language-none"><code class="language-none">$ git push origin &lt;branch&gt; --force<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>這樣就成功撤銷已經 push 的 branch，回到指定的 commit 狀態了！<br><br></p>
<h2 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h2><p>其實 Git 版本控制是在 Lidemy 課程最一開始學的，之後繳交作業都是透過 Git 進行，中間也曾遇到種種狀況，像是不小心把同步課程大綱也 push 上去等等。</p>
<p>最近和同學實際進行團體協作，才發現需要注意的事情又更多了！常常一個不注意下錯指令，把應該 push 的分支 push 成 master，還沒同步分支必須解決的衝突問題等等，趁這個機會把一些自己實際遇到的狀況給寫下來。熟悉多人協作以後，感覺自己又對版本控制有更深一層的認識。</p>
]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Git</tag>
        <tag>GitHub</tag>
      </tags>
  </entry>
  <entry>
    <title>[week 1] 版本控制 - Git 概念 ＆ 基本指令</title>
    <url>/git/</url>
    <content><![CDATA[<blockquote>
<p>本篇為 <span class="exturl" data-url="aHR0cHM6Ly9saWRlbXkuY29tL3AvZ2l0MTAx">[GIT101] Git 超新手入門<i class="fa fa-external-link-alt"></i></span> 這門課程的學習筆記。</p>
</blockquote>
<pre class="line-numbers language-none"><code class="language-none">學習目標：

 了解 Git 在做什麼，以及為何我們需要 Git
 知道 add、commit、push、pull 等基本 Git 指令<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<span id="more"></span>
<hr>
<h2 id="什麼是版本控制？"><a href="#什麼是版本控制？" class="headerlink" title="什麼是版本控制？"></a>什麼是版本控制？</h2><h4 id="簡言之，就是將一個檔案所有歷史紀錄的版本都保存起來，以便日後參考。"><a href="#簡言之，就是將一個檔案所有歷史紀錄的版本都保存起來，以便日後參考。" class="headerlink" title="簡言之，就是將一個檔案所有歷史紀錄的版本都保存起來，以便日後參考。"></a>簡言之，就是將一個檔案所有歷史紀錄的版本都保存起來，以便日後參考。</h4><p>我們其實曾接觸過版本控制，例如備份檔案，或是以不同檔名保存編輯過的檔案：</p>
<p><img src="https://i.imgur.com/2nnCsCD.png" alt="個人的版本控制"></p>
<h2 id="但這種管理方式會碰到哪些問題？"><a href="#但這種管理方式會碰到哪些問題？" class="headerlink" title="但這種管理方式會碰到哪些問題？"></a>但這種管理方式會碰到哪些問題？</h2><ol>
<li>檔案一多、時間久了之後不易管理</li>
<li>多人協作易發生衝突，無法快速分辨檔案差異</li>
</ol>
<h2 id="那麼，該如何做版本控制呢？"><a href="#那麼，該如何做版本控制呢？" class="headerlink" title="那麼，該如何做版本控制呢？"></a>那麼，該如何做版本控制呢？</h2><ol>
<li><p>需要新版本時：<br>開一個新資料夾，用來完整保存當時檔案狀態。</p>
</li>
<li><p>不想加入版本控制：<br>就不需加入資料夾，例如有些不會更動的檔案（電腦設定檔、log 檔），或者不需做版控的檔案（例如帳密等有安全性考量）。</p>
</li>
<li><p>避免版本號衝突：<br>會以亂數，也就是絕不會重複的流水號作為資料夾名稱。</p>
</li>
<li><p>知道最新版本：<br>開一個檔案（new）來存最新的版本號。</p>
</li>
<li><p>保存歷史紀錄：<br>開一個檔案（order）整理流水號。</p>
<h4 id="上述概念，其實就類似-Git-版本控制系統的運作模式。目的是進行備份與共用，讓電腦自動幫我們做一些記錄與管理。"><a href="#上述概念，其實就類似-Git-版本控制系統的運作模式。目的是進行備份與共用，讓電腦自動幫我們做一些記錄與管理。" class="headerlink" title="上述概念，其實就類似 Git 版本控制系統的運作模式。目的是進行備份與共用，讓電腦自動幫我們做一些記錄與管理。"></a>上述概念，其實就類似 Git 版本控制系統的運作模式。目的是進行備份與共用，讓電腦自動幫我們做一些記錄與管理。</h4></li>
</ol>
<blockquote>
<p>補充：GitHub 就是透過 Git 進行版本控制的軟體原始碼代管服務平台。</p>
</blockquote>
<hr>
<h2 id="Git-基本指令操作"><a href="#Git-基本指令操作" class="headerlink" title="Git 基本指令操作"></a>Git 基本指令操作</h2><h3 id="git-init：初始化當前目錄"><a href="#git-init：初始化當前目錄" class="headerlink" title="git init：初始化當前目錄"></a><code>git init</code>：初始化當前目錄</h3><p>在當前位置新增 <code>.git</code> 隱藏資料夾，也就是建立 Git Repository（檔案庫）。目的是初始化這個目錄，讓 Git 對這個目錄做版本控管。</p>
<p><img src="https://i.imgur.com/BVuxZag.png" alt="init 初始化"></p>
<h3 id="git-status：檢查當前版本狀態"><a href="#git-status：檢查當前版本狀態" class="headerlink" title="git status：檢查當前版本狀態"></a><code>git status</code>：檢查當前版本狀態</h3><p>例如：未進入版本控管（Untracked）、新增檔案（New File）、刪除檔案（Deleted）、檔案已修改（Modified）等。是會經常使用的指令。</p>
<h3 id="git-add：加入版本控制"><a href="#git-add：加入版本控制" class="headerlink" title="git add：加入版本控制"></a><code>git add</code>：加入版本控制</h3><p>把檔案從 Untracked（不加入的檔案）移到 stage（加入版本控制的檔案）。</p>
<p>依照括號內提示可知：</p>
<ul>
<li><code>git rm --cached &lt;file&gt;</code>：取消版控</li>
<li><code>git add &lt;file&gt;</code>：加入版控</li>
<li>若檔案數量太多，可使用 <code>git add .</code> 把檔案全部加入版本控制。</li>
</ul>
<p><img src="https://i.imgur.com/vX2e43W.png" alt="git add 指令"></p>
<h3 id="git-commit：新建版本"><a href="#git-commit：新建版本" class="headerlink" title="git commit：新建版本"></a><code>git commit</code>：新建版本</h3><ol>
<li>輸入指令後會進入 vim 介面，就可以編輯提交版本訊息（commit message）</li>
<li>若不想進入 vim，也可輸入 <code>git commit -m &quot;message&quot;</code> 直接建立新版本</li>
</ol>
<p><img src="https://i.imgur.com/NlBaU85.png" alt="git commit 指令"></p>
<h3 id="小技巧：git-commit-am-quot-message-quot"><a href="#小技巧：git-commit-am-quot-message-quot" class="headerlink" title="小技巧：git commit -am　&quot;message&quot;"></a>小技巧：<code>git commit -am　&quot;message&quot;</code></h3><p>輸入 <code>git commit -am &quot;message&quot;</code> 可一次完成 <code>add</code> 和 <code>commit</code> 兩個指令動作。</p>
<h4 id="但需注意："><a href="#但需注意：" class="headerlink" title="但需注意："></a>但需注意：</h4><ol>
<li><code>-a</code> 指令只對「已存在」的檔案有效；不適用於新加入的檔案（Untracked File）</li>
<li>若有新增的檔案，仍須先 <code>add</code> 再 <code>commit</code> ，才能把新檔加入版控</li>
</ol>
<h3 id="git-log：查看版本紀錄"><a href="#git-log：查看版本紀錄" class="headerlink" title="git log：查看版本紀錄"></a><code>git log</code>：查看版本紀錄</h3><p>從新到舊列出，內容分別是版本號碼、提交者、提交時間。</p>
<p><img src="https://i.imgur.com/gZ9G2c1.png" alt="git log 指令"></p>
<ul>
<li><code>git log --oneline</code>：輸出更簡短的 log，只用版本號前七碼代值</li>
</ul>
<p><img src="https://i.imgur.com/V0HyJbP.png" alt="git log --oneline 指令"></p>
<h3 id="git-checkout：切換到某個版本"><a href="#git-checkout：切換到某個版本" class="headerlink" title="git checkout：切換到某個版本"></a><code>git checkout</code>：切換到某個版本</h3><p>切換到某個版本，可查看過去的版本內容。</p>
<ul>
<li><code>git checkout &lt;版本號碼&gt;</code> ：切換到指定版本</li>
<li><code>git checkout master</code> ：切換到最新版本</li>
</ul>
<p><img src="https://i.imgur.com/hqROiIw.png" alt="git checkout 指令"></p>
<h3 id="gitignore：忽略不要版本控制的檔案"><a href="#gitignore：忽略不要版本控制的檔案" class="headerlink" title=".gitignore：忽略不要版本控制的檔案"></a><code>.gitignore</code>：忽略不要版本控制的檔案</h3><p><code>.gitignore</code> 這個檔案本身也需加入版本控制。通常會加入忽略清單的檔案有：系統檔案、記錄檔、暫存檔等，可參考 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL3JlYWN0L2Jsb2IvbWFzdGVyLy5naXRpZ25vcmU=">Facebook 開源專案 React 裡的 .gitignore<i class="fa fa-external-link-alt"></i></span> 為例子。</p>
<h4 id="那麼，該如何建立忽略清單呢？"><a href="#那麼，該如何建立忽略清單呢？" class="headerlink" title="那麼，該如何建立忽略清單呢？"></a>那麼，該如何建立忽略清單呢？</h4><ol>
<li><p>輸入 <code>touch .gitignore</code> 建立檔案</p>
</li>
<li><p>輸入 <code>vim .gitignore</code> 進入 <code>vim</code> 介面</p>
<p><img src="https://i.imgur.com/dwIzY2m.png" alt="進入vim介面"></p>
</li>
<li><p>以不加入版控的 test 為例，輸入完 test 後儲存離開</p>
</li>
</ol>
<p><img src="https://i.imgur.com/WtYtJkL.png" alt="建立忽略清單"></p>
<ol start="4">
<li>以 <code>git status</code> 查看，可知 test 這個檔案已被 git 忽略</li>
</ol>
<p><img src="https://i.imgur.com/XUsgqPr.png" alt="完成忽略清單"></p>
<ol start="5">
<li>如此即可使用 <code>git add .</code> 把所有檔案加入版本控制，包括新舊檔案；<br>再用 <code>git commit -m &quot;message&quot;</code> 建立新版本</li>
</ol>
<h2 id="小結"><a href="#小結" class="headerlink" title="小結"></a>小結</h2><p>複習上述指令，以下為開始使用 git 的流程：</p>
<ol>
<li><code>git init</code>：初始化當前位置，讓 Git 對這個目錄進行版控</li>
<li>建立 <code>.gitignore</code> 忽略不需版本控制的檔案</li>
<li><code>git add .</code>：把所有檔案加入版本控制（把東西放到一個暫存資料夾 <code>temp</code>  ）</li>
<li><code>git commit -am &quot;message&quot;</code>：新建一個版本（把 <code>temp</code> 資料夾改名為<code>&quot;版本號&quot;</code>）<ul>
<li>若有新檔案，需重複<code>步驟 3.</code> 把所有檔案加進版本控制，才能執行 <code>commit</code></li>
<li>在 commit 之前，可用 <code>git diff</code> 查看與上一版的差異</li>
</ul>
</li>
<li><code>git checkout &lt;版本號&gt;</code> ： 可以切換各個版本（去到某個資料夾底下）<br><code>git checkout master</code> ： 回到最新版本</li>
</ol>
<blockquote>
<p>操作 Git 時突然每行句首都出現 <code>&gt;</code> 這個符號，無法繼續輸入指令怎麼辦？</p>
<p>解決方法：ctrl + d 即可退出。這種情況可能是因為只輸入了一邊雙引號或單引號，導致沒有輸入完成（輸入沒有閉合）。</p>
</blockquote>
<hr>
<h3 id="補充-1：檔案在-Git-底下的四種狀態"><a href="#補充-1：檔案在-Git-底下的四種狀態" class="headerlink" title="補充 1：檔案在 Git 底下的四種狀態"></a>補充 1：檔案在 Git 底下的四種狀態</h3><ul>
<li>File status lifecycle（圖片來自 <span class="exturl" data-url="aHR0cHM6Ly9rdWVpYmxvZy5oZXJva3VhcHAuY29tL3Bvc3QvZ2l0JUU1JUFEJUI4JUU3JUJGJTkyJUU0JUI5JThCJUU0JUJBJThDJTIwLSUyMGNvbW1pdCVFOCVBQyU5QiVFOCVBNyVBMyVFMyU4MCU4MXJlc2V0JUU1JUJFJUE5JUU1JThFJTlGJUU3JTg5JTg4JUU2JTlDJUFDJUUzJTgwJTgxJUU1JUJCJUJBJUU3JUFCJThCJUU1JTg4JTg2JUU2JTk0JUFGLw==">link<i class="fa fa-external-link-alt"></i></span>）<br><img src="https://i.imgur.com/jz9qufH.png" alt="File status lifecycle"></li>
</ul>
<ol>
<li>untracked（未追蹤的）：代表檔案尚未被加入版控</li>
<li>staged（暫存區）：等待被 commit 的檔案，才能執行 <code>git commit</code> 指令送入版本庫</li>
<li>unmodified（未修改的）：代表檔案第一次被加入，或檔案內容與 <code>HEAD</code> 內容一致的狀態</li>
<li>modified（已修改的）：代表檔案已經被編輯過，或檔案內容與 <code>HEAD</code> 內容不一致的狀態</li>
</ol>
<h3 id="補充-2：設定帳號和姓名"><a href="#補充-2：設定帳號和姓名" class="headerlink" title="補充 2：設定帳號和姓名"></a>補充 2：設定帳號和姓名</h3><p>第一次輸入 <code>git commit</code> 指令時出現錯誤，跳出需要設定帳號和姓名的畫面，這時需輸入以下指令：</p>
<pre class="line-numbers language-none"><code class="language-none">git config --global user.name &quot;your name&quot;　　&#x2F;&#x2F;  &quot;換成自己的帳號和信箱&quot;
git config --global user.email &quot;your email&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>


<p>參考資料：</p>
<ol>
<li><span class="exturl" data-url="aHR0cHM6Ly9kamFuZ29naXJsc3RhaXBlaS5oZXJva3VhcHAuY29tL3R1dG9yaWFscy92ZXJzaW9uLWNvbnRyb2wtd2l0aC1naXQvP29zPXdpbmRvd3M=">用 Git 進行版本控制<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9tZWRpdW0uY29tL0BtYWtlcmluY29sbGVnZTIwMTgvJUU1JUI3JUE1JUU3JUE4JThCJUU1JUI4JUFCJUU1JUJGJTg1JUU2JTg3JTgyJUU3JTlBJTg0JUU3JTg5JTg4JUU2JTlDJUFDJUU2JThFJUE3JUU1JTg4JUI2JUU2JThBJTgwJUU4JUExJTkzLSVFNCVCQiU4MCVFOSVCQSVCQyVFNiU5OCVBRmdpdGh1Yi0zNzY0MjFmZDg3MWQ=">【工程師必懂的版本控制技術】什麼是GitHub?<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9jeXRoaWx5YS5naXRodWIuaW8vMjAxOC8wNC8wNS9naXQv">Git 筆記| Summer。桑莫。夏天<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly95YWtpbWhzdS5jb20vcHJvamVjdC9wcm9qZWN0X3cxX0dpdF8xLmh0bWw=">[第一週] 版本控制 - 原理 ＆ 基本 Git 指令 by Yakim<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9rdWVpYmxvZy5oZXJva3VhcHAuY29tL3Bvc3QvZ2l0JUU1JUFEJUI4JUU3JUJGJTkyJUU0JUI5JThCJUU0JUJBJThDJTIwLSUyMGNvbW1pdCVFOCVBQyU5QiVFOCVBNyVBMyVFMyU4MCU4MXJlc2V0JUU1JUJFJUE5JUU1JThFJTlGJUU3JTg5JTg4JUU2JTlDJUFDJUUzJTgwJTgxJUU1JUJCJUJBJUU3JUFCJThCJUU1JTg4JTg2JUU2JTk0JUFGLw==">[KueiKuei ‘s Blog] git學習之二 - commit講解、reset復原版本、建立分支<i class="fa fa-external-link-alt"></i></span></li>
</ol>
]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>[week 13] 前端工具之三 - gulp、webpack</title>
    <url>/gulp-webpack/</url>
    <content><![CDATA[<blockquote>
<p>本篇為 <span class="exturl" data-url="aHR0cHM6Ly9saWRlbXkuY29tL3AvZmUyMDE=">[FE201] 前端中階：那些前端會用到的工具們<i class="fa fa-external-link-alt"></i></span> 這門課程的學習筆記。如有錯誤歡迎指正。</p>
</blockquote>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在使用新工具之前，大致會依照下列步驟：</p>
<ol>
<li>安裝工具</li>
<li>閱讀官方文件</li>
<li>更改設定檔<span id="more"></span>
</li>
</ol>
<hr>
<h2 id="gulp：整合流程"><a href="#gulp：整合流程" class="headerlink" title="gulp：整合流程"></a>gulp：整合流程</h2><p><span class="exturl" data-url="aHR0cHM6Ly9ndWxwanMuY29tLw==">gulp<i class="fa fa-external-link-alt"></i></span> 是一個前端自動化構建工具，開發者可使用它來建構自動化工作流程。</p>
<h3 id="為什麼需要-glup？"><a href="#為什麼需要-glup？" class="headerlink" title="為什麼需要 glup？"></a>為什麼需要 glup？</h3><p>為了將工作流程自動化，也就是整合前端開發環境。藉由簡化工作量，可讓開發者將重點放在功能的開發上。</p>
<p>例如下列功能：</p>
<ul>
<li>讓網頁自動重新整理</li>
<li>編譯 SASS 、程式碼檢測</li>
<li>壓縮 CSS, JS, 圖檔</li>
<li>自訂任務流程..</li>
</ul>
<h3 id="如何安裝"><a href="#如何安裝" class="headerlink" title="如何安裝"></a>如何安裝</h3><blockquote>
<p><span class="exturl" data-url="aHR0cHM6Ly9ub2RlanMub3JnL2VuLw==">Node.js<i class="fa fa-external-link-alt"></i></span> 是一個讓 Javascript 運行在服務端的開發平台。</p>
</blockquote>
<p>由於 gulp 是基於 Node.js 進行開發，使用前必須先安裝 node.js、npm。接著即可按照<span class="exturl" data-url="aHR0cHM6Ly9ndWxwanMuY29tL2RvY3MvZW4vZ2V0dGluZy1zdGFydGVkL3F1aWNrLXN0YXJ0Lw==">官方文件 Quick Start<i class="fa fa-external-link-alt"></i></span> 安裝 gulp：</p>
<ol>
<li><code>npm install --global gulp-cli</code>：安裝 gulp-cli</li>
<li>開啟需使用 gulp 的專案資料夾</li>
<li><code>npm init</code>：進行初始化</li>
<li><code>npm install --save-dev gulp</code>：安裝 gulp package</li>
<li><code>gulp --version</code>：可使用指令檢查是否安裝成功</li>
</ol>
<h3 id="gulp-提供的-API"><a href="#gulp-提供的-API" class="headerlink" title="gulp 提供的 API"></a>gulp 提供的 API</h3><ul>
<li>gulp.task　執行工作</li>
<li>gulp.src　執行資料來源</li>
<li>gulp.dest　執行結果位置</li>
<li>gulp.watch　監視執行過程中，資料是否變更</li>
</ul>
<p>參考資料：</p>
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9jb2RlcnR3LmNvbS8lRTclQTglOEIlRTUlQkMlOEYlRTglQUElOUUlRTglQTglODAvNDE4NTUzLw==">什麼是gulp,怎麼使用gulp | 程式前沿<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9tZWRpdW0uY29tL0BodWdoX1Byb2dyYW1fbGVhcm5pbmdfZGlhcnlfSnMvJUU1JTg5JThEJUU3JUFCJUFGJUU0JUI4JUFEJUU5JTlBJThFLWd1bHAtNzkxMTMyYmVhOWYx">前端中階：gulp. 介紹| by Hugh’s Program learning | Medium<i class="fa fa-external-link-alt"></i></span></li>
</ul>
<h2 id="uglify-與-minify"><a href="#uglify-與-minify" class="headerlink" title="uglify 與 minify"></a>uglify 與 minify</h2><h3 id="uglify"><a href="#uglify" class="headerlink" title="uglify"></a>uglify</h3><ul>
<li><code>gulp-uglify</code>：混淆並壓縮 JavaScript 檔案</li>
<li>壓縮：減少代碼量，減少網絡下載時間以及瀏覽器的解析時間</li>
<li>混淆：藉此提升代碼閱讀難度，有一定程度的保護代碼作用</li>
</ul>
<p>配置範例：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> gulp <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'gulp'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>               <span class="token comment">// 載入 gulp</span>
<span class="token keyword">let</span> gulpUglify <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'gulp-uglify'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 載入 gulp-uglify</span>

gulp<span class="token punctuation">.</span><span class="token function">task</span><span class="token punctuation">(</span><span class="token string">'script'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    gulp<span class="token punctuation">.</span><span class="token function">src</span><span class="token punctuation">(</span><span class="token string">'javascript/original/*.js'</span><span class="token punctuation">)</span>        <span class="token comment">// 指定要處理的原始 JavaScript 檔案目錄</span>
        <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">gulpUglify</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                     <span class="token comment">// 將 JavaScript 做最小化</span>
        <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>gulp<span class="token punctuation">.</span><span class="token function">dest</span><span class="token punctuation">(</span><span class="token string">'javascript/minify'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 指定最小化後的 JavaScript 檔案目錄</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="minify"><a href="#minify" class="headerlink" title="minify"></a>minify</h3><ul>
<li><code>gulp-minify-css</code>：壓縮 CSS 檔案</li>
<li>壓縮：藉由去掉空格、換行符號等，縮短變數跟 code 長度，以節省瀏覽器 Parse（解析）時間</li>
<li>但更新的版本已經不太適用，改為使用 <code> gulp-clean-css</code></li>
</ul>
<p>配置範例：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> gulp <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'gulp'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> cleanCSS <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'gulp-clean-css'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

gulp<span class="token punctuation">.</span><span class="token function">task</span><span class="token punctuation">(</span><span class="token string">'minify-css'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> gulp<span class="token punctuation">.</span><span class="token function">src</span><span class="token punctuation">(</span><span class="token string">'styles/*.css'</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">cleanCSS</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>compatibility<span class="token operator">:</span> <span class="token string">'ie8'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>gulp<span class="token punctuation">.</span><span class="token function">dest</span><span class="token punctuation">(</span><span class="token string">'dist'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>參考資料：</p>
<ul>
<li><span class="exturl" data-url="aHR0cDovL2tlanl1bi5naXRodWIuaW8vZ3VscC1sZWFybmluZy1ub3Rlcy9wbGd1aW5zL0phdmFTY3JpcHQvUGx1Z2lucy1KYXZhU2NyaXB0LWd1bHAtdWdsaWZ5Lmh0bWw=">【gulp-uglify】最小化 JavaScript | gulp 學習筆記<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9pdGhlbHAuaXRob21lLmNvbS50dy9hcnRpY2xlcy8xMDE5MTk5Mg==">前端也需要編譯？Transpile、Compile、Minify、Uglify 基本介紹<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9jb2RlcnR3LmNvbS8lRTclQTglOEIlRTUlQkMlOEYlRTglQUElOUUlRTglQTglODAvNjc0NjI1Lw==">亦敵亦友的uglify<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9pdGhlbHAuaXRob21lLmNvbS50dy9hcnRpY2xlcy8xMDIyNTY2Ng==">[試著把切版專案升級到 gulp4.0 吧] Day21 CSS 的處理：談壓縮 CSS 與 gulp-clean-css<i class="fa fa-external-link-alt"></i></span></li>
</ul>
<hr>
<h2 id="Webpack：打包程式碼"><a href="#Webpack：打包程式碼" class="headerlink" title="Webpack：打包程式碼"></a>Webpack：打包程式碼</h2><h3 id="什麼是-Webpack"><a href="#什麼是-Webpack" class="headerlink" title="什麼是 Webpack"></a>什麼是 Webpack</h3><p>Webpack　是一套模組整合工具。可將零散的 JavaScript 模組打包，然後在瀏覽器上運行，解決舊瀏覽器不支援部分新語法的問題，也利於後續管理與維護。</p>
<p>此外，Webpack 也提供了前端開發缺乏的模組化開發方式，可將各種靜態資源視為模組，例如 JS、CSS、SASS、圖片檔等，透過不同的 loader 將資源轉換並載入，再利用 Webpack 進行打包成 JS 檔，生成最佳化過的程式碼。</p>
<h3 id="為什麼要使用-Webpack？"><a href="#為什麼要使用-Webpack？" class="headerlink" title="為什麼要使用 Webpack？"></a>為什麼要使用 Webpack？</h3><p>若不使用 Webpack，可能會遇到下列問題：</p>
<ol>
<li>瀏覽器支援度：由於部分瀏覽器不支援 ES6 模組，例如 IE，若要使用 import、export 等語法，則需要其他工具來進行轉換。</li>
<li>不易引用套件：若想要引用他人撰寫的 library 套件，需考慮相容性問題，以及可能造成命名衝突。</li>
</ol>
<h3 id="如何安裝-1"><a href="#如何安裝-1" class="headerlink" title="如何安裝"></a>如何安裝</h3><p>跟著官方教學步驟 <span class="exturl" data-url="aHR0cHM6Ly93ZWJwYWNrLmpzLm9yZy9ndWlkZXMvZ2V0dGluZy1zdGFydGVkLw==">Getting Started<i class="fa fa-external-link-alt"></i></span> 安裝 webpack：</p>
<pre class="line-numbers language-none"><code class="language-none">mkdir webpack-demo
cd webpack-demo
npm init -y
npm install webpack webpack-cli --save-dev<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p><img src="https://i.imgur.com/MP3ufbd.png"></p>
<h3 id="相關語法"><a href="#相關語法" class="headerlink" title="相關語法"></a>相關語法</h3><blockquote>
<p><code>dev</code>：代表開發時才會使用，打包後就不會出現在裡面（記錄在 package.json -&gt; devDependencies）</p>
</blockquote>
<ul>
<li>下載 jquery</li>
</ul>
<pre class="line-numbers language-none"><code class="language-none">npm install jquery webpack-cli --save-dev<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ul>
<li>css-Loader：用來解析 CSS 檔</li>
</ul>
<pre class="line-numbers language-none"><code class="language-none">npm install --save-dev css-loader
npm install --save-dev style-loader<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<ul>
<li>babel-loader</li>
</ul>
<pre class="line-numbers language-none"><code class="language-none">npm install -D babel-loader @babel&#x2F;core @babel&#x2F;preset-env<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ul>
<li>sass-loader</li>
</ul>
<pre class="line-numbers language-none"><code class="language-none">npm install sass-loader sass webpack --save-dev<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h3 id="執行步驟"><a href="#執行步驟" class="headerlink" title="執行步驟"></a>執行步驟</h3><ul>
<li>需要進行編譯的檔案，通常不會直接放在根目錄，而是會先放在 src（source code），使用工具轉換後再放到其他地方。</li>
<li>webpack 預設執行檔案路徑如下：</li>
</ul>
<pre class="line-numbers language-none"><code class="language-none">webpack-demo&#x2F;src&#x2F;index.js<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>以 index.js 引入 utils.js 為例：</p>
<h4 id="utils-js"><a href="#utils-js" class="headerlink" title="utils.js"></a>utils.js</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> Utils <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  <span class="token function-variable function">first</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">str</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> str<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> Utils<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="index-js"><a href="#index-js" class="headerlink" title="index.js"></a>index.js</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> utils <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./utils'</span><span class="token punctuation">)</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>utils<span class="token punctuation">.</span><span class="token function">first</span><span class="token punctuation">(</span><span class="token string">'abc'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>在 CLI 執行 <code>npm src/index.js</code> 後印出 <code>a</code>，代表成功引入檔案。</p>
<p><img src="https://i.imgur.com/QmPof6p.png"></p>
<p>接著以 <code>npx webpack</code> 執行打包，完成會自動把檔案 main.js 放在資料夾 dist。</p>
<p>若執行檔案 <code>npm dist/main.js</code> 仍會得到相同結果：</p>
<p><img src="https://i.imgur.com/aE3nKoD.png"></p>
<p>接著在 index.html 引入：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"dist/main.js"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>即可透過 webpack 打包 module，讓我們能夠在瀏覽器上執行使用 require 語法。</p>
<h3 id="webpack-config-js：預設執行檔"><a href="#webpack-config-js：預設執行檔" class="headerlink" title="webpack.config.js：預設執行檔"></a><code>webpack.config.js</code>：預設執行檔</h3><p>在安裝好 loader 後，需設定執行檔，透過指定 rules 來執行檔案：</p>
<h4 id="基本設定"><a href="#基本設定" class="headerlink" title="基本設定"></a>基本設定</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// webpack.config.js</span>
<span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
   mode<span class="token operator">:</span> <span class="token string">''</span><span class="token punctuation">,</span>
  entry<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'./src/index'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">// 在 index 檔案後的 .js 副檔名是可選的</span>
  output<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    path<span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'dist'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    filename<span class="token operator">:</span> <span class="token string">'bundle.js'</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="屬性介紹"><a href="#屬性介紹" class="headerlink" title="屬性介紹"></a>屬性介紹</h4><ul>
<li>mode：使用的模式。預設為 production，代表正式生產環境版本；開發使用 development 則不會進行壓縮</li>
<li>entry：是 bundle 的進入點，entry 是一個陣列。根據需求，webpack 允許可以有多個進入點，來產生多個 bundle 檔案。</li>
<li>output：宣告 webpack 輸出的形式<ul>
<li>path：存放 bundle 檔案的位置</li>
<li>filename：bundle 檔案名稱</li>
</ul>
</li>
</ul>
<h4 id="接著以打包-style-css-和-index-js-所需進行的設定為例："><a href="#接著以打包-style-css-和-index-js-所需進行的設定為例：" class="headerlink" title="接著以打包 style.css 和 index.js 所需進行的設定為例："></a>接著以打包 style.css 和 index.js 所需進行的設定為例：</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  mode<span class="token operator">:</span> <span class="token string">''</span><span class="token punctuation">,</span>
  entry<span class="token operator">:</span> <span class="token string">'./src/index.js'</span><span class="token punctuation">,</span>
  output<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    filename<span class="token operator">:</span> <span class="token string">'main.js'</span><span class="token punctuation">,</span>    <span class="token comment">// 輸出檔案名稱</span>
    path<span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'dist'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>　    <span class="token comment">// 輸出位置</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token comment">// 載入 loader</span>
  module<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    rules<span class="token operator">:</span> <span class="token punctuation">[</span>
      <span class="token punctuation">&#123;</span>
        test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.css$</span><span class="token regex-delimiter">/</span><span class="token regex-flags">i</span></span><span class="token punctuation">,</span>      <span class="token comment">// .css 結尾的檔案均使用 css-loader 解析</span>
        use<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'style-loader'</span><span class="token punctuation">,</span> <span class="token string">'css-loader'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span>
        test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.m?js$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>      <span class="token comment">// .mjs 結尾的檔案均使用 babel-loader 解析</span>
        exclude<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(node_modules|bower_components)</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
        use<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
          loader<span class="token operator">:</span> <span class="token string">'babel-loader'</span><span class="token punctuation">,</span>
          options<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
            presets<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'@babel/preset-env'</span><span class="token punctuation">]</span>
          <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>
      <span class="token punctuation">&#125;</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>參考資料：</p>
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmh1bGkudHcvMjAyMC8wMS8yMS93ZWJwYWNrLW5ld2JpZS10dXRvcmlhbC8=">webpack 新手教學之淺談模組化與 snowpack<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9uZWlnaGJvcmhvb2Q5OTkuZ2l0aHViLmlvL3dlYnBhY2stdHV0b3JpYWwtZ2l0Ym9vay9QYXJ0MS8=">Webpack 初學者教學課程Part1 · Webpack Tutorial 繁體中文<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9tZWRpdW0uY29tL2ktYW0tbWlrZS8lRTQlQkIlODAlRTklQkElQkMlRTYlOTglQUZ3ZWJwYWNrLSVFNCVCRCVBMCVFOSU5QyU4MCVFOCVBNiU4MXdlYnBhY2slRTUlOTclOEUtMmQ4Zjk2NTgyNDFk">Webpack教學 (一) ：什麼是Webpack? 能吃嗎？<i class="fa fa-external-link-alt"></i></span></li>
</ul>
<hr>
<h3 id="總結：gulp-vs-webpack"><a href="#總結：gulp-vs-webpack" class="headerlink" title="總結：gulp vs webpack"></a>總結：gulp vs webpack</h3><h4 id="gulp"><a href="#gulp" class="headerlink" title="gulp"></a>gulp</h4><ul>
<li>是一套任務管理工具（task manager）</li>
<li>目的：提供自動化與流程管理，整合前端開發環境，藉由簡化工作量，可讓開發者將重點放在功能的開發上</li>
<li>功能：提供自訂任務流程，例如 babel、scss、壓縮、重新整理、校正時間等</li>
</ul>
<h4 id="Webpack"><a href="#Webpack" class="headerlink" title="Webpack"></a>Webpack</h4><ul>
<li>是一套模組整合工具（module bundler）</li>
<li>目的：利用模組化的概念，將各種資源打包成能在瀏覽器上執行的程式碼</li>
</ul>
<p>由此可知，兩者目標其實並不相同，但是均能夠達到部分功能，因此容易被混淆，例如：</p>
<ol>
<li>使用 Babel 將 ES6 編譯成 ES5 語法</li>
<li>將 SASS 檔編譯成 CSS 檔</li>
<li>壓縮 CSS, JS, 圖檔等</li>
</ol>
<p>簡言之，gulp 是用來管理任務，建構自動化流程的工具；而 Webpack 則是將資源打包，提供模組化開發方式。</p>
<p>參考資料：</p>
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cuaXRyZWFkMDEuY29tL2NvbnRlbnQvMTU1MDIyMTIxNi5odG1s">Gulp和webpack的區別，是一種工具嗎？<i class="fa fa-external-link-alt"></i></span></li>
</ul>
]]></content>
      <categories>
        <category>Front-End</category>
      </categories>
      <tags>
        <tag>Front-End</tag>
        <tag>webpack</tag>
        <tag>gulp</tag>
      </tags>
  </entry>
  <entry>
    <title>[week 11] 資訊安全 - 雜湊與加密 &amp; 常見攻擊：SQL Injection、XSS</title>
    <url>/hash-security/</url>
    <content><![CDATA[<blockquote>
<p>本篇為 <span class="exturl" data-url="aHR0cHM6Ly9saWRlbXkuY29tL3AvYmUxMDEtcGhwLW15c3Fs">[BE101] 用 PHP 與 MySQL 學習後端基礎<i class="fa fa-external-link-alt"></i></span> 這門課程的學習筆記。如有錯誤歡迎指正。</p>
</blockquote>
<p>相關筆記：</p>
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2hlaWRpbGl1MjAyMC9UaGlzLWlzLUNvZGVkaWFyeS9ibG9iL21hc3Rlci93ZWVrOV8lRTUlQkUlOEMlRTclQUIlQUYlRTUlOUYlQkElRTclQTQlOEVfUEhQJUUzJTgwJTgxTXlTUUwubWQ=">[week 9] 後端基礎 - PHP 語法、資料庫 MySQL<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2hlaWRpbGl1MjAyMC9UaGlzLWlzLUNvZGVkaWFyeS9ibG9iL3dlZWsxMS93ZWVrOV8lRTUlODglQTklRTclOTQlQThQSFAlRTUlQUYlQTYlRTQlQkQlOUMlRTclOTUlOTklRTglQTglODAlRTYlOUQlQkYtJUU1JTg4JTlEJUU5JTlBJThFJUU1JUFGJUE2JUU0JUJEJTlDJUU3JUFGJTg3Lm1k">[week 9] 利用 PHP 實作留言板 - 初階實作篇<i class="fa fa-external-link-alt"></i></span><span id="more"></span>
<pre class="line-numbers language-none"><code class="language-none">學習目標：

 P1 你知道什麼是雜湊（Hash function）
 P1 你知道什麼是加密（Encryption）
 P1 你知道雜湊與加密的差別
 P1 你知道什麼是 SQL Injection 以及如何防範
 P1 你知道什麼是 XSS 以及如何防範
 P1 你知道為什麼儘管前端做了驗證，後端還是要再做一次驗證
 P2 你知道什麼是 CSRF 以及如何防範<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

</li>
</ul>
<hr>
<h2 id="資訊安全"><a href="#資訊安全" class="headerlink" title="資訊安全"></a>資訊安全</h2><p>我們先前<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2hlaWRpbGl1MjAyMC9UaGlzLWlzLUNvZGVkaWFyeS9ibG9iL21hc3Rlci93ZWVrOV8lRTUlODglQTklRTclOTQlQThQSFAlRTUlQUYlQTYlRTQlQkQlOUMlRTclOTUlOTklRTglQTglODAlRTYlOUQlQkYtJUU1JTg4JTlEJUU5JTlBJThFJUU1JUFGJUE2JUU0JUJEJTlDJUU3JUFGJTg3Lm1k">利用 PHP 實作的初階留言板<i class="fa fa-external-link-alt"></i></span>，其實暗藏許多安全性漏洞，接下來的重點，就是說明這些漏洞如何產生，以及該如何解決這些問題。</p>
<h2 id="用雜湊保護密碼"><a href="#用雜湊保護密碼" class="headerlink" title="用雜湊保護密碼"></a>用雜湊保護密碼</h2><p>當我們以「明文」方式將密碼存在資料庫時，可能面臨下列資安風險：</p>
<ul>
<li>網站管理者隨時能夠查看使用者帳密</li>
<li>如果有駭客成功入侵資料庫，即可竊取所有使用者資料</li>
</ul>
<p>因此我們需要透過「雜湊」來保護密碼。這也是為什麼，當我們忘記密碼時，網站會要我們重設密碼，而不是得到原先的密碼，因為雜湊不可逆，無法回推得到原碼。</p>
<h2 id="加密？雜湊？"><a href="#加密？雜湊？" class="headerlink" title="加密？雜湊？"></a>加密？雜湊？</h2><p>兩者最大差別在於：「加密可逆，雜湊不可逆」。</p>
<p><img src="https://i.imgur.com/ymLoNYw.png"></p>
<h3 id="加密（Encrypt）"><a href="#加密（Encrypt）" class="headerlink" title="加密（Encrypt）"></a>加密（Encrypt）</h3><ul>
<li>一對一，可逆</li>
<li>加密與解密必須要有金鑰（key）才能進行</li>
<li>對稱式加密<ul>
<li>常見演算法：AES、DES、3DES</li>
<li>加密解密都使用同一個 key，速度快，通常用於加密大量資料</li>
<li>資料傳輸前，雙方必須先講好密碼，不易日後管理，因此有了非對稱式加密</li>
</ul>
</li>
<li>非對稱式加密<ul>
<li>常見演算法：RSA、DSA、ECC</li>
<li>加密和解密使用不同的金鑰，速度慢，通常用於少量數據加密</li>
<li>一對金鑰由公鑰（可交給任何請求方）和私鑰（由一方保管）組成，可互相解密加密</li>
<li>可使用數位簽章（Digital Signature）確認是否為本人傳遞訊息，形成雙重保障</li>
</ul>
</li>
</ul>
<h3 id="雜湊（Hash）"><a href="#雜湊（Hash）" class="headerlink" title="雜湊（Hash）"></a>雜湊（Hash）</h3><ul>
<li>多對一，不可逆，因此可有效保護密碼</li>
<li>將<code>不定長度、無窮可能</code>的輸入，透過雜湊演算法，轉換成<code>固定長度</code>的雜湊值</li>
<li>雖然機率極低，但不同輸入可能產生相同的雜湊值，這種情形稱為碰撞（collision）</li>
<li>對伺服器來說，安全性越高的雜湊函數也代表速度越慢</li>
<li>用途：<ul>
<li>檔案校驗碼（Checksum）：檢查檔案是否正確</li>
<li>不需要被還原的資料：避免明文儲存密碼</li>
</ul>
</li>
<li>常見雜湊演算法<ul>
<li>MD5：已被證實不夠安全</li>
<li>SHA-1：已被證實不夠安全</li>
<li>SHA-256</li>
<li>RIPEMD-160</li>
</ul>
</li>
<li>常見攻擊方法<ul>
<li>暴力破解（brute-force）：嘗試所有數列組合，非常耗時</li>
<li>字典法（Dictionary Attacke）：嘗試常見的密碼組合，為主流方法</li>
<li>彩虹表（rainbow table）：類似暴力破解，使用預先計算的雜湊演算法，以查表方式破解</li>
</ul>
</li>
<li>解決方式：將密碼加鹽（salt）形成新的雜湊值，即可提高安全性<ul>
<li>例如：1234-(加鹽)→1234XXX</li>
</ul>
</li>
</ul>
<h3 id="PHP-內建雜湊函式：password-hash"><a href="#PHP-內建雜湊函式：password-hash" class="headerlink" title="PHP 內建雜湊函式：password_hash()"></a>PHP 內建雜湊函式：<code>password_hash()</code></h3><p><span class="exturl" data-url="aHR0cHM6Ly93d3cucGhwLm5ldC9tYW51YWwvZW4vZnVuY3Rpb24ucGFzc3dvcmQtaGFzaC5waHA=">PHP 提供內建函式 <i class="fa fa-external-link-alt"></i></span><code>password_hash()</code> 能夠實現加密， 指令如下：</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"> <span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token variable">$hash</span> <span class="token operator">=</span> <span class="token function">password_hash</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"要加密的字串"</span><span class="token punctuation">,</span> <span class="token constant">PASSWORD_DEFAULT</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>驗證指令：<code>password_verify(&quot;要驗證的字串&quot;, &quot;加密過的字串&quot;)</code>，會回傳一個 boolean</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php">// 使用範例
<span class="token php language-php"><span class="token delimiter important">&lt;?php</span> 
<span class="token variable">$password</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'1234'</span><span class="token punctuation">;</span>    <span class="token comment">// 原始密碼</span>
<span class="token variable">$hash_password</span> <span class="token operator">=</span> <span class="token function">password_hash</span><span class="token punctuation">(</span><span class="token variable">$password</span><span class="token punctuation">,</span> <span class="token constant">PASSWORD_DEFAULT</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">password_verify</span><span class="token punctuation">(</span><span class="token variable">$password</span> <span class="token punctuation">,</span> <span class="token variable">$hash_password</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
  <span class="token keyword">echo</span> <span class="token string double-quoted-string">"密碼正確"</span><span class="token punctuation">;</span>  <span class="token comment">// true</span>
<span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">echo</span> <span class="token string double-quoted-string">"密碼錯誤"</span><span class="token punctuation">;</span>  <span class="token comment">// false</span>
<span class="token punctuation">&#125;</span>
<span class="token delimiter important">?></span></span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>參考資料：</p>
<ol>
<li><span class="exturl" data-url="aHR0cHM6Ly90aW55dXJsLmNvbS95NjVwZ280dw==">[資訊安全] 密碼存明碼，怎麼不直接去裸奔算了？淺談 Hash , 用雜湊保護密碼<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9tZWRpdW0uY29tL3N0YXJidWdzL3doYXQtYXJlLWVuY29kaW5nLWVuY3J5cHQtYW5kLWhhc2hpbmctNGIwM2Q0MGU3YjBj">一次搞懂密碼學中的三兄弟 — Encode、Encrypt 跟 Hash<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLm0xNTdxLnR3L3Bvc3RzLzIwMTcvMTIvMjUvZGlmZmVyZW5jZXMtYmV0d2Vlbi1lbmNyeXB0aW9uLWFuZC1oYXNoaW5nLw==">加密和雜湊有什麼不一樣？ | Just for noting<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9hZG9uOTg4LmxvZ2Rvd24uY29tL3Bvc3RzLzI1MTM2MjMtbW9kZXJuLXBocC1wYXNzd29yZC1oYXNoLWhhc2gtZW5jcnlwdGlvbi11c2luZy1yYW5kb20tc2FsdC11c2Vz">現代PHP password_hash 雜湊加密採用隨機SALT 使用方式<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cucnVub29iLmNvbS9waHAvcGhwLXBhc3N3b3JkX2hhc2guaHRtbA==">PHP password_hash() 函数| 菜鸟教程<i class="fa fa-external-link-alt"></i></span></li>
</ol>
<hr>
<h2 id="常見資安攻擊"><a href="#常見資安攻擊" class="headerlink" title="常見資安攻擊"></a>常見資安攻擊</h2><p>以下介紹幾種常見的資安攻擊，其原理與防範方法。</p>
<h2 id="SQL-injection"><a href="#SQL-injection" class="headerlink" title="SQL injection"></a>SQL injection</h2><p>是一種注入式攻擊。發生於應用程式與資料庫層的安全漏洞。</p>
<h3 id="攻擊原理"><a href="#攻擊原理" class="headerlink" title="攻擊原理"></a>攻擊原理</h3><p>在輸入資料時，夾帶不正當的 SQL 指令，若網頁忽略字元檢查，資料庫將會視為正常的 SQL 指令並執行惡意程式碼，進而破壞或入侵。</p>
<h4 id="以輸入帳號密碼進行驗證為例："><a href="#以輸入帳號密碼進行驗證為例：" class="headerlink" title="以輸入帳號密碼進行驗證為例："></a>以輸入帳號密碼進行驗證為例：</h4><ul>
<li><p>正常的 SQL 語法</p>
<ul>
<li>帳號：123</li>
<li>密碼：456<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token constant">SELECT</span> <span class="token operator">*</span> <span class="token constant">FROM</span> users <span class="token constant">WHERE</span> username<span class="token operator">=</span><span class="token string single-quoted-string">'123'</span> <span class="token keyword">AND</span> password<span class="token operator">=</span><span class="token string single-quoted-string">'456'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
</ul>
</li>
<li><p>SQL injection</p>
<ul>
<li>帳號：<code>&#39; or 1=1#</code></li>
<li>密碼：可輸入任意值（甚至不需輸入）<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token constant">SELECT</span> <span class="token operator">*</span> <span class="token constant">FROM</span> users <span class="token constant">WHERE</span> username<span class="token operator">=</span><span class="token string single-quoted-string">''</span> <span class="token keyword">or</span> <span class="token number">1</span><span class="token operator">=</span><span class="token number">1</span><span class="token comment"># AND password='';</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
</ul>
</li>
<li><p><code>&#39;</code>：將 username 的 input 關閉</p>
</li>
<li><p><code>or</code>：條件式的「或是」</p>
</li>
<li><p><code>#</code>：代表註解，後面的條件均會被忽略</p>
</li>
<li><p>由於 <code>WHERE</code> 條件式中的 <code>1=1</code> 恆正，如此即可略過權限檢查，沒有密碼也能成功登入帳號</p>
</li>
</ul>
<h4 id="以之前實作的初階留言版為例："><a href="#以之前實作的初階留言版為例：" class="headerlink" title="以之前實作的初階留言版為例："></a>以之前實作的初階留言版為例：</h4><ol>
<li>登入後在新增留言輸入：<code>&#39;), (&#39;admin&#39;, &#39;Hacking!&#39;)#</code></li>
<li>SQL 指令就變成：<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token constant">INSERT</span> <span class="token constant">INTO</span> <span class="token function">comments</span><span class="token punctuation">(</span>nickname<span class="token punctuation">,</span> content<span class="token punctuation">)</span>
<span class="token function">VALUES</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'aaa'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">''</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string single-quoted-string">'admin'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'Hacking!'</span><span class="token punctuation">)</span><span class="token comment">#</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li>
<li>執行後會新增兩筆留言，nickname 分別是 aaa 和 admin</li>
</ol>
<p><img src="https://i.imgur.com/zLfxN7g.png"></p>
<h3 id="防範方法：Prepare-Statement-預處理"><a href="#防範方法：Prepare-Statement-預處理" class="headerlink" title="防範方法：Prepare Statement 預處理"></a>防範方法：Prepare Statement 預處理</h3><p>透過 Prepare Statement 進行跳脫，以防止 SQL 注入。</p>
<p>步驟如下：</p>
<ol>
<li>將 SQL 語法儲存在變數 <code>$sql</code></li>
<li>使用 <code>prepare()</code> 預處理 <code>$sql</code>：此時只傳送佔位符號 <code>?</code>，可避免利用拼接 SQL 字串語句的攻擊</li>
<li>使用 <code>bind_param()</code> 帶入參數。常用參數類型：<ul>
<li><code>s</code>：string（字串）</li>
<li><code>i</code>：integer（整數）</li>
</ul>
</li>
<li>呼叫 <code>execute()</code> 執行 SQL 語法：此時才會將參數傳送給資料庫</li>
<li>若執行成功，則使用 <code>get_result()</code> 取出執行結果</li>
</ol>
<p>程式碼範例：</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
  <span class="token comment">// SQL 語法</span>
  <span class="token variable">$sql</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"INSERT INTO comments(nickname, content) VALUES(?, ?)"</span><span class="token punctuation">;</span>
  <span class="token comment">// prepare() 預處理 </span>
  <span class="token variable">$stmt</span> <span class="token operator">=</span> <span class="token variable">$conn</span><span class="token operator">-></span><span class="token function">prepare</span><span class="token punctuation">(</span><span class="token variable">$sql</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// bind_param() 帶入參數</span>
  <span class="token variable">$stmt</span><span class="token operator">-></span><span class="token function">bind_param</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'ss'</span><span class="token punctuation">,</span> <span class="token variable">$nickname</span><span class="token punctuation">,</span> <span class="token variable">$content</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// execute() 執行 SQL 語法</span>
  <span class="token variable">$result</span> <span class="token operator">=</span> <span class="token variable">$stmt</span><span class="token operator">-></span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 確認是否執行成功</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$result</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token variable">$conn</span><span class="token operator">-></span><span class="token property">error</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 取出執行結果</span>
  <span class="token variable">$result</span> <span class="token operator">=</span> <span class="token variable">$stmt</span><span class="token operator">-></span><span class="token function">get_result</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>參考資料：</p>
<ol>
<li><span class="exturl" data-url="aHR0cHM6Ly9pdGhlbHAuaXRob21lLmNvbS50dy9hcnRpY2xlcy8xMDE4OTIwMQ==">[Postx1] 攻擊行為－SQL 資料隱碼攻擊 SQL injection<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9jb2RlcnR3LmNvbS8lRTclQTglOEIlRTUlQkMlOEYlRTglQUElOUUlRTglQTglODAvMjQwODA4Lw==">Php中用PDO查詢Mysql來避免SQL隱碼攻擊風險的方法<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cuaXRyZWFkMDEuY29tL3AvMTQwMzMyNC5odG1s">PreparedStatement 如何防止SQL注入<i class="fa fa-external-link-alt"></i></span></li>
</ol>
<hr>
<h2 id="XSS-攻擊"><a href="#XSS-攻擊" class="headerlink" title="XSS 攻擊"></a>XSS 攻擊</h2><p>全名是 Cross Site Scripting（跨網站指令碼攻擊），為了不與 CSS 混淆，故簡稱 XSS。</p>
<p>是一種注入式攻擊。通常是透過 JavaScript 或 HTML，因此又被稱作 JavaScript Injection 攻擊。</p>
<h3 id="攻擊原理-1"><a href="#攻擊原理-1" class="headerlink" title="攻擊原理"></a>攻擊原理</h3><p>攻擊者利用網頁開發時留下的安全漏洞，在網頁插入惡意程式碼，讓使用者載入並執行惡意程式，攻擊者可藉此取得更高的權限，或是竊取使用者的 Cookie 等資料。</p>
<p>XSS 常見的攻擊種類大致上可分為兩種：</p>
<ul>
<li>Reflected XSS（反射型）</li>
</ul>
<p><img src="https://i.imgur.com/zNQGEPN.png"></p>
<p>以網頁輸入欄位為例。若在輸入欄位內刻意植入 Javascript 語法，例如下列程式碼，即可竊取使用者的 cookie 資料：</p>
<pre class="line-numbers language-none"><code class="language-none">&lt;script&gt;alert(document.cookie)；&lt;&#x2F;script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ul>
<li>Stored XSS（儲存型）</li>
</ul>
<p><img src="https://i.imgur.com/A5qvwBe.png"></p>
<p>以留言板為例。攻擊者將惡意程式碼透過「新增留言」寫入資料庫，當使用者瀏覽到該頁面時，就會觸發程式碼，達到攻擊目的。</p>
<h3 id="防範方法：過濾特殊字元"><a href="#防範方法：過濾特殊字元" class="headerlink" title="防範方法：過濾特殊字元"></a>防範方法：過濾特殊字元</h3><p>責任主要還是歸咎於網頁開發時留下的安全漏洞，但 Server 端與 Client 端可以藉由下列方法，來避免遭受攻擊：</p>
<h4 id="Client-端"><a href="#Client-端" class="headerlink" title="Client 端"></a>Client 端</h4><ol>
<li>定期更新瀏覽器至最新版本</li>
<li>避免點擊來路不明的網址</li>
</ol>
<h4 id="Server-端"><a href="#Server-端" class="headerlink" title="Server 端"></a>Server 端</h4><ol>
<li>過濾特殊字元：過濾所有 Client 端提供的內容，並轉譯成純文字。例如：使用 PHP 內建函式 <code>htmlentities（）</code>或 <code>htmlspecialchars（）</code></li>
</ol>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token comment">// utils.php</span>
  <span class="token keyword">function</span> <span class="token function-definition function">escape</span><span class="token punctuation">(</span><span class="token variable">$str</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token function">htmlspecialchars</span><span class="token punctuation">(</span><span class="token variable">$str</span><span class="token punctuation">,</span> <span class="token constant">ENT_QUOTES</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'UTF-8'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ol start="2">
<li>限制輸入內容長度或型態。雖然可藉由引入外部 JavaScript 來繞過，但還是能提高 XSS 攻擊難度</li>
</ol>
<p>參考資料：</p>
<ol>
<li><span class="exturl" data-url="aHR0cHM6Ly9jbXMuYWFhc2VjLmNvbS50dy9pbmRleC5waHAvMjAxOC8wOS8yMS9jb2RlLWluamVjdGlvbi1hdHRhY2stY3Jvc3Mtc2l0ZS1zY3JpcHRpbmctYXR0YWNrLw==">Code Injection Attack – Cross-Site Scripting Attack – 三甲科技<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cuaXRyZWFkMDEuY29tL2NvbnRlbnQvMTU0NDU3NTE0OS5odG1s">前端安全系列（一）：如何防止XSS攻擊？<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9pdGhlbHAuaXRob21lLmNvbS50dy9hcnRpY2xlcy8xMDE4ODY0Ng==">[Day24] 攻擊行為－反射式跨網站指令碼 Reflected XSS<i class="fa fa-external-link-alt"></i></span></li>
</ol>
<hr>
<h2 id="CSRF"><a href="#CSRF" class="headerlink" title="CSRF"></a>CSRF</h2><p>全名是  Cross Site Request Forgery（跨站請求偽造）。也被稱為 one-click attack 或 session riding。</p>
<p>和 XSS 同樣是跨站式的請求攻擊，兩者卻有明顯區別，不同之處在於：</p>
<ul>
<li>XSS：透過在網頁輸入惡意程式碼的方式來進行攻擊<ul>
<li>使用者對目標網站的信任</li>
</ul>
</li>
<li>CSRF：攻擊者利用網站使用者的身分發送請求，去執行一些未經授權的操作<ul>
<li>目標網站對該使用者的信任</li>
</ul>
</li>
</ul>
<h3 id="攻擊原理-2"><a href="#攻擊原理-2" class="headerlink" title="攻擊原理"></a>攻擊原理</h3><p>要完成一個 CRSF 攻擊，必須條件是「使用者仍保持登入狀態」。</p>
<p>假設 A 為目標網站，B 為惡意網站，步驟大致如下：</p>
<ol>
<li>使用者登入網站 A</li>
<li>網站 A 返回 session id 等資訊（使用 cookie 儲存）</li>
<li>使用者訪問網站 B，攻擊者利用隱藏圖片或表單，讓使用者在不知情的情況發送 request 到網站 A</li>
<li>由於瀏覽器的機制，發送 request 給某個網域時，會附帶關聯的 cookie</li>
<li>網站 A 誤以為是合法請求，攻擊者即可假冒使用者身分進行操作</li>
</ol>
<p>簡言之，CSRF 就是「在不同 domain 下，偽造使用者本人發出的 request」。</p>
<h3 id="防範方法"><a href="#防範方法" class="headerlink" title="防範方法"></a>防範方法</h3><h4 id="Client-端-1"><a href="#Client-端-1" class="headerlink" title="Client 端"></a>Client 端</h4><p>由於 CSRF 攻擊的必要條件，是使用者在被攻擊的網頁處於「已登入狀態」。使用者在每次使用完網站就登出，即可避免 CSRF 攻擊。</p>
<h4 id="Server-端-1"><a href="#Server-端-1" class="headerlink" title="Server 端"></a>Server 端</h4><ol>
<li>加上圖形驗證碼（或簡訊驗證碼等）</li>
</ol>
<p>在網站加上驗證碼，可多一道檢查程序，常用於金流相關操作。</p>
<ul>
<li>缺點：每次都要進行驗證，可能造成使用者體驗不佳</li>
</ul>
<ol start="2">
<li>加上 CSRF token</li>
</ol>
<ul>
<li>產生：Server</li>
<li>儲存：Server</li>
</ul>
<p>在 <code>form</code> 裡面加上一個 <code>hidden</code> 的欄位，叫做 <code>csrftoken</code>，填入的值為 Server 隨機產生的亂碼，並且存在 Server 的 session 中。</p>
<p>按下 submit 後，Server 會比對表單中的 csrftoken 與存在 Server 端的是否相同。</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token comment">// 範例程式碼</span>
<span class="token operator">&lt;</span>form action<span class="token operator">=</span><span class="token string double-quoted-string">"https://myblog.com/delete"</span> method<span class="token operator">=</span><span class="token string double-quoted-string">"POST"</span><span class="token operator">></span>
  <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string double-quoted-string">"hidden"</span> name<span class="token operator">=</span><span class="token string double-quoted-string">"id"</span> value<span class="token operator">=</span><span class="token string double-quoted-string">"3"</span><span class="token operator">/</span><span class="token operator">></span>
  <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string double-quoted-string">"hidden"</span> name<span class="token operator">=</span><span class="token string double-quoted-string">"csrftoken"</span> value<span class="token operator">=</span><span class="token string double-quoted-string">"&lt;亂碼>"</span><span class="token operator">/</span><span class="token operator">></span>
  <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string double-quoted-string">"submit"</span> value<span class="token operator">=</span><span class="token string double-quoted-string">"刪除文章"</span><span class="token operator">/</span><span class="token operator">></span>
<span class="token operator">&lt;</span><span class="token operator">/</span>form<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>缺點：若攻擊者先發出 request，還是能取得 csrftoken 來攻擊目標網站</li>
</ul>
<ol start="3">
<li>Double Submit Cookie</li>
</ol>
<ul>
<li>產生：Server</li>
<li>儲存：Client</li>
</ul>
<p>與前一種解法相似，好處是不需要存任何東西在 Server 端。</p>
<p>而是在 cookie 與 form 設置相同的 csrftoken，利用「cookie 只會從相同 domain 帶上來」機制，使攻擊者無法從不同 domain 戴上此 cookie。</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token comment">// 範例程式碼</span>
Set<span class="token operator">-</span>Cookie<span class="token punctuation">:</span> csrftoken<span class="token operator">=</span><span class="token operator">&lt;</span>亂碼<span class="token operator">></span>

<span class="token operator">&lt;</span>form action<span class="token operator">=</span><span class="token string double-quoted-string">"https://myblog.com/delete"</span> method<span class="token operator">=</span><span class="token string double-quoted-string">"POST"</span><span class="token operator">></span>
  <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string double-quoted-string">"hidden"</span> name<span class="token operator">=</span><span class="token string double-quoted-string">"id"</span> value<span class="token operator">=</span><span class="token string double-quoted-string">"3"</span><span class="token operator">/</span><span class="token operator">></span>
  <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string double-quoted-string">"hidden"</span> name<span class="token operator">=</span><span class="token string double-quoted-string">"csrftoken"</span> value<span class="token operator">=</span><span class="token string double-quoted-string">"&lt;亂碼>"</span><span class="token operator">/</span><span class="token operator">></span>
  <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string double-quoted-string">"submit"</span> value<span class="token operator">=</span><span class="token string double-quoted-string">"刪除文章"</span><span class="token operator">/</span><span class="token operator">></span>
<span class="token operator">&lt;</span><span class="token operator">/</span>form<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>缺點：攻擊者若掌握使用者底下任何一個 subdomain，就能夠幫使用者寫 cookie，藉此進行攻擊</li>
</ul>
<ol start="4">
<li>Client 端生成的 Double Submit Cookie</li>
</ol>
<ul>
<li>產生：Client</li>
<li>儲存：Client</li>
</ul>
<p>和前面提的 Double Submit Cookie 核心概念相同。不同之處在於「改由 Client 端」生成 csrf token。</p>
<p>生成之後放到 form 裡面以及寫到 cookie，其他流程就和之前相同。<br>此 cookie 只是確保攻擊者無法取得，不含任何資訊，因此由 Client 或 Server 生成都是一樣的。</p>
<ul>
<li>例如：library axios 就有提供此功能。只要設定好 header 與 cookie 名稱，設定好之後的每一個 request，即可自動在 header 統一加上 cookie 值</li>
</ul>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token comment">// 範例程式碼</span>
<span class="token comment">// `xsrfCookieName` is the name of the cookie to use as a value for xsrf token</span>
xsrfCookieName<span class="token punctuation">:</span> <span class="token string single-quoted-string">'XSRF-TOKEN'</span><span class="token punctuation">,</span> <span class="token comment">// default</span>

<span class="token comment">// `xsrfHeaderName` is the name of the http header that carries the xsrf token value</span>
xsrfHeaderName<span class="token punctuation">:</span> <span class="token string single-quoted-string">'X-XSRF-TOKEN'</span><span class="token punctuation">,</span> <span class="token comment">// default</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="瀏覽器端的防禦：SameSite-cookie"><a href="#瀏覽器端的防禦：SameSite-cookie" class="headerlink" title="瀏覽器端的防禦：SameSite cookie"></a>瀏覽器端的防禦：SameSite cookie</h4><p>CSRF 之所以能夠成立，是瀏覽器的機制所導致，但我們也能從瀏覽器著手進行防禦，也就是透過 SameSite cookie。其原理是「幫 Cookie 再加上一層驗證」，防止來自不同 domain 的請求。</p>
<p>做法是在 Set-cookie 的 session_id 後加上 SameSite 即可啟用此功能。由於這是較新的功能，目前瀏覽器中只有 Chrome 支援，使用前須注意。</p>
<p>使用範例如下：</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php">Set<span class="token operator">-</span>Cookie<span class="token punctuation">:</span> session_id<span class="token operator">=</span><span class="token operator">&lt;</span>亂碼<span class="token operator">></span><span class="token punctuation">;</span> SameSite<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>SameSite 有分 Strict（預設）與 Lax 兩種模式：</p>
<ul>
<li>Strict 模式（嚴格）<ul>
<li>使用 <code>&lt;a href=&quot;&quot;&gt;</code>, <code>&lt;form&gt;</code>, <code>new XMLHttpRequest</code> 等標籤</li>
<li>只要瀏覽器驗證不是同一個 domain 發出的 request，就不會帶上此 cookie</li>
<li>由於連結不會帶上 cookie，對於使用者體驗並不佳</li>
</ul>
</li>
<li>Lax 模式（寬鬆）<ul>
<li>上述標籤都還是會帶上 cookie</li>
<li>除了 Get 刑事，其他方法如 POST、DELETE、PUT 等都不會帶上 cookie</li>
<li>意即 Lax 模式無法擋掉 GET 形式的 CSRF</li>
</ul>
</li>
</ul>
<p>參考資料：</p>
<ol>
<li><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLnRlY2hicmlkZ2UuY2MvMjAxNy8wMi8yNS9jc3JmLWludHJvZHVjdGlvbi8=">讓我們來談談CSRF - TechBridge 技術共筆部落格<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9jeXJpbHdhbmcucGl4bmV0Lm5ldC9ibG9nL3Bvc3QvMzE4MTM1NjgtJTVCJUU2JThBJTgwJUU4JUExJTkzJUU1JTg4JTg2JUU0JUJBJUFCJTVELWNyb3NzLXNpdGUtcmVxdWVzdC1mb3JnZXJ5LShwYXJ0LTEp">[技術分享] Cross-site Request Forgery (Part 1)<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly95YWtpbWhzdS5jb20vcHJvamVjdC9wcm9qZWN0X3cxMl9JbmZvX1NlY3VyaXR5LUNTUkYuaHRtbA==">[第十二週] 資訊安全 - 常見攻擊：CSRF<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9jb2RlcnR3LmNvbS8lRTclQTglOEIlRTUlQkMlOEYlRTglQUElOUUlRTglQTglODAvMTA5Nzc1Lw==">程式猿必讀-防範CSRF跨站請求偽造<i class="fa fa-external-link-alt"></i></span></li>
</ol>
]]></content>
      <categories>
        <category>Back-End</category>
      </categories>
      <tags>
        <tag>Back-End</tag>
        <tag>hash</tag>
        <tag>security</tag>
      </tags>
  </entry>
  <entry>
    <title>【學習筆記】hexo-admin：Hexo 後台管理工具</title>
    <url>/hexo-admin/</url>
    <content><![CDATA[<p><img src="https://i.imgur.com/T1CHqyf.png"></p>
<p>在上篇<a href="https://heidiliu2020.github.io/2020/11/07/202011-hexo-github/">【學習筆記】如何使用 Hexo + GitHub Pages 架設個人網誌</a>中，我們學會如何打造簡單的個人網誌後，再來要介紹如何透過 hexo-admin 這個套件，以更直觀的方式在後台管理網誌文章。</p>
<span id="more"></span>

<h2 id="為什麼需要-hexo-admin？"><a href="#為什麼需要-hexo-admin？" class="headerlink" title="為什麼需要 hexo-admin？"></a>為什麼需要 hexo-admin？</h2><p>在上篇文章介紹到，要在網誌發布文章，必須透過 CLI 介面以 <code>hexo new</code> 指令新增文章，再利用 <code>hexo g -d</code> 生成並部署。</p>
<p>透過 hexo-admin 這套插件，我們就能透過 GUI 介面進行後台管理，例如編輯原有的 markdown 文件，也可以新增文章或頁面、發布草稿和提供預覽功能等等，在操作上簡化了發布文章的流程。</p>
<h2 id="安裝套件"><a href="#安裝套件" class="headerlink" title="安裝套件"></a>安裝套件</h2><blockquote>
<p>詳細可參考文件說明：<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2phcmVkbHkvaGV4by1hZG1pbg==">jaredly/hexo-admin<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
<ol>
<li>首先進入本地端存放 hexo 專案的資料夾</li>
<li>在終端機輸入安裝指令</li>
</ol>
<pre class="line-numbers language-none"><code class="language-none">$ npm install --save hexo-admin<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h2 id="進入-hexo-admin-後台"><a href="#進入-hexo-admin-後台" class="headerlink" title="進入 hexo-admin 後台"></a>進入 hexo-admin 後台</h2><p>安裝完成之後，就可以進入後台管理，步驟如下：</p>
<ol>
<li>架設本地端伺服器</li>
</ol>
<pre class="line-numbers language-none"><code class="language-none">$ hexo server -d
&#x2F;&#x2F; 或簡化成
$ hexo s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>看到下方提示就代表運行成功：</p>
<p><img src="https://i.imgur.com/zXT8P5C.png"></p>
<ol start="2">
<li>在瀏覽器輸入 <span class="exturl" data-url="aHR0cDovL2xvY2FsaG9zdDo0MDAwLw==">http://localhost:4000<i class="fa fa-external-link-alt"></i></span> 可以預覽發布前的網誌</li>
<li>進入 <span class="exturl" data-url="aHR0cDovL2xvY2FsaG9zdDo0MDAwL2FkbWlu">http://localhost:4000/admin<i class="fa fa-external-link-alt"></i></span> 可進入後台管理，在 Posts 可看到文章列表：</li>
</ol>
<p><img src="https://i.imgur.com/ZGKnhui.png"></p>
<p>在 Pages 可編輯其他頁面：</p>
<p><img src="https://i.imgur.com/UWJr7PU.png"></p>
<h2 id="新增文章-Publish"><a href="#新增文章-Publish" class="headerlink" title="新增文章 Publish"></a>新增文章 Publish</h2><ol>
<li>點選左上角的 New Post，可輸入該文章的網址名稱，接著打勾或按 Enter：</li>
</ol>
<p><img src="https://i.imgur.com/fMCYDdW.png"></p>
<ol start="2">
<li>就會進入編輯頁面，可在標題列編輯文章標題，標題下方則是文章網址，左邊區塊可編輯 Markdown 文章內容，右方區塊則是預覽文章</li>
</ol>
<p><img src="https://i.imgur.com/190UBSx.png"></p>
<ol start="3">
<li>編輯完成後，可點選 Publish 左側的設定，修改發布文章時間、標籤、分類，確認都沒問題後，即可點選 Publish 發布文章</li>
</ol>
<p><img src="https://i.imgur.com/BBUAMBO.png"></p>
<ol start="4">
<li>回到 <span class="exturl" data-url="aHR0cDovL2xvY2FsaG9zdDo0MDAwLw==">http://localhost:4000<i class="fa fa-external-link-alt"></i></span> 即可看到剛才新增的文章</li>
</ol>
<p><img src="https://i.imgur.com/Jezhv4m.png"></p>
<h3 id="補充：Read-more-功能"><a href="#補充：Read-more-功能" class="headerlink" title="補充：Read more 功能"></a>補充：Read more 功能</h3><p>在上方編輯模式中，可以看到 <code>&lt;!--more--&gt;</code> 這行程式碼，在這行以下的內容就會自動被隱藏，會多一個閱讀全文（Read more）的連結，必須點擊文章才會看到全文。</p>
<h2 id="部署到-GitHub"><a href="#部署到-GitHub" class="headerlink" title="部署到 GitHub"></a>部署到 GitHub</h2><p>確認文章都沒問題之後，就可以準備部署到 GitHub 上，步驟如下：</p>
<ol>
<li>在終端機按 Ctrl+C，可停止本地端伺服器</li>
</ol>
<p><img src="https://i.imgur.com/BXhBwiC.png"></p>
<ol start="2">
<li>輸入下方三個指令進行部署</li>
</ol>
<ul>
<li>hexo clean：清除之前建立的靜態檔案</li>
<li>hexo generate：建立靜態檔案</li>
<li>hexo deploy：部署到 Github Pages</li>
</ul>
<p>也可以簡寫成：</p>
<pre class="line-numbers language-none"><code class="language-none">$ hexo cl
$ hexo g
$ hexo d<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>這樣就成功透過 hexo-admin 管理後台文章！</p>
<h2 id="心得記錄"><a href="#心得記錄" class="headerlink" title="心得記錄"></a>心得記錄</h2><p>其實上次在搬運筆記的時候，就已經有使用 hexo-admin 這套工具，卻沒想到過一段時間後，還是會忘記該如何操作，於是乎乾脆寫成一篇文章，之後也可以回來複習。</p>
<p>金魚腦如我，果然還是不能沒有學習筆記XD</p>
<p>參考文章：<span class="exturl" data-url="aHR0cHM6Ly9lZDUyMS5naXRodWIuaW8vMjAxOS8wOC9oZXhvLWFkbWluLw==">[教學] 我的第一篇 Hexo 文章：使用 hexo-admin 後台管理工具<i class="fa fa-external-link-alt"></i></span></p>
]]></content>
      <categories>
        <category>Blog</category>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>hexo-admin</tag>
      </tags>
  </entry>
  <entry>
    <title>【學習筆記】如何使用 Hexo + GitHub Pages 架設個人網誌</title>
    <url>/hexo-github/</url>
    <content><![CDATA[<p><img src="https://i.imgur.com/dOOM0JO.png"></p>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本篇主要介紹如何使用 Hexo 並搭配 GitHub 來快速架設網誌。從介紹什麼是 Hexo 框架，該如何安裝、建立環境，接著介紹一些常用指令，以及如何部署到 GitHub 上。</p>
<span id="more"></span>
<p>文章可分為下列幾個部分：</p>
<ul>
<li>什麼是 Hexo？</li>
<li>前置作業<ul>
<li>安裝需求</li>
</ul>
</li>
<li>Hexo 環境建置</li>
<li>常用指令</li>
<li>部署到 GitHub<ul>
<li>建立 GitHub 專案</li>
<li>將檔案發布到 GitHub </li>
</ul>
</li>
</ul>
<h2 id="什麼是-Hexo？"><a href="#什麼是-Hexo？" class="headerlink" title="什麼是 Hexo？"></a>什麼是 Hexo？</h2><blockquote>
<p>引用<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2hleG9qcy9oZXhv">官網介紹<i class="fa fa-external-link-alt"></i></span>：A fast, simple &amp; powerful blog framework, powered by Node.js.</p>
</blockquote>
<p><span class="exturl" data-url="aHR0cHM6Ly9oZXhvLmlvL3poLXR3Lw==">Hexo<i class="fa fa-external-link-alt"></i></span> 其實就是一個基於 Node.js 開發的網誌框架，具有下列幾項特點：</p>
<ul>
<li>編譯速度非常快</li>
<li>能夠支援 Markdown 語法解析文章，並透過主題渲染靜態檔案</li>
<li>具有豐富的外掛套件</li>
<li>支援一鍵部署到 GitHub Pages 或 Heroku 等支援靜態網頁的空間</li>
</ul>
<h2 id="前置作業"><a href="#前置作業" class="headerlink" title="前置作業"></a>前置作業</h2><h3 id="安裝需求"><a href="#安裝需求" class="headerlink" title="安裝需求"></a>安裝需求</h3><p>在開始安裝 Hexo 之前，必須先在電腦安裝下列工具：</p>
<ul>
<li><h4 id="Node-js：提供-npm-來安裝所需的套件。這裡可選擇安裝左側-14-15-0-LTS-版本"><a href="#Node-js：提供-npm-來安裝所需的套件。這裡可選擇安裝左側-14-15-0-LTS-版本" class="headerlink" title="Node.js：提供 npm 來安裝所需的套件。這裡可選擇安裝左側 14.15.0 LTS 版本"></a><span class="exturl" data-url="aHR0cHM6Ly9ub2RlanMub3JnL2VuLw==">Node.js<i class="fa fa-external-link-alt"></i></span>：提供 npm 來安裝所需的套件。這裡可選擇安裝左側 14.15.0 LTS 版本</h4></li>
</ul>
<blockquote>
<p>Hexo 官網建議使用 Node.js 10.0 及以上版本，若不確定下載哪個版本，可在終端機輸入 <code>npm versin</code> 查看版本號。</p>
</blockquote>
<p><img src="https://i.imgur.com/JEdBf4y.png"></p>
<ul>
<li><h4 id="Git：用來將檔案發布到-GitHub-Page"><a href="#Git：用來將檔案發布到-GitHub-Page" class="headerlink" title="Git：用來將檔案發布到 GitHub Page"></a><span class="exturl" data-url="aHR0cHM6Ly9naXQtc2NtLmNvbS8=">Git<i class="fa fa-external-link-alt"></i></span>：用來將檔案發布到 GitHub Page</h4></li>
</ul>
<blockquote>
<p>Git 基礎用法可參考：<span class="exturl" data-url="aHR0cHM6Ly9oYWNrbWQuaW8vQEhlaWRpLUxpdS9ub3RlLWdpdA==">版本控制 - Git 概念 ＆ 基本指令<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
<p><img src="https://i.imgur.com/drhF9RQ.png"></p>
<blockquote>
<p>[補充] <span class="exturl" data-url="aHR0cHM6Ly9oYWNrbWQuaW8vQEhlaWRpLUxpdS9ub3RlLWdpdC1hbmQtZ2l0aHVi">Git 和 GitHub 的差別？<i class="fa fa-external-link-alt"></i></span><br>Git 是用來版本控制的程式；GitHub 則是提供存放 Git Repository 的服務，讓使用者能在視覺化界面進行管理。</p>
</blockquote>
<h2 id="Hexo-環境建置"><a href="#Hexo-環境建置" class="headerlink" title="Hexo 環境建置"></a>Hexo 環境建置</h2><p>完成前置作業後，接著就要來建立 Hexo 環境，步驟如下：</p>
<blockquote>
<p>若對 CLI 不熟悉，可參考：<span class="exturl" data-url="aHR0cHM6Ly9oYWNrbWQuaW8vQEhlaWRpLUxpdS9ub3RlLWNsaQ==">Command Line 入門 &amp; 基本指令<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
<h3 id="Step1-安裝-Hexo"><a href="#Step1-安裝-Hexo" class="headerlink" title="Step1. 安裝 Hexo"></a>Step1. 安裝 Hexo</h3><p><img src="https://i.imgur.com/3162t1b.png"></p>
<p>開啟 CLI 介面（例如 cmd、git-bash 等終端機），並輸入下列指令安裝 Hexo：</p>
<pre class="line-numbers language-none"><code class="language-none">$ npm install hexo-cli -g<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p><img src="https://i.imgur.com/20qI9yU.png"></p>
<p>安裝完後，可輸入 <code>hexo version</code> 或 <code>hexo -v</code> 查看 Hexo 版本，確認是否有安裝成功：</p>
<p><img src="https://i.imgur.com/PRFQNVz.png"></p>
<h3 id="Step2-初始化-Hexo"><a href="#Step2-初始化-Hexo" class="headerlink" title="Step2. 初始化 Hexo"></a>Step2. 初始化 Hexo</h3><p>接著要初始化 Hexo，這裡有兩種做法：</p>
<ol>
<li>直接輸入下面指令，會自動於所在目錄建立一個新資料夾以操作 Hexo。記得將括號內修改成自己的資料夾名稱，若不指定資料夾名稱，則會直接初始化當前目錄：</li>
</ol>
<pre class="line-numbers language-none"><code class="language-none">$ hexo init &lt;資料夾名稱&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p><img src="https://i.imgur.com/tPOIIKP.png"></p>
<ol start="2">
<li>也可以先建立好資料夾，並在該資料夾輸入上述指令，同樣能進行初始化。可使用 cd 指令來切換路徑：</li>
</ol>
<pre class="line-numbers language-none"><code class="language-none">$ cd &lt;資料夾名稱 or 資料夾路徑&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p><img src="https://i.imgur.com/t1vVcEC.png"></p>
<h3 id="Step3-在資料夾安裝所需檔案"><a href="#Step3-在資料夾安裝所需檔案" class="headerlink" title="Step3. 在資料夾安裝所需檔案"></a>Step3. 在資料夾安裝所需檔案</h3><p>確認 CLI 上的路徑是在資料夾中，接著執行下列指令，安裝所需的 npm 套件：</p>
<pre class="line-numbers language-none"><code class="language-none">$ npm install<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<blockquote>
<p>也可以直接在資料夾目錄輸入 cmd，按下 enter 後就會在這個路徑開啟終端機。</p>
</blockquote>
<p>安裝完成後，進入資料夾會看到下方這些檔案和資料夾：</p>
<pre class="line-numbers language-none"><code class="language-none">.
├── _config.yml
├── package.json
├── scaffolds
├── source
|   ├── _drafts
|   └── _posts
└── themes<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="config-yml"><a href="#config-yml" class="headerlink" title="_config.yml"></a>_config.yml</h4><ul>
<li>有關網站配置的檔案，可修改各種配置設定。例如：網站標題、網站的網址、使用主題名稱等等</li>
<li>詳細內容可以參考<span class="exturl" data-url="aHR0cHM6Ly9oZXhvLmlvL3poLXR3L2RvY3MvY29uZmlndXJhdGlvbg==">官方文件<i class="fa fa-external-link-alt"></i></span></li>
</ul>
<h4 id="package-json"><a href="#package-json" class="headerlink" title="package.json"></a>package.json</h4><p>記錄所有載入的應用程式資料，也就是專案中需要的所有模組。</p>
<h4 id="scaffolds-模板"><a href="#scaffolds-模板" class="headerlink" title="scaffolds 模板"></a>scaffolds 模板</h4><ul>
<li>當我們建立新文章時，Hexo 會根據 scaffolds 中的模板建立相對應的檔案</li>
<li>資料夾中有三種預設<span class="exturl" data-url="aHR0cHM6Ly9oZXhvLmlvL3poLXR3L2RvY3Mvd3JpdGluZy5odG1s">佈局<i class="fa fa-external-link-alt"></i></span>：post、page 和 draft，分別對應：要發布的文章、頁面、草稿</li>
</ul>
<h4 id="themes-主題"><a href="#themes-主題" class="headerlink" title="themes 主題"></a>themes 主題</h4><ul>
<li>用來存放主題的資料夾</li>
<li>Hexo 會根據主題來解析 scouce 資料夾中的檔案並產生靜態頁面。預設主題為 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2hleG9qcy9oZXhvLXRoZW1lLWxhbmRzY2FwZQ==">landscape<i class="fa fa-external-link-alt"></i></span></li>
</ul>
<h4 id="source-資源"><a href="#source-資源" class="headerlink" title="source 資源"></a>source 資源</h4><ul>
<li>用來存放原始檔案的地方，例如 Markdown 檔、圖片、各種頁面（分頁、關於等）</li>
<li>通常資料夾命名開頭會加上底線 <code>_</code>，例如 <code>_imgs</code></li>
<li>以 <code>_</code> 開頭的檔案、資料夾或隱藏檔案會被忽略，除了 <code>_posts</code> 資料夾以外</li>
<li>Markdown 檔和 HTML 檔會被解析，並放到 public 資料夾，而其他檔案則會被拷貝過去</li>
</ul>
<h4 id="source-amp-public-amp-deploy-git-的差別"><a href="#source-amp-public-amp-deploy-git-的差別" class="headerlink" title="source &amp; public &amp; .deploy_git 的差別"></a>source &amp; public &amp; .deploy_git 的差別</h4><ul>
<li>執行 <code>$ hexo generate</code> 之後，會將 scorce 文件夾中的 Markdown 檔和 HTML 檔進行解析，再結合主題進行渲染，生成我們看到的靜態網站</li>
<li>執行 <code>$ hexo deploy</code> 之後，則會將 public 文件夾中的內容部署到 GitHub，並生成 .deploy_git 資料夾，因此內容與 public 幾乎相同</li>
<li>這三者的關係可想成：</li>
</ul>
<pre class="line-numbers language-none"><code class="language-none">source -&gt; public -&gt; .deploy_git<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<hr>
<h2 id="常用指令"><a href="#常用指令" class="headerlink" title="常用指令"></a>常用指令</h2><p>接著介紹一些 Hexo 常會用到的相關指令語法，更多詳細指令可參考<span class="exturl" data-url="aHR0cHM6Ly9oZXhvLmlvL3poLXR3L2RvY3MvY29tbWFuZHM=">官方文件<i class="fa fa-external-link-alt"></i></span>。</p>
<h3 id="new-新增文章"><a href="#new-新增文章" class="headerlink" title="new 新增文章"></a>new 新增文章</h3><pre class="line-numbers language-none"><code class="language-none">$ hexo new [layout] &lt;title&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ul>
<li>如果沒有設定 layout，則會使用 _config.yml 中的 default_layout 來設定</li>
<li>如果標題有包含空格，需使用引號括住：<code>&quot;title&quot;</code></li>
<li>接著可直接到 <code>/source/_posts/title.md</code> 中編輯文章內容</li>
</ul>
<blockquote>
<p>若是對 Markdown 相關語法不熟悉，可參考這篇筆記：<span class="exturl" data-url="aHR0cHM6Ly9oYWNrbWQuaW8vQEhlaWRpLUxpdS9ub3RlLW1hcmtkb3du">Markdown 格式介紹<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
<h3 id="clean-清除靜態檔案與快取"><a href="#clean-清除靜態檔案與快取" class="headerlink" title="clean 清除靜態檔案與快取"></a>clean 清除靜態檔案與快取</h3><pre class="line-numbers language-none"><code class="language-none">$ hexo clean<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>在每次儲存修正後的檔案之前，會建議先輸入此指令，清除快取檔案 （db.json）和已產生的靜態檔案（public）。</p>
<h3 id="generate-產生靜態檔案"><a href="#generate-產生靜態檔案" class="headerlink" title="generate 產生靜態檔案"></a>generate 產生靜態檔案</h3><pre class="line-numbers language-none"><code class="language-none">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>可簡寫成 <code>hexo g</code>，生成靜態檔案。</p>
<h3 id="server-啟動伺服器"><a href="#server-啟動伺服器" class="headerlink" title="server 啟動伺服器"></a>server 啟動伺服器</h3><ul>
<li>在本地端啟動 Hexo 伺服器，預設路徑為：<code>http://localhost:4000/</code></li>
<li>可在自己電腦上預覽設定結果，按 Ctrl + C 即可關閉<blockquote>
<p>localhost：代表只能從本地瀏覽此網站，無法從外部瀏覽</p>
</blockquote>
</li>
</ul>
<pre class="line-numbers language-none"><code class="language-none">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p><img src="https://i.imgur.com/JUHZ8Lw.png"></p>
<h2 id="部署到-GitHub"><a href="#部署到-GitHub" class="headerlink" title="部署到 GitHub"></a>部署到 GitHub</h2><h3 id="建立-GitHub-專案"><a href="#建立-GitHub-專案" class="headerlink" title="建立 GitHub 專案"></a>建立 GitHub 專案</h3><p>在架設網誌之前，還必須準備一個存放網站的空間，例如架設主機，或是選擇現有的平台，例如 GitHub Pages 或 Heroku 等，本篇以 GitHub 作為範例。</p>
<p>接著可依照下列步驟在 GitHub 新增專案：</p>
<h4 id="Step1-註冊-GitHub-帳號並登入"><a href="#Step1-註冊-GitHub-帳號並登入" class="headerlink" title="Step1. 註冊 GitHub 帳號並登入"></a>Step1. 註冊 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tLw==">GitHub<i class="fa fa-external-link-alt"></i></span> 帳號並登入</h4><h4 id="Step2-點選-New-新增一個-Repository（專案）"><a href="#Step2-點選-New-新增一個-Repository（專案）" class="headerlink" title="Step2. 點選 New 新增一個 Repository（專案）"></a>Step2. 點選 New 新增一個 Repository（專案）</h4><p><img src="https://i.imgur.com/nDvzP4k.png"></p>
<h4 id="Step3-將專案名稱命名為-username-github-io，username-記得改成自己的帳號名稱"><a href="#Step3-將專案名稱命名為-username-github-io，username-記得改成自己的帳號名稱" class="headerlink" title="Step3. 將專案名稱命名為 username.github.io，username 記得改成自己的帳號名稱"></a>Step3. 將專案名稱命名為 <code>username.github.io</code>，username 記得改成自己的帳號名稱</h4><p><img src="https://i.imgur.com/0i5Fg2R.png"></p>
<p>這樣就成功建立了一個網域：<code>username.github.io</code></p>
<h3 id="將檔案發布到-GitHub"><a href="#將檔案發布到-GitHub" class="headerlink" title="將檔案發布到 GitHub"></a>將檔案發布到 GitHub</h3><h4 id="Step1-安裝-Git-相關套件"><a href="#Step1-安裝-Git-相關套件" class="headerlink" title="Step1. 安裝 Git 相關套件"></a>Step1. 安裝 Git 相關套件</h4><p>回到 hexo 資料夾，在終端機輸入下列指令安裝部署所需套件：</p>
<pre class="line-numbers language-none"><code class="language-none">$ npm install hexo-deployer-git --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h4 id="Step2-修改-config-yml-檔案的-Deployment-設定"><a href="#Step2-修改-config-yml-檔案的-Deployment-設定" class="headerlink" title="Step2. 修改 _config.yml 檔案的 Deployment 設定"></a>Step2. 修改 _config.yml 檔案的 Deployment 設定</h4><p>接著是修改 _config.yml 設定檔中，有關 deploy 的設定。</p>
<blockquote>
<p>需注意這裡指的 _config.yml 檔案是根目錄的，而不是 themes 主題中的。</p>
</blockquote>
<pre class="line-numbers language-none"><code class="language-none">deploy:
  type: git
  repo: https:&#x2F;&#x2F;github.com&#x2F;username&#x2F;username.github.io.git
  branch: master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>type：選擇部屬模式，這裡填 git</li>
<li>repo：GitHub repository 的連結，記得將 username 修改成自己的帳號名稱</li>
<li>branch：選擇分支，預設為 master</li>
</ul>
<p><img src="https://i.imgur.com/bVw4OIH.png"></p>
<h4 id="Step3-輸入部署指令"><a href="#Step3-輸入部署指令" class="headerlink" title="Step3. 輸入部署指令"></a>Step3. 輸入部署指令</h4><p>使用下列指令即可部署檔案到網站上，第一次輸入可能會要求登入 GitHub 帳號：</p>
<pre class="line-numbers language-none"><code class="language-none">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>通常在完成每次修改後，會依序輸入 clean -&gt; generate -&gt; deploy 三行指令，避免更新不完全：</p>
<pre class="line-numbers language-none"><code class="language-none">$ hexo cl    &#x2F;&#x2F; 清除之前建立的靜態檔案
$ hexo g     &#x2F;&#x2F; 建立靜態頁面
$ hexo d     &#x2F;&#x2F; 部署至 GitHub<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>或是合併第二、三行指令：<code>hexo g -d</code> 即可在產生靜態頁面後立刻部署。</p>
<p>這樣就完成部署網誌到 GitHub 了！可在個人頁面 <code>https://username.github.io</code> 確認是否有發布成功，預設畫面如下：</p>
<p><img src="https://i.imgur.com/X0cAUy6.png"></p>
<hr>
<h2 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h2><p>當初之所以會對 Hexo 產生興趣，是因為在課程第十四週時，學到該如何購買個人主機和網域來部署，主要是部署動態網頁為主，例如 <span class="exturl" data-url="aHR0cDovL2hlaWRpbGl1LnR3L3RvZG9saXN0Lw==">todolist<i class="fa fa-external-link-alt"></i></span> 和 <span class="exturl" data-url="aHR0cDovL2hlaWRpbGl1LnR3L2JvYXJkLw==">board<i class="fa fa-external-link-alt"></i></span>。</p>
<p>本來也想要嘗試放看看 Markdown 檔案，卻沒想到瀏覽器並不支援，會導致部分內容變成亂碼等等。上網查該如何解決，就找到許多和 Hexo + GitHub 架設網誌有關的文章，能夠快速架設並且支援解析 Markdown 檔案，想著之後一定也要來挑戰看看！</p>
<p>實際在使用 Hexo 框架時，真的比想像中還要方便許多！除了能夠快速套用主題或外掛，也能自訂修改想要的樣式，能夠玩出許多變化。目前<a href="https://heidiliu2020.github.io/">網站 Demo</a> 還很陽春，之後會繼續摸索有哪些功能，預計下一篇會整裡有關更換主題等設定，同時也慢慢豐富自己的網誌。</p>
<p>參考資料：</p>
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9oc2lhbmdmZW5nLmdpdGh1Yi5pby9oZXhvLzIwMTkwNDExLzkzMjgyNjE2MC8=">架設 Hexo+GitHub<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9zZWdtZW50ZmF1bHQuY29tL2EvMTE5MDAwMDAyMTkyMzEzNw==">基於Hexo的matery主題搭建博客並深度優化<i class="fa fa-external-link-alt"></i></span></li>
</ul>
]]></content>
      <categories>
        <category>Blog</category>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>GitHub</tag>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>【學習筆記】如何更換 Hexo 主題 &amp; 自訂樣式</title>
    <url>/hexo-theme/</url>
    <content><![CDATA[<p>以下介紹如何套用 Hexo 主題，以及自訂樣式：</p>
<p><img src="https://i.imgur.com/6LNDOBF.png"></p>
<span id="more"></span>

<h2 id="更換主題"><a href="#更換主題" class="headerlink" title="更換主題"></a>更換主題</h2><p>首先介紹 Hexo 專案架構：</p>
<pre class="line-numbers language-none"><code class="language-none">.  &#x2F;&#x2F; 根目錄
├─ .deploy_git
├─ node_modules
├─ public　    &#x2F;&#x2F; 使用 hexo g 指令生成的內容
├─ scaffolds   &#x2F;&#x2F; 模板
├─ source　    &#x2F;&#x2F; 存放原始檔案
　　├─ _discarded　&#x2F;&#x2F; 已刪除文章
　　├─ _drafts　 &#x2F;&#x2F; 未發布文章
　　├─ _posts　　&#x2F;&#x2F; 已發布文章（會被 push）
　　├─ about　　 &#x2F;&#x2F; 關於我
　　└─ categories   &#x2F;&#x2F; 分類
├─ themes　      &#x2F;&#x2F; 存放主題
　　└─ landscape　&#x2F;&#x2F; 預設主題
　　　　├─ layout, scripts, source
　　　　└─ _config.yml　&#x2F;&#x2F; 修改主題設定
└─ _config.yml　&#x2F;&#x2F; 修改部落格的通用設定，例如：網站標題、網址、使用主題等<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="下載主題"><a href="#下載主題" class="headerlink" title="下載主題"></a>下載主題</h3><p>以更換成 next 主題為例，可參考 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3RoZW1lLW5leHQvaGV4by10aGVtZS1uZXh0">hexo-theme-next<i class="fa fa-external-link-alt"></i></span> 官方說明，將主題 clone 到本地端：</p>
<pre class="line-numbers language-none"><code class="language-none">$ cd hexo
$ git clone https:&#x2F;&#x2F;github.com&#x2F;theme-next&#x2F;hexo-theme-next themes&#x2F;next<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h3 id="修改-config-yml-的-theme-設定"><a href="#修改-config-yml-的-theme-設定" class="headerlink" title="修改 /_config.yml 的 theme 設定"></a>修改 /_config.yml 的 theme 設定</h3><p>更多主題可以到官網的 <span class="exturl" data-url="aHR0cHM6Ly9oZXhvLmlvL3RoZW1lcy8=">Hexo Themes<i class="fa fa-external-link-alt"></i></span> 選擇，將主題 clone 下來後，修改根目錄的 _config.yml 檔案即可套用：</p>
<pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># Extensions</span>
<span class="token comment">## Plugins: https://hexo.io/plugins/</span>
<span class="token comment">## Themes: https://hexo.io/themes/</span>
<span class="token key atrule">theme</span><span class="token punctuation">:</span> next<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<hr>
<h2 id="自訂樣式"><a href="#自訂樣式" class="headerlink" title="自訂樣式"></a>自訂樣式</h2><p>在更早之前的版本，是透過 _custom.styl 來自訂樣式，目前則改成 source/_data 這個路徑。</p>
<p>可參考這篇：<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3RoZW1lLW5leHQvaGV4by10aGVtZS1uZXh0L2lzc3Vlcy85NzM=">NexT V7.2.0:How to change blog background？如何更改博客背景？<i class="fa fa-external-link-alt"></i></span></p>
<h3 id="修改-next-config-yml-的-Custom-file-path-設定"><a href="#修改-next-config-yml-的-Custom-file-path-設定" class="headerlink" title="修改 next/_config.yml 的 Custom_file_path 設定"></a>修改 next/_config.yml 的 Custom_file_path 設定</h3><p>在 <code>/themes/next/_config.yml</code> 檔案，把 custom_file_path 的 style 註解拿掉：</p>
<pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># Define custom file paths.</span>
<span class="token comment"># Create your custom files in site directory `source/_data` and uncomment needed files below.</span>
<span class="token key atrule">custom_file_path</span><span class="token punctuation">:</span>
  <span class="token comment">#head: source/_data/head.swig</span>
  <span class="token comment">#header: source/_data/header.swig</span>
  <span class="token comment">#sidebar: source/_data/sidebar.swig</span>
  <span class="token comment">#postMeta: source/_data/post-meta.swig</span>
  <span class="token comment">#postBodyEnd: source/_data/post-body-end.swig</span>
  <span class="token comment">#footer: source/_data/footer.swig</span>
  <span class="token comment">#bodyEnd: source/_data/body-end.swig</span>
  <span class="token comment">#variable: source/_data/variables.styl</span>
  <span class="token comment">#mixin: source/_data/mixins.styl</span>
  <span class="token key atrule">style</span><span class="token punctuation">:</span> source/_data/styles.styl<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="在-source-建立-data-資料夾"><a href="#在-source-建立-data-資料夾" class="headerlink" title="在 /source 建立 _data 資料夾"></a>在 /source 建立 _data 資料夾</h3><p>需注意這裡的 source 路徑並不是 next 主題資料夾，而是在 Hexo 專案根目錄的 source/_data，如果沒有 _data 資料夾需自行建立，並在裡面新增 styles.styl 檔案：</p>
<p><img src="https://i.imgur.com/eueuD6k.png"></p>
<h3 id="撰寫自訂樣式"><a href="#撰寫自訂樣式" class="headerlink" title="撰寫自訂樣式"></a>撰寫自訂樣式</h3><p>接著就可以在 styles.styl 檔案中撰寫樣式，例如設定背景圖片：</p>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">body</span> <span class="token punctuation">&#123;</span>
  <span class="token property">background</span><span class="token punctuation">:</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span>/images/bg.jpg<span class="token punctuation">)</span></span><span class="token punctuation">;</span>   // 圖片路徑
  <span class="token property">background-repeat</span><span class="token punctuation">:</span> no-repeat<span class="token punctuation">;</span>　// 不重複
  <span class="token property">background-attachment</span><span class="token punctuation">:</span>fixed<span class="token punctuation">;</span>　 //　固定背景
  <span class="token property">background-size</span><span class="token punctuation">:</span> cover<span class="token punctuation">;</span> // 將背景圖片放大至容器大小
  <span class="token property">background-position</span><span class="token punctuation">:</span>50% 50%<span class="token punctuation">;</span>  // 背景位置置中
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>記得把圖片放到對應位置 <code>/source/images/bg.jpg</code> 才能讀取到：</p>
<p><img src="https://i.imgur.com/9F4gZn4.png"></p>
<p>結果如下：</p>
<p><img src="https://i.imgur.com/6n4wOCV.png"></p>
<h2 id="取消歸檔的「嗯-目前共有-x-篇文章。-繼續努力。」"><a href="#取消歸檔的「嗯-目前共有-x-篇文章。-繼續努力。」" class="headerlink" title="取消歸檔的「嗯..! 目前共有 x 篇文章。 繼續努力。」"></a>取消歸檔的「嗯..! 目前共有 x 篇文章。 繼續努力。」</h2><p>原先看到可以把 /next/_config.yml 中的 cheers 設定為 false，但目前版本似乎沒有這個設定，後來是看到<span class="exturl" data-url="aHR0cHM6Ly9waW5nc2hpdWFuLmdpdGxhYi5pby9oZXhvX2dpdGxhYl9hZHNlbnNlX25jdHUuaHRtbA==">這篇文章<i class="fa fa-external-link-alt"></i></span>有提到可以直接修改 next/layout/archive.swig 檔案，把有出現 cheers 的區塊通通註解掉：</p>
<pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">  &lt;div class="post<span class="token punctuation">-</span>block"<span class="token punctuation">></span>
    &lt;div class="posts<span class="token punctuation">-</span>collapse"<span class="token punctuation">></span>
<span class="token comment">#  以下通通註解掉   </span>
      <span class="token punctuation">&#123;</span><span class="token comment">###&lt;div class="collection-title"></span>
        <span class="token punctuation">&#123;</span>%<span class="token punctuation">-</span> set posts_length = site.posts.length %<span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#123;</span>%<span class="token punctuation">-</span> if posts_length <span class="token punctuation">></span> 210 %<span class="token punctuation">&#125;</span>
          <span class="token punctuation">&#123;</span>%<span class="token punctuation">-</span> set cheers = 'excellent' %<span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#123;</span>% elif posts_length <span class="token punctuation">></span> 130 %<span class="token punctuation">&#125;</span>
          <span class="token punctuation">&#123;</span>%<span class="token punctuation">-</span> set cheers = 'great' %<span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#123;</span>% elif posts_length <span class="token punctuation">></span> 80 %<span class="token punctuation">&#125;</span>
          <span class="token punctuation">&#123;</span>%<span class="token punctuation">-</span> set cheers = 'good' %<span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#123;</span>% elif posts_length <span class="token punctuation">></span> 50 %<span class="token punctuation">&#125;</span>
          <span class="token punctuation">&#123;</span>%<span class="token punctuation">-</span> set cheers = 'nice' %<span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#123;</span>% elif posts_length <span class="token punctuation">></span> 30 %<span class="token punctuation">&#125;</span>
          <span class="token punctuation">&#123;</span>%<span class="token punctuation">-</span> set cheers = 'ok' %<span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#123;</span>% else %<span class="token punctuation">&#125;</span>
          <span class="token punctuation">&#123;</span>%<span class="token punctuation">-</span> set cheers = 'um' %<span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#123;</span>%<span class="token punctuation">-</span> endif %<span class="token punctuation">&#125;</span>
        &lt;span class="collection<span class="token punctuation">-</span>header"<span class="token punctuation">></span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> __('cheers.' + cheers) <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token tag">!</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> _p('counter.archive_posts'<span class="token punctuation">,</span> site.posts.length) <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> __('keep_on') <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>&lt;/span<span class="token punctuation">></span>
      &lt;/div<span class="token punctuation">></span><span class="token comment">###&#125;</span>
<span class="token comment">#  以上通通註解掉 </span>

      <span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> post_template.render(page.posts) <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>

    &lt;/div<span class="token punctuation">></span>
  &lt;/div<span class="token punctuation">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>結果如下：</p>
<p><img src="https://i.imgur.com/DRbxd52.png"></p>
<hr>
<h2 id="文章搜尋功能"><a href="#文章搜尋功能" class="headerlink" title="文章搜尋功能"></a>文章搜尋功能</h2><h3 id="修改-next-config-yml-的-local-search-設定"><a href="#修改-next-config-yml-的-local-search-設定" class="headerlink" title="修改 next _config.yml 的 local_search 設定"></a>修改 next _config.yml 的 local_search 設定</h3><p>修改<code> /themes/next/_config.yml</code> 檔案中的 local_search，把 enable 改為 ture：</p>
<pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># Local Search</span>
<span class="token comment"># Dependencies: https://github.com/theme-next/hexo-generator-searchdb</span>
<span class="token key atrule">local_search</span><span class="token punctuation">:</span>
  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
  <span class="token comment"># If auto, trigger search by changing input.</span>
  <span class="token comment"># If manual, trigger search by pressing enter key or search button.</span>
  <span class="token key atrule">trigger</span><span class="token punctuation">:</span> auto
  <span class="token comment"># Show top n results per article, show all results by setting to -1</span>
  <span class="token key atrule">top_n_per_article</span><span class="token punctuation">:</span> <span class="token number">1</span>
  <span class="token comment"># Unescape html strings to the readable one.</span>
  <span class="token key atrule">unescape</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>
  <span class="token comment"># Preload the search data when the page loads.</span>
  <span class="token key atrule">preload</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="安裝套件"><a href="#安裝套件" class="headerlink" title="安裝套件"></a>安裝套件</h3><pre class="line-numbers language-none"><code class="language-none">$ npm install hexo-generator-searchdb --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h3 id="新增內容到根目錄的-config-yml"><a href="#新增內容到根目錄的-config-yml" class="headerlink" title="新增內容到根目錄的 _config.yml"></a>新增內容到根目錄的 _config.yml</h3><p>在 <code>_config.yml</code> 檔案最下方加入這段內容：</p>
<pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># 文章搜尋功能</span>
<span class="token key atrule">search</span><span class="token punctuation">:</span>
  <span class="token key atrule">path</span><span class="token punctuation">:</span> search.xml
  <span class="token key atrule">field</span><span class="token punctuation">:</span> post
  <span class="token key atrule">content</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
  <span class="token key atrule">format</span><span class="token punctuation">:</span> html<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>結果如下：</p>
<p><img src="https://i.imgur.com/uPH9x7S.png"></p>
<h2 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h2><p>在之前寫的<a href="https://heidiliu2020.github.io/2020/11/07/hexo-github/">【學習筆記】如何使用 Hexo + GitHub Pages 架設個人網誌</a> 這篇，提到該如何更換 theme 主題，到現在終於生出來XD 主要還是因為自己想要更換背景，卻忘記當初是怎麼自定義樣式的，結果又繞了點遠路，果然整理過後的知識才是自己的，寫起來就不怕忘記啦！</p>
]]></content>
      <categories>
        <category>Blog</category>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Blog</tag>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>[week 6] HTML - 認識基礎標籤</title>
    <url>/html/</url>
    <content><![CDATA[<blockquote>
<p>本篇為 <span class="exturl" data-url="aHR0cHM6Ly9saWRlbXkuY29tL3AvZmUxMDEtaHRtbC1jc3M=">[FE101] 前端基礎：HTML 與 CSS<i class="fa fa-external-link-alt"></i></span> 這門課程的學習筆記。如有錯誤歡迎指正。</p>
</blockquote>
<pre class="line-numbers language-none"><code class="language-none">學習目標：

 P1 你知道 HTML 是在做什麼的
 P1 你知道如何使用有語意的（semantic）標籤
 P1 你知道基本 SEO 的概念<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<span id="more"></span>
<h2 id="網頁是如何製作的？"><a href="#網頁是如何製作的？" class="headerlink" title="網頁是如何製作的？"></a>網頁是如何製作的？</h2><ul>
<li>所有網站都使用 HTML 和 CSS 編寫，且根據不同需求，可能還會加入其他技術。</li>
<li>網頁其實就是有結構的「文字檔」，藉由瀏覽器解析渲染，呈現我們看到的畫面。</li>
</ul>
<h2 id="什麼是-HTML？"><a href="#什麼是-HTML？" class="headerlink" title="什麼是 HTML？"></a>什麼是 HTML？</h2><ul>
<li>全名為 HyperText Markup Language，中文翻作「超文本標記語言」。</li>
<li>由名字可知 HTML 是一種標記語言，而非程式語言。</li>
<li>HTML 使用「元素」來描述頁面結構，通常由兩個標記（tag）所組成：<ul>
<li>開始標記：可承載屬性，說明該元素的內容。例如：<code>&lt;p&gt;</code></li>
<li>結束標記：多一道斜線。例如：<code>&lt;/p&gt;</code></li>
</ul>
</li>
</ul>
<hr>
<h2 id="基本架構-必要的標籤"><a href="#基本架構-必要的標籤" class="headerlink" title="基本架構 - 必要的標籤"></a>基本架構 - 必要的標籤</h2><blockquote>
<p>小技巧：在編輯器上輸入 <code>!</code> 再按 tab 鍵，可快速生成基本架構。</p>
</blockquote>
<pre class="line-numbers language-htmlmixed" data-language="htmlmixed"><code class="language-htmlmixed">&lt;!-- 開頭需定義撰寫格式，告訴瀏覽器使用最新版本 HTML5 --&gt;
&lt;!DOCTYPE html&gt;

&lt;!-- 網頁的最根部元素 --&gt;
&lt;html lang&#x3D;&quot;en&quot;&gt;

  &lt;!-- 包含網頁的基本資訊 --&gt;
  &lt;head&gt;

  &lt;&#x2F;head&gt;

  &lt;!-- 網頁顯示的內容 --&gt;
  &lt;body&gt;

  &lt;&#x2F;body&gt;
  
&lt;&#x2F;html&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="lt-head-gt-內常見的標籤"><a href="#lt-head-gt-內常見的標籤" class="headerlink" title="&lt;head&gt; 內常見的標籤"></a><code>&lt;head&gt;</code> 內常見的標籤</h2><p>head 中的文檔並不會呈現在瀏覽器上，通常會包含一些資訊，例如：標題（<code>&lt;title&gt;</code>）、meatadata（提供網頁資訊給瀏覽器或搜尋引擎）、引入 CSS 或 JavaScript 文件並應用於 HTML 檔。</p>
<pre class="line-numbers language-htmlmixed" data-language="htmlmixed"><code class="language-htmlmixed">&lt;head&gt;
    &lt;!-- 聲明該頁面的編碼方式 --&gt;
    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt; 
        
  　&lt;!-- 在 RWD 網頁，用來設定在不同裝置下的顯示方式：
        width&#x3D;device-width：符合裝置寬度最佳解析度
        initial-scale&#x3D;1.0：設定手機螢幕畫面的初始縮放比例為 100% 
    --&gt;
    &lt;meta name&#x3D;&quot;viewport&quot; content&#x3D;&quot;width&#x3D;device-width, initial-scale&#x3D;1.0&quot;&gt;
    
    &lt;!-- 在瀏覽器 tab 標籤上的標題 --&gt;
    &lt;title&gt;網頁標題&lt;&#x2F;title&gt;
    &lt;!-- 在瀏覽器 tab 標籤上的小圖示 --&gt;
    &lt;link rel&#x3D;&quot;icon&quot; href&#x3D;&quot;favicon.ico&quot;&gt;
    &lt;!-- 引入 main.css --&gt;
    &lt;link href&#x3D;&quot;main.css&quot; rel&#x3D;&quot;stylesheet&quot;&gt;
    &lt;!-- 引入 common.js --&gt;
    &lt;script src&#x3D;&quot;common.js&quot;&gt;&lt;&#x2F;script&gt;
&lt;&#x2F;head&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>參考資料：<span class="exturl" data-url="aHR0cHM6Ly93d3cud2liaWJpLmNvbS9pbmZvLnBocD90aWQ9NDE1">HTML meta 標籤- Wibibi<i class="fa fa-external-link-alt"></i></span></p>
<hr>
<h2 id="lt-body-gt-內常見的標籤"><a href="#lt-body-gt-內常見的標籤" class="headerlink" title="&lt;body&gt; 內常見的標籤"></a><code>&lt;body&gt;</code> 內常見的標籤</h2><ul>
<li><code>&lt;div&gt;</code>：為區塊元素（block）</li>
</ul>
<h3 id="文字相關標籤"><a href="#文字相關標籤" class="headerlink" title="文字相關標籤"></a>文字相關標籤</h3><ul>
<li><code>&lt;h1&gt;</code> ～ <code>&lt;h6&gt;</code>：標題有六階<ul>
<li>重要程度由高至低</li>
<li>一個網頁通常只能有一個 h1</li>
</ul>
</li>
<li><code>&lt;p&gt;</code>：段落</li>
<li><code>&lt;span&gt;</code>：為行內元素</li>
<li><code>&lt;sup&gt;</code> 和 <code>&lt;sub&gt;</code>：用來將內容上標、下標。為行內元素。</li>
</ul>
<pre class="line-numbers language-htmlmixed" data-language="htmlmixed"><code class="language-htmlmixed">&lt;h3&gt;上標（superscript）：常用來表示日期字尾、次方數&lt;&#x2F;h3&gt;
&lt;p&gt;Today is July 23&lt;sup&gt;rd&lt;&#x2F;sup&gt;.&lt;&#x2F;p&gt;

&lt;h3&gt;下標（subscript）：常用在註解或化學式上&lt;&#x2F;h3&gt;
&lt;p&gt;H&lt;sub&gt;2&lt;&#x2F;sub&gt;O&lt;&#x2F;p&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><img src="https://i.imgur.com/SzbbSNA.png" alt="sup sub"></p>
<h3 id="空白壓縮"><a href="#空白壓縮" class="headerlink" title="空白壓縮"></a>空白壓縮</h3><p>當瀏覽器遇到兩個以上的空白字元時，只會顯示一個空白字元；同樣的，遇到斷行也會視為單一空白字元處理。</p>
<p>因此我們可以利用下列標籤幫助排版：</p>
<ul>
<li><code>&lt;pre&gt;</code>：保留完整格式，可用於顯示整段程式碼</li>
<li><code>&lt;br /&gt;</code> 或 <code>&lt;br&gt;</code>：換行</li>
<li><code>&lt;hr /&gt;</code> 或 <code>&lt;hr /&gt;</code>：水平線，大小寫均可，斜線可加可不加</li>
</ul>
<p>舉個例子：</p>
<pre class="line-numbers language-htmlmixed" data-language="htmlmixed"><code class="language-htmlmixed">我是標題
&lt;hr&gt;
我是段落一
&lt;HR&gt;
我是段落二<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><img src="https://i.imgur.com/EFy5QbP.png"></p>
<h3 id="清單列表"><a href="#清單列表" class="headerlink" title="清單列表"></a>清單列表</h3><ul>
<li><code>&lt;ul&gt;</code>：項目清單（unordered list）</li>
<li><code>&lt;ol&gt;</code>：編號清單（ordered list）</li>
<li><code>&lt;li&gt;</code>：清單中的每個項目（list item）</li>
<li>去除清單預設樣式 CSS：<code>list-style: none</code></li>
</ul>
<pre class="line-numbers language-htmlmixed" data-language="htmlmixed"><code class="language-htmlmixed">&lt;ol&gt;
  &lt;li&gt;項目一&lt;&#x2F;li&gt;
  &lt;li&gt;項目二&lt;&#x2F;li&gt;
  &lt;li&gt;項目三&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="lt-a-gt-：加入連結"><a href="#lt-a-gt-：加入連結" class="headerlink" title="&lt;a&gt;：加入連結"></a><code>&lt;a&gt;</code>：加入連結</h3><ul>
<li><code>href</code> 屬性：指定要連結的目標網頁，可分為：<ul>
<li>絕對 URL：完整網址</li>
<li>相對 URL：連到同一網站的其他頁面可使用，例如：contact.html</li>
<li>上述兩種方式，也可使用 id 屬性：指定連結到網頁的目標元素</li>
</ul>
</li>
</ul>
<pre class="line-numbers language-htmlmixed" data-language="htmlmixed"><code class="language-htmlmixed">&lt;h1 id&#x3D;&quot;top&quot;&gt;網頁前端&lt;&#x2F;h1&gt;
&lt;a href&#x3D;&quot;#html&quot;&gt;前往 HTML&lt;&#x2F;a&gt;
&lt;a href&#x3D;&quot;#css&quot;&gt;前往 CSS&lt;&#x2F;a&gt;

&lt;h2 id&#x3D;&quot;html&quot;&gt;HTML 介紹&lt;&#x2F;h2&gt;
&lt;p&gt;Lorem數字 + tab 鍵：可產生假字&lt;&#x2F;p&gt;

&lt;h2 id&#x3D;&quot;css&quot;&gt;CSS 介紹&lt;&#x2F;h2&gt;
&lt;p&gt;Lorem1000 + tab 鍵：產生 1000 個假字&lt;&#x2F;p&gt;

&lt;a href&#x3D;&quot;#top&quot;&gt;回到 TOP&lt;&#x2F;a&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li><code>target</code> 屬性：<ul>
<li><code>_self</code>：為預設值，會在原頁面開啟連結</li>
<li><code>_blank</code>：在新視窗開啟連結</li>
</ul>
</li>
</ul>
<pre class="line-numbers language-htmlmixed" data-language="htmlmixed"><code class="language-htmlmixed">&lt;a href&#x3D;&quot;https:&#x2F;&#x2F;www.google.com.tw&#x2F;&quot;&gt;連到 Google 首頁&lt;&#x2F;a&gt;
&lt;a href&#x3D;&quot;https:&#x2F;&#x2F;www.google.com.tw&#x2F;&quot; target&#x3D;&quot;_blank&quot;&gt;另開新視窗&lt;&#x2F;a&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h3 id="lt-img-gt-：嵌入圖片"><a href="#lt-img-gt-：嵌入圖片" class="headerlink" title="&lt;img&gt;：嵌入圖片"></a><code>&lt;img&gt;</code>：嵌入圖片</h3><ul>
<li><code>src</code> 屬性：指定圖片來源</li>
<li><code>alt</code> 屬性：當圖片無法顯示時的替代文字，可用來描述影像內容</li>
<li><code>title</code> 屬性：滑鼠停留在圖片上的提示文字</li>
</ul>
<pre class="line-numbers language-htmlmixed" data-language="htmlmixed"><code class="language-htmlmixed">&lt;img src&#x3D;&quot;https:&#x2F;&#x2F;www.google.com.tw&#x2F;images&#x2F;branding&#x2F;googlelogo&#x2F;1x&#x2F;googlelogo_color_272x92dp.png&quot; alt&#x3D;&quot;This is logo&quot; title&#x3D;&quot;google logo&quot; &gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ul>
<li><p><code>&lt;Iframe&gt;</code>：內嵌網頁</p>
</li>
<li></li>
</ul>
<pre class="line-numbers language-htmlmixed" data-language="htmlmixed"><code class="language-htmlmixed">&lt;figure&gt;
  &lt;img src&#x3D;&quot;https:&#x2F;&#x2F;images.unsplash.com&#x2F;photo-1528138326811-ec5dd3b594be?ixlib&#x3D;rb-1.2.1&amp;ixid&#x3D;eyJhcHBfaWQiOjEyMDd9&amp;auto&#x3D;format&amp;fit&#x3D;crop&amp;w&#x3D;750&amp;q&#x3D;80&quot; alt&#x3D;&quot;photo&quot; title&#x3D;&quot;tasty break&quot;&gt;
  &lt;figcaption&gt;
    Photo by Vita Marija Murenaite on &lt;a href&#x3D;&quot;https:&#x2F;&#x2F;unsplash.com&#x2F;photos&#x2F;HyO7jwH4C6g&quot;&gt;Unsplash&lt;&#x2F;a&gt;
  &lt;&#x2F;figcaption&gt;
&lt;&#x2F;figure&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><img src="https://i.imgur.com/zRRRzrC.png" alt="figure"></p>
<h3 id="lt-table-gt-：表格"><a href="#lt-table-gt-：表格" class="headerlink" title="&lt;table&gt;：表格"></a><code>&lt;table&gt;</code>：表格</h3><p>表格是以一列一列的方式撰寫，每一列由 <code>&lt;tr&gt;</code> 元素來製作。</p>
<ul>
<li><code>&lt;tr&gt;</code>：表格列（table row），表示每一列的起始</li>
<li><code>&lt;td&gt;</code>：表格資料（table data）</li>
<li><code>&lt;th&gt;</code>：表格標題（table head），用法和 <code>&lt;td&gt;</code> 元素相同，會以<strong>粗體</strong>顯示<ul>
<li>使用 scope 屬性：可標明是行（row）或列（col）的標題</li>
<li>使用 rowspan、colspan 屬性：可跨行或跨列</li>
</ul>
</li>
<li>製作長表格時，可分割成 <code>&lt;thead&gt;</code>、<code>&lt;tbody&gt;</code>、<code>&lt;tfoot&gt;</code></li>
<li>舉個例子：</li>
</ul>
<p><img src="https://i.imgur.com/2mddzqX.png" alt="table"></p>
<pre class="line-numbers language-htmlmixed" data-language="htmlmixed"><code class="language-htmlmixed">&lt;!-- 上述表格程式碼如下 --&gt;
&lt;table&gt;
  &lt;tr&gt;
    &lt;th&gt;&lt;&#x2F;th&gt;
    &lt;th&gt;A&lt;&#x2F;th&gt;
    &lt;th&gt;B&lt;&#x2F;th&gt;
    &lt;th&gt;C&lt;&#x2F;th&gt;
  &lt;&#x2F;tr&gt;
  &lt;tr&gt;
    &lt;th&gt;內容&lt;&#x2F;th&gt;
    &lt;td&gt;漢堡&lt;&#x2F;td&gt;
    &lt;td&gt;薯條&lt;&#x2F;td&gt;
    &lt;td&gt;炸雞&lt;&#x2F;td&gt;
  &lt;&#x2F;tr&gt;
  &lt;tr&gt;
    &lt;th&gt;價格&lt;&#x2F;th&gt;
    &lt;td&gt;99&lt;&#x2F;td&gt;
    &lt;td&gt;25&lt;&#x2F;td&gt;
    &lt;td&gt;70&lt;&#x2F;td&gt;
  &lt;&#x2F;tr&gt;
&lt;&#x2F;table&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="lt-form-gt-：表單"><a href="#lt-form-gt-：表單" class="headerlink" title="&lt;form&gt;：表單"></a><code>&lt;form&gt;</code>：表單</h3><p>其實 <span class="exturl" data-url="aHR0cHM6Ly93d3cuZ29vZ2xlLmNvbS50dy8=">Google 首頁<i class="fa fa-external-link-alt"></i></span>中央的搜尋框，就是最為人熟知的表單。除此之外，表單還提供其他線上功能，例如：註冊網站會員、網路購物、問卷調查等。</p>
<p>表單控制項：<br>from、input、textarea</p>
<p><code>text</code>：純文字<br><code>password</code>：顯示會以符號代替文字<br>可以使用 maxlength and minlength 來控制輸入字數<br><code>email</code>：會自動做簡單驗證<br><code>search</code>：搜尋框<br><code>tel</code>：電話<br><code>url</code>：網址</p>
<p>（待補）</p>
<p>參考資料：</p>
<ol>
<li><span class="exturl" data-url="aHR0cHM6Ly95YWtpbWhzdS5jb20vcHJvamVjdC9wcm9qZWN0X3c2X0hUTUxfZm9ybS5odG1s">[第六週] HTML - 表單 form 介紹 - Yakim shu<i class="fa fa-external-link-alt"></i></span></li>
</ol>
<h3 id="語意化元素（Semantic-Elements）"><a href="#語意化元素（Semantic-Elements）" class="headerlink" title="語意化元素（Semantic Elements）"></a>語意化元素（Semantic Elements）</h3><p>使用 HTML5 的語意化元素取代 <code>&lt;div&gt;</code> 有以下優點：</p>
<ol>
<li>可使網頁結構和區塊位置更精確</li>
<li>幫助優化 SEO（搜尋引擎最佳化）</li>
</ol>
<p><img src="https://i.imgur.com/o04CF37.png"></p>
<blockquote>
<p>圖片來源：<span class="exturl" data-url="aHR0cHM6Ly9tZWRpdW0uY29tL0BjaGFuZ3J1LnN0dWRpby8lRTUlQkYlQUIlRTklODAlOUYlRTQlQkElODYlRTglQTclQTNodG1sJUU4JUFBJTlFJUU2JTg0JThGJUU1JThDJTk2JUU2JUE4JTk5JUU3JUIxJUE0LTMzZGQ4MjQ3ZDc3OQ==">快速了解HTML語意化標籤| by Kira Yang | Medium<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
<ul>
<li><code>&lt;header&gt;</code> 頁首：常包含 Logo 圖案、導航列、搜尋欄位</li>
<li><code>&lt;nav&gt;</code> 導航列：主選單、頁尾選單</li>
<li><code>&lt;main&gt;</code> 主要內容</li>
<li><code>&lt;footer&gt;</code> 頁尾，通常包含版權訊息、法律訊息連結</li>
<li><code>&lt;article&gt;</code> 主要文章</li>
<li><code>&lt;section&gt;</code> 段落</li>
<li><code>&lt;aside&gt;</code> 側欄：與主要內文無關的區塊，也就是額外資訊（廣告、推薦文章等）</li>
</ul>
<p>參考資料：</p>
<ol>
<li><span class="exturl" data-url="aHR0cHM6Ly9pdGhlbHAuaXRob21lLmNvbS50dy91c2Vycy8yMDExMjU1MC9pcm9ubWFuLzIwNzI=">金魚都能懂 網頁設計入門 : 網頁入門第一步 (第二天)<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cudGVubG9uZy5jb20udHcvcHJvZHVjdHMvOTc4OTg2Mjc2NTAxMg==">HTML&amp;CSS：網站設計建置優化之道<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9tZWRpdW0uY29tL0BtaWFoc3V3b3JrLyVFNyVBQyVBQyVFNSU4NSVBRCVFOSU4MCVCMS1hcGktJUU1JTlGJUJBJUU3JUE0JThFLWh0bWwtdGFnLSVFNSU5RiVCQSVFNiU5QyVBQyVFNiVBOCU5OSVFNyVCMSVBNCVFOCVBQSU4RCVFOCVBRCU5OC1kMmQ5YTFjNjY0NDk=">[第七週] HTML — Tag 基本標籤認識 - Miashu<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly95YWtpbWhzdS5jb20vcHJvamVjdC9wcm9qZWN0X3c2X0hUTUxfdGFnLmh0bWw=">[第六週] HTML - tag 基礎標籤介紹 - Yakim<i class="fa fa-external-link-alt"></i></span></li>
</ol>
<hr>
<h3 id="補充：如何引入-js-檔案"><a href="#補充：如何引入-js-檔案" class="headerlink" title="補充：如何引入 js 檔案"></a>補充：如何引入 js 檔案</h3><ol>
<li>寫在 HTML 文件的 <code>&lt;script&gt;</code> 標籤內</li>
</ol>
<p>也就是內嵌在 <code>&lt;head&gt;</code> 或 <code>&lt;body&gt;</code> 結束標籤之前。兩者差別在於：</p>
<ul>
<li>head 部分：會在被調用的時候才執行。</li>
<li>body 部分：會在頁面載入的時候被執行。</li>
</ul>
<p>由於 html 檔是由上而下依序載入，放在接近檔案底部，可確保 JavaScript 較晚被讀取，再去影響先被生成的 HTML 程式碼。但也可能導致腳本載入受阻，拖慢網站效能。</p>
<ol start="2">
<li>外部引入 JavaScript 文件</li>
</ol>
<p>建立 .js 檔案後，在 HTML 檔案中的 <code>&lt;body&gt;</code> 或 <code>&lt;head&gt;</code> 透過 <code>&lt;script src= &quot;&quot;&gt;</code> 標籤引用。這是最常使用的方法，可橫跨多個 HTML 檔案使用。</p>
<pre class="line-numbers language-htmlmixed" data-language="htmlmixed"><code class="language-htmlmixed">&lt;!-- .js 檔案路徑為:scripts&#x2F;common.js --&gt;

&lt;script src&#x3D;&quot;scripts&#x2F;common.js&quot;&gt;&lt;&#x2F;script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>參考資料：</p>
<ol>
<li><span class="exturl" data-url="aHR0cHM6Ly9oaXNraW8uY29tL2NvdXJzZXMvNTEvbGVjdHVyZXMvODU2">JavaScript 寫在哪裡？ - HiSKIO<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvemgtVFcvZG9jcy9MZWFybi9KYXZhU2NyaXB0L0ZpcnN0X3N0ZXBzL1doYXRfaXNfSmF2YVNjcmlwdA==">JavaScript 是什麼? - 學習該如何開發Web | MDN<i class="fa fa-external-link-alt"></i></span></li>
</ol>
]]></content>
      <categories>
        <category>Front-End</category>
        <category>HTML &amp; CSS</category>
      </categories>
      <tags>
        <tag>Front-End</tag>
        <tag>HTML</tag>
      </tags>
  </entry>
  <entry>
    <title>【學習筆記】女巫攻擊 vs. 日蝕攻擊 vs. DDoS 攻擊</title>
    <url>/information-security-about-p2p/</url>
    <content><![CDATA[<p><img src="https://i.imgur.com/dOrGjQy.png"></p>
<h3 id="從-P2P-網路說起"><a href="#從-P2P-網路說起" class="headerlink" title="從 P2P 網路說起"></a>從 P2P 網路說起</h3><span id="more"></span>

<p>我們所熟悉的傳統網站架構，是把所有資源都放在同一台伺服器（Server），當使用者（Client）有需要時再向伺服器發出請求。一旦單一伺服器停擺，就有可能造成整個服務中斷的問題。</p>
<p><img src="https://i.imgur.com/OycTetl.png"></p>
<ul>
<li>圖片來源： <span class="exturl" data-url="aHR0cHM6Ly9jb21tb25zLndpa2ltZWRpYS5vcmcvdy9pbmRleC5waHA/Y3VyaWQ9MjU1MTc0NQ==">https://commons.wikimedia.org/w/index.php?curid=2551745<i class="fa fa-external-link-alt"></i></span></li>
</ul>
<p>而 <strong>Peer to Peer（P2P）網路</strong>，則是網路區塊的所有人均負責儲存全部或部分的資料。除了向其他IP 位址發出請求外，本身也負責處理收到的請求，同時扮演 Client 和 Server 的角色，透過「去中心化」，避免資料被中心化機構所掌控或修改，進而確保資訊安全。</p>
<p><img src="https://i.imgur.com/cRfMTpC.png"></p>
<ul>
<li>圖片來源：<span class="exturl" data-url="aHR0cHM6Ly9jb21tb25zLndpa2ltZWRpYS5vcmcvdy9pbmRleC5waHA/Y3VyaWQ9MjU1MTcyMw==">https://commons.wikimedia.org/w/index.php?curid=2551723<i class="fa fa-external-link-alt"></i></span></li>
</ul>
<p>然而 P2P 網路也同樣淺藏著風險，十年前橫行一時的 <span class="exturl" data-url="aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3dpa2kvRm94eQ==">Foxy<i class="fa fa-external-link-alt"></i></span>、<span class="exturl" data-url="aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3poLXR3L0JpdENvbWV0">BitComet<i class="fa fa-external-link-alt"></i></span> 等軟體就是基於 P2P 技術來下載資源，但前者除了電腦容易中毒，也會大量消耗網路和硬體資源。</p>
<p>接下來介紹幾種常見的 P2P 網路攻擊，均為攻擊者透過攻擊「節點」擾亂網路，差別在於最終攻擊目標和方式的不同：</p>
<h3 id="女巫攻擊（Sybil-Attack）"><a href="#女巫攻擊（Sybil-Attack）" class="headerlink" title="女巫攻擊（Sybil Attack）"></a><strong>女巫攻擊（Sybil Attack）</strong></h3><ul>
<li>方式：是指單一攻擊者透過偽造多重身份以假冒惡意節點，藉此向其他正常節點提供大量不正確的資訊，從而控制網絡取得利益</li>
<li>目的：破壞網路協議的信譽體系</li>
</ul>
<h3 id="日蝕攻擊（Eclipse-Attack）"><a href="#日蝕攻擊（Eclipse-Attack）" class="headerlink" title="日蝕攻擊（Eclipse Attack）"></a><strong>日蝕攻擊（Eclipse Attack）</strong></h3><ul>
<li>方式：確保目標的所有連接都建立在攻擊者所控制的節點上</li>
<li>目的：透過攻擊手段使受害者連接的節點被攻擊者所控制，進而操控受害者節點的通信</li>
</ul>
<h3 id="DDoS（Distributed-Denial-of-Service）-分布式拒絕服務攻擊"><a href="#DDoS（Distributed-Denial-of-Service）-分布式拒絕服務攻擊" class="headerlink" title="DDoS（Distributed Denial of Service）= 分布式拒絕服務攻擊"></a>DDoS（Distributed Denial of Service）= 分布式拒絕服務攻擊</h3><ul>
<li>方式：攻擊者透過控制不同位置的多台機器，並利用這些機器對受害者實施攻擊</li>
<li>目的：透過大量占用網絡中的節點資源，使這些節點無法提供正常服務，進而影響到整個區塊鏈網絡的運行</li>
</ul>
<h3 id="小結"><a href="#小結" class="headerlink" title="小結"></a>小結</h3><p>這陣子時常聽聞幣圈的新聞，藉此科普一些和網路攻擊相關的小知識。其實除了上述這些，還有很多聽起來很酷專有名詞，像是這篇<span class="exturl" data-url="aHR0cHM6Ly9pdGhlbHAuaXRob21lLmNvbS50dy9hcnRpY2xlcy8xMDIxNjE1OQ==">《Day21|P2P網路(2)：共識─拜占庭將軍問題》<i class="fa fa-external-link-alt"></i></span> 和提到吸血鬼攻擊的<span class="exturl" data-url="aHR0cHM6Ly9hYm1lZGlhLmlvL3N1c2hpc3dhcC12YW1waXJlLW1pbmluZy1hbHBoYS10cmFjdG9y">《SushiSwap 槓上 Uniswap，你知道最新的「吸血鬼挖礦攻擊」嗎？》<i class="fa fa-external-link-alt"></i></span>，瞭解到因應這些網路攻擊，該如何制定規則去防止攻擊者達成目的等等。</p>
<h3 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h3><ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9pdGhlbHAuaXRob21lLmNvbS50dy91c2Vycy8yMDExOTk4Mi9pcm9ubWFuLzIyNTU=">從0開始架構區塊鏈 系列<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cucGFuZXdzbGFiLmNvbS96aF9oay9hcnRpY2xlZGV0YWlscy9ENDEyMDQ3MTcuaHRtbA==">科普 | 日蝕攻擊、DDoS攻擊<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cuYmxvY2t0ZW1wby5jb20vYW5hbHlzaXMtb24tdGhlLWN1cnJlbnQtYXR0YWNrLW1lYW5zLW1hbGxlYWJpbGl0eS1zeWJpbC1hbmQtZHVzdC8=">新手科普| 什麼是「交易延展性攻擊、粉塵攻擊和女巫攻擊」<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cucGFuZXdzbGFiLmNvbS96aF9oay9hcnRpY2xlZGV0YWlscy9EMjkyNjI3MDAuaHRtbA==">日食攻擊、女巫攻擊、吸血鬼攻擊都是什麼？<i class="fa fa-external-link-alt"></i></span></li>
</ul>
]]></content>
      <categories>
        <category>Note</category>
      </categories>
      <tags>
        <tag>Security</tag>
        <tag>P2P</tag>
      </tags>
  </entry>
  <entry>
    <title>[week 7] DOM 事件傳遞機制：捕獲與冒泡、事件代理</title>
    <url>/javascript-dom/</url>
    <content><![CDATA[<blockquote>
<p>本篇為 <span class="exturl" data-url="aHR0cHM6Ly9saWRlbXkuY29tL3AvZmUxMDItamF2YXNjcmlwdA==">[FE102] 前端必備：JavaScript<i class="fa fa-external-link-alt"></i></span> 這門課程的學習筆記。如有錯誤歡迎指正。</p>
</blockquote>
<pre class="line-numbers language-none"><code class="language-none">學習目標：

 P1 你知道捕獲與冒泡是什麼
 P1 你知道什麼是事件代理（delegation）
 P2 你知道怎麼用 JavaScript 更改元素的 style
 P2 你知道 preventDefault 與 stopPropagation 的差異<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<span id="more"></span>
<p>當我們運用 JavaScript 在網頁進行操作時，主要可分為下列三大面向：</p>
<ol>
<li>介面（Interface）：如何改變介面</li>
<li>事件（Event）：如何監聽事件並做出反應</li>
<li>資料（Data）：如何和伺服器交換資料</li>
</ol>
<blockquote>
<p>以下主要探討「事件傳遞機制」的部分。</p>
</blockquote>
<h2 id="事件傳遞機制"><a href="#事件傳遞機制" class="headerlink" title="事件傳遞機制"></a>事件傳遞機制</h2><p>在開始解釋前，先以下列程式碼為範例：</p>
<pre class="line-numbers language-htmlmixed" data-language="htmlmixed"><code class="language-htmlmixed">&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
&lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;
&lt;meta name&#x3D;&quot;viewport&quot; content&#x3D;&quot;width&#x3D;device-width, initial-scale&#x3D;1.0&quot;&gt;
&lt;title&gt;事件傳遞機制&lt;&#x2F;title&gt;

&lt;style&gt;
  .outer &#123;
    width: 200px;
    height: 200px;
    background-color: orange;
  &#125;

  .inner &#123;
    width: 100px;
    height: 100px;
    background-color: lightseagreen;
  &#125;
&lt;&#x2F;style&gt;
&lt;&#x2F;head&gt;
&lt;body&gt;
  &lt;div class&#x3D;&quot;outer&quot;&gt;
    &lt;div class&#x3D;&quot;inner&quot;&gt;
      &lt;button class&#x3D;&quot;btn&quot;&gt;button&lt;&#x2F;button&gt;
  &lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;script&gt;
  addEvent(&#39;.outer&#39;);
  addEvent(&#39;.inner&#39;);
  addEvent(&#39;.btn&#39;);
  
  &#x2F;&#x2F; 監聽按鈕點擊事件
  function addEvent(className) &#123;
    document.querySelector(className)
      .addEventListener(&#39;click&#39;, function () &#123;
        console.log(className);
      &#125;)
  &#125;;
&lt;&#x2F;script&gt;
&lt;&#x2F;body&gt;
&lt;&#x2F;html&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>若在區塊都加上監聽 click 事件，會發現點擊內部區塊，同時也會點擊到外層區塊：</p>
<ul>
<li>點擊 outer 會觸發 outer</li>
<li>點擊 inner 會觸發 inner ➡️ outer</li>
<li>點擊 button 會觸發 button ➡️ inner ➡️ outer</li>
</ul>
<p><img src="https://i.imgur.com/6YDCa36.png"></p>
<p>由此可知當點擊內部節點，同時也會點擊到外層節點。</p>
<h2 id="捕獲與冒泡"><a href="#捕獲與冒泡" class="headerlink" title="捕獲與冒泡"></a>捕獲與冒泡</h2><blockquote>
<p>參考文章：<span class="exturl" data-url="aHR0cHM6Ly9ibG9nLnRlY2hicmlkZ2UuY2MvMjAxNy8wNy8xNS9qYXZhc2NyaXB0LWV2ZW50LXByb3BhZ2F0aW9uLw==">DOM 的事件傳遞機制：捕獲與冒泡<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
<p>根據上述內容，可知 DOM 事件傳遞機制分成 3 階段：</p>
<pre class="line-numbers language-none"><code class="language-none">1：Capturing Phase　捕獲階段
2：Target Phase     傳遞到元素本身
3：Bubbling Phase   冒泡階段<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>當我們觸發事件時，會從最外層的根結點開始往內傳遞到 target，也就是「捕獲階段」。接著會再由內往外回傳回去，稱為「冒泡階段」。</p>
<p>任何事件在傳遞時，都會按照這個順序下去傳遞。這也是為什麼，當觸發底層節點的事件同時，上層所有的節點也會被觸發。</p>
<p><img src="https://i.imgur.com/zj2brCF.png"></p>
<blockquote>
<p>可參考：<span class="exturl" data-url="aHR0cHM6Ly93d3cudzMub3JnL1RSL0RPTS1MZXZlbC0zLUV2ZW50cy8jZXZlbnQtZmxvdw==">W3C -  event flow 的示意圖<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
<h3 id="事件傳遞的兩個原則"><a href="#事件傳遞的兩個原則" class="headerlink" title="事件傳遞的兩個原則"></a>事件傳遞的兩個原則</h3><ol>
<li>先捕獲，再冒泡</li>
<li>當事件傳到 target 本身，沒有分捕獲跟冒泡</li>
</ol>
<p>根據傳遞機制，我們不一定要把監聽的節點設在底層節點，只需設定在外層，就能監聽到所有底層節點的事件。</p>
<h3 id="阻止事件傳遞-e-stopPropagation"><a href="#阻止事件傳遞-e-stopPropagation" class="headerlink" title="阻止事件傳遞 e.stopPropagation"></a>阻止事件傳遞 <code>e.stopPropagation</code></h3><p>當使用 <code>event.stopPropagation()</code>，事件傳遞就會停在設置的地方：</p>
<ul>
<li>若在捕獲階段：阻止事件往下傳遞</li>
<li>若在冒泡階段：阻止事件向上傳遞</li>
</ul>
<p><code>event.stopPropagation()</code>這樣就可以阻止事件繼續往上冒泡，在父元素的監聽器就不會收到孫元素的事件傳遞。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.btn'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
   e<span class="token punctuation">.</span><span class="token function">stopPropagation</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'btn 冒泡'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="阻止事件傳遞-stopPropagation"><a href="#阻止事件傳遞-stopPropagation" class="headerlink" title="阻止事件傳遞 stopPropagation()"></a>阻止事件傳遞 <code>stopPropagation()</code></h3><ul>
<li>事件傳遞會停在設置的地方</li>
<li>例如：在 window（最上層）的捕獲階段設置 <code>event.stopPropagation()</code>，會阻止後續事件傳遞，造成所有 click 事件均失效。</li>
</ul>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 監聽 window 捕獲階段的 click 事件，執行函式內指令</span>
window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  e<span class="token punctuation">.</span><span class="token function">stopPropagation</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="stopImmediatePropagation"><a href="#stopImmediatePropagation" class="headerlink" title="stopImmediatePropagation()"></a><code>stopImmediatePropagation()</code></h3><p>如果要讓同一層的事件也要停止，就用 <code>stopImmediatePropagation()</code>，這樣同一層只會觸發這個 listener。</p>
<h2 id="容易搞錯的事件機制問題"><a href="#容易搞錯的事件機制問題" class="headerlink" title="容易搞錯的事件機制問題"></a>容易搞錯的事件機制問題</h2><h3 id="迴圈與觸發時間非同步"><a href="#迴圈與觸發時間非同步" class="headerlink" title="迴圈與觸發時間非同步"></a>迴圈與觸發時間非同步</h3><p>首先要注意的，是「迴圈與觸發時間非同步」這件事。以下列程式碼為例：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 在 html 新增兩個 button：</span>
<span class="token operator">&lt;</span>body<span class="token operator">></span>
  <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"outer"</span><span class="token operator">></span>
    <span class="token operator">&lt;</span>button <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"btn"</span><span class="token operator">></span><span class="token number">1</span><span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>
    <span class="token operator">&lt;</span>button <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"btn"</span><span class="token operator">></span><span class="token number">2</span><span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>
  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>

<span class="token comment">// JS 監控按鈕 click 點擊事件：</span>
<span class="token operator">&lt;</span>script<span class="token operator">></span>
  <span class="token comment">// querySelectorAll 回傳的值是類陣列</span>
  <span class="token keyword">const</span> btns <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">'.btn'</span><span class="token punctuation">)</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> btns<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    btns<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
      <span class="token function">alert</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>
<span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>會發現兩個 button 跳出的結果都是 2，而非按照迴圈順序一一跳出相對應的數字。</p>
<p>這是因為 click 事件和迴圈是不一樣時間軸。click 只有在點擊瞬間才會執行，但迴圈會先跑完。因此順序是：click →跑完迴圈→觸發事件結果，所以會跳出一樣的數字。</p>
<p>我們可以把程式碼修改成：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 在 html 新增兩個 button：</span>
<span class="token operator">&lt;</span>body<span class="token operator">></span>
  <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"outer"</span><span class="token operator">></span>
    <span class="token comment">// 通常以 `data` 開頭是我們自訂的屬性</span>
    <span class="token operator">&lt;</span>button <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"btn"</span> data<span class="token operator">-</span>value<span class="token operator">=</span><span class="token string">"1"</span><span class="token operator">></span><span class="token number">1</span><span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>
    <span class="token operator">&lt;</span>button <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"btn"</span> data<span class="token operator">-</span>value<span class="token operator">=</span><span class="token string">"2"</span><span class="token operator">></span><span class="token number">2</span><span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>
  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>

<span class="token comment">// JS 監控按鈕 click 點擊事件：</span>
<span class="token operator">&lt;</span>script<span class="token operator">></span>
  <span class="token keyword">const</span> btns <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">'.btn'</span><span class="token punctuation">)</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> btns<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    btns<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
      <span class="token function">alert</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>target<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">'data-value'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>
<span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li><code>e.target</code>：觸發到哪個元素，就可該元素的資料</li>
<li><code>getAttribute</code>：可得到 <code>data-value</code> 的值，也就是新增在 <code>button</code> 元素的屬性</li>
</ul>
<h3 id="動態新增問題"><a href="#動態新增問題" class="headerlink" title="動態新增問題"></a>動態新增問題</h3><p>若想再新增按紐，後來新增的元素並無法擁有已預設好的 addEventListener 的功能：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"outer"</span><span class="token operator">></span>
  <span class="token operator">&lt;</span>button <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"add-btn"</span><span class="token operator">></span>add<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>
  <span class="token operator">&lt;</span>button <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"btn"</span> data<span class="token operator">-</span>value<span class="token operator">=</span><span class="token string">"1"</span><span class="token operator">></span><span class="token number">1</span><span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>
  <span class="token operator">&lt;</span>button <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"btn"</span> data<span class="token operator">-</span>value<span class="token operator">=</span><span class="token string">"2"</span><span class="token operator">></span><span class="token number">2</span><span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>
<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>

<span class="token operator">&lt;</span>script<span class="token operator">></span>
  <span class="token comment">// 從數字 3 繼續新增按紐</span>
  <span class="token keyword">let</span> num <span class="token operator">=</span> <span class="token number">3</span>

  <span class="token keyword">const</span> btns <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">'.btn'</span><span class="token punctuation">)</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> btns<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    btns<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
      <span class="token function">alert</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>target<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">'data-value'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>

  <span class="token comment">// 動態新增按紐</span>
  document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.add-btn'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">const</span> newBtn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'button'</span><span class="token punctuation">)</span>
    newBtn<span class="token punctuation">.</span>classList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"btn"</span><span class="token punctuation">)</span>
    newBtn<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">'data-value'</span><span class="token punctuation">,</span> num<span class="token punctuation">)</span>
    newBtn<span class="token punctuation">.</span>innerText <span class="token operator">=</span> num
    num <span class="token operator">+=</span> <span class="token number">1</span>
    
    document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.outer'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>newBtn<span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>當按下 add 確實會新增 button 按鈕，並同樣賦予按鈕 class 與 attribute，但新增的按鈕卻沒有 <code>addEventListener</code> 的效果。</p>
<p>這是因為「程式只會執行一次」。也就是說，第一段的 <code>.querySelectorAll</code> 其實只包含原有的兩顆按鈕，後來新增的按鈕並不會再被加入。我們可以利用「事件代理」來解決動態新增的問題。</p>
<h3 id="事件代理-event-delegation"><a href="#事件代理-event-delegation" class="headerlink" title="事件代理 event delegation"></a>事件代理 <code>event delegation</code></h3><p>透過事件傳遞機制，我們可以直接對父元素（事件代理）進行事件監聽，就不需對子元素事件一個一個監聽。如此不只能提高效率，也能處理動態新增的問題。</p>
<p>如先前提到：當我們要新增按紐，若把監聽事件設在子元素，那麼新加入的子元素就必須另外處理。若使用 event delegation，直接父元素進行事件監聽，透過冒泡機制，事件會由父元素傳遞到底下的所有子元素。</p>
<p>因此我們可以將先前的程式碼改為：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 事件代理 <span class="token operator">--</span><span class="token operator">></span>
<span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"outer"</span><span class="token operator">></span>
  <span class="token operator">&lt;</span>button <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"add-btn"</span><span class="token operator">></span>add<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>
  <span class="token operator">&lt;</span>button <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"btn"</span> data<span class="token operator">-</span>value<span class="token operator">=</span><span class="token string">"1"</span><span class="token operator">></span><span class="token number">1</span><span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>
  <span class="token operator">&lt;</span>button <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"btn"</span> data<span class="token operator">-</span>value<span class="token operator">=</span><span class="token string">"2"</span><span class="token operator">></span><span class="token number">2</span><span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>
<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>

<span class="token operator">&lt;</span>script<span class="token operator">></span>
  <span class="token keyword">let</span> num <span class="token operator">=</span> <span class="token number">3</span>

  <span class="token comment">// 動態新增按紐</span>
  document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.add-btn'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">const</span> newBtn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'button'</span><span class="token punctuation">)</span>
    newBtn<span class="token punctuation">.</span>classList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">'btn'</span><span class="token punctuation">)</span>
    newBtn<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">'data-value'</span><span class="token punctuation">,</span> num<span class="token punctuation">)</span>
    newBtn<span class="token punctuation">.</span>innerText <span class="token operator">=</span> num
    num <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.outer'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>newBtn<span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
  <span class="token comment">// 不管有沒有進行事件監聽，事件捕獲冒泡機制都會進行</span>
  <span class="token comment">// 新增監聽在父節點上</span>
  document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.outer'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// .classList.contains()：判斷是否包含該 class</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>classList<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">'btn'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token function">alert</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>target<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">'data-value'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>


<p>參考資料：<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL1JaLUh1YW5nL0Fib3V0LUphdmFzY3JpcHQvaXNzdWVzLzI=">Introduction to Javascript in Front-End #2<i class="fa fa-external-link-alt"></i></span></p>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>DOM</tag>
      </tags>
  </entry>
  <entry>
    <title>[week 3] JavaScript：ES6 語法</title>
    <url>/javascript-es6/</url>
    <content><![CDATA[<blockquote>
<p>本篇為 <span class="exturl" data-url="aHR0cHM6Ly9saWRlbXkuY29tL3AvanMxMDItamF2YXNjcmlwdC1lczYtbnBt">[JS102] 升級你的 JavaScript 技能：ES6 + npm + Jest<i class="fa fa-external-link-alt"></i></span> 這門課程的學習筆記。如有錯誤歡迎指正！</p>
</blockquote>
<pre class="line-numbers language-none"><code class="language-none">學習目標：

 理解常用內建函式如何使用
 熟悉程式語法並知道如何解決基礎問題<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<span id="more"></span>

<h2 id="What-is-ECMAScript？"><a href="#What-is-ECMAScript？" class="headerlink" title="What is ECMAScript？"></a>What is ECMAScript？</h2><p>是一種標準和規範，Javascript 這門語言就是遵循 ECMAScript 規範實作。於 2015 年發布 ECMAScript 第六版，因此又稱 ES2015 或 ES6，在 ES6 之前的版本就稱作 ES5。</p>
<p>目前大部分的瀏覽器均支援 ES6，但仍有少數舊型不支援。因此我們可以透過 Babel 轉譯器，將 ES6 代碼轉換為 ES5 代碼，如此就不須擔心支援問題。</p>
<h2 id="ES6-新語法"><a href="#ES6-新語法" class="headerlink" title="ES6 新語法"></a>ES6 新語法</h2><h3 id="宣告變數-let-與-const"><a href="#宣告變數-let-與-const" class="headerlink" title="宣告變數 let 與 const"></a>宣告變數 let 與 const</h3><ul>
<li>ES5：使用 var</li>
<li>ES6：使用 let 與 const</li>
</ul>
<p>兩者最大差異在於：</p>
<ol>
<li>重複宣告：const 用於宣告常數，不會被重新賦值</li>
<li>作用域不同：<ul>
<li>var：作用於整個函數範圍中（function scope）</li>
<li>let 與 const：均為區塊作用域（block scope），如此可避免污染到大括號外的變數</li>
</ul>
</li>
</ol>
<h3 id="Template-Literals-模板字串符"><a href="#Template-Literals-模板字串符" class="headerlink" title="Template Literals 模板字串符"></a>Template Literals 模板字串符</h3><p>Template 的意思是樣板。Template Literals 可用於字串拼接。</p>
<h4 id="ES5"><a href="#ES5" class="headerlink" title="ES5"></a>ES5</h4><ul>
<li>使用單引號（<code>&#39;&#39;</code>）或雙引號（<code>&quot;&quot;</code>）</li>
<li>缺點：必須用 <code>+</code> 或 <code>,</code> 來串接字串，且無法換行</li>
</ul>
<h4 id="ES6"><a href="#ES6" class="headerlink" title="ES6"></a>ES6</h4><ul>
<li>使用反引號（``）</li>
<li>優點：可用於多行字串拼接，也可在反引號中放入 <code>$&#123;變數&#125;</code></li>
</ul>
<h3 id="Destructuring-解構賦值"><a href="#Destructuring-解構賦值" class="headerlink" title="Destructuring 解構賦值"></a>Destructuring 解構賦值</h3><ul>
<li>可以把陣列或物件的資料解開，並擷取成獨立的變數</li>
</ul>
<h3 id="Spread-Operator-展開運算子"><a href="#Spread-Operator-展開運算子" class="headerlink" title="Spread Operator 展開運算子"></a>Spread Operator 展開運算子</h3><ul>
<li>使用 <code>...</code> 運算子，展開陣列或物件</li>
</ul>
<h3 id="Rest-Parameters-其餘參數"><a href="#Rest-Parameters-其餘參數" class="headerlink" title="Rest Parameters 其餘參數"></a>Rest Parameters 其餘參數</h3><ul>
<li>使用 … 運算子，集合剩餘的元素變成陣列，就可以在不確定陣列長度的情況下，傳入參數。</li>
</ul>
<h3 id="Default-Parameters-設定參數預設值"><a href="#Default-Parameters-設定參數預設值" class="headerlink" title="Default Parameters 設定參數預設值"></a>Default Parameters 設定參數預設值</h3><ul>
<li>可以幫參數加入預設值</li>
</ul>
<h3 id="箭頭函式"><a href="#箭頭函式" class="headerlink" title="箭頭函式"></a>箭頭函式</h3><ul>
<li>Arrow Function，縮寫為 function</li>
<li>優點：簡化程式碼，幫助閱讀</li>
</ul>
<h3 id="Import-amp-Export-引入與輸出"><a href="#Import-amp-Export-引入與輸出" class="headerlink" title="Import &amp; Export 引入與輸出"></a>Import &amp; Export 引入與輸出</h3><ul>
<li>引入與輸出 module，類似 <code>require</code> 與 <code>module.exports</code> 的用法</li>
</ul>
<h3 id="Babel-簡介"><a href="#Babel-簡介" class="headerlink" title="Babel 簡介"></a>Babel 簡介</h3><ul>
<li>是一種 JavaScript 轉譯器，可將 ES6 新語法轉換為 ES5 舊語法</li>
<li>安裝指令：<code>npm install babel-loader @babel/core @babel/preset-env --save-dev</code></li>
</ul>
<p>參考資料：</p>
<ol>
<li><span class="exturl" data-url="aHR0cHM6Ly9tZWRpdW0uY29tL0BodWxpdHcvdmFyaWFibGUtYW5kLWZyb250ZGVzay1hNTNhMDQ0MGFmM2M=">從博物館寄物櫃理解變數儲存模型<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9tZWRpdW0uY29tL0BtaWFoc3V3b3JrLyVFNyVBQyVBQyVFNSU5QiU5QiVFOSU4MCVCMS1qYXZhc2NyaXB0LWVzNi0lRTglODglODctYmFiZWwtNWI1ZTI1NDUwNzY3">[第五週] JavaScript — ES6 與 Babel<i class="fa fa-external-link-alt"></i></span></li>
</ol>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>[week 7] DOM 介面、瀏覽器事件處理</title>
    <url>/javascript-event/</url>
    <content><![CDATA[<blockquote>
<p>本篇為 <span class="exturl" data-url="aHR0cHM6Ly9saWRlbXkuY29tL3AvZmUxMDItamF2YXNjcmlwdA==">[FE102] 前端必備：JavaScript<i class="fa fa-external-link-alt"></i></span> 這門課程的學習筆記。如有錯誤歡迎指正。</p>
</blockquote>
<pre class="line-numbers language-none"><code class="language-none">學習目標：

 P1 你知道 JavaScript 跑在網頁上跟跑在 Node.js 上差在哪裡
 P1 你知道 DOM 是什麼
 P1 你知道如何用 JavaScript 操控 DOM 物件
 P1 你知道如何幫一個按鈕加上 event listener<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<span id="more"></span>
<hr>
<p>當我們運用 JavaScript 在網頁進行操作時，主要可分為下列三大面向：</p>
<ol>
<li>介面（Interface）：如何改變介面</li>
<li>事件（Event）：如何監聽事件並做出反應</li>
<li>資料（Data）：如何和伺服器交換資料</li>
</ol>
<blockquote>
<p>以下主要探討「改變介面」與「事件監聽」的部分。</p>
</blockquote>
<h2 id="JavaScript-與瀏覽器的溝通"><a href="#JavaScript-與瀏覽器的溝通" class="headerlink" title="JavaScript 與瀏覽器的溝通"></a>JavaScript 與瀏覽器的溝通</h2><p>那麼，該把 <code>&lt;script&gt;</code> 標籤放在哪呢？首先要瞭解，我們可以放在 HTML 檔案的任何位置，通常會有兩種回答：</p>
<ol>
<li>放在 <code>&lt;head&gt;</code> … <code>&lt;/head&gt;</code> 之間</li>
<li>放在 <code>&lt;/body&gt;</code> 之前</li>
</ol>
<p>由於瀏覽器是由上而下渲染，相較之下以第二種方法較佳。但更好的做法，是另外新增 js 檔，以外連檔的形式執行 JS，更有助於管理與維護。</p>
<pre class="line-numbers language-htmlmixed" data-language="htmlmixed"><code class="language-htmlmixed">&lt;head&gt;
  &lt;title&gt;This is title.&lt;&#x2F;title&gt;
  &lt;script src&#x3D;&quot;.&#x2F;main.js&quot;&gt;&lt;&#x2F;script&gt;
&lt;&#x2F;head&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="執行環境"><a href="#執行環境" class="headerlink" title="執行環境"></a>執行環境</h3><p>我們可以在 Node.js 或瀏覽器執行 JS。由於兩者是不同的執行環境，在語法支援度也有些微差異。</p>
<blockquote>
<p>例如：</p>
<ol>
<li>require() 引入模組的語法，只能在 Node.js上執行</li>
<li>alert() 叫出提示窗，只能在瀏覽器上執行</li>
</ol>
</blockquote>
<h3 id="DOM-是什麼？"><a href="#DOM-是什麼？" class="headerlink" title="DOM 是什麼？"></a>DOM 是什麼？</h3><p>DOM，全名是 Document Object Model（文件物件模型）。</p>
<p>是由「瀏覽器」提供用來和「程式語言」溝通的橋樑。最常被用在網頁與 JavaScript 的溝通。</p>
<p>DOM 類似於把 HTML 的文件（Document）轉成物件（Object）。JavaScript 即可透過 DOM 提供的 API 來存取並操作 HTML。</p>
<p><img src="https://i.imgur.com/yR0I3JG.png" alt="DOM"></p>
<h3 id="如何選取-DOM-元素"><a href="#如何選取-DOM-元素" class="headerlink" title="如何選取 DOM 元素"></a>如何選取 DOM 元素</h3><p>document 是瀏覽器提供的特殊物件，內部放著許多 function。而我們可以透過「物件」的方式去呼叫想要的元素：</p>
<ul>
<li>根據 Tag 名稱選取：<code>document.getElementsByTagName()</code></li>
<li>根據 Class 名稱選取：<code>document.getElementsByClassName()</code></li>
<li>根據 ID 名稱選取：<code>document.getElementById()</code></li>
<li>選取 CSS 選擇器：<code>document.querySelector()</code></li>
</ul>
<p>以 <code>document.getElementsByTagName(&#39;div&#39;)</code>，選取所有 tag 名稱是 div 元素為範例：</p>
<pre class="line-numbers language-htmlmixed" data-language="htmlmixed"><code class="language-htmlmixed">&lt;body&gt;
  &lt;div&gt;
    This is tagName.
    &lt;div class&#x3D;&quot;box&quot;&gt;This is className.&lt;&#x2F;div&gt;
    &lt;div id&#x3D;&quot;name&quot;&gt;This is idName.&lt;&#x2F;div&gt;
  &lt;&#x2F;div&gt;

  &lt;script&gt;
    const elements &#x3D; document.getElementsByTagName(&#39;div&#39;)
    console.log(elements)
  &lt;&#x2F;script&gt;
&lt;&#x2F;body&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>在瀏覽器運行結果，會得到類陣列如下：</p>
<p><img src="https://i.imgur.com/8i7ohCd.png" alt="Tag"></p>
<p>若改選取 <code>elements[1]</code>，即可選取類陣列中的元素：</p>
<p><img src="https://i.imgur.com/4LdiX9r.png" alt="類陣列"></p>
<p>若根據 Class 和 ID 名稱選取，也是類似用法：</p>
<ul>
<li><code>document.getElementsByClassName(&#39;box&#39;)</code>：括弧內不需加 <code>.</code> 即可表示 class</li>
</ul>
<p><img src="https://i.imgur.com/O5eCQ6y.png" alt="Class"></p>
<ul>
<li><code>document.getElementById(&#39;name&#39;)</code>：注意 ID 只會有一個</li>
</ul>
<p><img src="https://i.imgur.com/fia65T6.png" alt="Id"></p>
<p>相較於前面三種選取方式，又以 querySelector 更方便且直覺。就像寫 CSS 選擇器來選取元素：</p>
<ul>
<li>選取標籤：<code>const element = document.querySelector(&#39;div&#39;)</code></li>
<li>選取 class：<code>const element = document.querySelector(&#39;.box&#39;)</code></li>
<li>選取 id：<code>const element = document.querySelector(&#39;#name&#39;)</code></li>
</ul>
<p>但 <code>querySelector()</code> 只會選取第一個匹配的元素，舉例如下：</p>
<pre class="line-numbers language-htmlmixed" data-language="htmlmixed"><code class="language-htmlmixed">&lt;body&gt;

  &lt;a href&#x3D;&quot;#&quot;&gt;1st&lt;&#x2F;a&gt;

  &lt;div&gt;
    &lt;a href&#x3D;&quot;#&quot;&gt;2rd&lt;&#x2F;a&gt;
  &lt;&#x2F;div&gt;

  &lt;script&gt;
    const element &#x3D; document.querySelector(&#39;a&#39;)
    console.log(element)
  &lt;&#x2F;script&gt;
&lt;&#x2F;body&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>結果只會選取第一個 <code>&lt;a&gt;</code>：</p>
<p><img src="https://i.imgur.com/ZE1Ue7g.png" alt="querySelector"></p>
<p>若想選取到所有匹配到的元素，可使用 <code>querySelectorAll()</code>：</p>
<pre class="line-numbers language-htmlmixed" data-language="htmlmixed"><code class="language-htmlmixed">const element &#x3D; document.querySelectorAll(&#39;a&#39;)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>同樣能夠得到類陣列：</p>
<p><img src="https://i.imgur.com/ih6mj9T.png" alt="querySelectorAll"></p>
<h3 id="改變元素的-CSS：-style"><a href="#改變元素的-CSS：-style" class="headerlink" title="改變元素的 CSS：.style"></a>改變元素的 CSS：<code>.style</code></h3><ul>
<li>直接寫上行內樣式</li>
</ul>
<pre class="line-numbers language-htmlmixed" data-language="htmlmixed"><code class="language-htmlmixed">const element &#x3D; document.querySelector(&#39;.box&#39;)

element.style.background &#x3D; &#39;red&#39;;
element.style.paddingTop &#x3D; &#39;10px&#39;;         &#x2F;&#x2F; 駝峰式
element.style[&quot;padding-top&quot;] &#x3D; &#39;10px&#39;;     &#x2F;&#x2F; 字串<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>但這種寫法其實不易修改，因此並不推薦。通常會寫好另外的 class，藉由「改變元素的 class」來套用該狀態，也就是下面要介紹的方法。</li>
</ul>
<h3 id="改變元素的-Class：-classList"><a href="#改變元素的-Class：-classList" class="headerlink" title="改變元素的 Class：.classList"></a>改變元素的 Class：<code>.classList</code></h3><ul>
<li><code>.classList.add()</code>：增加</li>
<li><code>.classList.remove()</code>：移除</li>
<li><code>.classList.toggle()</code>：開關（有就刪、沒有就加）</li>
<li><code>.classList.contains()</code>：判斷是否包含該 class</li>
</ul>
<pre class="line-numbers language-htmlmixed" data-language="htmlmixed"><code class="language-htmlmixed">&lt;style&gt;
.active &#123; 
  background: red;
&#125;
&lt;&#x2F;style&gt;
element.classList.add(&#39;active&#39;)
&lt;!-- 將元素套用 active 這個 class 的樣式 --&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="改變元素的內容"><a href="#改變元素的內容" class="headerlink" title="改變元素的內容"></a>改變元素的內容</h3><ul>
<li><code>.innerText</code>：只抓取標籤內的文字。最常用來改變文字內容。</li>
</ul>
<pre class="line-numbers language-htmlmixed" data-language="htmlmixed"><code class="language-htmlmixed">&lt;div&gt;
  &lt;div class&#x3D;&quot;box&quot;&gt;This is &lt;span&gt;class&lt;&#x2F;span&gt;.&lt;&#x2F;div&gt;
  &lt;div id&#x3D;&quot;name&quot;&gt;This is id.&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;

&lt;script&gt;
  const element &#x3D; document.querySelector(&#39;.box&#39;)
  console.log(element.innerText)
&lt;&#x2F;script&gt;
&lt;!-- 印出：This is class. --&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li><code>.innerHTML</code>：抓取標籤內的所有內容，包含 HTML 標籤。</li>
</ul>
<pre class="line-numbers language-htmlmixed" data-language="htmlmixed"><code class="language-htmlmixed">&lt;div&gt;
  &lt;div class&#x3D;&quot;box&quot;&gt;This is &lt;span&gt;class&lt;&#x2F;span&gt;.&lt;&#x2F;div&gt;
  &lt;div id&#x3D;&quot;name&quot;&gt;This is id.&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;

&lt;script&gt;
  const element &#x3D; document.querySelector(&#39;.box&#39;)
  console.log(element.innerHTML)
&lt;&#x2F;script&gt;
&lt;!-- 印出：This is &lt;span&gt;class&lt;&#x2F;span&gt;. --&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li><code>.outerHTML</code>：抓取整個元素，可用來重新設置元素本身。較少使用。</li>
</ul>
<pre class="line-numbers language-htmlmixed" data-language="htmlmixed"><code class="language-htmlmixed">&lt;div class&#x3D;&quot;block&quot;&gt;
  &lt;div class&#x3D;&quot;box&quot;&gt;This is &lt;span&gt;class&lt;&#x2F;span&gt;.&lt;&#x2F;div&gt;
  &lt;div id&#x3D;&quot;name&quot;&gt;This is id.&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;

&lt;script&gt;
  const element &#x3D; document.querySelector(&#39;.box&#39;)
  console.log(element.outerHTML)
&lt;&#x2F;script&gt;
&lt;!-- 印出：&lt;div class&#x3D;&quot;box&quot;&gt;This is &lt;span&gt;class&lt;&#x2F;span&gt;.&lt;&#x2F;div&gt; --&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="刪除與插入元素：removechild-與-appendChild"><a href="#刪除與插入元素：removechild-與-appendChild" class="headerlink" title="刪除與插入元素：removechild 與 appendChild"></a>刪除與插入元素：removechild 與 appendChild</h3><ul>
<li><code>.removechild()</code>：移除子元素</li>
</ul>
<pre class="line-numbers language-htmlmixed" data-language="htmlmixed"><code class="language-htmlmixed">&lt;div class&#x3D;&quot;block&quot;&gt;
  &lt;div class&#x3D;&quot;box&quot;&gt;This is &lt;span&gt;class&lt;&#x2F;span&gt;.&lt;&#x2F;div&gt;
  &lt;a&gt;This is a.&lt;&#x2F;a&gt;
&lt;&#x2F;div&gt;

&lt;script&gt;
  const element &#x3D; document.querySelector(&#39;.block&#39;)
  element.removeChild(document.querySelector(&#39;a&#39;))
&lt;&#x2F;script&gt;
&lt;!-- 成功刪除在 block 元素底下，標籤為 a 的元素 --&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li><code>.appendChild()</code>：插入元素在最後方</li>
</ul>
<ol>
<li>插入元素之前，要先建立元素或文字：<ul>
<li><code>const newElement = document.createElement(&#39;h2&#39;)</code></li>
<li><code>const newTextElement = document.createTextNode(&#39;Hello World&#39;)</code></li>
</ul>
</li>
<li>增加節點：<ul>
<li><code>element.appendChild(newElement)</code></li>
<li><code>element.appendChild(newTextElement)</code></li>
</ul>
</li>
</ol>
<p>參考資料：</p>
<ol>
<li><span class="exturl" data-url="aHR0cHM6Ly9tZWRpdW0uY29tL0BodWdoX1Byb2dyYW1fbGVhcm5pbmdfZGlhcnlfSnMvJUU1JTg5JThEJUU3JUFCJUFGJUU1JTlGJUJBJUU3JUE0JThFLWphdmFzY3JpcHQlRTclQUYlODctamF2YXNjcmlwdC0lRTglODglODclRTclODAlOEYlRTglQTYlQkQlRTUlOTklQTglRTclOUElODQlRTYlQkElOUQlRTklODAlOUEtZTAwZmYwNWQwZmRj">前端基礎JavaScript篇：JavaScript 與瀏覽器的溝通| by Hugh’s Program learning<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cuaGFwcHljb2RpbmcudG9kYXkvcG9zdHMvNDM=">JavaScript入門系列：BOM和DOM筆記| 快樂學程式<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cucnVub29iLmNvbS9qc3JlZi9kb20tb2JqLWRvY3VtZW50Lmh0bWw=">HTML DOM 元素<i class="fa fa-external-link-alt"></i></span></li>
</ol>
<hr>
<h2 id="JavaScript-網頁事件處理"><a href="#JavaScript-網頁事件處理" class="headerlink" title="JavaScript 網頁事件處理"></a>JavaScript 網頁事件處理</h2><p>JavaScript 是以事件驅動（Event-driven）的程式語言。</p>
<p>也就是說，當 JS 被瀏覽器載入後並不會馬上執行，而是透過使用者操作來觸發事件，才會啟動對應程式。例如：滑鼠點擊、鍵盤輸入等。</p>
<blockquote>
<p>可參考：<span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2xzLmNvbS9qc3JlZi9kb21fb2JqX2V2ZW50LmFzcA==">HTML DOM Event 對象列表<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
<h3 id="監聽事件-addEventListener"><a href="#監聽事件-addEventListener" class="headerlink" title="監聽事件 addEventListener()"></a>監聽事件 <code>addEventListener()</code></h3><p>在處理事件時，通常會需要指派監聽者（Event listeners）來監聽事件觸發。</p>
<p>也就是監測 DOM 中的某一元素，當使用者觸發某事件時，就會執行後續動作，語法如下：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">element<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'event'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">,</span> useCapture<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h3 id="參數值說明"><a href="#參數值說明" class="headerlink" title="參數值說明"></a>參數值說明</h3><h4 id="1-event-事件"><a href="#1-event-事件" class="headerlink" title="1. event 事件"></a>1. event 事件</h4><ul>
<li>必須</li>
<li>指定事件類型</li>
<li>常見的事件類別：（詳見 <span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvemgtQ04vZG9jcy9XZWIvRXZlbnRz">MDN<i class="fa fa-external-link-alt"></i></span>）<ul>
<li>滑鼠相關：click、mousedown、mouseenter、mouseleave</li>
<li>鍵盤相關：keydown、keypress、keyup</li>
<li>瀏覽器相關：scroll、resize</li>
</ul>
</li>
</ul>
<h4 id="2-function-功能"><a href="#2-function-功能" class="headerlink" title="2. function 功能"></a>2. function 功能</h4><ul>
<li>必須</li>
<li>指定事件觸發時執行的函式</li>
</ul>
<p>而 function 的部分有下列兩種寫法，以最常見的 click 做舉例：</p>
<ul>
<li>直接將函式作為參數帶入：回呼函式（callback function）</li>
</ul>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> element <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.box'</span><span class="token punctuation">)</span>
<span class="token comment">// 先註冊一個事件</span>
element<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token function">onClick</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment">// 等事件被觸發才執行 callback function</span>
<span class="token keyword">function</span> <span class="token function">onClick</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>     
   <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'click!'</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>匿名函式（anonymous）</li>
</ul>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> element <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.box'</span><span class="token punctuation">)</span>

element<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
   <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'click!'</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="3-useCapture"><a href="#3-useCapture" class="headerlink" title="3. useCapture"></a>3. useCapture</h4><ul>
<li>可選</li>
<li>布林值，指定事件在捕獲或冒泡階段執行<ol>
<li>true：補獲</li>
<li>false：冒泡（預設值）</li>
</ol>
</li>
</ul>
<p>參考資料：</p>
<ol>
<li><span class="exturl" data-url="aHR0cHM6Ly9pdGhlbHAuaXRob21lLmNvbS50dy9hcnRpY2xlcy8xMDE5MTk3MA==">重新認識 JavaScript: Day 14 事件機制的原理<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cucnVub29iLmNvbS9qc3JlZi9tZXQtZWxlbWVudC1hZGRldmVudGxpc3RlbmVyLmh0bWw=">HTML DOM addEventListener()方法<i class="fa fa-external-link-alt"></i></span></li>
</ol>
<h3 id="事件資訊-event-e"><a href="#事件資訊-event-e" class="headerlink" title="事件資訊 event(e)"></a>事件資訊 <code>event(e)</code></h3><p>一個事件的發生會包含各種資訊。event 資訊會放在 callback function 的第一個參數。通常取名 <code>event</code> 或簡寫 <code>e</code>，可以當作是一個「物件」，裡面放著關於此事件的參數值。</p>
<p>以 click 事件為例：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> element <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.box'</span><span class="token punctuation">)</span>

element<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>點擊元素後會出現下列資訊：</p>
<p><img src="https://i.imgur.com/JJEo1ZR.png" alt="event"></p>
<p>我們可以用「物件」的方式來取得需要的元素，以常用的事件資訊為例。</p>
<h3 id="常用的事件資訊"><a href="#常用的事件資訊" class="headerlink" title="常用的事件資訊"></a>常用的事件資訊</h3><h4 id="click-事件：點擊-DOM-元素時觸發"><a href="#click-事件：點擊-DOM-元素時觸發" class="headerlink" title="click 事件：點擊 DOM 元素時觸發"></a>click 事件：點擊 DOM 元素時觸發</h4><ul>
<li>e.target：點擊到的元素</li>
<li>e.screenX：滑鼠離視窗左邊的距離</li>
<li>e.screenY：滑鼠離視窗上邊的距離</li>
</ul>
<h4 id="keydown-事件：按下鍵盤時觸發"><a href="#keydown-事件：按下鍵盤時觸發" class="headerlink" title="keydown 事件：按下鍵盤時觸發"></a>keydown 事件：按下鍵盤時觸發</h4><ul>
<li>e.key：按鍵號碼</li>
</ul>
<h4 id="submit-事件：提交表單前觸發，通常用來驗證表單內容"><a href="#submit-事件：提交表單前觸發，通常用來驗證表單內容" class="headerlink" title="submit 事件：提交表單前觸發，通常用來驗證表單內容"></a>submit 事件：提交表單前觸發，通常用來驗證表單內容</h4><p>首先建立一個簡易表單：</p>
<pre class="line-numbers language-htmlmixed" data-language="htmlmixed"><code class="language-htmlmixed">&lt;form class&#x3D;&quot;login-form&quot;&gt;
  &lt;div class&#x3D;&quot;account&quot;&gt;
    Account: &lt;input name&#x3D;&quot;account&quot; type&#x3D;&quot;text&quot;&gt;
  &lt;&#x2F;div&gt;
  &lt;div class&#x3D;&quot;password&quot;&gt;
    Password: &lt;input name&#x3D;&quot;password&quot; type&#x3D;&quot;password&quot;&gt;
  &lt;&#x2F;div&gt;
  &lt;div class&#x3D;&quot;password2&quot;&gt;
    Password again: &lt;input name&#x3D;&quot;password2&quot; type&#x3D;&quot;password&quot;&gt;
  &lt;&#x2F;div&gt;
  &lt;div class&#x3D;&quot;submit&quot;&gt;
    &lt;input name&#x3D;&quot;submit&quot; type&#x3D;&quot;submit&quot; value&#x3D;&quot;Submit&quot;&gt;
  &lt;&#x2F;div&gt;
&lt;&#x2F;form&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><img src="https://i.imgur.com/wWjVaIv.png" alt="form"></p>
<p>點選表單中的 submit 按鈕後，會以預設方法 <code>GET</code> 送出資料，也就是把參數帶入原網址送出。而 submit 事件是在表單送出前觸發，通常用來驗證表單內容。</p>
<p>以點選 submit 後彈出視窗為例：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">  <span class="token keyword">const</span> element <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.login-form'</span><span class="token punctuation">)</span>
  element<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'submit'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"成功"</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p><img src="https://i.imgur.com/grkuUrS.png"></p>
<h3 id="阻止預設行為-e-preventDefault"><a href="#阻止預設行為-e-preventDefault" class="headerlink" title="阻止預設行為 e.preventDefault()"></a>阻止預設行為 <code>e.preventDefault()</code></h3><p>用來阻止瀏覽器上特定元素的預設行為。以下為常見使用方式：</p>
<ul>
<li><code>&lt;form&gt;</code> 的 submit 事件：阻止送出表單</li>
<li><code>&lt;a&gt;</code> 的 click 事件：阻止轉址</li>
<li><code>&lt;input&gt;</code> 的 keypress 事件：阻止輸入按鍵</li>
</ul>
<p>以上述例子來說，當 Password 跟 Password again 輸入的值不同時，就可使用 <code>e.preventDefault()</code> 來阻止表單送出：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">></span>
  <span class="token keyword">const</span> element <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.login-form'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  element<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'submit'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">const</span> pw1 <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'input[name="password1"]'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> pw2 <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'input[name="password2"]'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 若密碼不同，就不送出表單</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>pw1<span class="token punctuation">.</span>value <span class="token operator">!==</span> pw2<span class="token punctuation">.</span>value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'密碼不同！'</span><span class="token punctuation">)</span>
      e<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span> 
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><img src="https://i.imgur.com/vjBsv0i.png"></p>
<p>參考資料：</p>
<ol>
<li><span class="exturl" data-url="aHR0cHM6Ly95YWtpbWhzdS5jb20vcHJvamVjdC9wcm9qZWN0X3c3X0RPTS5odG1s">[第七週] DOM - 操作 DOM 介面、事件監聽 - Yakim<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9tZWRpdW0uY29tL0BtaWFoc3V3b3JrLyVFNyVBQyVBQyVFNSU4NSVBQiVFOSU4MCVCMS1kb20tJUU3JTgwJThGJUU4JUE2JUJEJUU1JTk5JUE4JUU0JUJBJThCJUU0JUJCJUI2JUU4JTk5JTk1JUU3JTkwJTg2LWZiOGY2MTc4MTc4YQ==">[第八週]DOM — 瀏覽器事件處理 - Miahsu<i class="fa fa-external-link-alt"></i></span></li>
</ol>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>DOM</tag>
      </tags>
  </entry>
  <entry>
    <title>【學習筆記】JavaScript 的陣列遍歷（ㄧ）：for/for...of/for...in/forEach</title>
    <url>/javascript-for-loop/</url>
    <content><![CDATA[<p>這篇筆記整理幾種 JavaScript 遍歷陣列的方法，探討其使用時機與彼此的區別：</p>
<ul>
<li><code>for (let i = 0; i &lt; arr.length; i++)</code></li>
<li><code>arr.forEach((value, index) =&gt; &#123; // todo... &#125;)</code></li>
<li><code>for (let i in arr)</code></li>
<li><code>for (let v of arr)</code></li>
</ul>
<span id="more"></span>

<h2 id="for：遍歷「陣列」的值"><a href="#for：遍歷「陣列」的值" class="headerlink" title="for：遍歷「陣列」的值"></a>for：遍歷「陣列」的值</h2><p>使用情境：</p>
<ul>
<li>用於執行迴圈次數「明確」的狀況</li>
<li>例如：印出陣列 <code>[0, 1, 2]</code> 中的每一個數字</li>
</ul>
<p>語法如下：</p>
<ul>
<li>初始值：i = 0</li>
<li>邊界條件：i 小於 3</li>
<li>結束時更新：i + 1</li>
</ul>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">// 0</span>
<span class="token comment">// 1</span>
<span class="token comment">// 2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>接著以下方實作九九乘法表為例，使用了兩個 For Loop：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token string">'x'</span> <span class="token operator">+</span> j <span class="token operator">+</span> <span class="token string">'='</span> <span class="token operator">+</span> i <span class="token operator">*</span> j<span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>當 <code>i = 2</code> 與 <code>i = 3</code> 時的輸出結果如下：</p>
<p><img src="https://i.imgur.com/dPeST08.png"></p>
<h2 id="arr-forEach：遍歷「陣列」的值"><a href="#arr-forEach：遍歷「陣列」的值" class="headerlink" title="arr.forEach：遍歷「陣列」的值"></a><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvemgtVFcvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvQXJyYXkvZm9yRWFjaA==">arr.forEach<i class="fa fa-external-link-alt"></i></span>：遍歷「陣列」的值</h2><p>使用情境：</p>
<ul>
<li>用法與 for loop 類似，差別在於 forEach 不需設定索引的邊界條件</li>
<li>缺點是無法使用 break 中斷迴圈，或 return 返回值等等</li>
</ul>
<p>語法：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">array<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token function">callback</span><span class="token punctuation">(</span><span class="token parameter">currentValue<span class="token punctuation">,</span> index<span class="token punctuation">,</span> array</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token comment">// TODO</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>使用範例：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> items <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'apple'</span><span class="token punctuation">,</span> <span class="token string">'banana'</span><span class="token punctuation">,</span> <span class="token string">'lemon'</span><span class="token punctuation">]</span>

items<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span> i</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> item<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
<span class="token comment">// 0 "apple"</span>
<span class="token comment">// 1 "banana"</span>
<span class="token comment">// 2 "lemon"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>


<h2 id="for…in：遍歷「物件」的-key"><a href="#for…in：遍歷「物件」的-key" class="headerlink" title="for…in：遍歷「物件」的 key"></a><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvemgtVFcvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvU3RhdGVtZW50cy9mb3IuLi5pbg==">for…in<i class="fa fa-external-link-alt"></i></span>：遍歷「物件」的 key</h2><p>語法如下：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">for</span> <span class="token punctuation">(</span>variable <span class="token keyword">in</span> object<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// 遍歷的是 key</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>使用時需注意：</p>
<ul>
<li>遍歷的 key，型態不是 number 而是 string</li>
<li>會遍歷到自定義屬性名稱</li>
<li>通常用來遍歷一般 object 屬性 </li>
</ul>
<p>以遍歷物件為例：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> user <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
    name<span class="token operator">:</span> <span class="token string">'Jane Doe'</span><span class="token punctuation">,</span>
    email<span class="token operator">:</span> <span class="token string">'jane.doe@example.com'</span><span class="token punctuation">,</span>
    age<span class="token operator">:</span> <span class="token number">30</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">in</span> user<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>key<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>user<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// name: Jane Doe</span>
<span class="token comment">// email: jane.doe@example.com</span>
<span class="token comment">// age: 30</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>在上述程式碼中，我們建立一個物件名稱為 user。透過 <code>for..in</code> 語法，指定 key 為自訂變數，用來儲存物件的屬性，即可依序讀取物件中的所有屬性。</p>
<p>接著以遍歷陣列為例：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> items <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'apple'</span><span class="token punctuation">,</span> <span class="token string">'banana'</span><span class="token punctuation">,</span> <span class="token string">'cucumber'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
items<span class="token punctuation">.</span>duck <span class="token operator">=</span> <span class="token string">'milk'</span><span class="token punctuation">;</span>  <span class="token comment">// 自定義屬性</span>

<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> index <span class="token keyword">in</span> items<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">// "0"</span>
<span class="token comment">// "1"</span>
<span class="token comment">// "2"</span>
<span class="token comment">// "duck"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="hasOwnProperty-：回傳物件是否有該屬性的布林值"><a href="#hasOwnProperty-：回傳物件是否有該屬性的布林值" class="headerlink" title="hasOwnProperty()：回傳物件是否有該屬性的布林值"></a><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvemgtVFcvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvT2JqZWN0L2hhc093blByb3BlcnR5">hasOwnProperty()<i class="fa fa-external-link-alt"></i></span>：回傳物件是否有該屬性的布林值</h3><p>使用 <code>for...in</code> 時，需注意會遍歷包含繼承屬性的陣列，可能會產生預期外的結果。這時可使用 <code>hasOwnProperty()</code> 檢查是否為非繼承屬性。</p>
<p>將上方程式碼改寫如下，就不會印出繼承屬性：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>duck <span class="token operator">=</span> <span class="token string">'milk'</span><span class="token punctuation">;</span>  <span class="token comment">// 原型鍊繼承屬性</span>
<span class="token keyword">const</span> items <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'apple'</span><span class="token punctuation">,</span> <span class="token string">'banana'</span><span class="token punctuation">,</span> <span class="token string">'cucumber'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> index <span class="token keyword">in</span> items<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>items<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">// "0"</span>
<span class="token comment">// "1"</span>
<span class="token comment">// "2"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="for…of：遍歷「陣列」的-value"><a href="#for…of：遍歷「陣列」的-value" class="headerlink" title="for…of：遍歷「陣列」的 value"></a><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvU3RhdGVtZW50cy9mb3IuLi5vZg==">for…of<i class="fa fa-external-link-alt"></i></span>：遍歷「陣列」的 value</h2><p>語法如下：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">for</span> <span class="token punctuation">(</span>variable <span class="token keyword">of</span> array<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// 遍歷的是 value</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>以遍歷陣列為例：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> items <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'apple'</span><span class="token punctuation">,</span> <span class="token string">'banana'</span><span class="token punctuation">,</span> <span class="token string">'cucumber'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> item <span class="token keyword">of</span> items<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">// apple</span>
<span class="token comment">// banana</span>
<span class="token comment">// cucumber</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="for…in-vs-for…of"><a href="#for…in-vs-for…of" class="headerlink" title="for…in vs for…of"></a>for…in vs for…of</h2><ul>
<li>for…in <ul>
<li>是 ES5 標準</li>
<li>遍歷的是鍵（key）</li>
<li>通常用來遍歷 object</li>
<li>會遍歷繼承的屬性，可使用 hasOwnProperty() 檢查是否為非繼承的屬性</li>
</ul>
</li>
<li>for…of<ul>
<li>是 ES6 標準，可解決 for…in 產生的問題</li>
<li>遍歷的是值（value）</li>
<li>不能遍歷 object</li>
<li>可搭配 break、continue、return 語法使用</li>
</ul>
</li>
</ul>
<p>以下為使用範例：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
arr<span class="token punctuation">.</span>world <span class="token operator">=</span> <span class="token string">"hello"</span><span class="token punctuation">;</span>  <span class="token comment">// 自定義屬性</span>

<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> index <span class="token keyword">in</span> arr<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// "0", "1", "2", "world"</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> value <span class="token keyword">of</span> arr<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 3, 5, 7</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>


<h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9wamNoZW5kZXIuYmxvZ3Nwb3QuY29tLzIwMTYvMDYvamF2YXNjcmlwdC1mb3ItaW4tZnVuY3Rpb24uaHRtbA==">[筆記] 談談 JavaScript 中 for … in 這個 function<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cuZ3VzaGljaWt1LmNuL3BsLzJNMGMvemgtdHc=">JavaScript 的 4 種陣列遍歷方法： for VS forEach() VS for/in VS for/of<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cDovL3RoZWNvZGViYXJiYXJpYW4uY29tL2Zvci12cy1mb3ItZWFjaC12cy1mb3ItaW4tdnMtZm9yLW9mLWluLWphdmFzY3JpcHQuaHRtbA==">For vs forEach() vs for/in vs for/of in JavaScript<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLnR5cGVhcnQuY2MvSmF2YVNjcmlwdCVFNCVCOCVBRGZvciUyMG9mJUU1JTkyJThDZm9yJTIwaW4lRTclOUElODQlRTUlQjclQUUlRTUlODglQTUv">JavaScript中for of和for in的差別<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cuZm9vaXNoLmNvbS9qYXZhc2NyaXB0L0VTNi9mb3Itb2YuaHRtbA==">JavaScript ES6 for…of 迴圈<i class="fa fa-external-link-alt"></i></span></li>
</ul>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>Front-End</tag>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>[week 3] 初探 Jest：如何測試程式？</title>
    <url>/javascript-jest/</url>
    <content><![CDATA[<pre class="line-numbers language-none"><code class="language-none">學習目標：

 了解為什麼我們需要 unit test
 了解什麼是 unit test
 了解如何寫 unit test
 了解如何測試一個 function<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<span id="more"></span>

<p>測試程式的作用是「模擬外部如何使用目標程式，驗證目標程式的行為是否符合預期」。</p>
<h2 id="利用-console-log-測試"><a href="#利用-console-log-測試" class="headerlink" title="利用 console.log() 測試"></a>利用 <code>console.log()</code> 測試</h2><p>在前面幾個章節，我們通常會使用 console.log()，來測幾個範例確認是否正確。也需要考慮到邊界條件（edge case）來進行測試。</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 以測試 `repeat` 函式為例：</span>

<span class="token keyword">function</span> <span class="token function">repeat</span><span class="token punctuation">(</span><span class="token parameter">str<span class="token punctuation">,</span> times</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token string">''</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> times<span class="token punctuation">;</span> i <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    result <span class="token operator">+=</span> str
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">return</span> result
<span class="token punctuation">&#125;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">repeat</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment">// 印出 aaaaa</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">repeat</span><span class="token punctuation">(</span><span class="token string">'z!Z!Z!!'</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 印出　z!Z!Z!!z!Z!Z!!</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">repeat</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment">// 印出空字串</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">repeat</span><span class="token punctuation">(</span><span class="token string">'abc'</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 印出空字串</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>接著優化測試資料：直接判斷函式執行結果是否正確。</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 優化測試資料：</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">repeat</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">'aaaaa'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">repeat</span><span class="token punctuation">(</span><span class="token string">'z!Z!Z!!'</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">'z!Z!Z!!z!Z!Z!!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">repeat</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">repeat</span><span class="token punctuation">(</span><span class="token string">'abc'</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 均印出 true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>這是最簡單的測試方法，但這麼做的缺點是很難「規模化」。我們可以利用別人寫好的框架來便利測試。</p>
<h2 id="利用現成的框架-Jest-測試"><a href="#利用現成的框架-Jest-測試" class="headerlink" title="利用現成的框架 Jest 測試"></a>利用現成的框架 <span class="exturl" data-url="aHR0cHM6Ly9qZXN0anMuaW8v">Jest<i class="fa fa-external-link-alt"></i></span> 測試</h2><ol>
<li>用 npm 下載 Jest：輸入指令 <code>npm install -save-dev jest</code></li>
</ol>
<p><img src="https://i.imgur.com/P2V2LzG.png"></p>
<ol start="2">
<li>利用模組將「測試」與「要測試的 Function」分開。</li>
</ol>
<ul>
<li>在要測試的檔案 index.js 加上：<code>module.exports = &#39;要輸出的值&#39;</code></li>
</ul>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">repeat</span><span class="token punctuation">(</span><span class="token parameter">str<span class="token punctuation">,</span> times</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token string">''</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> times<span class="token punctuation">;</span> i <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    result <span class="token operator">+=</span> str
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">return</span> result
<span class="token punctuation">&#125;</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> repeat<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>建立 index.test.js 檔案：<code>touch index.test.js</code>，習慣用 <code>test.js</code> 取名<br>並在檔案中引用 index.js 輸出的值：<code>var repeat = require(&#39;./引入的檔案&#39;)</code></li>
</ul>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 可輸入 node index.test.js 測試是否引入成功</span>
<span class="token keyword">var</span> repeat <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./index'</span><span class="token punctuation">)</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">repeat</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 印出 aaaaa，引入成功</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>在 index.test.js 加入 Jest 語法：<code>test(&#39;描述文字&#39;, &#39;要做的測試&#39;)</code></li>
</ul>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> repeat <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./index'</span><span class="token punctuation">)</span>

<span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'a 重複 5 次應該要等於'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token function">expect</span><span class="token punctuation">(</span><span class="token function">repeat</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token string">'aaaaa'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ol start="3">
<li>更新 package.json 檔案的 <code>&quot;scripts&quot;</code>：加入 <code>&quot;test&quot;: &quot;jest&quot;</code></li>
</ol>
<p><img src="https://i.imgur.com/85bIvDU.png" alt="&quot;test&quot;: &quot;jest&quot;"></p>
<ol start="4">
<li>如此即可運行 <code>npm run test</code> 進行測試，看到 PASS 可知測試有成功：</li>
</ol>
<p><img src="https://i.imgur.com/KGT6Vht.png" alt="test"></p>
<p>之所以要用 npm 來跑 jest，而不是直接在終端機輸入 jest 指令，是因為 jest 只安裝在該專案底下，要使用時才會拿出來用。</p>
<p>若只想測特定檔案，可以修改 <code>&quot;scripts&quot;</code>：<code>&quot;test&quot;: &quot;jest index.test.js&quot;</code>，後面加上檔名。</p>
<p><img src="https://i.imgur.com/4byHuvz.png"></p>
<p>或是用 <code>npx jest index.jest.js</code>，同樣能夠執行測試：</p>
<p><img src="https://i.imgur.com/VGCuYis.png"></p>
<p>也可以多跑幾個測式：</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> repeat <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./index'</span><span class="token punctuation">)</span>

<span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'a 重複 5 次應該要等於aaaaa'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token function">expect</span><span class="token punctuation">(</span><span class="token function">repeat</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token string">'aaaaa'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'abc 重複 1 次應該要等於abc'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token function">expect</span><span class="token punctuation">(</span><span class="token function">repeat</span><span class="token punctuation">(</span><span class="token string">'abc'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token string">'abc'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">test</span><span class="token punctuation">(</span><span class="token string">' "" 重複 10 次應該要等於 ""'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token function">expect</span><span class="token punctuation">(</span><span class="token function">repeat</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><img src="https://i.imgur.com/Ief4HX8.png" alt="測試結果"></p>
<p>也可以把測試項目放在 <code>describe()</code> 函式裡，這種寫法會更有結構一點：</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 架構：</span>

<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">describe('測試 XX', function()&#123;
  test('名稱', function() &#123;
    expect('回傳值').toBe('預期結果');
  &#125;)
&#125;)</span><span class="token template-punctuation string">`</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> repeat <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./index'</span><span class="token punctuation">)</span>

<span class="token function">describe</span><span class="token punctuation">(</span><span class="token string">'測試 repeat'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'a 重複 5 次應該要等於aaaaa'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token function">expect</span><span class="token punctuation">(</span><span class="token function">repeat</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token string">'aaaaa'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'abc 重複 1 次應該要等於abc'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token function">expect</span><span class="token punctuation">(</span><span class="token function">repeat</span><span class="token punctuation">(</span><span class="token string">'abc'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token string">'abc'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">test</span><span class="token punctuation">(</span><span class="token string">' "" 重複 10 次應該要等於 ""'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token function">expect</span><span class="token punctuation">(</span><span class="token function">repeat</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="Unit-test-單元測試"><a href="#Unit-test-單元測試" class="headerlink" title="Unit test 單元測試"></a>Unit test 單元測試</h2><p>單元測試指的是測試一個工作單元（a unit of work）的行為。上述範例測試單一函式，就是一種單元測試。可用來確認每個 Unit 是否正確，也能夠進行規模化測試。</p>
<hr>
<h2 id="補充：如何在-Windows-上執行-Jest-也能有紅綠標籤"><a href="#補充：如何在-Windows-上執行-Jest-也能有紅綠標籤" class="headerlink" title="補充：如何在 Windows 上執行 Jest 也能有紅綠標籤"></a>補充：如何在 Windows 上執行 Jest 也能有紅綠標籤</h2><p>方法：把 <code>package.json</code> 裡的 <code>&quot;script&quot;</code> 中的內容改為 <code>&quot;test&quot;: &quot;jest --colors&quot;</code>，FAIL 和 PASS 標籤就會是紅綠標籤。</p>
<p><img src="https://i.imgur.com/LaX4cI3.png" alt="color"></p>
<p>奇怪的是，在 git commit 時都沒有問題，在執行 Jest 時卻出現亂碼。不太確定是不是因為更改 locale 才解決的，總之介面很神奇的變成中文了，可喜可賀。</p>
<p><img src="https://i.imgur.com/4OCokvV.png" alt="UTF-8"></p>
<p>參考資料：</p>
<ol>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL2plc3QvaXNzdWVzLzM4Nzc=">Colorful output in Bash terminal does not work (–colors option) <i class="fa fa-external-link-alt"></i></span></li>
</ol>
<hr>
<h2 id="先寫測試再寫程式：TDD"><a href="#先寫測試再寫程式：TDD" class="headerlink" title="先寫測試再寫程式：TDD"></a>先寫測試再寫程式：TDD</h2><p>Test-driven Development（測試驅動開發），是一種開發流程，簡言之就是「先寫測試在開發」。相較於傳統的「先開發在寫測試」模式，TDD 有幾項優點：</p>
<ol>
<li>能確保測試程式的撰寫</li>
<li>從使用方觀點切入，有助於在開發初期釐清程式介面如何設計</li>
<li>便於日後 Debug</li>
</ol>
<h2 id="實作-TDD"><a href="#實作-TDD" class="headerlink" title="實作 TDD"></a>實作 TDD</h2><p>可利用 Jest 模組，先建立 <code>test()</code> 架構，再來撰寫主要程式碼。步驟可參考：<span class="exturl" data-url="aHR0cHM6Ly90dy5hbHBoYWNhbXAuY28vYmxvZy90ZGQtdGVzdC1kcml2ZW4tZGV2ZWxvcG1lbnQtZXhhbXBsZQ==">TDD 開發五步驟，帶你實戰 Test-Driven Development 範例<i class="fa fa-external-link-alt"></i></span></p>
<h3 id="步驟一、選定一個目標功能，來新增測試案例"><a href="#步驟一、選定一個目標功能，來新增測試案例" class="headerlink" title="步驟一、選定一個目標功能，來新增測試案例"></a>步驟一、選定一個目標功能，來新增測試案例</h3><p>先寫好測試預期結果，並盡量列出邊界條件。在這個步驟還不會撰寫目標程式內容。這裡用 <code>reverse</code> 函式為例：</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 先寫出預期結果：</span>

<span class="token keyword">var</span> reverse <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./index'</span><span class="token punctuation">)</span>

<span class="token function">describe</span><span class="token punctuation">(</span><span class="token string">'測試 reverse'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'123 reverse 要等於 321'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token function">expect</span><span class="token punctuation">(</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token string">'123'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token string">'321'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'!!! reverse 要等於 !!!'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token function">expect</span><span class="token punctuation">(</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token string">'!!!'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token string">'!!!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">test</span><span class="token punctuation">(</span><span class="token string">' "" reverse 要等於 ""'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token function">expect</span><span class="token punctuation">(</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="步驟二、執行測試，得到-Failed（紅燈）"><a href="#步驟二、執行測試，得到-Failed（紅燈）" class="headerlink" title="步驟二、執行測試，得到 Failed（紅燈）"></a>步驟二、執行測試，得到 Failed（紅燈）</h3><p>因為還沒撰寫目標程式，結果就會是 Failed。此步驟目的是確保測試程式可執行，沒有語法錯誤。</p>
<p><img src="https://i.imgur.com/A38CQ2C.png" alt="運行測試"></p>
<h3 id="步驟三、實作「最低限度」的產品程式"><a href="#步驟三、實作「最低限度」的產品程式" class="headerlink" title="步驟三、實作「最低限度」的產品程式"></a>步驟三、實作「最低限度」的產品程式</h3><p>開始寫程式，以能夠通過測試為目標，不求將程式碼優化一步到位。完成到一個階段就可運行 jest 查看是否有錯誤：</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//開始寫程式</span>

<span class="token keyword">function</span> <span class="token function">reverse</span><span class="token punctuation">(</span><span class="token parameter">str</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token string">''</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> str<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">-=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    result <span class="token operator">+=</span> str<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">return</span> result
<span class="token punctuation">&#125;</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> reverse<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="步驟四：再次執行測試，得到-Passed（綠燈）"><a href="#步驟四：再次執行測試，得到-Passed（綠燈）" class="headerlink" title="步驟四：再次執行測試，得到 Passed（綠燈）"></a>步驟四：再次執行測試，得到 Passed（綠燈）</h3><p>在這個階段，即完成一個可運作且正確的程式版本，包含產品程式和測試程式。</p>
<p><img src="https://i.imgur.com/dJHNZ1j.png" alt="Passed"></p>
<h3 id="步驟五：重構程式"><a href="#步驟五：重構程式" class="headerlink" title="步驟五：重構程式"></a>步驟五：重構程式</h3><p>最後是優化「產品程式」和「測試程式」的程式碼，因為測試程式也是專案需維護的一部份。如此即可提升程式的可讀性、可維護性、擴充性。</p>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>Testing</tag>
      </tags>
  </entry>
  <entry>
    <title>【學習筆記】JavaScript 的陣列遍歷（二）：forEach/map/filter/every/some/reduce</title>
    <url>/javascript-native-array/</url>
    <content><![CDATA[<p>接續上篇<span class="exturl" data-url="aHR0cHM6Ly9oYWNrbWQuaW8vQEhlaWRpLUxpdS9qYXZhc2NyaXB0LWZvci1sb29w">【學習筆記】JavaScript 的陣列遍歷（ㄧ）：for/for…of/for…in/forEach<i class="fa fa-external-link-alt"></i></span>，這篇筆記整理幾種 JavaScript 遍歷陣列的方法，探討其使用時機與彼此的區別：</p>
<ul>
<li><code>arr.forEach((value, index, array) =&gt; &#123; // todo... &#125;)</code></li>
<li><code>arr.map(value =&gt; &#123; // todo... &#125;)</code></li>
<li><code>arr.filter(value =&gt; &#123; // todo... &#125;)</code></li>
<li><code>arr.every(value =&gt; &#123; // todo... &#125;)</code></li>
<li><code>arr.some(value =&gt; &#123; // todo... &#125;)</code></li>
<li><code>arr.reduce((acc, value)=&gt; acc + value)</code></li>
</ul>
<span id="more"></span>

<h2 id="forEach：遍歷陣列，無返回值，會改變原來陣列"><a href="#forEach：遍歷陣列，無返回值，會改變原來陣列" class="headerlink" title="forEach：遍歷陣列，無返回值，會改變原來陣列"></a><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvemgtVFcvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvQXJyYXkvZm9yRWFjaA==">forEach<i class="fa fa-external-link-alt"></i></span>：遍歷陣列，無返回值，會改變原來陣列</h2><ul>
<li>用法與 for loop 類似</li>
<li>會改變原始陣列</li>
</ul>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">array<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">callback</span><span class="token punctuation">(</span><span class="token parameter">currentValue<span class="token punctuation">,</span> index<span class="token operator">?</span><span class="token punctuation">,</span> array<span class="token operator">?</span></span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token comment">// TODO</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">,</span> thisArg<span class="token operator">?</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<ul>
<li>使用範例：</li>
</ul>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
arr<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span> index<span class="token punctuation">,</span> array</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    array<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> item <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'arr: '</span><span class="token punctuation">,</span> arr<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// arr: [2, 6, 10, 22, -4, 16]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="map：遍歷陣列，返回處理後的新陣列"><a href="#map：遍歷陣列，返回處理後的新陣列" class="headerlink" title="map：遍歷陣列，返回處理後的新陣列"></a><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvemgtVFcvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvQXJyYXkvbWFw">map<i class="fa fa-external-link-alt"></i></span>：遍歷陣列，返回處理後的新陣列</h2><ul>
<li>不會改變原始陣列</li>
<li>會返回新陣列</li>
</ul>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> newArray <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">callback</span><span class="token punctuation">(</span> <span class="token parameter">currentValue<span class="token punctuation">,</span> index<span class="token operator">?</span><span class="token punctuation">,</span> array<span class="token operator">?</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// return element for newArray</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">,</span> thisArg<span class="token operator">?</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<ul>
<li>使用範例：<ul>
<li>常用於修改陣列中的資料格式，得到返回值後再執行後續動作</li>
</ul>
</li>
</ul>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> newArr <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=></span> item <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'arr: '</span><span class="token punctuation">,</span> arr<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'newArr '</span><span class="token punctuation">,</span> newArr<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// arr: [1, 3, 5, 11, -2, 8]</span>
<span class="token comment">// NewArr: [2, 6, 10, 22, -4, 16]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="filter：篩選陣列中滿足條件的元素，並返回一個新陣列"><a href="#filter：篩選陣列中滿足條件的元素，並返回一個新陣列" class="headerlink" title="filter：篩選陣列中滿足條件的元素，並返回一個新陣列"></a><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvemgtVFcvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvQXJyYXkvZmlsdGVy">filter<i class="fa fa-external-link-alt"></i></span>：篩選陣列中滿足條件的元素，並返回一個新陣列</h2><ul>
<li>不會改變原始陣列</li>
<li>會返回新陣列</li>
</ul>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> newArray <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token function">callback</span><span class="token punctuation">(</span>element<span class="token punctuation">,</span> index<span class="token punctuation">,</span> array<span class="token punctuation">)</span><span class="token punctuation">,</span> thisArg<span class="token operator">?</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ul>
<li>使用範例：<ul>
<li>常用於篩選陣列中符合搜尋條件的元素</li>
</ul>
</li>
</ul>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> newArr <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=></span> item <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'arr: '</span><span class="token punctuation">,</span> arr<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'newArr: '</span><span class="token punctuation">,</span> newArr<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// arr: [1, 3, 5, 11, -2, 8]</span>
<span class="token comment">// newArr: [1, 3, -2]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="every：判斷陣列中所有元素是否都滿足條件，返回一個布林值"><a href="#every：判斷陣列中所有元素是否都滿足條件，返回一個布林值" class="headerlink" title="every：判斷陣列中所有元素是否都滿足條件，返回一個布林值"></a><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvemgtVFcvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvQXJyYXkvZXZlcnk=">every<i class="fa fa-external-link-alt"></i></span>：判斷陣列中所有元素是否都滿足條件，返回一個布林值</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">arr<span class="token punctuation">.</span><span class="token function">every</span><span class="token punctuation">(</span>callback<span class="token punctuation">,</span> thisArg<span class="token operator">?</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ul>
<li>使用範例：</li>
</ul>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> allSmallerThan10 <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">every</span><span class="token punctuation">(</span><span class="token parameter">x</span> <span class="token operator">=></span> x <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> allSmallerThan15 <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">every</span><span class="token punctuation">(</span><span class="token parameter">x</span> <span class="token operator">=></span> x <span class="token operator">&lt;</span> <span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'allSmallerThan10: '</span><span class="token punctuation">,</span> allSmallerThan10<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'allSmallerThan15: '</span><span class="token punctuation">,</span> allSmallerThan15<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// allSmallerThan10: false</span>
<span class="token comment">// allSmallerThan15: true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="some：判斷陣列中是否至少存在一個滿足條件的元素，返回一個布林值"><a href="#some：判斷陣列中是否至少存在一個滿足條件的元素，返回一個布林值" class="headerlink" title="some：判斷陣列中是否至少存在一個滿足條件的元素，返回一個布林值"></a><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvemgtVFcvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvQXJyYXkvc29tZQ==">some<i class="fa fa-external-link-alt"></i></span>：判斷陣列中是否至少存在一個滿足條件的元素，返回一個布林值</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">arr<span class="token punctuation">.</span><span class="token function">some</span><span class="token punctuation">(</span>callback<span class="token punctuation">,</span> thisArg<span class="token operator">?</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ul>
<li>使用範例：</li>
</ul>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> isBiggerThan10 <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">some</span><span class="token punctuation">(</span><span class="token parameter">x</span> <span class="token operator">=></span> x <span class="token operator">></span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> isBiggerThan15 <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">some</span><span class="token punctuation">(</span><span class="token parameter">x</span> <span class="token operator">=></span> x <span class="token operator">></span> <span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'isBiggerThan10: '</span><span class="token punctuation">,</span> isBiggerThan10<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'isBiggerThan15: '</span><span class="token punctuation">,</span> isBiggerThan15<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// isBiggerThan10: true</span>
<span class="token comment">// isBiggerThan15: false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="reduce：將陣列中所有元素加總計算，返回一個總和"><a href="#reduce：將陣列中所有元素加總計算，返回一個總和" class="headerlink" title="reduce：將陣列中所有元素加總計算，返回一個總和"></a><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvemgtVFcvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvQXJyYXkvUmVkdWNl">reduce<i class="fa fa-external-link-alt"></i></span>：將陣列中所有元素加總計算，返回一個總和</h2><ul>
<li>callback 傳入參數：<ul>
<li>accumulator：目前累加值</li>
<li>currentValue：目前執行到的元素值</li>
<li>currentIndex：目前執行到的元素索引值</li>
<li>array：陣列本身</li>
</ul>
</li>
<li>initialValue：初始累加值 =&gt; 若無指定則預設為 0</li>
</ul>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">arr<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span>
  callback<span class="token punctuation">[</span>accumulator<span class="token punctuation">,</span> currentValue<span class="token punctuation">,</span> currentIndex<span class="token operator">?</span><span class="token punctuation">,</span> array<span class="token operator">?</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  initialValue<span class="token operator">?</span>
<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>使用範例：</li>
</ul>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> total <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span>
  <span class="token punctuation">(</span><span class="token parameter">accumulator<span class="token punctuation">,</span> currentValue</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'accumulator: '</span><span class="token punctuation">,</span> accumulator<span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'currentValue: '</span><span class="token punctuation">,</span> currentValue<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> accumulator <span class="token operator">+</span> currentValue<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'total: '</span><span class="token punctuation">,</span> total<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// accumulator: 1</span>
<span class="token comment">// currentValue: 2</span>
<span class="token comment">// accumulator: 3</span>
<span class="token comment">// currentValue: 3</span>
<span class="token comment">// total: 6</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>


<h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><ul>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cuaXRyZWFkMDEuY29tL2NvbnRlbnQvMTU0NjgyNjA2NC5odG1s">陣列遍歷的幾種用法—forEach()、map()、filter()、every()、some()<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9pdGhlbHAuaXRob21lLmNvbS50dy9hcnRpY2xlcy8xMDE5NDQxMg==">Day09_Array的迭代方法<i class="fa fa-external-link-alt"></i></span></li>
</ul>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>Front-End</tag>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>[week 3] JavaScript：認識 Module &amp; NPM 套件庫</title>
    <url>/javascript-npm/</url>
    <content><![CDATA[<blockquote>
<p>本篇為 <span class="exturl" data-url="aHR0cHM6Ly9saWRlbXkuY29tL3AvanMxMDItamF2YXNjcmlwdC1lczYtbnBt">[JS102] 升級你的 JavaScript 技能：ES6 + npm + Jest<i class="fa fa-external-link-alt"></i></span> 這門課程的學習筆記。如有錯誤歡迎指正！</p>
</blockquote>
<pre class="line-numbers language-none"><code class="language-none">學習目標：

 理解常用內建函式如何使用
 熟悉程式語法並知道如何解決基礎問題<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<span id="more"></span>

<hr>
<h2 id="何謂-Modules-模組（模塊）？"><a href="#何謂-Modules-模組（模塊）？" class="headerlink" title="何謂 Modules 模組（模塊）？"></a>何謂 Modules 模組（模塊）？</h2><p>在開發過程中，若將各種功能放在一起，程式間可能會互相影響甚至產生 bug，日後也不易進行維護。</p>
<p>因此，我們可以將不同功能視為一個模組（Module），例如：金流、登入、權限、會員等等，再用主程式將所有模組串接起來，透過模組化統一進行管理。</p>
<p><img src="https://i.imgur.com/di0LXxg.png"></p>
<h2 id="Modeule-相關操作"><a href="#Modeule-相關操作" class="headerlink" title="Ｍodeule 相關操作"></a>Ｍodeule 相關操作</h2><h3 id="require-：引入模組"><a href="#require-：引入模組" class="headerlink" title="require()：引入模組"></a><code>require()</code>：引入模組</h3><p>以引入 <span class="exturl" data-url="aHR0cHM6Ly9ub2RlanMub3JnL2FwaS9vcy5odG1sI29zX29zX3BsYXRmb3Jt">Node.js 提供的 os<i class="fa fa-external-link-alt"></i></span> 這個模組為例：</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> os <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'os'</span><span class="token punctuation">)</span>      <span class="token comment">// 引入 'os' 這個模組，變數 os 可隨意命名</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span><span class="token function">platform</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment">// 印出 win32，代表當前作業系統</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p><img src="https://i.imgur.com/ubLcpXY.png"></p>
<h3 id="module-export：輸出模組"><a href="#module-export：輸出模組" class="headerlink" title="module.export：輸出模組"></a><code>module.export</code>：輸出模組</h3><ul>
<li>語法：<code>module.exports = 任何資料型別（例如：數字、陣列、物件等）</code></li>
</ul>
<ol>
<li>以輸出 <code>double</code> 函式為例：</li>
</ol>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 建立一個要輸出模組的 myModule.js 檔案</span>

<span class="token keyword">function</span> <span class="token function">double</span><span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
   <span class="token keyword">return</span> n <span class="token operator">*</span> <span class="token number">2</span>
<span class="token punctuation">&#125;</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> double<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 以 require 指令輸入模組到要使用的 js 檔案</span>

<span class="token keyword">var</span> myModule <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./myModule'</span><span class="token punctuation">)</span>    <span class="token comment">// 要加路徑，檔案類型 .js 通常會省略</span>
<span class="token comment">// 不加路徑的話，其實也會自動從 node_modules 資料夾底下去找</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>myMoudle<span class="token punctuation">)</span>        <span class="token comment">// 印出 [Function: double]</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">myMoudle</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span>     <span class="token comment">// 印出 6</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ol start="2">
<li>也可利用 <code>exports</code> 輸出物件：</li>
</ol>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 在要輸出模組的 myModule.js 檔案</span>

<span class="token keyword">function</span> <span class="token function">double</span><span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
   <span class="token keyword">return</span> n <span class="token operator">*</span> <span class="token number">2</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  double<span class="token operator">:</span> double<span class="token punctuation">,</span>
  <span class="token function-variable function">triple</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token function">triple</span><span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">return</span> n <span class="token operator">*</span> <span class="token number">3</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> obj<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 以 require 指令輸入模組到要使用的 js 檔案</span>

<span class="token keyword">var</span> myModule <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./myModule'</span><span class="token punctuation">)</span>    

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>myModule<span class="token punctuation">)</span>
<span class="token comment">// 印出 &#123; double: [Function: double], triple: [Function: triple] &#125;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>myModule<span class="token punctuation">.</span><span class="token function">double</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> myModule<span class="token punctuation">.</span><span class="token function">triple</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment">// 印出 4, 30</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ol start="3">
<li>也可用另一個寫法：<code>exports.double = double</code>，把 <code>exports</code> 本身視為空物件，但這種方法比較少見：</li>
</ol>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 在要輸出模組的 myModule.js 檔案</span>

<span class="token keyword">function</span> <span class="token function">double</span><span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
   <span class="token keyword">return</span> n <span class="token operator">*</span> <span class="token number">2</span>
<span class="token punctuation">&#125;</span>

exports<span class="token punctuation">.</span>double <span class="token operator">=</span> double
exports<span class="token punctuation">.</span><span class="token function-variable function">triple</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> n <span class="token operator">*</span> <span class="token number">3</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 此種輸出方式，myModule 一定會是物件</span>

<span class="token keyword">var</span> myModule <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./myModule'</span><span class="token punctuation">)</span> 

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>myModule<span class="token punctuation">)</span>
<span class="token comment">// 印出 &#123; double: [Function: double], triple: [Function] &#125;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>myModule<span class="token punctuation">.</span><span class="token function">double</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment">// 印出 6</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>參考資料：</p>
<ol>
<li><span class="exturl" data-url="aHR0cHM6Ly9tZWRpdW0uY29tL0BtaWFoc3V3b3JrLyVFNyVBQyVBQyVFNCVCOCU4OSVFOSU4MCVCMS1ub2RlLWpzLSVFNSU5RiVCQSVFNyVBNCU4RS1tb2R1bGUtZXhwb3J0cy0lRTUlOTIlOEMtcmVxdWlyZS0yZjlmNjkxNWQ5ZjA=">[第三週] Node.js 基礎 — module.exports 和 require<i class="fa fa-external-link-alt"></i></span></li>
</ol>
<hr>
<h2 id="NPM-線上套件庫"><a href="#NPM-線上套件庫" class="headerlink" title="NPM 線上套件庫"></a>NPM 線上套件庫</h2><p><span class="exturl" data-url="aHR0cHM6Ly93d3cubnBtanMuY29tLw==">NPM<i class="fa fa-external-link-alt"></i></span> 是 Node Package Manager 的簡稱。是用來管理 Node.js 套件的系統（Library），可以下載別人已經寫好的 Javascript 套件來使用。</p>
<blockquote>
<p>也可使用由 Facebook 團隊開發的 <span class="exturl" data-url="aHR0cHM6Ly95YXJucGtnLmNvbS8=">Yarn<i class="fa fa-external-link-alt"></i></span>，同樣能從 npm 安裝套件，優點是速度較快。<br>參考資料：<span class="exturl" data-url="aHR0cHM6Ly9pdGhlbHAuaXRob21lLmNvbS50dy9hcnRpY2xlcy8xMDE5MTc0NQ==">[Day-5] 用Yarn取代npm加速開發<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
<h3 id="基本指令"><a href="#基本指令" class="headerlink" title="基本指令"></a>基本指令</h3><h4 id="npm-v：查看-npm-版本。"><a href="#npm-v：查看-npm-版本。" class="headerlink" title="npm -v：查看 npm 版本。"></a><code>npm -v</code>：查看 npm 版本。</h4><p>通常在安裝 node.js 時就會一起安裝。</p>
<p><img src="https://i.imgur.com/zZMyERG.png" alt="npm -v"></p>
<h4 id="npm-init：協助建立-Node-js-專案的描述檔。"><a href="#npm-init：協助建立-Node-js-專案的描述檔。" class="headerlink" title="npm init：協助建立 Node.js 專案的描述檔。"></a><code>npm init</code>：協助建立 Node.js 專案的描述檔。</h4><p>也就是產生 package.json 這個檔案。</p>
<h4 id="npm-install-left-pad：以-npm-安裝-left-pad-這個套件為例。"><a href="#npm-install-left-pad：以-npm-安裝-left-pad-這個套件為例。" class="headerlink" title="npm install left-pad：以 npm 安裝 left-pad 這個套件為例。"></a><code>npm install left-pad</code>：以 npm 安裝 left-pad 這個套件為例。</h4><p><img src="https://i.imgur.com/4zvy68Z.png" alt="npm install"></p>
<p>安裝同時會產生：</p>
<ol>
<li>package-lock.json 檔案：記錄安裝套件的版本和依賴（dependencies）</li>
<li>node_modules 資料夾：裡面放安裝的套件</li>
</ol>
<p><img src="https://i.imgur.com/hOnLOZL.png"></p>
<p>package-lock.json 檔案內容如下，可從 <code>dependencies</code> 得知專案使用的套件：</p>
<p><img src="https://i.imgur.com/YopHSs7.png" alt="描述檔"></p>
<h3 id="版本控制會忽略-node-modules-資料夾"><a href="#版本控制會忽略-node-modules-資料夾" class="headerlink" title="版本控制會忽略 node_modules 資料夾"></a>版本控制會忽略 node_modules 資料夾</h3><p>當安裝許多套件時，檔案會很大。若要將專案上傳到 GitHub 遠端，通常會忽略 node_modules 這個資料夾，也就是不需進行版本控制。</p>
<p>因為已經有 package.json 這個檔案，負責記錄該專案所安裝的套件。若從遠端下載專案時，只要再輸入 <code>npm install</code> 指令，就可安裝該專案所需套件。</p>
<p><img src="https://i.imgur.com/nsRpDni.png"></p>
<hr>
<h2 id="設定-npm-scripts"><a href="#設定-npm-scripts" class="headerlink" title="設定 npm scripts"></a>設定 npm scripts</h2><p><code>package.json</code> 檔案中，我們可在 <code>scripts</code> 區塊加入各種指令。</p>
<h3 id="quot-key-quot-quot-要執行的內容＂"><a href="#quot-key-quot-quot-要執行的內容＂" class="headerlink" title="&quot;key&quot;: &quot;要執行的內容＂"></a><code>&quot;key&quot;: &quot;要執行的內容＂</code></h3><p>以如何運行 <code>index.js</code> 這個專案為例：</p>
<p><code>&quot;start&quot;: &quot;node index.js&quot;</code>：代表以 start 為 key，輸入即可在 node 運行 index.js。</p>
<blockquote>
<p>注意是使用雙引號。</p>
</blockquote>
<p><img src="https://i.imgur.com/fvF1YuH.png" alt="scripts"></p>
<h3 id="npm-run-39-key-39"><a href="#npm-run-39-key-39" class="headerlink" title="npm run &#39;key&#39;"></a><code>npm run &#39;key&#39;</code></h3><p>在終端機輸入 <code>npm run start</code> 即可透過 key 來運行該指令：</p>
<p><img src="https://i.imgur.com/K3XhyO3.png" alt="npm run start"></p>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>ES6</tag>
      </tags>
  </entry>
  <entry>
    <title>[week 16] JavaScript 進階 - What is this？</title>
    <url>/javascript-this/</url>
    <content><![CDATA[<blockquote>
<p>本篇為 <span class="exturl" data-url="aHR0cHM6Ly9saWRlbXkuY29tL3AvanMyMDEtamF2YXNjcmlwdA==">[JS201] 進階 JavaScript：那些你一直搞不懂的地方<i class="fa fa-external-link-alt"></i></span> 這門課程的學習筆記。如有錯誤歡迎指正！</p>
</blockquote>
<pre class="line-numbers language-none"><code class="language-none">學習目標：

 P1 你知道大部分情況下 this 的值是什麼
 P2 你知道物件導向的基本概念（類別、實體、繼承、封裝）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<span id="more"></span>

<hr>
<h2 id="從物件導向到-this"><a href="#從物件導向到-this" class="headerlink" title="從物件導向到 this"></a>從物件導向到 this</h2><p>在上一篇<span class="exturl" data-url="aHR0cHM6Ly9oYWNrbWQuaW8vQEhlaWRpLUxpdS9ub3RlLWpzMjAxLW9vcC1wcm90b3R5cGU=">JavaScript 進階 - 物件導向 &amp; Prototype<i class="fa fa-external-link-alt"></i></span> 筆記中，其實我們就有提到 this 相關概念。this 的主要用途就在於物件導向，用來指哪個 instance 在呼叫這個 function，透過 this 我們能夠進一步操作。</p>
<p>那如果是在和物件導向無關的情況下，呼叫 this 會代表什麼？</p>
<h3 id="Global-context-下的-this"><a href="#Global-context-下的-this" class="headerlink" title="Global context 下的 this"></a>Global context 下的 this</h3><p>如果在全域環境下呼叫 this，根據不同執行環境（瀏覽器或 node.js），預設值可能會是 global 或 window：</p>
<h4 id="在-node-js-運行"><a href="#在-node-js-運行" class="headerlink" title="在 node.js 運行"></a>在 node.js 運行</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// Object [global] &#123; ...&#125;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">===</span> global<span class="token punctuation">)</span>  <span class="token comment">// true</span>
<span class="token punctuation">&#125;</span>
<span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><img src="https://i.imgur.com/9yFrDnZ.png"></p>
<h4 id="在瀏覽器運行"><a href="#在瀏覽器運行" class="headerlink" title="在瀏覽器運行"></a>在瀏覽器運行</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// Window &#123; ...&#125;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">===</span> window<span class="token punctuation">)</span>  <span class="token comment">// true</span>
<span class="token punctuation">&#125;</span>
<span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><img src="https://i.imgur.com/wVCdilg.png"></p>
<h3 id="use-strict-嚴格模式"><a href="#use-strict-嚴格模式" class="headerlink" title="use strict 嚴格模式"></a>use strict 嚴格模式</h3><p>在不需要的地方呼叫 this，卻還是會有預設值 global 或 window。這時候，只要設定 <code>&#39;use strict&#39;</code>（嚴格模式）就能避免，this 的預設值會是 undefined：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token string">'use strict'</span><span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// undefined</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="DOM-元素中的-this"><a href="#DOM-元素中的-this" class="headerlink" title="DOM 元素中的 this"></a>DOM 元素中的 this</h3><p>此外，對 DOM 元素進行事件監聽時，this 就代表當下操作的元素，其實非常直覺。例如監聽按鈕的點擊事件，那 this 就會是那個按鈕：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.btn'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>   <span class="token comment">// this: 觸發這個 funciont 的物件</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>因此我們可以說，除了在物件導向跟 DOM 之外，this 是沒有意義的。</p>
<h3 id="Function-context-下的-this"><a href="#Function-context-下的-this" class="headerlink" title="Function context 下的 this"></a>Function context 下的 this</h3><p>在 function 裡面時，this 的值是什麼取決於該 function 是怎麼被呼叫的。</p>
<p>也就是說，function 沒有被呼叫的時候，預設值就會是 window, global 或 undefined。一旦某個 function 被呼叫時，裡面的 this 就可以理解成，是指向誰在 call 這個 function：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  <span class="token function-variable function">foo</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">var</span> bar <span class="token operator">=</span> obj<span class="token punctuation">.</span>foo

obj<span class="token punctuation">.</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// foo(): obj 在 call，obj 就是 this </span>
<span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment">// bar(): 沒人 call，window 就是 this</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>其中，<code>bar()</code> 這種呼叫函式的方法，其實是 <code>.call()</code> 的語法糖，要更詳細了解呼叫 function 背後在做的事，就要深入理解 <code>.call()</code>、<code>.apply()</code>、<code>bind()</code> 的行為。</p>
<h2 id="另外兩種呼叫-function-的方法：call-與-apply"><a href="#另外兩種呼叫-function-的方法：call-與-apply" class="headerlink" title="另外兩種呼叫 function 的方法：call 與 apply"></a>另外兩種呼叫 function 的方法：call 與 apply</h2><h3 id="call"><a href="#call" class="headerlink" title=".call()"></a><code>.call()</code></h3><p>第一個值傳入什麼 this 就是什麼。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token string">'use strict'</span><span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token function">test</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// 123</span>
<span class="token function">test</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// &#123;&#125;</span>
<span class="token function">test</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// [ 1 ]</span>
<span class="token function">test</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">'abc'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 'abc'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="apply"><a href="#apply" class="headerlink" title=".apply()"></a><code>.apply()</code></h3><p>和 <code>.call()</code> 一樣，第一個值傳入什麼 this 就是什麼，差異在於第二個參數會接一個 array。</p>
<p>可由下方範例來比較三種方式呼叫 function 的差異：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token string">'use strict'</span><span class="token punctuation">;</span>  <span class="token comment">// 嚴格模式</span>
<span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token function">test</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>
<span class="token comment">// undefined</span>
<span class="token comment">// 1 2 3</span>
<span class="token function">test</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 123</span>
<span class="token comment">// 1 2 3</span>
<span class="token function">test</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 123</span>
<span class="token comment">// 1 2 3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>透過 <code>.call</code> 和 <code>.apply</code> 的第一個參數，我們可以設定 function 中 this 的值。兩者差別在於，一個可以傳入無限的參數，另外一個只能傳入兩個參數；一個要用 array 帶入參數，另一個則否。</p>
<p>此外，我們也可以把一般呼叫 function 的方式都轉成 call 的形式：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  value<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
  <span class="token function-variable function">hello</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

obj<span class="token punctuation">.</span><span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">// 1</span>
obj<span class="token punctuation">.</span><span class="token function">hello</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>  <span class="token comment">// 1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>再舉一個例子，透過 call 來呼叫 function，我們就能夠指定 this 的值：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  value<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> hello
<span class="token punctuation">&#125;</span>

<span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  value<span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> hello
<span class="token punctuation">&#125;</span>

<span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">// global</span>
a<span class="token punctuation">.</span><span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">// a &#123; value: 1, hello&#125;</span>
b<span class="token punctuation">.</span><span class="token function">hello</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>   <span class="token comment">// a &#123; value: 1, hello&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<hr>
<h2 id="如何判斷-this-的值"><a href="#如何判斷-this-的值" class="headerlink" title="如何判斷 this 的值"></a>如何判斷 this 的值</h2><p>因為 this 是針對物件導向設計的，從以下範例，可知道 this 就是 obj 物件本身：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token string">'use strict'</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  a<span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span>
  <span class="token function-variable function">test</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// obj</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
obj<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// &#123; a: 10, test: [Function: test] &#125; === obj</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>重點就是，this 的值和程式碼在哪無關，而是和怎麼呼叫有關係：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token string">'use strict'</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  a<span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span>
  <span class="token function-variable function">test</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// obj</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
obj<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// &#123; a: 10, test: [Function: test] &#125;</span>
<span class="token keyword">var</span> func <span class="token operator">=</span> obj<span class="token punctuation">.</span>test<span class="token punctuation">;</span>  <span class="token comment">// 使 func 等同於 obj.test()</span>
<span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span>       <span class="token comment">// undefined</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>結果卻會得到不同結果，這是因為 obj 呼叫 function，所以 this 會指向 obj；另一方面，this 所在的 instance 中，沒有被 func 呼叫，所以會得到 undefined。</p>
<p>我們可以透過 <code>.call()</code> 來看看 this 指的是什麼：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token string">'use strict'</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  a<span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span>
  inner<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    <span class="token function-variable function">test</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
obj<span class="token punctuation">.</span>inner<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// &#123; test: [Function: test] &#125;</span>

<span class="token comment">// 改用 .call() 呼叫</span>
obj<span class="token punctuation">.</span>inner<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// &#123; a: 10, inner: &#123; test: [Function: test] &#125; &#125;</span>
obj<span class="token punctuation">.</span>inner<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>inner<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// &#123; test: [Function: test] &#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="bind-：強制綁定-this"><a href="#bind-：強制綁定-this" class="headerlink" title=".bind()：強制綁定 this"></a>.bind()：強制綁定 this</h3><p>除了 <code>.call()</code> 和 <code>.apply()</code>，我們還可以利用 <code>.bind()</code> 來強制綁定 this 的值，但需注意的是，一旦綁定之後就不能再用別的方法進行更改。</p>
<p>將前面提到的例子修改成 .bind()，這裡需注意 .bind() 會是直接回傳一個 function：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token string">'use strict'</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  a<span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span>
  <span class="token function-variable function">test</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// 第一種寫法：直接呼叫</span>
obj<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// &#123; a: 10, test: [Function: test] &#125;</span>

<span class="token comment">// 第二種寫法：先宣告，再呼叫</span>
<span class="token keyword">const</span> bindTest <span class="token operator">=</span> obj<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">bindTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
<span class="token comment">// &#123; a: 10, test: [Function: test] &#125;</span>
<span class="token keyword">const</span> bindTestA <span class="token operator">=</span> obj<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>test<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">bindTestA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// [Function: test]</span>
<span class="token keyword">const</span> bindTestB <span class="token operator">=</span> obj<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token string">"test B"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">bindTestB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// test B</span>
<span class="token keyword">const</span> bindTestC <span class="token operator">=</span> obj<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token string">"test C"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">bindTestC</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">'CCC'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// test C</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>利用 <code>.bind()</code> 就可以綁定 this 的值，也就是鎖定想要呼叫的區域，即便後面再 <code>.call()</code> 指定 this 的值也無法改變。</p>
<h3 id="牛刀小試"><a href="#牛刀小試" class="headerlink" title="牛刀小試"></a>牛刀小試</h3><p>以下範例預設在嚴格模式進行：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token string">'use strict'</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">&#123;</span> a<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> log<span class="token operator">:</span> log <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token punctuation">&#123;</span> a<span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> log<span class="token operator">:</span> log <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     
a<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    
b<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>思考步驟：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token number">1.</span> <span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// undefined</span>
<span class="token comment">// 在嚴格模式下，如果在非物件導向的情況呼叫 this，其值會是 undeined </span>

<span class="token number">2.</span> a<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
<span class="token comment">// &#123; a: 1, log: [Function: log] &#125;</span>
<span class="token comment">// 等於 a.log.call(a)，所以 this 就是 a 本身</span>

<span class="token number">3.</span> b<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// &#123; a: 1, log: [Function: log] &#125;</span>
<span class="token comment">// .apply() 會把 this 的值蓋過，所以 this 也會是 a 本身</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="arrow-function-的-this"><a href="#arrow-function-的-this" class="headerlink" title="arrow function 的 this"></a>arrow function 的 this</h3><p>arrow function 本身其實沒有 this，在 arrow function 裡面的 this，其實就和 arrow function 外部的 this 是同一個東西。</p>
<p>先以一般宣告 function 為例：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">&#123;</span>
  <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'run this'</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span> 
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">const</span> t <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
t<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>在瀏覽器上的運行結果，會發現第二個 this 等於全域的 Window：</p>
<p><img src="https://i.imgur.com/27kKU6Q.png"></p>
<p>也就是說，在 100 毫秒後才呼叫，其實作用就等同於在全域呼叫這個 function：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>但如果改成箭頭函式，結果就會不同了：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">&#123;</span>
  <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'run this'</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">setTimeout</span><span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span> 
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">const</span> t<span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
t<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>在瀏覽器上的運行結果，此時兩個 this 會變相同：</p>
<p><img src="https://i.imgur.com/thp7RZD.png"></p>
<p>這就是箭頭函式的特性，和箭頭函式中的 this 怎麼呼叫沒關係。而是類似 Scope（作用域）的機制，看程式碼定義在哪裡，就會利用定義的 block 來呈現這個 this 的值。</p>
<hr>
<h2 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h2><p>瞭解到物件導向的相關概念後，接著要理解 this 是什麼就沒那麼困難了。或許是因為在實際學 JacaScript 以前，就預設 this 是很難是高手在用的東西，透過慢慢理解物件導向與 this 的關聯，以及如何判斷 this 的值，似乎也感覺到自己的進化，對於未知的恐懼總是需要克服的。</p>
<p>關於 this 的重點，就是記得 this 的值和程式碼在哪無關，而是和怎麼呼叫有關係。</p>
<p>總結前面提到的觀念，其實 this 大致可分成四種綁定方式：</p>
<ul>
<li>默認綁定</li>
</ul>
<p>在和物件導向無關的情況下，this 會被指定為全域物件。又依照執行環境不同，其值會是 global 或 window，而在嚴格模式下會是 undefined：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// Window </span>
<span class="token punctuation">&#125;</span>
<span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>隱式綁定</li>
</ul>
<p>若在 function 中， this 有被某物件指定為屬性並呼叫，this 就是呼叫 function 的物件。以下方範例來說 this 就是 obj：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  a<span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">,</span>
  test<span class="token operator">:</span> func
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

obj<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 4</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>顯示綁定</li>
</ul>
<p>若是透過 <code>.call()</code>、<code>.apply()</code> 或 <code>.bind()</code> 方式指定 this，this 就會是傳入的參數：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  a<span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span>
  <span class="token function-variable function">test</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

obj<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>
obj<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>

<span class="token comment">// 第一種寫法：直接呼叫 function</span>
obj<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 第二種寫法：先宣告，再呼叫</span>
<span class="token keyword">const</span> bindTest <span class="token operator">=</span> obj<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">bindTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  

<span class="token comment">// 均印出: &#123; a: 10, test: [Function: test] &#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>new 綁定</li>
</ul>
<p>透過建構函式 new 出一個 instance，this 就會是 instance 物件本身：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token punctuation">&#123;</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">// Dog &#123;name: "dog A"&#125;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// dog A</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token string">'dog A'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>例外：箭頭函式中的 this 是看程式碼定義在哪，和怎麼呼叫沒關係。</li>
</ul>
<p>參考資料：</p>
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLnRlY2hicmlkZ2UuY2MvMjAxOS8wMi8yMy9qYXZhc2NyaXB0LXRoaXMv">淺談 JavaScript 頭號難題 this：絕對不完整，但保證好懂<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9odWdoLXByb2dyYW0tbGVhcm5pbmctZGlhcnktanMubWVkaXVtLmNvbS8lRTUlODklOEQlRTclQUIlQUYlRTQlQjglQUQlRTklOUElOEUtanMlRTQlQkIlQTQlRTQlQkElQkElRTYlOTAlOUUlRTQlQjglOEQlRTYlODclODIlRTclOUElODQlRTUlOUMlQjAlRTYlOTYlQjktdGhpcy1iOWI5YzY5NjBjMDM=">前端中階：JS令人搞不懂的地方-this<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9uaWNvbGFrYWNoYS5jb2RlcmJyaWRnZS5pby8yMDIwLzEwLzAxL29vcC1wcm90b3R5cGUtdGhpcy8=">JavaScript: Object-oriented JavaScript, Prototype Chain &amp; This<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cuaXRyZWFkMDEuY29tL2NvbnRlbnQvMTU0NDExNjk3MS5odG1s">關於this綁定的四種方式<i class="fa fa-external-link-alt"></i></span></li>
</ul>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>OOP</tag>
      </tags>
  </entry>
  <entry>
    <title>[week 16] JavaScript 進階 - 關於變數與資料型態</title>
    <url>/javascript-variable/</url>
    <content><![CDATA[<blockquote>
<p>本篇為 <span class="exturl" data-url="aHR0cHM6Ly9saWRlbXkuY29tL3AvanMyMDEtamF2YXNjcmlwdA==">[JS201] 進階 JavaScript：那些你一直搞不懂的地方<i class="fa fa-external-link-alt"></i></span> 這門課程的學習筆記。如有錯誤歡迎指正！</p>
</blockquote>
<pre class="line-numbers language-none"><code class="language-none">學習目標：

 瞭解 JavaScript 有哪些的資料型態
 原始型態與物件型態在變數宣告賦值上的差異<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<span id="more"></span>
<h2 id="JavaScript-資料型態"><a href="#JavaScript-資料型態" class="headerlink" title="JavaScript 資料型態"></a>JavaScript 資料型態</h2><p>在第二週 <span class="exturl" data-url="aHR0cHM6Ly9saWRlbXkuY29tL3AvanMxMDEtamF2YXNjcmlwdA==">[JS101] 用 JavaScript 一步步打造程式基礎<i class="fa fa-external-link-alt"></i></span> 學習JavaScript 基礎時，我們就曾提及關於值的型態，以及該如何判斷資料型態。</p>
<p>而資料型態的不同，可能會造成一些操作結果與想像不符，這部分我們後面會進行討論。</p>
<p>關於值的型態，大致可分為原始型態和物件型態兩種：</p>
<h4 id="原始型態（Primitive-types）"><a href="#原始型態（Primitive-types）" class="headerlink" title="原始型態（Primitive types）"></a>原始型態（Primitive types）</h4><ol>
<li>boolean（真偽值）：ture 和 false</li>
<li>number（數字）：例如 1、3.14159、NaN（無效的數字）</li>
<li>string（字串）：例如 <code>&#39;Hello World&#39;</code></li>
<li>symbol（ES6）：例如 Sym</li>
<li>null：沒有值存在（no value）</li>
<li>undefined：值不存在（absence） </li>
</ol>
<h4 id="其他都屬於物件型態（Object-types）"><a href="#其他都屬於物件型態（Object-types）" class="headerlink" title="其他都屬於物件型態（Object types）"></a>其他都屬於物件型態（Object types）</h4><ol>
<li>object（物件）：例如 {name: heidi, number: 99}</li>
<li>array（陣列）：例如 [1, 2, 3]</li>
<li>function（函式）</li>
<li>date…etc</li>
</ol>
<h3 id="Immutable-與-Mutable"><a href="#Immutable-與-Mutable" class="headerlink" title="Immutable 與 Mutable"></a>Immutable 與 Mutable</h3><p>其中原始型態具有 Immutable（不可變動）的特性，相對於物件型態是 Mutable（可變的）。這裡指的不可變動不是「賦值」，而是不能改變原本的記憶體位置。</p>
<p>也就是說，若對其有任何變更（例如：新增、修改、刪除），就會回傳一個新值。以下列程式碼為範例：</p>
<ul>
<li>原始型態：不改變原本的值</li>
</ul>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">'hello'</span>
<span class="token keyword">var</span> newStr <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> newStr<span class="token punctuation">)</span>
<span class="token comment">// 印出 hello HELLO</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>物件型態：改變原本的值</li>
</ul>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>
arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span>
<span class="token comment">// 印出 [1, 2]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="typeof-lt-value-gt-：用來判斷變數型態"><a href="#typeof-lt-value-gt-：用來判斷變數型態" class="headerlink" title="typeof &lt;value&gt;：用來判斷變數型態"></a><code>typeof &lt;value&gt;</code>：用來判斷變數型態</h2><p>　<br>我們可使用 <code>typeof</code> 來判斷變數的資料型態，輸入結果會回傳一個字串，語法範例如下：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'typeof true'</span><span class="token punctuation">,</span> <span class="token keyword">typeof</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
<span class="token comment">//輸出 typeof true boolean</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>結果得到 true 的資料型態是 boolean。</p>
<p>接著我們再看看其他範例結果：</p>
<p><img src="https://i.imgur.com/rT6DR1N.png"></p>
<p>由結果可知，array  和 null 也屬於 object 型態，但前面不是說 null 的屬於原始型態嗎？這其實是 JavaScript 的歷史 bug，詳細內容可查閱下方參考資料：</p>
<blockquote>
<p>null 使用 typeof 運算子，回傳的結果會是字串 “object”，這指出 null 可被認為是象徵「無物件」（no object）的一種特殊物件值。（參考資料：<span class="exturl" data-url="aHR0cHM6Ly93d3cudGVubG9uZy5jb20udHcvcHJvZHVjdHMvOTc4OTg2Mjc2NDQxMQ==">犀牛書<i class="fa fa-external-link-alt"></i></span>）</p>
</blockquote>
<blockquote>
<p>這其實是 JavaScript 最初發現的一個錯誤，然後被 ECMAScript 沿用至今。現在，null 被認為是物件的佔位符，從而解釋了這一矛盾。<br>（參考資料：<span class="exturl" data-url="aHR0cHM6Ly9pdGhlbHAuaXRob21lLmNvbS50dy9hcnRpY2xlcy8xMDIwMDg0MQ==">你懂JavaScript 嗎？#4 型別（Types）<i class="fa fa-external-link-alt"></i></span>）</p>
</blockquote>
<p>以下是在 <span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvemgtVFcvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvT3BlcmF0b3JzL3R5cGVvZg==">MDN 網站<i class="fa fa-external-link-alt"></i></span> 列出 typeof 的可能回傳值：</p>
<p><img src="https://4.bp.blogspot.com/-dBndQxibqJ8/V3xngW8lK5I/AAAAAAAAnDU/L5PVWe-8j-gL3vzcA4xMznzsgqq4AcnkACLcB/s1600/1.png"></p>
<h3 id="利用-typeof-確認變數是否有使用到"><a href="#利用-typeof-確認變數是否有使用到" class="headerlink" title="利用 typeof 確認變數是否有使用到"></a>利用 <code>typeof</code> 確認變數是否有使用到</h3><p>我們還可以利用 <code>typeof</code> 來確認某個變數是否有使用到（是否有被宣告），以下列程式碼為例：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> a
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> a<span class="token punctuation">)</span>
<span class="token comment">// 宣告 a 但還沒賦值，所以結果是 undefind</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>若沒有先宣告變數 a，直接使用 <code>typeof</code> 檢查也會得到相同結果：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> a<span class="token punctuation">)</span>
<span class="token comment">// undefind</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>若應用在判斷句，在有宣告變數 a 的情況：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">10</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> a <span class="token operator">!==</span> <span class="token string">'undefined'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">// a = 10，所以印出 10</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>在不宣告變數 a 的情況下，直接利用 <code>typeof</code> 進行判斷：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> a <span class="token operator">!==</span> <span class="token string">'undefined'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">// 因為 a 是 undefined ，不符合判斷句，不會印出任何東西</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>若直接判斷變數 a 是否等於 undefined，就會出現未定義 a 的錯誤：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">!==</span> <span class="token string">'undefined'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">// 因為 a 不存在，會印出錯誤訊息：ReferenceError: a is not defined</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>因此，若使用 typeof() 來判斷 a 是否為 undefined，就能夠避免出現錯誤，導致程式中斷。</p>
<h2 id="Array-isArray-：判斷變數是否為陣列"><a href="#Array-isArray-：判斷變數是否為陣列" class="headerlink" title="Array.isArray()：判斷變數是否為陣列"></a><code>Array.isArray()</code>：判斷變數是否為陣列</h2><p>若想檢查是否為陣列，可使用函式 <code>Array.isArray()</code>，檢查傳入的值是否為一個 Array，範例如下：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment">// true</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment">// true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>但使用時須注意，一些較舊的瀏覽器並不支援 <code>Array.isArray()</code> 這個語法，因此更推薦的方法如下。</p>
<h2 id="Object-prototype-toString：用來判斷型態"><a href="#Object-prototype-toString：用來判斷型態" class="headerlink" title="Object.prototype.toString：用來判斷型態"></a><code>Object.prototype.toString</code>：用來判斷型態</h2><p><code>Object.prototype.toString</code> 是另一種判斷型態的方式，結果也會比 <code>typeof</code> 還要準確，尤其物件型態會顯示更詳細的類別。</p>
<p>語法範例如下：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment">// [object Null]</span>
<span class="token comment">// [object Array]</span>
<span class="token comment">// [object Number]</span>
<span class="token comment">// [object Date]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="等號賦值與記憶體位置"><a href="#等號賦值與記憶體位置" class="headerlink" title="等號賦值與記憶體位置"></a>等號賦值與記憶體位置</h2><p>在課程第二週 JS101 的「<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2hlaWRpbGl1MjAyMC90aGlzLWlzLWNvZGVkaWFyeS9ibG9iL21hc3Rlci93ZWVrMl9KYXZhU2NyaXB0JTIwJUU1JTlGJUJBJUU3JUE0JThFLm1kIyVFNSVCRSU5RS1vYmplY3QtJUU3JTlBJTg0JUU3JUFEJTg5JUU4JTk5JTlGJUU3JTlDJTlGJUU2JUFEJUEzJUU3JTlBJTg0JUU3JTkwJTg2JUU4JUE3JUEzJUU4JUFFJThBJUU2JTk1JUI4">從 Object 的等號真正的理解變數<i class="fa fa-external-link-alt"></i></span>」中我們也曾提到相關概念。</p>
<p>若將變數視為一個箱子，在放入數字的情況下，兩者會相等：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">30</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a <span class="token operator">===</span> <span class="token number">30</span><span class="token punctuation">)</span>
<span class="token comment">// 印出 true，兩者相等</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>但如果在變數 obj 裡放入物件，結果卻是不相等：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  a<span class="token operator">:</span><span class="token number">1</span>
<span class="token punctuation">&#125;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj <span class="token operator">===</span> <span class="token punctuation">&#123;</span>a<span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
<span class="token comment">// 印出 false，兩者不相等</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>可想像成是「記憶體位置不同」導致的結果。儘管兩個箱子儲存的數值相同，但因記憶體位置不同，指向的元素不同，所以不會相等。</p>
<p>如下方示意圖：</p>
<p><img src="https://i.imgur.com/ZAY1PrG.png"></p>
<h3 id="關於-等號賦值"><a href="#關於-等號賦值" class="headerlink" title="關於 = 等號賦值"></a>關於 <code>=</code> 等號賦值</h3><p>如果換成下列情形，也就是將 obj 賦值給 obj2 時：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
    a<span class="token operator">:</span><span class="token number">1</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">var</span> obj2 <span class="token operator">=</span> obj

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj <span class="token operator">===</span> obj2<span class="token punctuation">)</span>        <span class="token comment">// 印出 true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>兩者理所當然會相等，此時若以 <code>obj2.a = 2</code> 更改 obj2 物件中 a 的值，會連同 obj 的值也一起更動：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
    a<span class="token operator">:</span><span class="token number">1</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">var</span> obj2 <span class="token operator">=</span> obj          <span class="token comment">// 賦值</span>
obj2<span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token number">2</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'obj'</span><span class="token punctuation">,</span> obj2<span class="token punctuation">)</span>       <span class="token comment">// obj &#123; a: 2 &#125;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'obj2'</span><span class="token punctuation">,</span> obj2<span class="token punctuation">)</span>      <span class="token comment">// obj2 &#123; a: 2 &#125;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj <span class="token operator">===</span> obj2<span class="token punctuation">)</span>      <span class="token comment">// 印出 true，兩者相等</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>之所以 obj 的值也一起被更改，是因為 obj 和 obj2 指向了相同記憶體位置（0x01），也就是指向同一個物件：</p>
<p><img src="https://i.imgur.com/cgfJMmd.png"></p>
<p>但如果以 <code>obj2 = &#123;b:1&#125;</code> 將 obj2 賦值一個新的物件，此時就會指向一個新的記憶體位置。以下方程式碼為例：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  a<span class="token operator">:</span><span class="token number">1</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">var</span> obj2 <span class="token operator">=</span> obj
obj2<span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token number">2</span>
obj2 <span class="token operator">=</span> <span class="token punctuation">&#123;</span>b<span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">&#125;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'obj'</span><span class="token punctuation">,</span> obj2<span class="token punctuation">)</span>         <span class="token comment">// obj &#123; a: 2 &#125;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'obj2'</span><span class="token punctuation">,</span> obj2<span class="token punctuation">)</span>        <span class="token comment">// obj2 &#123; b: 1 &#125;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj <span class="token operator">===</span> obj2<span class="token punctuation">)</span>        <span class="token comment">// 印出 false，兩者不相等</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>會發現 obj2 和 obj 不相等，這是因為「往裡面放東西」與「改放全新的東西」是兩件完全不同的事情。後者會指向一個新的記憶體，可參考下圖理解：</p>
<p><img src="https://i.imgur.com/JkzALWA.png"></p>
<p>若以陣列為例，會得到相同的結果，以下列程式碼為例：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token keyword">var</span> arr2 <span class="token operator">=</span> arr

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> arr2<span class="token punctuation">)</span>
<span class="token comment">// 印出 [] []</span>
arr2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'arr2'</span><span class="token punctuation">]</span>          <span class="token comment">// 賦值，指向新的記憶體位置</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> arr2<span class="token punctuation">)</span>
<span class="token comment">// 印出 [] ['arr2']</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>賦值後的 arr2 會指向新的記憶體位置，因此兩者的值會不相同，可想像成 <code>arr: 0x10</code> 和 <code>arr: 0x20</code>。 </p>
<h3 id="與-的差別"><a href="#與-的差別" class="headerlink" title="== 與 === 的差別"></a><code>==</code> 與 <code>===</code> 的差別</h3><ul>
<li><code>=</code>：代表賦值</li>
<li><code>==</code> 和 <code>===</code>：均用來判斷是否相等，差別在於是否判斷值的型態。原因是 <code>==</code> 判斷過程會進行型態轉換</li>
</ul>
<blockquote>
<p>結論：盡量使用三個等號進行判斷，如此最能夠避免因型態不同而發生錯誤。</p>
</blockquote>
<p>以下列程式碼為例：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">==</span> <span class="token string">'0'</span><span class="token punctuation">)</span>
<span class="token comment">// true</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">===</span> <span class="token string">'0'</span><span class="token punctuation">)</span>
<span class="token comment">// false，因為數字和字串型態不同</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>再以陣列作為範例：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span>
<span class="token keyword">var</span> arr2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr <span class="token operator">===</span> arr2<span class="token punctuation">)</span>
<span class="token comment">// false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>之所以兩者不會相等，和前面提到的「記憶體位置不同」有關，可想像成：</p>
<pre class="line-numbers language-none"><code class="language-none">0x01: [2]
0x02: [2]

arr: 0x01
arr2: 0x02<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>也因此，不管裡面放相同參數或均為空陣列，兩者都不會相等，一定要加上 <code>arr2 = arr</code> 才會使等號成立。</p>
<p>同理，當我們比較空陣列或空物件時，結果也不會相等，因為比較的是兩者的記憶體位置：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token comment">// false</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> <span class="token operator">===</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
<span class="token comment">// false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="特例：NaN"><a href="#特例：NaN" class="headerlink" title="特例：NaN"></a>特例：NaN</h3><ul>
<li>NaN：Not a Number（無效的數字），型態為 Number</li>
</ul>
<p>在什麼樣的情況下會產生 NaN 呢？以「將字串轉換成 Number」為例，因無法轉換所以會得到 NaN：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token function">Number</span><span class="token punctuation">(</span><span class="token string">'hello'</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>
<span class="token comment">// NaN</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> a<span class="token punctuation">)</span>
<span class="token comment">// number</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>這時如果再以等號進行判斷，結果會是：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token function">Number</span><span class="token punctuation">(</span><span class="token string">'hello'</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a <span class="token operator">===</span> a<span class="token punctuation">)</span>
<span class="token comment">// false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>什麼～～～～～？！同一個變數結果竟然會不相等？！（震驚ing）</p>
</blockquote>
<p>為何會發生自己不等於自己的情況呢？這是因為 <code>NaN === NaN</code> 判斷結果不相等造成，屬於特殊案例。</p>
<p>至於要如何檢視變數是否為 NaN，可使用函式 <code>isNaN()</code>：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token function">Number</span><span class="token punctuation">(</span><span class="token string">'hello'</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">isNaN</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment">// true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<ul>
<li>參考資料：<span class="exturl" data-url="aHR0cHM6Ly9kb3JleS5naXRodWIuaW8vSmF2YVNjcmlwdC1FcXVhbGl0eS1UYWJsZS8=">JS Comparison Table<i class="fa fa-external-link-alt"></i></span></li>
</ul>
<h3 id="let-與-const"><a href="#let-與-const" class="headerlink" title="let 與 const"></a>let 與 const</h3><p>接著談到宣告變數的方式，除了習慣使用的 var（variable 變數），在 ES6  還引入了 let 和 const（constant 常數） 兩種宣告方式。這三者之間最大差別，主要，在於作用域不同，在之後的 Scope 章節會再詳細說明。</p>
<h4 id="const"><a href="#const" class="headerlink" title="const"></a>const</h4><ul>
<li>宣告時就要給初始值</li>
<li>宣告後就不能再改變</li>
</ul>
<p>但我們可以去改變物件 obj 裡面的值，如以下範例：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  number<span class="token operator">:</span> <span class="token number">1</span>
<span class="token punctuation">&#125;</span>

obj<span class="token punctuation">.</span>number <span class="token operator">=</span> <span class="token number">2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>如果直接賦予 obj 新的值，就會出現錯誤：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  number<span class="token operator">:</span> <span class="token number">1</span>
<span class="token punctuation">&#125;</span>

obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>number<span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">&#125;</span>
<span class="token comment">// TypeError: Assignment to constant variable.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>這和前面提到的記憶體位置觀念相同，const 說的不能改變，其實是不能改變「該記憶體位置」。obj 是存記憶體位置，number 則是存 value。也因此賦值給 obj 就代表改變記憶體位置。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token number">0x10</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
number<span class="token operator">:</span> <span class="token number">1</span>
<span class="token punctuation">&#125;</span>
<span class="token number">0x20</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
number<span class="token operator">:</span> <span class="token number">2</span>
<span class="token punctuation">&#125;</span>

obj<span class="token operator">:</span> <span class="token number">0x20</span>
<span class="token comment">// 常數 obj 的記憶體位置被改變，所以出現錯誤</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>參考資料：</p>
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmh1bGkudHcvMjAxOC8wNi8yMy9qYXZhc2NyaXB0LWNhbGwtYnktdmFsdWUtb3ItcmVmZXJlbmNlLw==">深入探討 JavaScript 中的參數傳遞：call by value 還是 reference？<i class="fa fa-external-link-alt"></i></span></li>
</ul>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>[week 12] 前端工具之一 - jQuery 與 Bootstrap</title>
    <url>/jquery-bootstrap/</url>
    <content><![CDATA[<blockquote>
<p>本篇為 <span class="exturl" data-url="aHR0cHM6Ly9saWRlbXkuY29tL3AvZmUyMDE=">[FE201] 前端中階：那些前端會用到的工具們<i class="fa fa-external-link-alt"></i></span> 這門課程的學習筆記。如有錯誤歡迎指正。</p>
</blockquote>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在使用新工具之前，大致會依照下列步驟：</p>
<ol>
<li>安裝工具</li>
<li>閱讀官方文件</li>
<li>更改設定檔<span id="more"></span>
</li>
</ol>
<hr>
<h2 id="jQuery：JS-函式庫"><a href="#jQuery：JS-函式庫" class="headerlink" title="jQuery：JS 函式庫"></a>jQuery：JS 函式庫</h2><p><img src="https://i.imgur.com/KKhdOms.png"></p>
<p><span class="exturl" data-url="aHR0cHM6Ly9qcXVlcnkuY29tLw==">jQuery<i class="fa fa-external-link-alt"></i></span> 是一個 JavaScript 函式庫（Javascipt Framework），是幫助加速網頁程式開發的工具。可解決跨瀏覽器的問題，能夠快速又方面操作 DOM，縮短開發時間與簡化程式碼。</p>
<h3 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h3><p>和引入 JavaScript 方法類似：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"https://code.jquery.com/jquery-3.5.1.js"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h3 id="基本格式"><a href="#基本格式" class="headerlink" title="基本格式"></a>基本格式</h3><p>使用 jQuery 的基本語法如下，意即指派元素到指定的事件：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 選取 `$(selector)` 元素，並指派它進行 `.action()` 事件</span>
<span class="token function">$</span><span class="token punctuation">(</span>selector<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">action</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment">// 範例</span>
<span class="token function">$</span><span class="token punctuation">(</span> <span class="token string">"button.continue"</span> <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span> <span class="token string">"Next Step..."</span> <span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>其中的 <code>$()</code> 符號就是 jQuery 常用的選擇器，善用選擇器可以快速找到網頁當中的物件。</p>
<p>以按鈕 Button 的點擊事件為例：</p>
<h4 id="JavaScript-原生語法"><a href="#JavaScript-原生語法" class="headerlink" title="JavaScript 原生語法"></a>JavaScript 原生語法</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 使用 DOMContentLoaded 或 load 事件，可確保 DOM 結構被完整的讀取跟解析</span>
document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'DOMContentLoaded'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.btn'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'click!'</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>兩者結構其實非常類似，多數情況下 JavaScript 和 jQuery 的語法兩者也能夠混用。</p>
<h4 id="使用-jQuery"><a href="#使用-jQuery" class="headerlink" title="使用 jQuery"></a>使用 jQuery</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// jQuery === $</span>
<span class="token function">$</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ready</span> <span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'.btn'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'click jq!'</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>參考資料：</p>
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vY2FpemhlbmJvL3AvNjY3OTQ3OC5odG1s">DOMContentLoaded與load的區別<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9hcGkuanF1ZXJ5LmNvbS9sb2FkLWV2ZW50LyNsb2FkMQ==">jQuery Core API Documentation<i class="fa fa-external-link-alt"></i></span>：用來查閱官方說明文件</li>
<li><span class="exturl" data-url="aHR0cDovL3lvdW1pZ2h0bm90bmVlZGpxdWVyeS5jb20v">You might not need jQuery<i class="fa fa-external-link-alt"></i></span>：可對照 jQuery 和 JavaScript 的寫法</li>
</ul>
<h3 id="相關語法"><a href="#相關語法" class="headerlink" title="相關語法"></a>相關語法</h3><h4 id="淡入淡出效果"><a href="#淡入淡出效果" class="headerlink" title="淡入淡出效果"></a>淡入淡出效果</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>style<span class="token operator">></span>
  <span class="token punctuation">.</span>box <span class="token punctuation">&#123;</span>
    height<span class="token operator">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>
    width<span class="token operator">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>
    background<span class="token operator">:</span> brown<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>style<span class="token operator">></span>
<span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"https://code.jquery.com/jquery-3.5.1.js"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>

<span class="token operator">&lt;</span>script<span class="token operator">></span>
  <span class="token keyword">var</span> isHide <span class="token operator">=</span> <span class="token boolean">false</span>
  <span class="token function">$</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ready</span> <span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'.btn'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>isHide<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'.box'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fadeIn</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span>    <span class="token comment">// show()</span>
      <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
        <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'.box'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fadeOut</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span>   <span class="token comment">// hide()</span>
      <span class="token punctuation">&#125;</span>
      isHide <span class="token operator">=</span> <span class="token operator">!</span>isHide
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
  <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>
<span class="token operator">&lt;</span>body<span class="token operator">></span>
  <span class="token operator">&lt;</span>button <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"btn"</span><span class="token operator">></span><span class="token constant">I</span> am a button<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>
  <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"box"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
<span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="簡易-todo-list"><a href="#簡易-todo-list" class="headerlink" title="簡易 todo list"></a>簡易 todo list</h4><p>首先建立點擊事件，來拿取 input 欄位輸入的值：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"https://code.jquery.com/jquery-3.5.1.js"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>
<span class="token operator">&lt;</span>script<span class="token operator">></span>
<span class="token function">$</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ready</span> <span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'.btn'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'.todo-input'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 測試是否讀取成功</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>
<span class="token operator">&lt;</span>body<span class="token operator">></span>
  <span class="token operator">&lt;</span>input <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"todo-input"</span> <span class="token operator">/</span><span class="token operator">></span>
  <span class="token operator">&lt;</span>button <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"btn"</span><span class="token operator">></span>Add todo<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>
  <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"todos"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
<span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>再來加入新增 todo 到 todos 的功能：</p>
<ul>
<li><code>prepend()</code>：新增元素到最上面</li>
<li><code>append()</code>：新增元素到最下面</li>
</ul>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>style<span class="token operator">></span>
  <span class="token punctuation">.</span>todo <span class="token punctuation">&#123;</span>
    padding<span class="token operator">:</span> <span class="token number">10</span>px<span class="token punctuation">;</span>
    border<span class="token operator">:</span> <span class="token number">1</span>px solid #eee<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>style<span class="token operator">></span>
<span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"https://code.jquery.com/jquery-3.5.1.js"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>
<span class="token operator">&lt;</span>script<span class="token operator">></span>
  <span class="token function">$</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ready</span> <span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'.btn'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>             <span class="token comment">// 建立點擊事件</span>
      <span class="token keyword">const</span> value <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'.todo-input'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment">// 拿取 value 值</span>
      <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'.todo-input'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span>                <span class="token comment">// 讀取完後清空 input 欄位</span>
      <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'.todos'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">prepend</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;div class="todo"></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>value<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">&lt;/div></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>    <span class="token comment">// 把該元素新增到 todos</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>
<span class="token operator">&lt;</span>body<span class="token operator">></span>
  <span class="token operator">&lt;</span>input <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"todo-input"</span> <span class="token operator">/</span><span class="token operator">></span>
  <span class="token operator">&lt;</span>button <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"btn"</span><span class="token operator">></span>Add todo<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>
  <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"todos"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="ajax"><a href="#ajax" class="headerlink" title="ajax"></a>ajax</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">$<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
  type<span class="token operator">:</span> <span class="token string">"GET"</span><span class="token punctuation">,</span> <span class="token comment">// 指定 method</span>
  url<span class="token operator">:</span> <span class="token string">'ajax/test.html'</span><span class="token punctuation">,</span>
  <span class="token function-variable function">success</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'.result'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'Load was performed.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 取得 HTML: load()</span>
<span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#htmDoc"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token string">"test.html"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 取得 JSON 格式的資料: getJSON()</span>
$<span class="token punctuation">.</span><span class="token function">getJSON</span><span class="token punctuation">(</span><span class="token string">"test.json"</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> idx <span class="token keyword">in</span> data<span class="token punctuation">)</span>  
    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#menu"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"&lt;li>"</span> <span class="token operator">+</span> data<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">"&lt;/li>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  

<span class="token comment">// document ready 事件</span>
<span class="token function">$</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ready</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  
  <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'Hello'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 網頁下載完成後立即執行 alert()</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>參考資料：</p>
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9qdzMxMC5naXRodWIuaW8vMjAyMC8wMS8xNi9qUXVlcnktYmFzZS8jJUU0JUJEJUJGJUU3JTk0JUE4LWpRdWVyeQ==">jQuery 簡單介紹<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9pdGhlbHAuaXRob21lLmNvbS50dy9hcnRpY2xlcy8xMDA5MjU5Mg==">JQuery 筆記 (一) – 淺談 JQuery<i class="fa fa-external-link-alt"></i></span></li>
</ul>
<hr>
<h2 id="Bootstrap：UI-Library"><a href="#Bootstrap：UI-Library" class="headerlink" title="Bootstrap：UI Library"></a>Bootstrap：UI Library</h2><p><span class="exturl" data-url="aHR0cHM6Ly9nZXRib290c3RyYXAuY29tLw==">Bootstrap<i class="fa fa-external-link-alt"></i></span> 是一個由 HTML、CSS 和 JavaScript 寫成的前端框架，內建多項模組化的版型與元件樣式。例如：字體排印、表單、按鈕、導航及其他各種元件及 Javascript 擴充套件。主要用於創建網站和 Web 應用程式，能幫助快速開發響應式網頁。</p>
<p>參考資料：</p>
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly90dy5hbHBoYWNhbXAuY28vYmxvZy9ib290c3RyYXAtNC1pbnRyb2R1Y3Rpb24=">Bootstrap 是什麼？給網頁設計新手的 Bootstrap 4入門教學<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9ib290c3dhdGNoLmNvbS8=">Bootswatch<i class="fa fa-external-link-alt"></i></span>：提供各種經過調整顏色的 Bootstrap 版本，可以套用在已有的 Bootstrap 網站上</li>
</ul>
]]></content>
      <categories>
        <category>Front-End</category>
      </categories>
      <tags>
        <tag>Front-End</tag>
        <tag>jQuery</tag>
        <tag>Bootstrap</tag>
      </tags>
  </entry>
  <entry>
    <title>測試二三事（上）｜還記得你說，要和我寫測試</title>
    <url>/learn-about-testing/</url>
    <content><![CDATA[<p><img src="/images/pasted-2.png" alt="upload successful"></p>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>過去在程式導師實驗課程中，整理過這兩篇筆記探討「測試」是怎麼回事：</p>
<ul>
<li><a href="https://heidiliu2020.github.io/javascript-jest/">[week 3] 初探 Jest：如何測試程式？</a></li>
<li><a href="https://heidiliu2020.github.io/react-test/">[week 22] React：用 SPA 架構實作一個部落格（三）- 淺談測試</a></li>
</ul>
<p>在轉職後的第一家公司，組內曾嘗試在既有專案中撰寫測試，卻因時程緊湊而不了了之。但或許是一聽到測試就浮現「好麻煩⋯⋯」的想法吧？與其花這個時間去寫程式來進行測試，還不如多修幾個 BUG 來得有效益，打從心底想逃避這件事情，只覺得測試是理想，讓這項 TODO 一直被延宕。</p>
<span id="more"></span>

<p>而在求職過程中，時常被問是否有過測試經驗；到了現在第二間公司，寫測試這議題又再次浮現。回想起過去在專案中，時不時發生「改 A 壞 B」 的情況，如果透過測試來事先預期結果，或許就能減少這類錯誤的發生。</p>
<p>於是乎，這篇文章就誕生了ಠ_ಠ </p>
<p>在實作過程中，試著統整過去所學並且記錄下來，文章大致會分成四個段落，在正式介紹 Cypress 這套測試框架之前，會先在上篇補充測試相關的知識：</p>
<ul>
<li>Why we need test?</li>
<li>What is Testing?</li>
<li>Why Cypress?</li>
<li>How to start?</li>
</ul>
<p>那麼就開始吧！</p>
<h2 id="Why-we-need-test"><a href="#Why-we-need-test" class="headerlink" title="Why we need test?"></a>Why we need test?</h2><p>所以說，為何我們需要測試？</p>
<p>誠如前言提到，透過測試我們能夠先預期結果，找出非預期的錯誤情境。在轉體開發過程中，隨著需求日漸複雜化，多人協作開發不易維護，再加上時程壓力，若沒有制定流程規範，實在很難透過手動測試一次到位。</p>
<p>讓自動化測試取代人工測試，除了能降低成本，也有助於快速驗證程式是否能正常運作，並透過測試報告找出問題所在，不至於在茫茫程式海中迷失方向。</p>
<p>總歸而言，測試能夠確保程式碼的可靠性，避免人為錯誤，提升程式碼的質量、重用性與可維護性。</p>
<h2 id="What-is-Testing"><a href="#What-is-Testing" class="headerlink" title="What is Testing?"></a>What is Testing?</h2><p>說了這麼多，到底怎樣才是測試呢？</p>
<p>從我們最熟悉的人工測試，到寫程式來測試程式，其實都是基於同樣的道理：「測試是藉由程式來模擬現實，比較『預期結果』和『實際結果』是否相同的過程」。</p>
<h3 id="自動化測試金字塔-Test-Automation-Pyramid"><a href="#自動化測試金字塔-Test-Automation-Pyramid" class="headerlink" title="自動化測試金字塔 Test Automation Pyramid"></a>自動化測試金字塔 Test Automation Pyramid</h3><p>簡單來說，測試依規模大致可分成三個層次，構成自動化測試金字塔，如下圖所示：</p>
<p><img src="https://i.imgur.com/L9sS6uH.png"></p>
<blockquote>
<p><span class="exturl" data-url="aHR0cHM6Ly9hdXRvbWF0aW9ucGFuZGEuY29tLzIwMTgvMDgvMDEvdGhlLXRlc3RpbmctcHlyYW1pZC8=">Automation Panda<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
<p>在測試金字塔中，越靠上方所耗費成本越高、執行時間越長；反之，越靠底下所耗費成本低，執行時間越短。</p>
<p>而依照測試方法不同，又可分為黑箱測試與白箱測試：</p>
<ul>
<li>黑箱測試（Black-box Testing）/ 功能測試<ul>
<li>以使用者的角度，針對程式的功能面進行測試</li>
<li>應用於整合測試和系統測試</li>
<li>舉例：在表格欄位輸入錯誤的資料格式，檢測系統是否存在漏洞</li>
</ul>
</li>
<li>白箱測試（White-box Testing）/ 結構測試<ul>
<li>以程式語言的角度，測試內部結構或流程</li>
<li>應用於單元測試</li>
<li>舉例：使用訂單系統，依使用者的情境模擬操作</li>
</ul>
</li>
</ul>
<p><img src="https://i.imgur.com/ymjyD7I.png"></p>
<h3 id="單元測試-Unit-Testing"><a href="#單元測試-Unit-Testing" class="headerlink" title="單元測試 Unit Testing"></a>單元測試 Unit Testing</h3><ul>
<li>以程式碼的最小單位（function、method 等）進行測試，也是自動測試化的基礎</li>
<li>驗證單一行為、執行快速、具獨立性</li>
<li>常用套件：<span class="exturl" data-url="aHR0cHM6Ly9qZXN0anMuaW8v">Jest<i class="fa fa-external-link-alt"></i></span>、<span class="exturl" data-url="aHR0cHM6Ly9tb2NoYWpzLm9yZy8=">mochajs<i class="fa fa-external-link-alt"></i></span> &amp; <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2NoYWlqcy9jaGFp">chai<i class="fa fa-external-link-alt"></i></span></li>
<li>常見開發模式：TDD &amp; BDD</li>
</ul>
<p>這裡介紹兩種與單元測試（Unit Test）相關的開發流程：</p>
<ul>
<li><strong>TDD（Test-Deriven Development）測試驅動開發</strong><ul>
<li>先寫測試，後實作功能</li>
<li>專注功能的實現</li>
<li>開發流程會在「單元測試 ⇒ 撰寫能通過測試的程式碼 ⇒ 重構」三者之間循環</li>
</ul>
</li>
<li><strong>BDD （Behavior-Deriven Development）行為驅動開發</strong><ul>
<li>為 TDD 的進化版，但會先寫測試規格書，再寫測試，後實作功能</li>
<li>專注系統的行為，較貼近使用者的角度進行測試</li>
<li>使用 <code>describe()</code> 和 <code>it()</code> 需求為導向的設計語意化<img src="https://i.imgur.com/8NgSbPj.png">  </li>
</ul>
</li>
</ul>
<h3 id="整合測試-Integration-Testing"><a href="#整合測試-Integration-Testing" class="headerlink" title="整合測試 Integration Testing"></a>整合測試 Integration Testing</h3><ul>
<li>整合兩個以上的元件（Component）或模組（Module）之間的互動測試</li>
<li>使用 Mock Data 模擬 Mock API 回傳內容，檢測 render DOM 是否呈現預期結果</li>
<li>常用套件：<span class="exturl" data-url="aHR0cHM6Ly9hbmd1bGFyLmlvL2FwaS9jb3JlL3Rlc3RpbmcvVGVzdEJlZA==">TestBed<i class="fa fa-external-link-alt"></i></span>、<span class="exturl" data-url="aHR0cHM6Ly90ZXN0aW5nLWxpYnJhcnkuY29tLw==">Testing Library<i class="fa fa-external-link-alt"></i></span>、<span class="exturl" data-url="aHR0cHM6Ly9lbnp5bWVqcy5naXRodWIuaW8vZW56eW1lLw==">Enzyme<i class="fa fa-external-link-alt"></i></span></li>
</ul>
<p>為什麼需要整合測試？單元測試都通過不就代表都 OK 了？下圖提供非常好的例子：</p>
<p><img src="https://i.imgur.com/H30Yzer.gif"></p>
<blockquote>
<p>門鎖 OK、開關門 OK、鎖門？？</p>
</blockquote>
<p>根據不同情境所需，有時即使單元測試沒測出問題，一旦跨模組整合就出事了，因此這個階段更重視不同元件或環境之間的整合互動，也更貼近使用者實際行為。</p>
<h3 id="端對端測試-End-to-end-Testing-E2E-Testing"><a href="#端對端測試-End-to-end-Testing-E2E-Testing" class="headerlink" title="端對端測試 End-to-end Testing / E2E Testing"></a>端對端測試 End-to-end Testing / E2E Testing</h3><ul>
<li>會運行一個瀏覽器，藉由模擬使用者操作，將手動測試轉變成程式碼自動執行</li>
<li>是對真實系統進行的測試，較費時且維護成本高</li>
<li>常用套件：<span class="exturl" data-url="aHR0cHM6Ly93d3cuY3lwcmVzcy5pby8=">Cypress、<i class="fa fa-external-link-alt"></i></span><span class="exturl" data-url="aHR0cHM6Ly9uaWdodHdhdGNoanMub3JnLw==">Nightwatch<i class="fa fa-external-link-alt"></i></span>、<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3B1cHBldGVlci9wdXBwZXRlZXI=">Puppeteer<i class="fa fa-external-link-alt"></i></span>、<span class="exturl" data-url="aHR0cHM6Ly93d3cucHJvdHJhY3RvcnRlc3Qub3JnLw==">Protractor<i class="fa fa-external-link-alt"></i></span>（<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2FuZ3VsYXIvcHJvdHJhY3Rvci9pc3N1ZXMvNTUwMg==">Angular v12 後棄用，不再內建於新專案中<i class="fa fa-external-link-alt"></i></span>）</li>
</ul>
<p>如下所示，為 Cypress 使用範例，能夠看到使用者實際操作頁面的過程：</p>
<p><img src="https://i.imgur.com/GzISa0E.gif"></p>
<blockquote>
<p><span class="exturl" data-url="aHR0cHM6Ly9kb2NzLmN5cHJlc3MuaW8vZ3VpZGVzL3Rvb2xpbmcvdmlzdWFsLXRlc3Rpbmc=">Visual Testing | Cypress Documentation<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
<h2 id="Consolusion"><a href="#Consolusion" class="headerlink" title="Consolusion"></a>Consolusion</h2><p>雖說寫測試很重要，但並非寫好寫滿就是最好作法，畢竟需求情境百百種，仍需考慮使用時機與情境，才不會本末導致，花費更多時間維護測試腳本。</p>
<p>透過撰寫測試，<del>強迫</del>讓開發者寫出容易被測試的程式碼，並在有限的資源中，以有效的測試來確保程式的品質。</p>
<p>然而，這些測試的道理我都懂，但到底該如何開始呢？下篇會繼續探討，如何透過 Cypress 這套工具進行 E2E Testing，並且實際應用到專案中！</p>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLm1pbmlhc3AuY29tL3Bvc3QvMjAxOS8wMi8xOC9Vbml0LXRlc3RpbmctSW50ZWdyYXRpb24tdGVzdGluZy1lMmUtdGVzdGluZw==">一次搞懂單元測試、整合測試、端對端測試之間的差異 | The Will Will Web<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9wamNoZW5kZXIuZGV2L3dlYmRldi93ZWItdGVzdGluZy8=">[web] 程式是人寫出來的，測試也是| PJCHENder 未整理筆記<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9pdGhlbHAuaXRob21lLmNvbS50dy91c2Vycy8yMDA5MDcyOC9pcm9ubWFuLzM4ODE=">Angular 深入淺出三十天：表單與測試系列 - iT 邦幫忙<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmFtb3d1LmNvbS9jeXByZXNzLW9uLXJhaWxzLw==">Hahow for Business 如何跑E2E 測試？ - Amo’s Blog<i class="fa fa-external-link-alt"></i></span></li>
</ul>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>Testing</tag>
      </tags>
  </entry>
  <entry>
    <title>常見重點整理 - 命名慣例 &amp; 開發時注意事項</title>
    <url>/lidemy-common-examples/</url>
    <content><![CDATA[<ul>
<li>參考資料：<br><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0xpZGVteS9tZW50b3ItcHJvZ3JhbS00dGgvYmxvYi9tYXN0ZXIvZXhhbXBsZXMvY29tbW9uLm1k">https://github.com/Lidemy/mentor-program-4th/blob/master/examples/common.md<i class="fa fa-external-link-alt"></i></span><span id="more"></span>

</li>
</ul>
<h2 id="什麼是好的-code？"><a href="#什麼是好的-code？" class="headerlink" title="什麼是好的 code？"></a>什麼是好的 code？</h2><ol>
<li>符合命名慣例以及命名一致性</li>
<li>合理的變數名稱</li>
</ol>
<h2 id="三種常見的命名慣例"><a href="#三種常見的命名慣例" class="headerlink" title="三種常見的命名慣例"></a>三種常見的命名慣例</h2><h3 id="駝峰式命名（Camel-case）"><a href="#駝峰式命名（Camel-case）" class="headerlink" title="駝峰式命名（Camel case）"></a>駝峰式命名（Camel case）</h3><ul>
<li>就像駝峰會一高一低</li>
<li>單字之間不空格，而是直接連起來，但是連起來的第一個字要大寫</li>
<li>例如：有一個 handle add post 的 function，就會叫做 handleAddPost</li>
</ul>
<p>駝峰又有分兩種：</p>
<ol>
<li>小駝峰（lower camel case）：開頭是小寫，就像上面的範例 handleAddPost</li>
<li>大駝峰（upper camel case）：又被稱為 Pascal Case。開頭變成大寫，也就會變成 HandleAddPost</li>
</ol>
<h3 id="蛇型命名（Snake-case）"><a href="#蛇型命名（Snake-case）" class="headerlink" title="蛇型命名（Snake case）"></a>蛇型命名（Snake case）</h3><ul>
<li>蛇就是底線的意思，利用底線來連接單字，然後全部都是小寫</li>
<li>同上述範例，會變成：handle_add_post</li>
</ul>
<h3 id="烤肉串命名（Kebab-case）"><a href="#烤肉串命名（Kebab-case）" class="headerlink" title="烤肉串命名（Kebab case）"></a>烤肉串命名（Kebab case）</h3><ul>
<li>Kebab 是烤肉串的意思，<code>-</code> 符號看起來就像那跟棍子</li>
<li>同上述範例，會變成：handle-add-post</li>
</ul>
<p>認識這三種常見的命名慣例以及名詞之後，接著要來熟悉不同地方的命名慣例。也就是說，不同程式語言或是不同環境，使用的命名慣例也可能會不一樣。</p>
<p>需注意的是，命名慣例雖然沒有強制性，但開發時基本上都會依照這套慣例，避免寫出他人認為不好的 code。</p>
<h2 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h2><p>在 JavaScript 中，不管是 function 或變數，習慣使用 lower camel case，也就是 <code>handleAddPost</code>。</p>
<p>在特殊情況下，可以使用大寫駝峰式，例如：</p>
<ol>
<li>XMLHttpRequest</li>
<li>Number</li>
<li>Set</li>
</ol>
<p>這些變數可以算是物件導向中的 class，因此習慣以大寫開頭。而 React 中的 也同樣會使用大寫開頭方式命名。</p>
<h3 id="常數"><a href="#常數" class="headerlink" title="常數"></a>常數</h3><ul>
<li>常數具有不變的特性，通常以 snake case + 全大寫來命名</li>
<li>例如：圓周率 PI，就會是 <code>Math.PI</code>；或是 client id 會寫成 CLIENT_ID</li>
</ul>
<h2 id="資料庫-table-與欄位"><a href="#資料庫-table-與欄位" class="headerlink" title="資料庫 table 與欄位"></a>資料庫 table 與欄位</h2><ul>
<li>資料庫以 snake case 命名為主</li>
<li>table 名稱的慣例是複數，所以使用者資料會叫做 users</li>
<li>欄位名稱同樣是 snake case，以建立時間為例：created_at</li>
</ul>
<h2 id="Url"><a href="#Url" class="headerlink" title="Url"></a>Url</h2><p>snake case 或 kebab case 這兩種慣例都蠻常見的，可能會長這樣：</p>
<ol>
<li>handle_add_post</li>
<li>handle-add-post</li>
</ol>
<h2 id="變數命名"><a href="#變數命名" class="headerlink" title="變數命名"></a>變數命名</h2><ul>
<li>大原則：不確定縮寫或簡稱時，就乖乖寫好寫滿<ul>
<li>例如：event handler 傳進來的參數 event，常見的簡寫就是 evt 或是 e</li>
</ul>
</li>
<li>function 通常搭配動詞開頭，get 和 set 就是常見動詞。例如 getGames 或是 getStreams，setName 或是 setTitle</li>
</ul>
<h2 id="程式碼排版"><a href="#程式碼排版" class="headerlink" title="程式碼排版"></a>程式碼排版</h2><p>例如統一空兩格，可透過調整編輯器設定，上傳到 GitHub 後要確認過沒有跑版問題。</p>
<hr>
<h2 id="資訊安全"><a href="#資訊安全" class="headerlink" title="資訊安全"></a>資訊安全</h2><ol>
<li>程式碼都是公開的：後台管理界面一定要做驗證，才能進行權限管理</li>
<li>不要存著僥倖心態：永遠都預設把你要輸出的東西做編碼（例如：跳脫）以後才輸出，而不是直接輸出，就可以避免掉很多的 XSS 攻擊。</li>
</ol>
<h2 id="前端檢查-vs-後端檢查"><a href="#前端檢查-vs-後端檢查" class="headerlink" title="前端檢查 vs 後端檢查"></a>前端檢查 vs 後端檢查</h2><p>前端做資料檢查，只是為了增進使用者體驗，後端做資料檢查才是真的檢查。</p>
]]></content>
      <categories>
        <category>Note</category>
      </categories>
      <tags>
        <tag>Front-End</tag>
        <tag>JavaScript</tag>
        <tag>lidemy</tag>
        <tag>Naming Conventions</tag>
      </tags>
  </entry>
  <entry>
    <title>【中場心得】半年過去了，我仍在學習程式的路上（上篇）</title>
    <url>/lidemy-learing-1/</url>
    <content><![CDATA[<p><img src="https://i.imgur.com/YLhLtnT.png"><br>（Photo by <span class="exturl" data-url="aHR0cHM6Ly91bnNwbGFzaC5jb20vQGZveHhtZA==">Matt Duncan<i class="fa fa-external-link-alt"></i></span> on <span class="exturl" data-url="aHR0cHM6Ly91bnNwbGFzaC5jb20v">Unsplash<i class="fa fa-external-link-alt"></i></span>）</p>
<span id="more"></span>

<blockquote>
<p>“Never regret. If it’s good, it’s wonderful. If it’s bad, it’s experience. “ — Victoria Holt.</p>
</blockquote>
<p><span class="exturl" data-url="aHR0cHM6Ly9qdGxpdS5tZWRpdW0uY29tLyVFNCVCOCVBRCVFNSVBMCVCNCVFNSVCRiU4MyVFNSVCRSU5Ny0lRTUlOEQlOEElRTUlQjklQjQlRTklODElOEUlRTUlOEUlQkIlRTQlQkElODYtJUU2JTg4JTkxJUU0JUJCJThEJUU1JTlDJUE4JUU1JUFEJUI4JUU3JUJGJTkyJUU3JUE4JThCJUU1JUJDJThGJUU3JTlBJTg0JUU4JUI3JUFGJUU0JUI4JThBLSVFNCVCOCU4QSVFNyVBRiU4Ny02ZWMzMzlkOTAzMjY=">Medium 連結<i class="fa fa-external-link-alt"></i></span></p>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>從六月初開始，參加第四期程式導師計畫以來，這段日子過得飛快，轉眼間一個禮拜又過去，自己也迎來了課程中場。其實這篇心得早該在計畫第一百天、或是滿三個月那時候生出來，雖然每天都還是有持續寫進度報告，但覺得是時候來總結學習至今的想法。</p>
<p>然而卻遲遲未動筆，卡在構思階段不知該從而說起，想著想著一天天就這麼過去，所謂的心得文當然也一直停留在腦中。即便如此，仍時常思考自己究竟想記錄些什麼，省思自己是否有所成長，觀察到學習態度上的轉變，或是想要留些什麼給未來的自己。</p>
<p>直到完成第十四週的網站部署，準備邁入十五週的第三個複習週和十六週的前端中階課程。驚覺到，原來我已經走完成課程的一半了啊！相較於最初連 JavaScript 和 Java 都傻傻分不清楚的自己，現在已經能熟捻操作 CLI 介面，瞭解該如何串接 API 和呼叫 function，或是探究工具或指令背後的意義，想想也真是不可思議。</p>
<p>畢竟在未來某天，一定還是會需要回顧這段路程，倒不如趁記憶還清晰的時候記錄下來，於是這篇中場心得就誕生了。</p>
<p>文章大綱如下，會分為上下兩篇，而本篇為前半部分：</p>
<ul>
<li>萬事必有起因</li>
<li>關於那些沒能選擇的過去</li>
<li>如夢似幻的那一年</li>
<li>值得不值得</li>
<li>失而復得的熱情</li>
<li>恐懼的背後什麼都沒有</li>
<li>找到適合自己的方式</li>
<li>慢慢變成理想中的樣子</li>
</ul>
<p>前半段會比較偏向過去的學習經歷，因為每個人都是獨立的個體，可能會不太具有參考價值，只是想要好好回顧一路走來，自己對於學習上心態的轉變。</p>
<p>後半段才會慢慢切入主題，也就是開始程式導師計畫以後的種種心得，覺得要討論的方向不太相同，因此分上下兩篇記錄。</p>
<p>那麼，以下就是一些關於過去學習的思路歷程。</p>
<hr>
<h2 id="萬事必有起因"><a href="#萬事必有起因" class="headerlink" title="萬事必有起因"></a>萬事必有起因</h2><blockquote>
<p>「為什麼會想學寫程式？」</p>
</blockquote>
<p>這想必會成為日後求職面試的必考題吧？</p>
<p>對我來說，「學程式」這件事或許不能完全說是一時興起，而是當初經歷的種種事情，似乎最後都導向「我要成為工程師」這個答案。</p>
<p>但其實有更重要的原因，來自於求學過程中遭遇的種種挫敗，讓自己害怕學新知識這件事，也讓我成為一個很沒有自信的一個人。這樣的我，還有從頭來過的機會嗎？</p>
<p>曾經連續兩次指考物理成績都不及格，也曾被當過微積分，這樣的我真的有辦法寫程式嗎？已經在大學時期失敗過的我，真的還有辦法轉換跑道嗎？老實說，這些問題直到現在都沒有答案。</p>
<p>唯一能夠確信的，就是如果不嘗試「開始」，永遠都不會知曉自己適合不適合。</p>
<h2 id="關於那些沒能選擇的過去"><a href="#關於那些沒能選擇的過去" class="headerlink" title="關於那些沒能選擇的過去"></a>關於那些沒能選擇的過去</h2><p>想回頭談談自己的成長過程，其實也不是多光彩的故事，因為求學過程曾帶給我深深的傷口。即便有令人稱羨的國立大學學歷，因學歷獲得種種機會的同時，卻也不斷被加上無形的壓力，被貼上的標籤彷彿一把雙面刃在折磨著我，直到現在都是。</p>
<p>但那些選擇其實都是自己造成的，自己也必須去承擔選擇的後果，即使事後後悔再多，聽起來都像是滿滿的藉口吧。</p>
<p>在求學過程，總是有意無意或天意，讓我避開最想要的選項，我很害怕自己沒辦法達到最好的結果，害怕自己要是做出選擇了，卻沒有拿出相對應的成績時，那我該怎麼辦才好？</p>
<p>小學時的自己，可以很自豪地說出自己沒有補習，在段考前還可以賴在電腦前組對打鯨魚王，無憂無慮。國中後開始踏入補習班，還記得自己曾經翹掉補習直接逃回家過，即使只有短短幾天，仍忘不了那段重拾自由的快樂。雖然後來還是被導師給帶回去了，回到所謂的「正軌」，或許這也是日後種種事情的跡象吧。</p>
<p>國中升高中那年的基測，我永遠記得 399 這個數字，考了兩次都是一樣的分數，又因為作文成績被刷掉，踏入了第二志願。直到升上高中大學，所謂的「優等生」光環褪去後，便深深對自己的平凡感到無能為力。</p>
<p>高中時雖然加入了吉他社，到高二因為害怕組團而成為幽靈社員。之後卻也沒有比較用功讀書，大考後驚覺自己竟荒廢了學業，甚至還成為了重考生，只為了能夠進入夢想中的那所大學。</p>
<p>明明比較喜歡動物和日文，卻因為分數有到就選校不選系，填了農業相關科系。大二選組別時，因為對自己的設計能力沒有足夠信心，放棄當初更想選的景觀設計組。直在大三實習寫專題後，才發現自己根本就不想走這行。</p>
<p>我的人生好像充滿了藉口，明明不夠努力，卻又不服輸，徒有那無謂的自尊心。好像一旦考試考輸了，就只能全盤否定自己。</p>
<p>好想要逃離這一切，想到一個新的地方重新開始。這時候我，想起了大三開始選修的日文課，或許那是我第一次自己選擇想要學習的東西，畢業前也靠著繼續自學考到了 N2 程度。</p>
<p>「這一次，我要為自己的人生做主！」那時的我是如此天真的認為，只要能逃離現在身處的環境，自己對未來一定會有更不一樣的答案。</p>
<p>然而殘酷的現實是，如果你不知道自己為什麼要出走，該往哪個方向找尋答案，那些問題最後還是會原封不動的回到你身邊</p>
<h2 id="如夢似幻的那一年"><a href="#如夢似幻的那一年" class="headerlink" title="如夢似幻的那一年"></a>如夢似幻的那一年</h2><p>於是畢業後，我選擇前往日本打工度假一年。其實早在大二暑假那年，我就曾經獨自一年到日本愛知縣打工換宿，回想起當時的自己還根本不會說幾個日文單字，連網路卡都沒辦，就懵懵懂懂來到了鄉下小鎮。</p>
<p>當時的自己，喜歡像這樣在異地生活的感覺，終於來到朝思暮想的國度，即使在日生活並不完全美好，還是會有不好的一面，對自己來說卻甘之如飴，每段回憶都值得收藏在心底。能夠一切從零開始，沒有負擔，只需專心投入在當下的事物，似乎也就足夠。又或許，只是單純想稍微逃離原本讓自己喘不過氣的環境吧？</p>
<p>直到畢業後，我帶著大學打工一點一點存下的資金，再度來到了日本。</p>
<p>前半年仍沉浸在一切歸零的新鮮感，卻不知曾幾何時，當初那份熱情也悄悄淡去。說來有點難為情，之所以在畢業前就下定決心要前往日本，一部份是想重新開始，另一個原因，其實是因為在重考那一年，入了某偶像團體的坑，想著一定要完成參加演唱會的願望。然而這個願望卻沒有實現，在我終於赴日以前，喜歡的成員就畢業了。</p>
<p>也才明白「推しは推せるときに推せ（能支持喜歡的人的時候全力支持）」這句話的涵義，古人總說要及時行樂不是沒有道理。對於任何事情都是如此，想到的話就去做，寧可做出選擇再來後悔，也不要後悔當初自己沒有去做，藉由這段經驗讓我深切體會到。</p>
<p>總之，喪失動力來源的自己，雖然還是很喜歡日本，卻也似乎快要忘記自己為何這麼想來日本。也是在這時候，我才意識到「將活著的動力建立在他人身上」其實是件很危險的事情。信仰可以催化自己的人生，卻不能成為生命的氧氣，還是要靠自己找到能夠往前邁進的動力。</p>
<p>在這一年，還發生另一件大事，其實是在赴日半年左右，家裡大長輩住院了，並且情況不太樂觀。得知訊息後的自己，馬上訂了兩三禮拜之後的班機飛回臺灣。</p>
<p>對、至今我仍記得非常清楚，為什麼自己不是趕在一星期內回來呢？就為了省那該死的幾千塊票錢——我沒有見到外婆最後一面，而是在下飛機一得知消息後就直奔殯儀館……。</p>
<p>這件事情帶給了我很沉、很重的打擊。待在台灣的那一個禮拜，幾乎每個晚上我都是哭著入睡，想起記憶中外婆的身影、想到逐漸年邁的家人，思考自己究竟為了什麼要待在日本、思考充滿迷惘的未來。</p>
<hr>
<h2 id="值得不值得"><a href="#值得不值得" class="headerlink" title="值得不值得"></a>值得不值得</h2><p>結束打工度假後，我回到了臺灣。</p>
<p>先是在學校做了幾個月的行政助理，一邊思考自己是否要報考公職。過著朝九晚五的規律生活的同時，我想起長輩總會把「考公職」這件事掛在嘴邊，以前或許是叛逆吧？一聽到這三個字就感到頭痛，為什麼要擅自決定我的將來？</p>
<p>但長輩說的話其實也有他的道理在。老實說，這樣的日子確實很平穩，收入也穩定，一定有更適合這份工作的人在。並不是說這份工作不好，只是，覺得自己似乎還是不適合做行政庶務，難道人生就只能這樣了嗎？想要找到自己能夠投注一輩子心血的事物，就像當初在大學時期，看到周遭熱衷於討論學術觀念的同學們，那對充滿求知慾的眼神一樣。</p>
<p>當初的自己，思考了許多未來可能的道路。例如航空業、餐飲服務業、準備調查員考試、繼續求學，那年甚至因為喜歡上看舞台劇，做著去專門學校的美夢，或著是想為了實現留學夢準備申請別科。</p>
<p>但因為求學時期的種種挫折，當時只覺得自己或許不應該先繼續學習，而是直接踏入職場。總之先去日本賺錢吧？之後如果想繼續求學，也能夠有足夠的資金支付學費，不會造成家裡的負擔。因為這個想法，開始尋找能夠赴日工作的機會。</p>
<p>後來經過面試，因緣際會，我進入一家做電子書相關的日商擔任專案助理，也就是負責當日文窗口，負責翻譯文件等等，一方面累積工作經驗，一方面等待著時機。其實就在段期間，公司老闆曾問過我想不想學習程式，「很想！」這個答案不假思索便脫口而出，但其實我內心是害怕的，一次次的失敗經驗讓我卻步。</p>
<p>後來這件事也就不了了之，或許是因為，先前自己曾表明想趕快到日本工作吧？現在回想起來，要是當初能夠耐住性子，好好重新打磨自己，未來是否會更不一樣呢？然而沒有如果，錯過了就是錯過了，我們能做的就只是把握當下而已。</p>
<p>再經過幾個月，在一次日本徵才會上，我找到一份能夠赴日的工作，是餐飲服務業相關，簡言之就是到日本當儲備幹部，後來經過重重面試後也幸運被選上。然而，等待簽證的時間其實十分漫長，這段期間，我仍舊非常迷惘，即使這是當初自己的選擇，卻總覺得還是有那麼點不甘心，我是否應該還能有更好的選擇？</p>
<p>腦中總會不時想起，當初在日商工作時，老闆在我離職那天對我說的話：「你要好好想清楚，該如何提升自己的價值，你值得更好的選擇。」然而，當時的我並沒有把這句話放在心上。</p>
<p>等到簽證終於下來，很快的經過一番準備作業，敲定好赴日時程的時候——那時正好是今年三月，也就是疫情整個炸開的時候。當時的自己其實沒有太多時間猶豫，到底去或不去？這份工作值得冒這麼大的風險嗎？或許詢問一百個親友會有九十九個說不吧？的確，得到的回答不外乎是：「自己的健康更重要，工作機會再找就有。」、「當作累積經驗很好，但現在不是出國的好時機。」其實這些道理自己心底也都明白，只是當下沒辦法立即做出選擇。</p>
<p>不管如何，在出發的前一天，我辭退了這份工作。後悔嗎？好像也還好，反而一直懸在內心的那塊大石終於能夠放下。值得嗎？至少現在的我，很慶幸自己後來選擇了現在這條路，儘管我還沒有實際踏入這個領域，仍在為了獲得那張入場票而努力著。</p>
<p>也就是從今年三月底左右，我開始嘗試自學寫程式這件事。</p>
<p>最後稍微總結這篇，想談的其實就是下列幾點：</p>
<ul>
<li>如果不嘗試開始，永遠都不會知曉自己適不適合</li>
<li>面對問題，有時候「逃離」也是一種方法，但你仍要不斷思考下次再遇到時該如何面對它</li>
<li>將自己活著的價值建立在他人身上，其實是很危險的事情。</li>
<li>想到什麼就去做，寧可做出選擇再來後悔，也不要後悔當初自己沒有去做</li>
<li>人生沒有如果，能做的事就是把握當下</li>
</ul>
<h2 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h2><p>其實上篇寫得差不多以後，一直很猶豫要不要發出來，總覺得這些經歷對他人而言，應該是不太重要的事情，也一度想把整篇砍掉，乾脆直接敘述有關目前學習程式的感想就好，不需要把過去的經歷挖出來。但這段過程對自己來說似乎是必要的過程，把過去的種種黑暗面給攤出來，也是不想再讓自己陷入過去的迴圈。</p>
<p>比起這些過去，更重要的是現在。但正因為經歷了這些過去，才會有今天的自己，這是誰也無法改變的事實。也因為有這些不光彩的過去，才能讓我終於醒悟，原來從以前到現在，自己都是有選擇的，而自己也必須去承擔那些選擇的後果。</p>
<p>其實我覺得很幸運，生長在一個能夠讓我自由探索未來的家庭。儘管我的人生不斷在繞遠路，仍舊對生命徬徨，卻還是能感受到家人的支持，對此總有說不完的感激。想要回報他們，也更加堅定自己想在這條路走下去的想法。</p>
<p>現在想想，過去經歷的這些其實好像也沒什麼了，至少現在的我找到了想繼續努力的目標，而我也正朝那個方向前進著。</p>
]]></content>
      <categories>
        <category>lidemy</category>
      </categories>
      <tags>
        <tag>lidemy</tag>
      </tags>
  </entry>
  <entry>
    <title>[week 13] MTR04 - 實作留言版 plugin</title>
    <url>/mtr04-plugin/</url>
    <content><![CDATA[<blockquote>
<p>本篇為 <span class="exturl" data-url="aHR0cHM6Ly9saWRlbXkuY29tL3AvbXRyMDQ=">[MTR04] 第十三週 - 帶著做留言版 plugin<i class="fa fa-external-link-alt"></i></span> 的學習筆記。如有錯誤歡迎指正。</p>
</blockquote>
<h2 id="前置作業"><a href="#前置作業" class="headerlink" title="前置作業"></a>前置作業</h2><p>需安裝好 webpack 以及其他套件，可跟著官方教學步驟 <span class="exturl" data-url="aHR0cHM6Ly93ZWJwYWNrLmpzLm9yZy9ndWlkZXMvZ2V0dGluZy1zdGFydGVkLw==">Getting Started<i class="fa fa-external-link-alt"></i></span> 進行安裝：</p>
<pre class="line-numbers language-none"><code class="language-none">mkdir webpack-demo
cd webpack-demo
npm init -y
npm install webpack webpack-cli --save-dev<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<span id="more"></span>
<h4 id="安裝使用-jquery"><a href="#安裝使用-jquery" class="headerlink" title="安裝使用 jquery"></a>安裝使用 jquery</h4><pre class="line-numbers language-none"><code class="language-none">npm install jquery webpack-cli --save-dev<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h4 id="安裝-babel-loader"><a href="#安裝-babel-loader" class="headerlink" title="安裝 babel-loader"></a>安裝 babel-loader</h4><pre class="line-numbers language-none"><code class="language-none">npm install -D babel-loader @babel&#x2F;core @babel&#x2F;preset-env<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h2 id="目標：建立留言版-plugin"><a href="#目標：建立留言版-plugin" class="headerlink" title="目標：建立留言版 plugin"></a>目標：建立留言版 plugin</h2><p>也就是修改 week12 實作的留言版，將 index.html 中的內容全部以 JavaScript 形式匯入。</p>
<h3 id="步驟一：init-初始化"><a href="#步驟一：init-初始化" class="headerlink" title="步驟一：init() 初始化"></a>步驟一：init() 初始化</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">commentPlugin<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
  apiURL<span class="token operator">:</span> <span class="token string">''</span><span class="token punctuation">,</span>
  siteKey<span class="token operator">:</span> <span class="token string">''</span><span class="token punctuation">,</span>
  containerSelector<span class="token operator">:</span> <span class="token string">'#comments'</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="步驟二：動態新增頁面"><a href="#步驟二：動態新增頁面" class="headerlink" title="步驟二：動態新增頁面"></a>步驟二：動態新增頁面</h3><p>將 UI 介面以及 CSS 樣式，同樣使用 JavaScript 來動態新增：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> siteKey <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> apiUrl <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> containerElement <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> commentDOM <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> lastId <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token comment">// before</span>
<span class="token keyword">let</span> isEnd <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token comment">// 確認是否拿完資料</span>

<span class="token keyword">const</span> css <span class="token operator">=</span> <span class="token string">'.add-comment-form &#123; margin-bottom: 10px; &#125; .card &#123; margin-bottom: 10px; &#125; .card-title &#123;  word-wrap:break-word; &#125; .load-more &#123; margin-bottom: 10px; &#125;'</span>
<span class="token keyword">const</span> loadMoreButtonHTML <span class="token operator">=</span> <span class="token string">'&lt;button class="load-more btn btn-dark">載入更多&lt;/button>'</span><span class="token punctuation">;</span>

<span class="token comment">// UI 介面的模板</span>
<span class="token keyword">const</span> formTemplate <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">
  &lt;div>
    &lt;form class="add-comment-form">
      &lt;div class="form-group">
        &lt;label for="form-nickname">暱稱&lt;/label>
        &lt;input name="nickname" type="text" class="form-control" id="form-nickname" >
      &lt;/div>
      &lt;div class="form-group">
        &lt;label for="content-textarea">留言內容&lt;/label>
        &lt;textarea name="content" class="form-control" id="exampleFormControlTextarea1" rows="3">&lt;/textarea>
      &lt;/div>
      &lt;button type="submit" class="btn btn-dark">送出&lt;/button>
    &lt;/form>
    &lt;div class="comments">&lt;/div>
  &lt;/div>
</span><span class="token template-punctuation string">`</span></span>

<span class="token comment">// 初始化: 動態匯入表單</span>
<span class="token keyword">function</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token parameter">options</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  siteKey <span class="token operator">=</span> options<span class="token punctuation">.</span>siteKey<span class="token punctuation">;</span>
  apiUrl <span class="token operator">=</span> options<span class="token punctuation">.</span>apiUrl<span class="token punctuation">;</span>
  containerElement <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span>options<span class="token punctuation">.</span>containerSelector<span class="token punctuation">)</span><span class="token punctuation">;</span>
  containerElement<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>formTemplate<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 動態新增 css 樣式</span>
  <span class="token keyword">const</span> styleElement <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'style'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  styleElement<span class="token punctuation">.</span>type <span class="token operator">=</span> <span class="token string">'text/css'</span><span class="token punctuation">;</span>
  styleElement<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">createTextNode</span><span class="token punctuation">(</span>css<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  document<span class="token punctuation">.</span>head<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>styleElement<span class="token punctuation">)</span>

  commentDOM <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'.comments'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">getComments</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// 載入更多: 以事件代理的方式處理 click 事件 </span>
  <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'.comments'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token string">'.load-more'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token function">getComments</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// 新增留言 ->  將資料存到後端</span>
  <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'.add-comment-form'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token parameter">e</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    e<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment">// 取消原生行為 -> 不會送出表單</span>
    <span class="token keyword">const</span> newCommentData <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
      <span class="token string">'site_key'</span><span class="token operator">:</span> siteKey<span class="token punctuation">,</span>         <span class="token comment">// 全域變數的 siteKey</span>
      <span class="token string">'nickname'</span><span class="token operator">:</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'input[name=nickname]'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token string">'content'</span><span class="token operator">:</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'textarea[name=content]'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>
    $<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
      type<span class="token operator">:</span> <span class="token string">'POST'</span><span class="token punctuation">,</span>
      url<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>apiUrl<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">/api_add_comments.php</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>
      data<span class="token operator">:</span> newCommentData
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">done</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// done(): 以函數處理回傳的 data 資料</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>data<span class="token punctuation">.</span>ok<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token function">alert</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span>
      <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'input[name=nickname]'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'textarea[name=content]'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token comment">// 新增留言後以 JS 動態方式加到最上方</span>
      <span class="token function">appendCommentToDOM</span><span class="token punctuation">(</span>commentDOM<span class="token punctuation">,</span> newCommentData<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// 在 DOM 結構準備好後，再進行初始化</span>
<span class="token function">$</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ready</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
    siteKey<span class="token operator">:</span> <span class="token string">'heidi'</span><span class="token punctuation">,</span>
    apiUrl<span class="token operator">:</span> <span class="token string">'http://localhost/heidi/week13_local/hw2'</span><span class="token punctuation">,</span>
    containerSelector<span class="token operator">:</span> <span class="token string">'.comment-area'</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>如此即可將 <code>&lt;script&gt;</code> 區塊的程式碼全部放到 src\index.js，再利用 webpack 進行下列步驟。</p>
<h3 id="步驟三：進行模組化"><a href="#步驟三：進行模組化" class="headerlink" title="步驟三：進行模組化"></a>步驟三：進行模組化</h3><p>將不同功能模組化來重構程式碼，以便後續管理。</p>
<ol>
<li>在 src 資料夾建立 api.js</li>
</ol>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> $ <span class="token keyword">from</span> <span class="token string">'jquery'</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">getComments</span><span class="token punctuation">(</span><span class="token parameter">apiUrl<span class="token punctuation">,</span> siteKey<span class="token punctuation">,</span> before<span class="token punctuation">,</span> cb</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">let</span> showURL <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>apiUrl<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">/api_comments.php?site_key=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>siteKey<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>before<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    showURL <span class="token operator">+=</span> <span class="token string">'&amp;before='</span> <span class="token operator">+</span> before<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  $<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
    url<span class="token operator">:</span> showURL
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">done</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token function">cb</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">addComments</span><span class="token punctuation">(</span><span class="token parameter">apiUrl<span class="token punctuation">,</span> siteKey<span class="token punctuation">,</span> before<span class="token punctuation">,</span> cb</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  $<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
    type<span class="token operator">:</span> <span class="token string">'POST'</span><span class="token punctuation">,</span>
    url<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>apiUrl<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">/api_add_comments.php</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>
    data
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">done</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token function">cb</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ol start="2">
<li>建立 template.js</li>
</ol>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">const</span> cssTemplate <span class="token operator">=</span> <span class="token string">'.add-comment-form &#123;margin - bottom: 10px; &#125; .card &#123;margin - bottom: 10px; &#125; .card-title &#123;word - wrap:break-word; &#125; .load-more &#123;margin - bottom: 10px; &#125;'</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> loadMoreButtonHTML <span class="token operator">=</span> <span class="token string">'&lt;button class="load-more btn btn-dark">載入更多&lt;/button>'</span><span class="token punctuation">;</span>

<span class="token comment">// UI 介面的模板</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> formTemplate <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">
  &lt;div>
    &lt;form class="add-comment-form">
      &lt;div class="form-group">
        &lt;label for="form-nickname">暱稱&lt;/label>
        &lt;input name="nickname" type="text" class="form-control" id="form-nickname" >
      &lt;/div>
      &lt;div class="form-group">
        &lt;label for="content-textarea">留言內容&lt;/label>
        &lt;textarea name="content" class="form-control" id="exampleFormControlTextarea1" rows="3">&lt;/textarea>
      &lt;/div>
      &lt;button type="submit" class="btn btn-dark">送出&lt;/button>
    &lt;/form>
    &lt;div class="comments">&lt;/div>
  &lt;/div>
</span><span class="token template-punctuation string">`</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ol start="3">
<li>建立 utils.js</li>
</ol>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">escape</span><span class="token punctuation">(</span><span class="token parameter">toOutput</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> toOutput
    <span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">&amp;</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">'&amp;amp;'</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">&lt;</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">'&amp;lt;'</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">></span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">'&amp;gt;'</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">"</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">'&amp;quot;'</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">'</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">'&amp;#039;'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// 渲染 comment: 處理讀取的資料 &amp; 決定加在最前面或最後面</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">appendCommentToDOM</span><span class="token punctuation">(</span><span class="token parameter">container<span class="token punctuation">,</span> comment<span class="token punctuation">,</span> isPrepend</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">const</span> html <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">
    &lt;div class="card">
    &lt;div class="card-body">
      &lt;h5 class="card-title"></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token function">escape</span><span class="token punctuation">(</span>comment<span class="token punctuation">.</span>nickname<span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">&lt;/h5>
      &lt;p class="card-text"></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token function">escape</span><span class="token punctuation">(</span>comment<span class="token punctuation">.</span>content<span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">
      &lt;/p>
    &lt;/div>
    &lt;/div>
  </span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>isPrepend<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    container<span class="token punctuation">.</span><span class="token function">prepend</span><span class="token punctuation">(</span>html<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 新增到最上方</span>
  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
    container<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>html<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 新增到最底部</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ol start="4">
<li>並在 index.js 引入上述檔案：</li>
</ol>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> getComments<span class="token punctuation">,</span> addComments <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'./api'</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> appendCommentToDOM <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'./utils'</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> cssTemplate<span class="token punctuation">,</span> loadMoreButtonHTML<span class="token punctuation">,</span> formTemplate <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'./template'</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> $ <span class="token keyword">from</span> <span class="token string">'jquery'</span><span class="token punctuation">;</span>

<span class="token keyword">let</span> siteKey <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> apiUrl <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> containerElement <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> commentDOM <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> lastId <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token comment">// before</span>
<span class="token keyword">let</span> isEnd <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token comment">// 確認是否拿完資料</span>

<span class="token comment">// 在 DOM 結構準備好後，再進行初始化</span>
<span class="token function">$</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ready</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
    siteKey<span class="token operator">:</span> <span class="token string">'heidi'</span><span class="token punctuation">,</span>
    apiUrl<span class="token operator">:</span> <span class="token string">'http://localhost/heidi/week13_local/hw2'</span><span class="token punctuation">,</span>
    containerSelector<span class="token operator">:</span> <span class="token string">'.comment-area'</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 初始化: 動態匯入表單</span>
<span class="token keyword">function</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token parameter">options</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  siteKey <span class="token operator">=</span> options<span class="token punctuation">.</span>siteKey<span class="token punctuation">;</span>
  apiUrl <span class="token operator">=</span> options<span class="token punctuation">.</span>apiUrl<span class="token punctuation">;</span>
  containerElement <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span>options<span class="token punctuation">.</span>containerSelector<span class="token punctuation">)</span><span class="token punctuation">;</span>
  containerElement<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>formTemplate<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 動態新增 css 樣式</span>
  <span class="token keyword">const</span> styleElement <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'style'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  styleElement<span class="token punctuation">.</span>type <span class="token operator">=</span> <span class="token string">'text/css'</span><span class="token punctuation">;</span>
  styleElement<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">createTextNode</span><span class="token punctuation">(</span>cssTemplate<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  document<span class="token punctuation">.</span>head<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>styleElement<span class="token punctuation">)</span>

  commentDOM <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'.comments'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">getNewComments</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// 載入更多: 以事件代理的方式處理 click 事件</span>
  <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'.comments'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token string">'.load-more'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token function">getNewComments</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// 新增留言 ->  將資料存到後端</span>
  <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'.add-comment-form'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token parameter">e</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  e<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment">// 取消原生行為 -> 不會送出表單</span>
    <span class="token keyword">const</span> newCommentData <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
     <span class="token string">'site_key'</span><span class="token operator">:</span> siteKey<span class="token punctuation">,</span>         <span class="token comment">// 全域變數的 siteKey</span>
      <span class="token string">'nickname'</span><span class="token operator">:</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'input[name=nickname]'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token string">'content'</span><span class="token operator">:</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'textarea[name=content]'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>
    <span class="token function">addComments</span><span class="token punctuation">(</span>apiUrl<span class="token punctuation">,</span> siteKey<span class="token punctuation">,</span> newCommentData<span class="token punctuation">,</span> <span class="token parameter">data</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>data<span class="token punctuation">.</span>ok<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token function">alert</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span>
      <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'input[name=nickname]'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'textarea[name=content]'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">appendCommentToDOM</span><span class="token punctuation">(</span>commentDOM<span class="token punctuation">,</span> newCommentData<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">function</span> <span class="token function">getNewComments</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
<span class="token keyword">const</span> commentDOM <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'.comments'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'.load-more'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hide</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       
  <span class="token keyword">if</span> <span class="token punctuation">(</span>isEnd<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span> 
  <span class="token punctuation">&#125;</span>
  <span class="token function">getComments</span><span class="token punctuation">(</span>apiUrl<span class="token punctuation">,</span> siteKey<span class="token punctuation">,</span> lastId<span class="token punctuation">,</span> <span class="token parameter">data</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>data<span class="token punctuation">.</span>ok<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token function">alert</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token comment">// 若 request 成功讀取資料</span>
    <span class="token keyword">const</span> comments <span class="token operator">=</span> data<span class="token punctuation">.</span>discussions<span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> comment <span class="token keyword">of</span> comments<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token function">appendCommentToDOM</span><span class="token punctuation">(</span>commentDOM<span class="token punctuation">,</span> comment<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">let</span> length <span class="token operator">=</span> comments<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
    <span class="token comment">// 沒有 lastId: 若初始頁面留言 &lt; 5 直接返回</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>length <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token comment">// 有 lastId: 若拿完資料就隱藏按鈕</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>length <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      isEnd <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
      <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'.load-more'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hide</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
      lastId <span class="token operator">=</span> comments<span class="token punctuation">[</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>id<span class="token punctuation">;</span>
      <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'.comments'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>loadMoreButtonHTML<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 新增 "載入更多" 按鈕</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="步驟四：使用-webpack-打包"><a href="#步驟四：使用-webpack-打包" class="headerlink" title="步驟四：使用 webpack 打包"></a>步驟四：使用 webpack 打包</h3><p>將上述檔案進行打包，會在 dist 資料夾建立 main.js，接著回到 index.html 引入該檔案：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"./dist/main.js"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h3 id="步驟五：引入-library"><a href="#步驟五：引入-library" class="headerlink" title="步驟五：引入 library"></a>步驟五：引入 library</h3><blockquote>
<p>可參考官方文件：<span class="exturl" data-url="aHR0cHM6Ly93ZWJwYWNrLmpzLm9yZy9ndWlkZXMvYXV0aG9yLWxpYnJhcmllcy8=">https://webpack.js.org/guides/author-libraries/<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
<ol>
<li>將 index.js 的 <code>init()</code> 改為 export：</li>
</ol>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token parameter">options</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token operator">...</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<ol start="2">
<li>改在 index.html 引入 library：</li>
</ol>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">></span>
  <span class="token function">$</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ready</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    commentPlugin<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
      siteKey<span class="token operator">:</span> <span class="token string">'heidi'</span><span class="token punctuation">,</span>
      apiUrl<span class="token operator">:</span> <span class="token string">'http://localhost/heidi/week13_local/hw2'</span><span class="token punctuation">,</span>
      containerSelector<span class="token operator">:</span> <span class="token string">'.comment-area'</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ol start="2">
<li>並在設定檔 webpack.config.js 的 output 加上<code>library: &#39;commentPlugin&#39;,</code></li>
</ol>
<h3 id="步驟六：執行-webpack-打包"><a href="#步驟六：執行-webpack-打包" class="headerlink" title="步驟六：執行 webpack 打包"></a>步驟六：執行 webpack 打包</h3><p>利用 webpack 將檔案打包成一個 module，即可在 index.html 引入 library。在瀏覽器上開啟頁面，會發現多出全域變數 commentPlugin：</p>
<p><img src="https://i.imgur.com/3Vf60Fy.png"></p>
<hr>
<h2 id="優化程式碼"><a href="#優化程式碼" class="headerlink" title="優化程式碼"></a>優化程式碼</h2><p>接著要優化先前寫的程式碼，例如修改 plugin 的 class 名稱，避免不同使用者（siteKey）發生衝突。</p>
<ul>
<li>修改 template.js 中的 classname </li>
</ul>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 加上不同的 classname，避免不同使用者共用 plugin 發生衝突</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">getLoadMoreButton</span><span class="token punctuation">(</span><span class="token parameter">classname</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;button class="</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>classname<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> load-more btn btn-dark">載入更多&lt;/button></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// UI 介面的模板</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">getForm</span><span class="token punctuation">(</span><span class="token parameter">formClassName<span class="token punctuation">,</span> commentsClassName</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">
  &lt;div>
    &lt;form class=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>formClassName<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">>
      &lt;div class="form-group">
        &lt;label>暱稱&lt;/label>
        &lt;input name="nickname" type="text" class="form-control">
      &lt;/div>
      &lt;div class="form-group">
        &lt;label>留言內容&lt;/label>
        &lt;textarea name="content" class="form-control" rows="3">&lt;/textarea>
      &lt;/div>
      &lt;button type="submit" class="btn btn-dark">送出&lt;/button>
    &lt;/form>
    &lt;div class="</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>commentsClassName<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">">&lt;/div>
  &lt;/div>
  </span><span class="token template-punctuation string">`</span></span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>index.js 中，同樣使用變數來取代字串</li>
</ul>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> getComments<span class="token punctuation">,</span> addComments <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'./api'</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> appendCommentToDOM<span class="token punctuation">,</span> appendStyle <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'./utils'</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> cssTemplate<span class="token punctuation">,</span> getLoadMoreButton<span class="token punctuation">,</span> getForm <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'./template'</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> $ <span class="token keyword">from</span> <span class="token string">'jquery'</span><span class="token punctuation">;</span>

<span class="token comment">// 初始化: 動態匯入表單</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token parameter">options</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">let</span> siteKey <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> apiUrl <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> containerElement <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> commentDOM <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> lastId <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token comment">// before</span>
  <span class="token keyword">let</span> isEnd <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token comment">// 確認是否拿完資料</span>
  <span class="token keyword">let</span> loadMoreClassName<span class="token punctuation">;</span>
  <span class="token keyword">let</span> loadMoreSelector<span class="token punctuation">;</span>
  <span class="token keyword">let</span> commentsClassName<span class="token punctuation">;</span>
  <span class="token keyword">let</span> commentsSelector<span class="token punctuation">;</span>
  <span class="token keyword">let</span> formClassName<span class="token punctuation">;</span>
  <span class="token keyword">let</span> formSelector<span class="token punctuation">;</span>

  siteKey <span class="token operator">=</span> options<span class="token punctuation">.</span>siteKey<span class="token punctuation">;</span>
  apiUrl <span class="token operator">=</span> options<span class="token punctuation">.</span>apiUrl<span class="token punctuation">;</span>
  loadMoreClassName <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>siteKey<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">-load-more</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>
  commentsClassName <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>siteKey<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">-comments</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>
  formClassName <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>siteKey<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">-add-comment-form</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>
  loadMoreSelector <span class="token operator">=</span> <span class="token string">'.'</span> <span class="token operator">+</span> loadMoreClassName<span class="token punctuation">;</span>
  commentsSelector <span class="token operator">=</span> <span class="token string">'.'</span> <span class="token operator">+</span> commentsClassName<span class="token punctuation">;</span>
  formSelector <span class="token operator">=</span> <span class="token string">'.'</span> <span class="token operator">+</span> formClassName<span class="token punctuation">;</span>

  containerElement <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span>options<span class="token punctuation">.</span>containerSelector<span class="token punctuation">)</span><span class="token punctuation">;</span>
  containerElement<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token function">getForm</span><span class="token punctuation">(</span>formClassName<span class="token punctuation">,</span> commentsClassName<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">appendStyle</span><span class="token punctuation">(</span>cssTemplate<span class="token punctuation">)</span>

  commentDOM <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span>commentsSelector<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">getNewComments</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// 載入更多: 以事件代理的方式處理 click 事件</span>
  <span class="token function">$</span><span class="token punctuation">(</span>commentsSelector<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> loadMoreSelector<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token function">getNewComments</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// 新增留言 ->  將資料存到後端</span>
  <span class="token function">$</span><span class="token punctuation">(</span>formSelector<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token parameter">e</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    e<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment">// 取消原生行為 -> 不會送出表單</span>
    <span class="token keyword">const</span> nicknameDOM <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>formSelector<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> input[name=nickname]</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> contentDOM <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>formSelector<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> textarea[name=content]</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> newCommentData <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
      site_key<span class="token operator">:</span> siteKey<span class="token punctuation">,</span>         <span class="token comment">// 全域變數的 siteKey</span>
      nickname<span class="token operator">:</span> nicknameDOM<span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      content<span class="token operator">:</span> contentDOM<span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>formSelector<span class="token punctuation">)</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>nicknameDOM<span class="token punctuation">,</span> nicknameDOM<span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>contentDOM<span class="token punctuation">,</span> contentDOM<span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    
    <span class="token function">addComments</span><span class="token punctuation">(</span>apiUrl<span class="token punctuation">,</span> siteKey<span class="token punctuation">,</span> newCommentData<span class="token punctuation">,</span> <span class="token parameter">data</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>data<span class="token punctuation">.</span>ok<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token function">alert</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span>
      nicknameDOM<span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      contentDOM<span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">appendCommentToDOM</span><span class="token punctuation">(</span>commentDOM<span class="token punctuation">,</span> newCommentData<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">function</span> <span class="token function">getNewComments</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">const</span> commentDOM <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span>commentsSelector<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">$</span><span class="token punctuation">(</span>loadMoreSelector<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hide</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>isEnd<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token function">getComments</span><span class="token punctuation">(</span>apiUrl<span class="token punctuation">,</span> siteKey<span class="token punctuation">,</span> lastId<span class="token punctuation">,</span> <span class="token parameter">data</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>data<span class="token punctuation">.</span>ok<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token function">alert</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span>
      <span class="token keyword">const</span> comments <span class="token operator">=</span> data<span class="token punctuation">.</span>discussions<span class="token punctuation">;</span>
      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> comment <span class="token keyword">of</span> comments<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token function">appendCommentToDOM</span><span class="token punctuation">(</span>commentDOM<span class="token punctuation">,</span> comment<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span>

      <span class="token keyword">let</span> length <span class="token operator">=</span> comments<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>length <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>length <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        isEnd <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token function">$</span><span class="token punctuation">(</span>loadMoreSelector<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hide</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
        lastId <span class="token operator">=</span> comments<span class="token punctuation">[</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>id<span class="token punctuation">;</span>
        <span class="token keyword">const</span> loadMoreButtonHTML <span class="token operator">=</span> <span class="token function">getLoadMoreButton</span><span class="token punctuation">(</span>loadMoreClassName<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">$</span><span class="token punctuation">(</span>commentsSelector<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>loadMoreButtonHTML<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>Back-End</category>
      </categories>
      <tags>
        <tag>Back-End</tag>
        <tag>webpack</tag>
        <tag>jQuery</tag>
      </tags>
  </entry>
  <entry>
    <title>[week 19] 淺談產品開發與工作流程</title>
    <url>/pd101-lidemy/</url>
    <content><![CDATA[<blockquote>
<p>本篇為 <span class="exturl" data-url="aHR0cHM6Ly9saWRlbXkuY29tL3AvcGQxMDE=">[PD101] 淺談產品開發與工作流程<i class="fa fa-external-link-alt"></i></span> 這門課程的學習筆記。如有錯誤歡迎指正！</p>
</blockquote>
<p>透過這堂課程，我們能夠在進入職場之前，先試著瞭解開發流程，雖然每間公司實際工作情形不一定相同，但也能先有個初步概念：</p>
<span id="more"></span>

<p><img src="https://i.imgur.com/PPlaGG2.png"></p>
<p>課程內容也會以之前 Huli 和助教共同實作的 Lidemy 學習系統作為範例。</p>
<hr>
<h2 id="在實際開發之前"><a href="#在實際開發之前" class="headerlink" title="在實際開發之前"></a>在實際開發之前</h2><p>工程師會根據 PM 提出的產品需求來進行開發，而一個產品需求產生的流程如下：</p>
<p><img src="https://i.imgur.com/EHWat4x.png"></p>
<ul>
<li>stakeholder 利益相關者，也就是客戶</li>
<li>Product Requirement Document 產品需求文件</li>
<li>Product Specifications 產品規格書</li>
<li>wireframe 設計線稿</li>
<li>mockup 模型</li>
</ul>
<p>接著工程師會透過 spec 瞭解產品需求，根據 mockup 寫出相對應的產品介面與功能。</p>
<h3 id="Product-spec-裡面有哪些東西？"><a href="#Product-spec-裡面有哪些東西？" class="headerlink" title="Product spec 裡面有哪些東西？"></a>Product spec 裡面有哪些東西？</h3><p>實際開發中，寫得越詳細的產品規格書，能夠幫助開發內容與規格達成一致；假如 PM 沒有將需求寫在規格書中，開發產品也需同步進行，避免程式行為與規格不一致，導致後續維護問題。</p>
<p>一般而言，產品規格書屬於公司機密不能對外公開，這裡舉一些網路上公開的範例。</p>
<h4 id="範例一：PRD-到底该怎么写？更全面的文档范例来了"><a href="#範例一：PRD-到底该怎么写？更全面的文档范例来了" class="headerlink" title="範例一：PRD 到底该怎么写？更全面的文档范例来了"></a>範例一：<span class="exturl" data-url="aHR0cDovL3d3dy53b3NoaXBtLmNvbS9wbWQvMzMyNzc3MC5odG1s">PRD 到底该怎么写？更全面的文档范例来了<i class="fa fa-external-link-alt"></i></span></h4><ul>
<li>修訂紀錄</li>
<li>全局說明</li>
<li>項目背景<ul>
<li>透過現狀、方案、目標來描述</li>
</ul>
</li>
<li>項目範圍<ul>
<li>項目對應搭框架</li>
<li>產品結構圖</li>
</ul>
</li>
<li>開發流程</li>
<li>功能需求<ul>
<li>對功能逐一描述</li>
<li>透過使用者 + 功能方式來描述</li>
<li>配置條件、介面元素、產品邏輯、異常與分支流程</li>
<li>數據字典</li>
</ul>
</li>
<li>非功能需求<ul>
<li>數據、監控、性能需求</li>
</ul>
</li>
</ul>
<h4 id="範例二：【SOP-不藏私】系列＃EP1「連猴子也會的-PRD-指南」"><a href="#範例二：【SOP-不藏私】系列＃EP1「連猴子也會的-PRD-指南」" class="headerlink" title="範例二：【SOP 不藏私】系列＃EP1「連猴子也會的 PRD 指南」"></a>範例二：<span class="exturl" data-url="aHR0cHM6Ly9tZWRpdW0uY29tL2FzLWEtcHJvZHVjdC1kZXNpZ25lci9zb3AtZXAwMS1wcmQtM2M2ZDMzODgwYzM0">【SOP 不藏私】系列＃EP1「連猴子也會的 PRD 指南」<i class="fa fa-external-link-alt"></i></span></h4><p>這個例子會比較偏向於介紹產品如何開發以及開發時程，說明產品規格書的文件架構：</p>
<ul>
<li>文件概況<ul>
<li>文件修訂紀錄</li>
</ul>
</li>
<li>產品簡介與功能對照<ul>
<li>產品簡介</li>
<li>產品目標說明</li>
<li>「工作排程、使用者故事、對應功能、進版時間」對照表</li>
</ul>
</li>
<li>產品架構與流程<ul>
<li>產品功能架構圖（Function Map）</li>
<li>產品信息架構圖（Information Architecture）</li>
<li>功能邏輯圖（Flow Chart）</li>
</ul>
</li>
<li>產品設計原型<ul>
<li>產品全局簡介</li>
<li>局部功能 Prototype，有互動的部分</li>
</ul>
</li>
<li>產品指標</li>
<li>字串表<ul>
<li>用來顯示多國語言</li>
</ul>
</li>
</ul>
<p>延伸閱讀：</p>
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9tZWRpdW0uY29tL3ktcG9pbnRlci9wcm9kdWN0LXByZC1jYTBlYTliNzViODU=">【產品經理 PM ｜需求文檔 PRD】優惠券發放的產品設計，需求文檔怎麼寫？<i class="fa fa-external-link-alt"></i></span></li>
</ul>
<h3 id="User-Story-使用者故事"><a href="#User-Story-使用者故事" class="headerlink" title="User Story 使用者故事"></a>User Story 使用者故事</h3><p>User Story（使用者故事）是一段簡單的功能敘述，藉由客戶或使用者的觀點寫下有價值的功能（functionality）。除了能更明確化產品需求，工程師也能夠知道客戶會做哪些驗收測試、期望跟假設。</p>
<p>在 User Story 中，對於一個需求的寫法大致如下：</p>
<ul>
<li>As a user… 身為一個使用者..</li>
<li>I want to… 我希望…</li>
<li>so that I can… 我就可以…</li>
</ul>
<p>以開發 Lidemy 作業系統為例子，這是初步的產品需求：</p>
<p><img src="https://i.imgur.com/5Ho0Vcl.png"></p>
<p>若以 User Story 方式撰寫，就能夠使產品需求更加明確化，也能瞭解不同使用者身份的需求以及開發順序：</p>
<p><img src="https://i.imgur.com/Fewp6BB.png"></p>
<h3 id="繪製-Flowchart-amp-Wireframe"><a href="#繪製-Flowchart-amp-Wireframe" class="headerlink" title="繪製 Flowchart &amp; Wireframe"></a>繪製 Flowchart &amp; Wireframe</h3><p>此外還有像是 User Flow 使用流程和 Wireframe 設計線稿，也能幫助理解產品邏輯：</p>
<ul>
<li>User Flow</li>
</ul>
<p><img src="https://i.imgur.com/YH4yf2T.png"></p>
<ul>
<li>Wireframe</li>
</ul>
<p><img src="https://i.imgur.com/xuiuBsv.png"></p>
<p>繪製 Flowchart 時，也找了一些參考資料，瞭解該如何繪製：</p>
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9tZWRpdW0uY29tL2FzLWEtcHJvZHVjdC1kZXNpZ25lci8lRTUlODUlODglRTUlODglQTUlRTYlODAlQTUlRTglOTElOTclRTclOTUlQUJ1aS0lRTQlQkQlQTAlRTglODElQkQlRTklODElOEVmbG93LWNoYXJ0JUU1JTk3JThFLWM2NzE1ZjA1NWNmYw==">先別急著畫 UI，你聽過 Flow Chart 嗎<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9jcmVhdGVseS5jb20vZGlhZ3JhbS1jb21tdW5pdHkvcG9wdWxhci90L2Zsb3djaGFydA==">Flowchart Templates | Editable Online or Download for Free<i class="fa fa-external-link-alt"></i></span></li>
</ul>
<p>像是流程圖其實能透過規範的符號來統一：<br><img src="https://miro.medium.com/max/1000/1*EYsGjOTefEx3BfT4TpSKcg.png"></p>
<p>試做有關會員的 User Flow：</p>
<p><span class="exturl" data-url="aHR0cHM6Ly93aGltc2ljYWwuY29tL3VzZXItZmxvdy0zdEVpM2hHM0dLUnNFaGtTMk5XeVVy">DEMO 連結<i class="fa fa-external-link-alt"></i></span></p>
<p><img src="https://i.imgur.com/aZ4xEt5.png"></p>
<hr>
<h2 id="Card-Ticket-Task-Issue"><a href="#Card-Ticket-Task-Issue" class="headerlink" title="Card = Ticket = Task = Issue"></a>Card = Ticket = Task = Issue</h2><p>在實際開發過程，通常會把每個功能切割成一個任務，以下這些名詞均可代表工作的最小單位：</p>
<ul>
<li>Task：任務</li>
<li>Issue：GitHub 上的一個問題或 Bug</li>
<li>Card：卡片</li>
<li>Ticket：票</li>
</ul>
<p>通常會利用現成的平台，像是 <span class="exturl" data-url="aHR0cHM6Ly93d3cuYXRsYXNzaWFuLmNvbS9zb2Z0d2FyZS9qaXJhPyZhY2VpZD0mYWRwb3NpdGlvbj0mYWRncm91cD05NTAwMzY0NTQ0OSZjYW1wYWlnbj05MTI0ODc4NzAyJmNyZWF0aXZlPTQxNTU0Mjc1MjM2NSZkZXZpY2U9YyZrZXl3b3JkPWppcmEmbWF0Y2h0eXBlPWUmbmV0d29yaz1nJnBsYWNlbWVudD0mZHNfa2lkcz1wNTEyNDIxODkzMTgmZHNfZT1HT09HTEUmZHNfZWlkPTcwMDAwMDAwMTU1ODUwMSZkc19lMT1HT09HTEUmZ2NsaWQ9Q2owS0NRaUFxZFA5QlJEVkFSSXNBR1NaOEFtemJmWHZheGx3c2wtOTBDSUlVQWtPc2dMQWNCSVFxdnVCSUJYNlIxcHVzejFKdFBGLVlOMGFBbUF6RUFMd193Y0ImZ2Nsc3JjPWF3LmRz">Jira<i class="fa fa-external-link-alt"></i></span> 或 <span class="exturl" data-url="aHR0cHM6Ly93d3cuZ29vZ2xlYWRzZXJ2aWNlcy5jb20vcGFnZWFkL2FjbGs/c2E9TCZhaT1EQ2hjU0V3amNzOWV4MTR2dEFoVUoySllLSFVjQ0RwQVlBQkFBR2dKMGJBJm9ob3N0PXd3dy5nb29nbGUuY29tJmNpZD1DQUVTUWVEMldGdExWeDdtNHN4eUFFVHEwUWhGcHY0YW9HVlhYQzRCVmlyN3VaZzN3LTEzT1lZU09BZTFKcUVqQUpsVnAzRDhzSmItQ0MyX2NWaHNXeTRZdU9WWCZzaWc9QU9ENjRfMHU1MzM1TTdSTjlSLTgxeDh2RlVtXzBBZHIzQSZxJmFkdXJsJnZlZD0yYWhVS0V3amdqdEd4MTR2dEFoVUh3b3NCSGZBakNGMFEwUXg2QkFnTUVBRQ==">Trello<i class="fa fa-external-link-alt"></i></span> 來管理任務，通常一個 User Story 就會切割成一張票：</p>
<p><img src="https://i.imgur.com/l4GdKJq.png"></p>
<p>透過這些平台，能夠用來切割工作區塊，也能讓整個團隊快速瀏覽整體工作進度。</p>
<p>參考資料：</p>
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9paG93ZXIudHcvYmxvZy9hcmNoaXZlcy8yMDkw">什麼是 User Story？<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj1hcE92RjlOVmd1QQ==">Agile 使用者故事 <i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj1FRFQwSE10RHdZSQ==">拆解使用者故事 <i class="fa fa-external-link-alt"></i></span></li>
</ul>
<hr>
<h2 id="軟體開發方法論-Methodology"><a href="#軟體開發方法論-Methodology" class="headerlink" title="軟體開發方法論 Methodology"></a>軟體開發方法論 Methodology</h2><p>在實際軟體開發過程，並不是拿了一張卡就開始工作那麼簡單，而是必須考慮透過哪種模式或框架來進行開發，大致可分成幾種方法：</p>
<ul>
<li>Waterfall 瀑布流</li>
<li>Agile 敏捷</li>
</ul>
<h3 id="Waterfall-瀑布流"><a href="#Waterfall-瀑布流" class="headerlink" title="Waterfall 瀑布流"></a>Waterfall 瀑布流</h3><p><img src="https://i.imgur.com/XRtzTAx.png"></p>
<ul>
<li>從上往下，不能往回，一次性</li>
<li>呈現完整性較高</li>
<li>事前規劃需做完善，若過程中需要增加新功能獲改善，就需要再等下一輪流程</li>
<li>較不適合大型專案</li>
</ul>
<p>參考資料：</p>
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cuc21hcnRzaGVldC5jb20vYWdpbGUtdnMtc2NydW0tdnMtd2F0ZXJmYWxsLXZzLWthbmJhbg==">What’s the Difference? Agile vs Scrum vs Waterfall vs Kanban<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9tZWRpdW0uY29tLzNwbS1sYWIvcG0tcG9kY2FzdC1lcDAzLXdhdGVyZmFsbC12cy1hZ2lsZS04MmIyMTQ4NTMxMTI=">【Podcast EP03】敏捷或瀑布開發哪個好？流程用哪種重要嗎？<i class="fa fa-external-link-alt"></i></span></li>
</ul>
<h3 id="Agile-敏捷"><a href="#Agile-敏捷" class="headerlink" title="Agile 敏捷"></a>Agile 敏捷</h3><p><img src="https://i.imgur.com/Rp9dRyX.png"></p>
<ul>
<li>及早並持續地交付，精簡化</li>
<li>彈性較高，能夠改變需求</li>
<li>類似於把 Waterfall 的任務切小細分</li>
<li>按照 12 項原則就能夠稱為敏捷，又可細分為不同框架來進行</li>
</ul>
<p>參考資料：</p>
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9tZWRpdW0uY29tLyVFNiU5NiU4NyVFNiU4MCU5RCVFNCVCOCU4RCVFOCU5NyU4RiVFNyVBNyU4MS8lRTYlOTYlODclRTYlODAlOUQlRTQlQjglOEQlRTglOTclOEYlRTclQTclODEtJUU2JTk1JThGJUU2JThEJUI3JUU1JUFFJUEzJUU4JUE4JTgwLTEyLSVFNSU4RSU5RiVFNSU4OSU4Ny02NGFkN2Q1OTIwODc=">【文思不藏私】@敏捷宣言 12 原則<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj1aOVFiWVpoMVlYWQ==">什麼是敏捷?<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj1IRG1PN0V2N01sYw==">【敏捷系列 - 1】什麼是敏捷？敏捷實例分享<i class="fa fa-external-link-alt"></i></span></li>
</ul>
<h3 id="實作-Agile-概念：Kanban-看板"><a href="#實作-Agile-概念：Kanban-看板" class="headerlink" title="實作 Agile 概念：Kanban 看板"></a>實作 Agile 概念：Kanban 看板</h3><p>這裡以 Trello 和 Jira 平台為例：</p>
<p><img src="https://i.imgur.com/dvYXPf0.png"></p>
<ul>
<li>Trello</li>
</ul>
<p><img src="https://i.imgur.com/5dSZWIc.png"></p>
<ul>
<li>Jira 平台的 Kanban Board</li>
</ul>
<p><img src="https://i.imgur.com/6oPUTVR.png"></p>
<p><img src="https://i.imgur.com/a9XYtOX.png"></p>
<h3 id="實作-Agile-概念：Scrum"><a href="#實作-Agile-概念：Scrum" class="headerlink" title="實作 Agile 概念：Scrum"></a>實作 Agile 概念：Scrum</h3><p><img src="https://i.imgur.com/Xs7PQ5q.png"></p>
<p>透過 Scrum 的開發流程：</p>
<ul>
<li>Product Backlog：列出產品所有功能</li>
<li>Sprint Planning：預估所需時間，分配任務</li>
<li>Sprint Backlog：這個週期要開發的功能</li>
<li>Sprint 開發週期：2-4 weeks 循環</li>
<li>Daily Scrum：例行溝通進度</li>
<li>Review、Retrospective：檢視進度與檢討</li>
</ul>
<p><img src="https://i.imgur.com/qMvYoim.png"></p>
<p>在實際開發扮演的角色：</p>
<ul>
<li>Product Owner：決定產品走向</li>
<li>Scrum Master：幫助團隊跑 Scrum 流程</li>
<li>Team：實際開發的工程師</li>
</ul>
<p>參考資料：</p>
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj05VHljTFIwVHFGQQ==">Introduction to Scrum - 7 Minutes<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj1DUXAwbkdZNG5vbw==">【敏捷系列 - 3】Scrum 中的短衝 (Sprint)<i class="fa fa-external-link-alt"></i></span></li>
</ul>
<hr>
<h2 id="工程師的兩週生活-amp-Scrum"><a href="#工程師的兩週生活-amp-Scrum" class="headerlink" title="工程師的兩週生活 &amp; Scrum"></a>工程師的兩週生活 &amp; Scrum</h2><p>這裡以工程師的生活作為範例，通常以兩個禮拜為一個開發週期，流程大致如下：</p>
<ul>
<li>Sprint Planning<ul>
<li>預估任務時間 Story Point</li>
<li>分配任務</li>
</ul>
</li>
<li>開發與 Daily Standup<ul>
<li>Daily Standup：報告昨天進度、今天預計進度、提出遇到的困難，藉此同步團隊資訊</li>
</ul>
</li>
<li>Deploy 部署<ul>
<li>例如隔週會部署程式到測試環境</li>
</ul>
</li>
<li>Sprint Demo<ul>
<li>PM 藉由 Demo 讓客戶瞭解目前進度</li>
</ul>
</li>
<li>Sprint retrospective 檢討會議<ul>
<li>Went well 做得不錯的點</li>
<li>To improve 要加強的點</li>
<li>Action items 如何改善</li>
</ul>
</li>
</ul>
<p>參考資料：</p>
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9yZWV0cm8uaW8v">協助做 retro 的工具<i class="fa fa-external-link-alt"></i></span></li>
</ul>
<h2 id="關於部署"><a href="#關於部署" class="headerlink" title="關於部署"></a>關於部署</h2><p>實際部署程式可分成幾種環境，藉由不同環境，能夠在過程中進行測試，確認功能都沒問題後再進行公開：</p>
<ul>
<li>Local 環境<ul>
<li>本機端開發，通常會接 Dev 的資料</li>
</ul>
</li>
<li>Development 環境（Dev）<ul>
<li>和 Local 的差別：一個在自己電腦測試，另一個則是部署到 Server 環境</li>
<li>例如：<span class="exturl" data-url="aHR0cHM6Ly93d3cubmV0bGlmeS5jb20v">Netlify<i class="fa fa-external-link-alt"></i></span></li>
</ul>
</li>
<li>Staging 環境 / QA 環境<ul>
<li>和 Production 類似，只是用來測試，不對外公開的環境</li>
</ul>
</li>
<li>Production 環境<ul>
<li>所有使用者都看得到的環境</li>
</ul>
</li>
</ul>
<h2 id="關於測試"><a href="#關於測試" class="headerlink" title="關於測試"></a>關於測試</h2><p>這邊提到的測試，和我們之前學到的 Unit Test 不同，是工程師針對程式碼進行的測試；但 QA 要測的只是呈現功能是否正常，簡單介紹下列兩種測試方式：</p>
<ul>
<li>SIT（System Integration Testing）：系統整合測試，確認功能是否正常，可能透過手動或寫自動化程式來測試</li>
<li>UAT（User Acceptance Testing）：使用者可用性測試，通常是 PM 會進行測試，確認功能是否符合預期</li>
</ul>
<hr>
<h2 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h2><p>最後整理產品開發流程的幾個重點：</p>
<ol>
<li>由 PM 提出產品需求給工程師<ul>
<li>spec 產品規格書：需要哪些功能</li>
<li>wireframe 設計草圖：用來確認網頁架構</li>
<li>mockup：由設計師根據產品規格做出模型</li>
<li>透過 User Flow、User Story，更明確寫出針對不同使用者、需要哪些功能、以及優先順序（例如：身為一個使用者/管理員，我希望可以 XXX）</li>
</ul>
</li>
<li>實作 Agile 開發<ul>
<li>在實際開發之前，可先在 Kanban（看板）列出產品所有功能，並以功能切割任務、預估所需時間</li>
<li>例如：Trello、Jira 等平台</li>
</ul>
</li>
<li>實際開發流程<ul>
<li>以 Sprint 開發週期為例，通常以 2-4 weeks 為週期，根據分配的任務進行開發，最後檢視進度並檢討如何在下個週期改善</li>
<li>可將各個產品功能加上編號，在 commit 時也加上相對編號，之後就能快速找到當初討論的 requirement</li>
</ul>
</li>
</ol>
<p>延伸閱讀：</p>
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9tZWRpdW0uY29tLzNwbS1sYWIvbWFydHktY2FnYW4tcHJvZHVjdHRhbmstdGFpcGVpLXNwZWVjaC05MzNlN2RmYzEzYWY=">做產品真是哭夭難！ — Marty Cagan 演講 70 分鐘中文逐字翻譯（附贈 YouTube 錄影）<i class="fa fa-external-link-alt"></i></span></li>
</ul>
]]></content>
      <categories>
        <category>lidemy</category>
      </categories>
      <tags>
        <tag>lidemy</tag>
        <tag>Testing</tag>
        <tag>產品開發</tag>
        <tag>agile</tag>
      </tags>
  </entry>
  <entry>
    <title>[week 11] 利用 PHP 實作陽春部落格</title>
    <url>/php-blog/</url>
    <content><![CDATA[<p>可以將部落格想成「只有一人」能新增文章的留言版。</p>
<span id="more"></span>
<h2 id="Step1-規劃產品路由與功能"><a href="#Step1-規劃產品路由與功能" class="headerlink" title="Step1. 規劃產品路由與功能"></a>Step1. 規劃產品路由與功能</h2><h3 id="頁面"><a href="#頁面" class="headerlink" title="頁面"></a>頁面</h3><ul>
<li>部落格首頁 <code>index.php</code></li>
<li>註冊頁面 <code>register.php</code></li>
<li>登入頁面 <code>login.php</code></li>
<li>導覽列 <code>navbar.php</code>：獨立出 navbar，可避免重複撰寫</li>
<li>管理後台頁面 <code>admin.php</code></li>
<li>新增文章頁面 <code>create_post.php</code></li>
<li>新增文章頁面 <code>update_post.php</code></li>
<li>瀏覽全文頁面 <code>post.php</code></li>
</ul>
<h3 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h3><ul>
<li>常用函式 <code>utils.php</code>：<code>getUserFromUsername()</code>、<code>escape()</code></li>
</ul>
<h4 id="使用者相關"><a href="#使用者相關" class="headerlink" title="使用者相關"></a>使用者相關</h4><ul>
<li>註冊功能 <code>handle_register.php</code></li>
<li>登入功能 <code>handle_login.php</code></li>
<li>登出功能 <code>logout.php</code></li>
<li>驗證權限功能 <code>check_permission.php</code></li>
</ul>
<h4 id="文章相關"><a href="#文章相關" class="headerlink" title="文章相關"></a>文章相關</h4><ul>
<li>新增文章功能 <code>handle_create_post.php</code></li>
<li>編輯文章功能 <code>handle_update_post.php</code></li>
<li>刪除文章功能 <code>handle_delete_post.php</code></li>
</ul>
<h2 id="Step2-規劃資料結構：建置資料庫"><a href="#Step2-規劃資料結構：建置資料庫" class="headerlink" title="Step2. 規劃資料結構：建置資料庫"></a>Step2. 規劃資料結構：建置資料庫</h2><ul>
<li><p>blog_users：使用者相關資料</p>
<ul>
<li>id</li>
<li>role</li>
<li>username</li>
<li>nickname</li>
<li>password</li>
<li>created_at</li>
</ul>
</li>
<li><p>blog_posts：文章相關資料</p>
<ul>
<li>id</li>
<li>username</li>
<li>title</li>
<li>content</li>
<li>is_deleted</li>
<li>created_at </li>
</ul>
</li>
</ul>
<hr>
<h2 id="Step3-實作部落格"><a href="#Step3-實作部落格" class="headerlink" title="Step3. 實作部落格"></a>Step3. 實作部落格</h2><h3 id="PHP-相關語法"><a href="#PHP-相關語法" class="headerlink" title="PHP 相關語法"></a>PHP 相關語法</h3><ul>
<li><p><code>var_dump()</code>：印出變數的相關訊息</p>
</li>
<li><p><code>strpos()</code>: 查找該字串首次出現的位置</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
  <span class="token comment">// 獲得回傳的網址列</span>
  <span class="token variable">$url</span> <span class="token operator">=</span> <span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'REQUEST_URI'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token comment">// strpos(): 查找該字串首次出現的位置</span>
  <span class="token variable">$isAdminPage</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token function">strpos</span><span class="token punctuation">(</span><span class="token variable">$url</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'admin.php'</span><span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token constant boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token variable">$isLoginPage</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token function">strpos</span><span class="token punctuation">(</span><span class="token variable">$url</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'login.php'</span><span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token constant boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p><code>substr()</code>：取得部分字串，可設定字串長度，共有三個參數：</p>
<ul>
<li><code>$strting</code>：原始的字串</li>
<li><code>$start</code>：開始擷取的位置</li>
<li><code>$length</code>：要擷取的字串長度</li>
</ul>
</li>
<li><p><code>mb_substr()</code>：和 <code>substr()</code> 用法相同，但多了第四個參數：</p>
<ul>
<li><code>$encoding</code>：判斷的編碼，通常使用 <code>&quot;UTF-8&quot;</code><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$string</span><span class="token punctuation">,</span> <span class="token variable">$start</span><span class="token punctuation">,</span> <span class="token variable">$length</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">mb_substr</span><span class="token punctuation">(</span><span class="token variable">$string</span><span class="token punctuation">,</span> <span class="token variable">$start</span><span class="token punctuation">,</span> <span class="token variable">$length</span><span class="token punctuation">,</span> <span class="token variable">$encoding</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li>
</ul>
</li>
<li><p><code>intval()</code>: 將字串轉換為數字</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token variable">$id</span> <span class="token operator">=</span> <span class="token function">intval</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'id'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
<li><p><code>$_SERVER[&#39;HTTP_REFERER&#39;]</code>：獲取前一頁面的 URL 地址</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token comment">&lt;!-- 透過 POST 來獲得前一頁面的 URL --></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>handle_update_post.php<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>POST<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>hidden<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>page<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token keyword">echo</span> <span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'HTTP_REFERER'</span><span class="token punctuation">]</span> <span class="token delimiter important">?></span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

</li>
</ul>
<h3 id="include、require、include-once、require-once-的差別"><a href="#include、require、include-once、require-once-的差別" class="headerlink" title="include、require、include_once、require_once 的差別"></a><code>include</code>、<code>require</code>、<code>include_once</code>、<code>require_once</code> 的差別</h3><p><code>include</code> 和 <code>require</code> 達成的效果幾乎相同，均為「引入」外部檔案，差別在於「執行原理」以及「報錯程度」。</p>
<h4 id="include"><a href="#include" class="headerlink" title="include"></a><code>include</code></h4><ul>
<li>執行到 <code>include()</code> 時，每次皆會讀取檔案</li>
<li>常用於流程控制，例如：條件判斷、迴圈</li>
<li>適合引入動態的程式碼，會在用到時加載</li>
<li>執行時，若引入的檔案發生錯誤，會顯示警告（Warning），但不會立刻停止程式</li>
</ul>
<h4 id="require"><a href="#require" class="headerlink" title="require"></a><code>require</code></h4><ul>
<li>執行到 <code>require()</code> 時，只會讀取一次檔案</li>
<li>常放在程式開頭，檔案引入後 PHP 會將網頁重新編譯</li>
<li>適合引入靜態的程式碼，會在一開始就加載</li>
<li>執行時，若引入的檔案發生錯誤，會直接報錯（Fatal error）並終止程式</li>
</ul>
<p>後面若加上 <code>_once</code>，代表「只會引入一次」。PHP 會檢測檔案是否有重複引入，避免重複執行浪費效能，因此較推薦使用。</p>
<h4 id="include-once"><a href="#include-once" class="headerlink" title="include_once"></a><code>include_once</code></h4><ul>
<li>和 <code>include</code> 用法基本相同</li>
<li>若發生錯誤，<code>include_once</code> 不會停止程式的執行，只會丟出警告訊息</li>
<li>避免重複引入</li>
<li>以引入 navbar 為例：</li>
</ul>
<pre class="line-numbers language-htmlmixed" data-language="htmlmixed"><code class="language-htmlmixed">&lt;!-- 把 header 獨立出來，就不需每個檔案都重複撰寫 --&gt;
&lt;?php include_once(&#39;navbar.php&#39;)?&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h4 id="require-once"><a href="#require-once" class="headerlink" title="require_once"></a><code>require_once</code></h4><ul>
<li>和 <code>require</code> 用法基本相同</li>
<li>若發生錯誤，<code>require_once</code> 會立刻中止程式</li>
<li>避免重複引入</li>
</ul>
<p>參考資料：</p>
<ol>
<li><span class="exturl" data-url="aHR0cDovL2NvZGUtYmVnaW5uZXIubG9nZG93bi5jb20vcG9zdHMvMzg5Njg3LXBocHJlcXVpcmUtdnMtaW5jbHVkZQ==">PHP：require V.S. include « 程式初學者<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cDovL3N5dW5ndW8uYmxvZ3Nwb3QuY29tLzIwMTMvMDQvcGhwaW5jbHVkZS1yZXF1aXJlLmh0bWw=">[PHP]include 與require 的差別 - Syun<i class="fa fa-external-link-alt"></i></span></li>
</ol>
]]></content>
      <categories>
        <category>Back-End</category>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>Back-End</tag>
        <tag>PHP</tag>
      </tags>
  </entry>
  <entry>
    <title>[week 9] 利用 PHP 實作留言板 - 初階實作篇</title>
    <url>/php-board/</url>
    <content><![CDATA[<blockquote>
<p>本篇為 <span class="exturl" data-url="aHR0cHM6Ly9saWRlbXkuY29tL3AvYmUxMDEtcGhwLW15c3Fs">[BE101] 用 PHP 與 MySQL 學習後端基礎<i class="fa fa-external-link-alt"></i></span> 這門課程的學習筆記。如有錯誤歡迎指正。</p>
</blockquote>
<p>課程筆記：<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2hlaWRpbGl1MjAyMC9UaGlzLWlzLUNvZGVkaWFyeS9ibG9iL21hc3Rlci93ZWVrOV8lRTUlQkUlOEMlRTclQUIlQUYlRTUlOUYlQkElRTclQTQlOEVfUEhQJUUzJTgwJTgxTXlTUUwubWQ=">[week 9] 後端基礎 - PHP 語法、資料庫 MySQL<i class="fa fa-external-link-alt"></i></span></p>
<span id="more"></span>
<hr>
<h2 id="前置作業"><a href="#前置作業" class="headerlink" title="前置作業"></a>前置作業</h2><p>在開始實作留言板之前，需先進行前置作業：</p>
<ul>
<li>規劃產品路由與功能</li>
<li>規劃資料結構：建立資料庫</li>
</ul>
<h3 id="Step1-規劃產品路由與功能"><a href="#Step1-規劃產品路由與功能" class="headerlink" title="Step1. 規劃產品路由與功能"></a>Step1. 規劃產品路由與功能</h3><p><img src="https://i.imgur.com/HKuwCYA.png"></p>
<h4 id="頁面"><a href="#頁面" class="headerlink" title="頁面"></a>頁面</h4><ul>
<li>留言板首頁 <code>index.php</code></li>
<li>註冊頁面 <code>register.php</code></li>
<li>登入頁面 <code>login.php</code></li>
</ul>
<h4 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h4><ul>
<li>新增留言 <code>handle_add_post.php</code> → comments 資料庫</li>
<li>註冊 <code>handle_register.php</code> → users 資料庫</li>
<li>登入 <code>handle_login.php</code></li>
<li>登出 <code>logout.php</code></li>
</ul>
<h3 id="Step2-規劃資料結構：建置資料庫"><a href="#Step2-規劃資料結構：建置資料庫" class="headerlink" title="Step2. 規劃資料結構：建置資料庫"></a>Step2. 規劃資料結構：建置資料庫</h3><h4 id="建立-comments-資料庫"><a href="#建立-comments-資料庫" class="headerlink" title="建立 comments 資料庫"></a>建立 comments 資料庫</h4><ul>
<li>id</li>
<li>nickname</li>
<li>content</li>
<li>creat_at</li>
</ul>
<p><img src="https://i.imgur.com/4WWjEaA.png"></p>
<h4 id="建立-users-資料庫"><a href="#建立-users-資料庫" class="headerlink" title="建立 users 資料庫"></a>建立 users 資料庫</h4><ul>
<li>id</li>
<li>nickname</li>
<li>username</li>
<li>password</li>
<li>creat_at</li>
</ul>
<p><img src="https://i.imgur.com/w8cOsfs.png"></p>
<hr>
<h2 id="實作留言板"><a href="#實作留言板" class="headerlink" title="實作留言板"></a>實作留言板</h2><p>可分為前後端。通常會先切出前端頁面，再加入功能，從資料庫取出並資料串聯到頁面。</p>
<h3 id="Step3-實作前端頁面"><a href="#Step3-實作前端頁面" class="headerlink" title="Step3. 實作前端頁面"></a>Step3. 實作前端頁面</h3><p>依照設計稿切出所需頁面，可參考<span class="exturl" data-url="aHR0cDovL21lbnRvci1wcm9ncmFtLmNvL210cjA0Z3JvdXAyL0hlaWRpL3dlZWs5L2luZGV4LnBocA==">留言板 DEMO<i class="fa fa-external-link-alt"></i></span>。</p>
<h3 id="Step4-實作目標功能"><a href="#Step4-實作目標功能" class="headerlink" title="Step4. 實作目標功能"></a>Step4. 實作目標功能</h3><p>接著就進入重頭戲，也就是替靜態網頁加上各種功能。</p>
<h3 id="PHP-常用函式"><a href="#PHP-常用函式" class="headerlink" title="PHP 常用函式"></a>PHP 常用函式</h3><ul>
<li>用 <code>-&gt;</code> 符號：取用物件中的變數<ul>
<li>例如：<code>$conn-&gt;error</code></li>
</ul>
</li>
<li><code>require_once();</code>：取用資料夾中其他 library</li>
</ul>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">require_once</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"conn.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// 連線到資料庫</span>
<span class="token keyword">require_once</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"utils.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// 導入常用函式</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h4 id="echo、print-r-與-var-dump-的區別"><a href="#echo、print-r-與-var-dump-的區別" class="headerlink" title="echo、print_r 與 var_dump 的區別"></a>echo、print_r 與 var_dump 的區別</h4><ul>
<li><code>echo</code>：印出變數、字串等<ul>
<li>例如: <code>echo &quot;hello World&quot;</code></li>
<li>若使用 echo 輸出引用變數時（如陣列），只會輸出陣列名</li>
</ul>
</li>
<li><code>print_r()</code>;：印出物件、陣列<ul>
<li>例如：<code>print_r($row);</code></li>
</ul>
</li>
<li><code>var_dump</code>：印出變數型態，作用是輸出變數的詳細資訊</li>
</ul>
<h4 id="讀取資料"><a href="#讀取資料" class="headerlink" title="讀取資料"></a>讀取資料</h4><ul>
<li><code>fetch_array()</code>：讀取資料同時，以數字與欄位名稱各存一次在陣列中</li>
<li><code>fetch_assoc()</code>：讀取的資料 Key 值設定為欄位名稱的陣列</li>
<li><code>fetch_row()</code>：讀取的資料 Key 值設定為依序的數字</li>
</ul>
<pre class="line-numbers language-htmlmixed" data-language="htmlmixed"><code class="language-htmlmixed">&lt;?php
  &#x2F;&#x2F; 把 $result 資料的 Key 值設定為欄位名稱的陣列
  while($row &#x3D; $result-&gt;fetch_assoc()) &#123;
?&gt;
  &lt;div class&#x3D;&quot;card&quot;&gt;
    &lt;div class&#x3D;&quot;card__avatar&quot;&gt;&lt;&#x2F;div&gt;
    &lt;div class&#x3D;&quot;card__body&quot;&gt;
        &lt;div class&#x3D;&quot;card__info&quot;&gt;
          &lt;span class&#x3D;&quot;card__author&quot;&gt;&lt;?php echo $row[&#39;nickname&#39;]; ?&gt;&lt;&#x2F;span&gt;
          &lt;span class&#x3D;&quot;card__time&quot;&gt;&lt;?php echo $row[&#39;created_at&#39;]; ?&gt;&lt;&#x2F;span&gt;
        &lt;&#x2F;div&gt;
        &lt;p class&#x3D;&quot;card__content&quot;&gt;&lt;?php echo $row[&#39;content&#39;]; ?&gt;&lt;&#x2F;p&gt;
    &lt;&#x2F;div&gt;
  &lt;&#x2F;div&gt;
  &lt;div class&#x3D;&quot;board__hr&quot;&gt;&lt;&#x2F;div&gt;
&lt;?php &#125; ?&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>若以 <code>print_r($row);</code> 印出上述程式碼，可知 <code>$row</code> 為陣列：<br><img src="https://i.imgur.com/EnxNFAl.png"></p>
<h4 id="檢查是否存在"><a href="#檢查是否存在" class="headerlink" title="檢查是否存在"></a>檢查是否存在</h4><ul>
<li><code>isset()</code>：檢查是否有此變數</li>
<li><code>empty()</code>：檢查是否有值</li>
</ul>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token variable">$username</span> <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
<span class="token comment">// 如果 session 中沒有存 username，就讀取 session</span>
<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">empty</span><span class="token punctuation">(</span><span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'username'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token variable">$username</span> <span class="token operator">=</span> <span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'username'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li><code>query()</code>：判斷資料庫查詢是否成功<ul>
<li>順利執行回傳 true</li>
<li>查詢的帳密有誤、查詢的指定資料庫、資料表欄位有誤等，均回傳 false</li>
</ul>
</li>
<li><code>exit()</code> 和 <code>die()</code>：兩者幾乎相同，均為輸出消息後退出程式</li>
</ul>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token comment">// 以 id 進行 DESC（遞減）排序："後新增的留言"會排在前面</span>
<span class="token variable">$result</span> <span class="token operator">=</span> <span class="token variable">$conn</span><span class="token operator">-></span><span class="token function">query</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"SELECT * FROM comments ORDER BY id DESC"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 檢查是否查詢成功</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$result</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'Error:'</span> <span class="token operator">.</span> <span class="token variable">$conn</span><span class="token operator">-></span><span class="token property">error</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li><code>sprintf()</code>：裡面可放入替代字元</li>
</ul>
<p>例如使用 <code>sprintf()</code> 做 SELECT：</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token comment">// handle_login.php</span>
  <span class="token variable">$sql</span> <span class="token operator">=</span> <span class="token function">sprintf</span><span class="token punctuation">(</span>
    <span class="token string double-quoted-string">"SELECT * FROM users WHERE username='%s' AND password='%s'"</span><span class="token punctuation">,</span>
    <span class="token variable">$username</span><span class="token punctuation">,</span>
    <span class="token variable">$password</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 把執行結果存在 $result 這個變數中</span>
<span class="token variable">$result</span> <span class="token operator">=</span> <span class="token variable">$conn</span><span class="token operator">-></span><span class="token function">query</span><span class="token punctuation">(</span><span class="token variable">$sql</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 確認是否有拿到結果</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$result</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token variable">$conn</span><span class="token operator">-></span><span class="token property">error</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>用 <code>sprintf()</code> 做 INSERT INTO：</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token comment">// handle_add_comment.php</span>
<span class="token variable">$sql</span> <span class="token operator">=</span> <span class="token function">sprintf</span><span class="token punctuation">(</span>
  <span class="token string double-quoted-string">"INSERT INTO comments(nickname, content) VALUES('%s', '%s')"</span><span class="token punctuation">,</span>
  <span class="token variable">$nickname</span><span class="token punctuation">,</span>
  <span class="token variable">$content</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// handle_register.php</span>
<span class="token variable">$sql</span> <span class="token operator">=</span> <span class="token function">sprintf</span><span class="token punctuation">(</span>
  <span class="token string double-quoted-string">"INSERT INTO users(nickname, username, password) VALUES('%s', '%s', '%s')"</span><span class="token punctuation">,</span>
  <span class="token variable">$nickname</span><span class="token punctuation">,</span>
  <span class="token variable">$username</span><span class="token punctuation">,</span>
  <span class="token variable">$password</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="conn-php-連線資料庫"><a href="#conn-php-連線資料庫" class="headerlink" title="conn.php 連線資料庫"></a><code>conn.php</code> 連線資料庫</h3><blockquote>
<p>【注意】由於 <code>conn.php</code> 放有帳號密碼等重要資料，因此在 commit 前需加入 <code>git.ignore</code>，不進行版本控制。</p>
</blockquote>
<p>程式碼如下：</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
  <span class="token variable">$server_name</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'localhost'</span><span class="token punctuation">;</span>
  <span class="token variable">$username</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'heidi'</span><span class="token punctuation">;</span>
  <span class="token variable">$password</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'1234'</span><span class="token punctuation">;</span>
  <span class="token variable">$db_name</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'heidiDB'</span><span class="token punctuation">;</span>

  <span class="token comment">// `mysqli` 的四個參數分別為：伺服器名稱、帳號、密碼、資料庫名稱</span>
  <span class="token variable">$conn</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">mysqli</span><span class="token punctuation">(</span><span class="token variable">$server_name</span><span class="token punctuation">,</span> <span class="token variable">$username</span><span class="token punctuation">,</span> <span class="token variable">$password</span><span class="token punctuation">,</span> <span class="token variable">$db_name</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// 確認是否出現連線錯誤</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">empty</span><span class="token punctuation">(</span><span class="token variable">$conn</span><span class="token operator">-></span><span class="token property">connect_error</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'資料庫連線錯誤:'</span> <span class="token operator">.</span> <span class="token variable">$conn</span><span class="token operator">-></span><span class="token property">connect_error</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token comment">// 設定編碼，避免出現亂碼</span>
  <span class="token variable">$conn</span><span class="token operator">-></span><span class="token function">query</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'SET NAMES UTF8'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 設定成臺灣時區</span>
  <span class="token variable">$conn</span><span class="token operator">-></span><span class="token function">query</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'SET time_zone = "+8:00"'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token delimiter important">?></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="index-php-顯示所有留言"><a href="#index-php-顯示所有留言" class="headerlink" title="index.php 顯示所有留言"></a><code>index.php</code> 顯示所有留言</h3><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
  <span class="token function">session_start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 連線到資料庫</span>
  <span class="token keyword">require_once</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"conn.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">require_once</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"utils.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token variable">$username</span> <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">empty</span><span class="token punctuation">(</span><span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'username'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token variable">$username</span> <span class="token operator">=</span> <span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'username'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token comment">// 以 id 進行 desc（遞減）排序，也就是"後新增的留言"會排在前面</span>
  <span class="token variable">$result</span> <span class="token operator">=</span> <span class="token variable">$conn</span><span class="token operator">-></span><span class="token function">query</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"SELECT * FROM comments ORDER BY id DESC"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 檢查是否有資料</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$result</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'Error:'</span> <span class="token operator">.</span> <span class="token variable">$conn</span><span class="token operator">-></span><span class="token property">error</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<hr>
<h2 id="儲存狀態的方式：Cookie-amp-Session"><a href="#儲存狀態的方式：Cookie-amp-Session" class="headerlink" title="儲存狀態的方式：Cookie &amp; Session"></a>儲存狀態的方式：Cookie &amp; Session</h2><h3 id="使用-Cookie-記住-HTTP-狀態"><a href="#使用-Cookie-記住-HTTP-狀態" class="headerlink" title="使用 Cookie 記住 HTTP 狀態"></a>使用 Cookie 記住 HTTP 狀態</h3><p>首先要了解 Cookie 是什麼：</p>
<ul>
<li>是一種小型純文字檔案，</li>
<li>網站伺服器會將其儲存在 client 端，以記錄使用者的相關資訊。</li>
<li>例如：會員登入狀態、瀏覽紀錄、購物車等。</li>
</ul>
<p>由於 HTTP 是一個無狀態協議，會把每一次收到的請求都視為獨立的行為。但伺服器能透過 response header 的 <code>Set-Cookie</code> 屬性，將使用者狀態記錄在 Cookie。</p>
<p>瀏覽器會在每次發送請求時，自動在 request header 帶上 Cookie 資料；伺服器即可藉由檢視 Cookie 內容，得知瀏覽器使用者的狀態。</p>
<p><img src="https://i.imgur.com/WsBvdz5.png"></p>
<p>但這麼做有個缺點，儲存在 client 端的 Cookie 是能夠被竄改的，因此不適合放機密或重要的資訊。這時有兩種解法：</p>
<h4 id="1-將-Cookie-內容加密"><a href="#1-將-Cookie-內容加密" class="headerlink" title="1. 將 Cookie 內容加密"></a>1. 將 Cookie 內容加密</h4><p>也就是 Cookie-based session，把狀態加密後存在 Cookie。但如果加密方式以及密鑰被破解，往後仍有安全疑慮。</p>
<h4 id="2-透過-Session-ID-辨識身分"><a href="#2-透過-Session-ID-辨識身分" class="headerlink" title="2. 透過 Session ID 辨識身分"></a>2. 透過 Session ID 辨識身分</h4><p>全名是 Session Identifier。如此 Server 只需在 Cookie 儲存一組亂數產生的 Session ID，其餘狀態資訊則存在 Server 端。</p>
<p>因此，Session 其實就是一種讓 Request 變成 stateful 的機制。</p>
<p><img src="https://i.imgur.com/Nbk8TCj.png"></p>
<h3 id="如何使用-Session"><a href="#如何使用-Session" class="headerlink" title="如何使用 Session"></a>如何使用 Session</h3><h4 id="儲存-Session"><a href="#儲存-Session" class="headerlink" title="儲存 Session"></a>儲存 Session</h4><p>當 <code>$_SEESION</code> 儲存成功，會進行下列三件事：</p>
<ol>
<li>產生 sesseion id (token) </li>
<li>把 username 寫入檔案</li>
<li><code>set-cookie</code>: <code>session-id</code></li>
</ol>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token comment">// 使用 Session 時，均需在開頭加上 session_start()</span>
<span class="token function">session_start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token variable">$username</span> <span class="token operator">=</span> <span class="token function">htmlspecialchars</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'username'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 把資料存在 Session 對應的 key 裡面</span>
<span class="token variable">$_SEESION</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'username'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$username</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="讀取-Session"><a href="#讀取-Session" class="headerlink" title="讀取 Session"></a>讀取 Session</h4><p>當 <code>$_SESSION</code> 讀取資料時，會進行下列三件事：</p>
<ol>
<li>從 cookie 裡讀取 PHPSESSID (token)</li>
<li>從檔案裡面讀取 session id 的內容</li>
<li>把內容放到 <code>$_SESSION</code></li>
</ol>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token function">session_start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 若 Session 內有存過 username，則 $username 為剛才存的 $_SESSION['username'] </span>
<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'username'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token variable">$username</span> <span class="token operator">=</span> <span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'username'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="清除-Session"><a href="#清除-Session" class="headerlink" title="清除 Session"></a>清除 Session</h4><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token function">session_start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 直接清除所有 session</span>
<span class="token function">session_destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>參考資料：</p>
<ol>
<li><span class="exturl" data-url="aHR0cHM6Ly9pdGhlbHAuaXRob21lLmNvbS50dy9hcnRpY2xlcy8xMDIyNzYwMg==">27. [WEB] Cookie &amp; Session 是什麼？<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9tZWRpdW0uY29tL0BodWxpdHcvc2Vzc2lvbi1hbmQtY29va2llLTE1ZTQ3ZWQ4MzhiYw==">白話 Session 與 Cookie：從經營雜貨店開始<i class="fa fa-external-link-alt"></i></span></li>
</ol>
]]></content>
      <categories>
        <category>Back-End</category>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>Back-End</tag>
        <tag>PHP</tag>
      </tags>
  </entry>
  <entry>
    <title>[week 9] 後端基礎 - PHP 語法、資料庫 MySQL</title>
    <url>/php-mysql/</url>
    <content><![CDATA[<blockquote>
<p>本篇為 <span class="exturl" data-url="aHR0cHM6Ly9saWRlbXkuY29tL3AvYmUxMDEtcGhwLW15c3Fs">[BE101] 用 PHP 與 MySQL 學習後端基礎<i class="fa fa-external-link-alt"></i></span> 這門課程的學習筆記。如有錯誤歡迎指正。</p>
</blockquote>
<pre class="line-numbers language-none"><code class="language-none">學習目標：

 P1 你知道 PHP 是什麼
 P1 你知道前端與後端的差別
 P1 你知道什麼是資料庫
 P1 你了解基本的 SQL 語法，包括 Select、Insert Into、Delete 與 Update
 P1 你能夠寫出基本的 CRUD 應用
 P1 你知道什麼是 Session
 P1 你知道什麼是 Cookie
 P1 你知道 Session 與 Cookie 的差別<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<span id="more"></span>
<hr>
<h2 id="「後端」是什麼？"><a href="#「後端」是什麼？" class="headerlink" title="「後端」是什麼？"></a>「後端」是什麼？</h2><p>後端實際上包含以下三大項（括弧內為舉例使用的程式）：</p>
<ol>
<li>網頁伺服器（Apache）：伺服器程式。專門處理 Request 與 Response，是後端最重要的部分。</li>
<li>寫程式（PHP）：接收網頁伺服器的 Request 並執行後端語言，處理成 output，通常是 html。</li>
<li>資料庫系統（MySQL）：資料庫程式。專門用來操作資料庫，能夠更有效率儲存、修改或查詢資料。</li>
</ol>
<h2 id="後端環境建置"><a href="#後端環境建置" class="headerlink" title="後端環境建置"></a>後端環境建置</h2><p>以下透過 XAMPP 來進行實作。XAMPP 結合了 Apache + <span class="exturl" data-url="aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3poLXR3L01hcmlhREI=">MariaDB<i class="fa fa-external-link-alt"></i></span> + PHP，能夠快速建置後端環境。</p>
<blockquote>
<p><span class="exturl" data-url="aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3dpa2kvTXlTUUw=">MySQL<i class="fa fa-external-link-alt"></i></span> 為目前市佔率最高的資料庫系統。但 XAMPP 上使用的是 MariaDB 而非 MySQL。這是因為當初 MySQL 被甲骨文公司收購後，開發者擔心會有後患，像是轉為商用等等，於是社群就 clone 出 MariaDB ，因此這兩個系統幾乎完全相同。</p>
</blockquote>
<h3 id="XAMPP"><a href="#XAMPP" class="headerlink" title="XAMPP"></a>XAMPP</h3><ol>
<li>到 <span class="exturl" data-url="aHR0cHM6Ly93d3cuYXBhY2hlZnJpZW5kcy5vcmcvemhfdHcvaW5kZXguaHRtbA==">XAMPP 官網<i class="fa fa-external-link-alt"></i></span> 下載程式並安裝</li>
<li>開啟 XAMPP 並運行 Apache 和 MySQL</li>
</ol>
<p><img src="https://i.imgur.com/UwHMX0L.png"></p>
<ol start="3">
<li>點選 Adimn 開啟網頁：<code>http://localhost/dashboard/</code>，出現以下畫面就代表安裝成功！</li>
</ol>
<p><img src="https://i.imgur.com/5V5s0ra.png" alt="XAMPP"></p>
<ol start="4">
<li>以 XAMPP 程式而言，PHP 檔案都會放在 htdocs 資料夾內，且<code>網址路徑 = 檔案路徑</code></li>
</ol>
<p><img src="https://i.imgur.com/0DMgMWL.png" alt="htdocs"></p>
<ol start="5">
<li>以下為範例在 hotdocs 另建一個資料夾 heidi，裡面新建 test.php，並在編輯器輸入下列程式碼：</li>
</ol>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
  <span class="token keyword">echo</span> <span class="token string double-quoted-string">"I am Heidi, yo!"</span>
<span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<ol start="6">
<li>以瀏覽器運行該網址：<code>http://localhost/heidi/test.php</code></li>
</ol>
<p><img src="https://i.imgur.com/dt6vRqk.png" alt="test.php"></p>
<hr>
<h2 id="靜態網頁-vs-動態網頁"><a href="#靜態網頁-vs-動態網頁" class="headerlink" title="靜態網頁 vs 動態網頁"></a>靜態網頁 vs 動態網頁</h2><p>網頁中的「靜態」與「動態」，並非代表視覺上的移動，兩者差異在於是否以「伺服器程式」去產生網頁上的資料。</p>
<h3 id="靜態網頁"><a href="#靜態網頁" class="headerlink" title="靜態網頁"></a>靜態網頁</h3><ul>
<li>server 收到 request 後，找到相對應的檔案（<code>.css</code> 是靜態檔案）後，把檔案直接回傳 response</li>
<li>檔案內容是什麼就回傳什麼</li>
</ul>
<p><img src="https://i.imgur.com/p1FRoiG.png"></p>
<h3 id="動態網頁"><a href="#動態網頁" class="headerlink" title="動態網頁"></a>動態網頁</h3><ul>
<li>server 收到 request 後，會將 <code>.php</code> 檔案給 php 處理成 output，再傳給 server 後回傳 response</li>
<li>可根據用戶的點擊、輸入等操作，迅速產生響應與動態變化，例如部落格、留言板等</li>
</ul>
<p><img src="https://i.imgur.com/Y5BDM4e.png"></p>
<h2 id="PHP-是什麼？"><a href="#PHP-是什麼？" class="headerlink" title="PHP 是什麼？"></a>PHP 是什麼？</h2><p>PHP 全名是 Hypertext Preprocessor（超文本預處理器）。和 ASP、JSP 等都是動態網頁開發語言。</p>
<p>PHP 語言是伺服器端（Server）執行的網頁，因此 PHP 必須在伺服器端執行完後，再將結果回傳給用戶端（Clint）的瀏覽器檢視並渲染。</p>
<h3 id="Apache、PHP-與資料庫運作原理"><a href="#Apache、PHP-與資料庫運作原理" class="headerlink" title="Apache、PHP 與資料庫運作原理"></a>Apache、PHP 與資料庫運作原理</h3><p><img src="https://i.imgur.com/XHHg6LO.png"></p>
<pre class="line-numbers language-none"><code class="language-none">request → apache → php → output → apache → response
　　　　　 (server)       (html)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>執行步驟大致如下：</p>
<ol>
<li>server 接收 request</li>
<li>server 轉給 php 處理</li>
<li>php 處理成 html</li>
<li>將 output 傳給 server</li>
<li>server 回傳 response</li>
</ol>
<p>由此可知，後端最重要的是「伺服器程式」。若沒有伺服器程式，網站會直接掛掉；但沒有後端語言，就只是變回靜態網站，檔案內容是什麼就回傳什麼。</p>
<p>參考資料：<span class="exturl" data-url="aHR0cHM6Ly93d3cuaGFwcHljb2RpbmcudG9kYXkvcG9zdHMvMjM=">PHP新手指南：3分鐘快速認識PHP<i class="fa fa-external-link-alt"></i></span></p>
<h2 id="PHP-基礎語法"><a href="#PHP-基礎語法" class="headerlink" title="PHP 基礎語法"></a>PHP 基礎語法</h2><ul>
<li>php 語法以 <code>&lt;? php</code> 開頭，<code>?&gt;</code> 結尾包起來，沒有包含在其中的程式碼，就是單純的 html，會直接被顯示出來</li>
<li>每句結尾須加上分號 <code>;</code></li>
</ul>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>

  <span class="token keyword">echo</span> <span class="token string double-quoted-string">"Hello World"</span><span class="token punctuation">;</span>    <span class="token comment">// 印出 Hello World</span>
  
<span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>變數均以 <code>$</code> 符號開頭</li>
<li>不需要宣告變數，直接賦值即可使用</li>
<li>字串連接用 <code>.</code>，數字相加用 <code>+</code></li>
</ul>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>

  <span class="token variable">$x</span> <span class="token operator">=</span> <span class="token number">10000</span><span class="token punctuation">;</span>
  <span class="token variable">$y</span> <span class="token operator">=</span> <span class="token number">5.5</span><span class="token punctuation">;</span>
  <span class="token variable">$str</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'hello'</span><span class="token punctuation">;</span>
  
  <span class="token keyword">echo</span> <span class="token variable">$x</span> <span class="token operator">+</span> <span class="token variable">$y</span> <span class="token operator">.</span> <span class="token string single-quoted-string">'&lt;br>'</span><span class="token punctuation">;</span>  <span class="token comment">// 印出 10005.5</span>
  <span class="token keyword">echo</span> <span class="token variable">$x</span> <span class="token operator">.</span> <span class="token variable">$str</span><span class="token punctuation">;</span>         <span class="token comment">//      10000hello</span>
  
<span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="迴圈"><a href="#迴圈" class="headerlink" title="迴圈"></a>迴圈</h3><p>寫法和其他程式語言差不多，惟須注意變數前要加 <code>$</code>：</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token variable">$i</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token variable">$i</span> <span class="token operator">&lt;=</span> <span class="token number">5</span><span class="token punctuation">;</span> <span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">echo</span> <span class="token variable">$i</span> <span class="token operator">.</span> <span class="token string single-quoted-string">'&lt;br>'</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>結果如下：</p>
<p><img src="https://i.imgur.com/RgZfI7h.png" alt="迴圈"></p>
<h3 id="陣列-array"><a href="#陣列-array" class="headerlink" title="陣列 array"></a>陣列 array</h3><ul>
<li><code>sizeof()</code>：返回單元中的元素數量，和 <code>count()</code> 功能相同。</li>
</ul>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token comment">// 建立陣列</span>
<span class="token variable">$arr</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 印出陣列長度：5</span>
<span class="token keyword">echo</span> <span class="token variable">$length</span> <span class="token operator">=</span> <span class="token function">sizeof</span><span class="token punctuation">(</span><span class="token variable">$arr</span><span class="token punctuation">)</span> <span class="token operator">.</span> <span class="token string single-quoted-string">'&lt;br>'</span><span class="token punctuation">;</span>

<span class="token comment">// 印出最後一個元素：9</span>
<span class="token keyword">echo</span> <span class="token variable">$arr</span><span class="token punctuation">[</span><span class="token function">sizeof</span><span class="token punctuation">(</span><span class="token variable">$arr</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>輸出完整陣列：<ul>
<li><code>var_dump()</code>：輸出 index =&gt; 型態和值：type(value)</li>
<li><code>print_r()</code>：較簡潔，輸出 index =&gt; 值：[value]</li>
</ul>
</li>
</ul>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token variable">$arr</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'a'</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'b'</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">echo</span> <span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$arr</span><span class="token punctuation">)</span> <span class="token operator">.</span> <span class="token string single-quoted-string">'&lt;br>'</span><span class="token punctuation">;</span>
<span class="token comment">// 印出 array(5) &#123; [0]=> int(1) [1]=> string(1) "a" [2]=> int(10) [3]=> string(1) "b" [4]=> int(100) &#125;</span>

<span class="token function">print_r</span><span class="token punctuation">(</span><span class="token variable">$arr</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 印出 Array ( [0] => 1 [1] => a [2] => 10 [3] => b [4] => 100 )</span>
<span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="其他函式"><a href="#其他函式" class="headerlink" title="其他函式"></a>其他函式</h3><ul>
<li><code>data(&quot;Y-m-d H:i:s&quot;)</code>：輸出現在時間</li>
</ul>
<hr>
<h2 id="資料庫系統-Database-System"><a href="#資料庫系統-Database-System" class="headerlink" title="資料庫系統 Database System"></a>資料庫系統 Database System</h2><ul>
<li>資料庫系統（Database System）：專門管理資料庫的程式</li>
<li>資料庫（Database）：儲存資料的地方，可視為多個資料表的集合</li>
</ul>
<p>之所以要有資料庫系統，利用現成的資料庫介面，我們能夠快速進行新增、修改、查看、刪除資料等操作，方便管理檔案與維護。</p>
<h3 id="關聯式資料庫（RDBMS）"><a href="#關聯式資料庫（RDBMS）" class="headerlink" title="關聯式資料庫（RDBMS）"></a>關聯式資料庫（RDBMS）</h3><ul>
<li>全名是 Relational Database Management System</li>
<li>以 SQL 語言（專門用來管理與查詢關聯式資料庫）操作</li>
<li>用不同 table 存取不同類型的內容，但資料之間保有相關性，避免不相關的資料互相干擾</li>
<li>常見程式：MySQL、PostgreSQL、Microsoft SQL Server</li>
<li>例如：會員資料庫，其中明確關聯是會員 ID</li>
</ul>
<h3 id="非關聯式資料庫（NoSQL）"><a href="#非關聯式資料庫（NoSQL）" class="headerlink" title="非關聯式資料庫（NoSQL）"></a>非關聯式資料庫（NoSQL）</h3><ul>
<li>全名是 Not Only SQL</li>
<li>以 NoSQL 語言操作</li>
<li>彈性較高，沒有形態上的限制，可儲存較複雜的資料</li>
<li>常見程式：mongoDB</li>
<li>例如：存取 log 日誌、社群上的大量資訊（按讚數）</li>
</ul>
<h3 id="如何管理資料庫"><a href="#如何管理資料庫" class="headerlink" title="如何管理資料庫"></a>如何管理資料庫</h3><p>我們可分別利用 CLI 或 GUI 介面來進行管理：</p>
<ul>
<li>CLI：mysql connect，在終端機下指令連線</li>
<li>GUI：phpMyAdmin、Adminer、Sequel Pro 等，利用網頁介面連線</li>
</ul>
<h3 id="phpMyAdmin"><a href="#phpMyAdmin" class="headerlink" title="phpMyAdmin"></a>phpMyAdmin</h3><p>phpMyAdmin 是一套基於 PHP 寫的 GUI 資料庫管理軟體，其本質就是一個 PHP 檔案，讓管理者能夠以 GUI 介面來管理 MySQL 資料庫。</p>
<p>可從 <code>http://localhost:8080</code> 點選 phpmyadmin 進入：</p>
<p><img src="https://i.imgur.com/1guMNR9.png"></p>
<p>管理介面如下所示：</p>
<p><img src="https://i.imgur.com/hNpYDDJ.png"></p>
<h2 id="Table-schema-結構簡介"><a href="#Table-schema-結構簡介" class="headerlink" title="Table schema 結構簡介"></a>Table schema 結構簡介</h2><p>Table schema（資料庫結構），當我們在開資料庫以前，要先進行資料型態、有無預設值、是否為唯一等設定，而之後的資料均須符合當初設定的結構，否則會無法成功新增。</p>
<h3 id="資料型態"><a href="#資料型態" class="headerlink" title="資料型態"></a>資料型態</h3><ul>
<li>id：<code>int</code><ul>
<li>勾選 ai（auto increment）為保證遞增，但 id 不一定為連續</li>
<li>設定 primary index：代表是唯一值</li>
</ul>
</li>
<li>VARCHAR：適合存取較短的資料，可設定長度。通常用於：預期資料有特定長度的情況。</li>
<li>TEXT：適合存取較長的資料，不可設定長度。通常用於：留言板、部落格文章。<ul>
<li>通常建議使用 VARCHAR，查詢速度較快，且能夠有效減少資料庫文件大小。</li>
</ul>
</li>
<li>日期：datetime、預設值改成 current timestamp</li>
</ul>
<p>參考資料：<span class="exturl" data-url="aHR0cHM6Ly9yZWFkMDEuY29tL095eGVHeS5odG1s">mysql中char，varchar與text類型的區別和選用<i class="fa fa-external-link-alt"></i></span></p>
<h3 id="索引-index"><a href="#索引-index" class="headerlink" title="索引 index"></a>索引 index</h3><p>可作為書本的目錄，建立某欄位的索引，目的是加快搜尋速度。</p>
<h4 id="Index：索引鍵"><a href="#Index：索引鍵" class="headerlink" title="Index：索引鍵"></a>Index：索引鍵</h4><ul>
<li>可多欄位設定 Index</li>
</ul>
<h4 id="Primary-Key（PK）：主鍵"><a href="#Primary-Key（PK）：主鍵" class="headerlink" title="Primary Key（PK）：主鍵"></a>Primary Key（PK）：主鍵</h4><ul>
<li>每個 table 只能有一個 Primary Key</li>
<li>不能為空值、不能重複，是 table 裡面最主要的欄位</li>
<li>當設置某欄位為 Primary Key 時，該欄位會自動加上 unique index</li>
</ul>
<h4 id="Unique-Index：不重複鍵"><a href="#Unique-Index：不重複鍵" class="headerlink" title="Unique Index：不重複鍵"></a>Unique Index：不重複鍵</h4><ul>
<li>和 Index 相同，差異在於不能允許重複值</li>
</ul>
<p>參考資料：<span class="exturl" data-url="aHR0cHM6Ly9ibG9nLm5pY2xpbi50dy8yMDE4LzA2LzA5L3NxbC0lRTUlOUYlQkElRTYlOUMlQUMlRTglQTclODAlRTUlQkYlQjUtcHJpbWFyeS1rZXktLy1pbmRleC0vLXVuaXF1ZS0lRTUlQjclQUUlRTUlODglQTUv">[SQL 基本觀念] primary Key / Index / Unique 差別<i class="fa fa-external-link-alt"></i></span></p>
<hr>
<h2 id="MySQL-基礎語法"><a href="#MySQL-基礎語法" class="headerlink" title="MySQL 基礎語法"></a>MySQL 基礎語法</h2><h3 id="查詢資料-SELECT"><a href="#查詢資料-SELECT" class="headerlink" title="查詢資料 SELECT"></a>查詢資料 <code>SELECT</code></h3><ul>
<li>使用 <code>*</code> 查詢全部資料：<code>SELECT * FROM 資料夾名稱</code></li>
</ul>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token constant">SELECT</span> <span class="token operator">*</span> <span class="token constant">FROM</span> users
<span class="token comment">// 從資料夾 users 裡面找到所有列，並取出所有欄位的值。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<ul>
<li>使用 <code>where</code> 條件設定：<code>SELECT * FROM 資料夾名稱 WHERE 條件</code></li>
</ul>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token constant">SELECT</span> <span class="token operator">*</span> <span class="token constant">FROM</span> users <span class="token constant">WHERE</span> username<span class="token operator">=</span>heidi
<span class="token comment">// 從資料夾 users 裡面，找到 username 是 heidi 的那列，並取出該欄位的所有值。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h3 id="新增資料-INSERT"><a href="#新增資料-INSERT" class="headerlink" title="新增資料 INSERT"></a>新增資料 <code>INSERT</code></h3><ul>
<li>使用 <code>INSERT INTO</code> 指令可新增資料：</li>
</ul>
<pre class="line-numbers language-ph" data-language="ph"><code class="language-ph">INSERT INTO &quot;表格名&quot; (&quot;欄位1&quot;, &quot;欄位2&quot;, ...) VALUES (&quot;值1&quot;, &quot;值2&quot;, ...);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token constant">INSERT</span> <span class="token constant">INTO</span> <span class="token function">users</span><span class="token punctuation">(</span>username<span class="token punctuation">,</span> content<span class="token punctuation">)</span> <span class="token function">values</span> <span class="token punctuation">(</span>Peter<span class="token punctuation">,</span> <span class="token number">1234</span><span class="token punctuation">)</span>
<span class="token comment">// 新增一筆記錄，username 是 Peter；content 是 1234。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h3 id="修改資料-UPDATE"><a href="#修改資料-UPDATE" class="headerlink" title="修改資料 UPDATE"></a>修改資料 <code>UPDATE</code></h3><pre class="line-numbers language-ph" data-language="ph"><code class="language-ph">UPDATE &quot;表格名&quot; SET &quot;欄位1&quot;&#x3D;[新值] WHERE &quot;條件&quot;;
&#x2F;&#x2F; 若沒有加上 WHERE，就會更新表中的所有行<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token constant">UPDATE</span> users <span class="token constant">SET</span> username <span class="token operator">=</span> <span class="token string double-quoted-string">"user02"</span><span class="token punctuation">,</span> content <span class="token operator">=</span> <span class="token string double-quoted-string">"content02"</span> <span class="token constant">WHERE</span> id <span class="token operator">=</span><span class="token number">2</span>
<span class="token comment">// 修改 id 為 2 那列，username 為 user02；content 為 content02</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h3 id="刪除資料-DELETE"><a href="#刪除資料-DELETE" class="headerlink" title="刪除資料 DELETE"></a>刪除資料 <code>DELETE</code></h3><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token constant">DELETE</span> <span class="token constant">FROM</span> users <span class="token constant">WHERE</span> id <span class="token operator">=</span> <span class="token number">2</span>
<span class="token comment">// 若沒有加上 WHERE，系統會選取所有行，即刪除所有資料。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h2 id="從前端傳資料給後端"><a href="#從前端傳資料給後端" class="headerlink" title="從前端傳資料給後端"></a>從前端傳資料給後端</h2><p>前端通常利用 <code>form</code> 來傳送資料給後端：</p>
<ul>
<li>form 要設定 method 和 action 屬性<ul>
<li>method：方法，<code>GET</code> 或 <code>POST</code></li>
<li>action：接收資料的程式</li>
</ul>
</li>
</ul>
<ol>
<li>先在 index.php 檔案建立表單</li>
</ol>
<pre class="line-numbers language-htmlmixed" data-language="htmlmixed"><code class="language-htmlmixed">&lt;form method&#x3D;&quot;GET&quot; action&#x3D;&quot;test.php&quot;&gt;
  name: &lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;name&quot;&#x2F;&gt;
  age: &lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;age&quot;&#x2F;&gt;
  &lt;input type&#x3D;&quot;submit&quot;&#x2F;&gt;
&lt;&#x2F;form&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>在瀏覽器開啟表單如下：</p>
<p><img src="https://i.imgur.com/Dl9UlBX.png"></p>
<ol start="2">
<li>在接收資料的 test.php 檔案撰寫 php 語法</li>
</ol>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
  <span class="token comment">// 用 empty 檢查表單是否為空</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">empty</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token keyword">empty</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'age'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
      <span class="token keyword">echo</span> <span class="token string single-quoted-string">'資料有缺，請再次填寫&lt;br>'</span><span class="token punctuation">;</span>
      <span class="token keyword">exit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 終止程序</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
  <span class="token comment">// 接收 method 為 GET 的 From input</span>
  <span class="token keyword">echo</span> <span class="token string double-quoted-string">"Hello!"</span> <span class="token operator">.</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'name'</span><span class="token punctuation">]</span> <span class="token operator">.</span> <span class="token string double-quoted-string">" &lt;br>"</span><span class="token punctuation">;</span>
  <span class="token keyword">echo</span> <span class="token string double-quoted-string">"Your age is"</span> <span class="token operator">.</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'age'</span><span class="token punctuation">]</span> <span class="token operator">.</span> <span class="token string double-quoted-string">" &lt;br>"</span><span class="token punctuation">;</span>

  <span class="token function">print_r</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>在前端以 GET 方法提交表單，資料會以 Query String 的形式將加在網址後方：</p>
<p><img src="https://i.imgur.com/nEr23zE.png"></p>
<h2 id="用-PHP-操作-MySQL"><a href="#用-PHP-操作-MySQL" class="headerlink" title="用 PHP 操作 MySQL"></a>用 PHP 操作 MySQL</h2><h3 id="從-PHP-連線到-MySQL-資料庫"><a href="#從-PHP-連線到-MySQL-資料庫" class="headerlink" title="從 PHP 連線到 MySQL 資料庫"></a>從 PHP 連線到 MySQL 資料庫</h3><h4 id="conn-php"><a href="#conn-php" class="headerlink" title="conn.php"></a>conn.php</h4><ul>
<li>存放帳密等重要資料，需加入 git.ignore 不進行版本控制</li>
</ul>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
  <span class="token variable">$server_name</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'localhost'</span><span class="token punctuation">;</span>
  <span class="token variable">$username</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'heidi'</span><span class="token punctuation">;</span>
  <span class="token variable">$password</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'h232425123'</span><span class="token punctuation">;</span>
  <span class="token variable">$db_name</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'heidi'</span><span class="token punctuation">;</span>

  <span class="token comment">// mysqli 的四個參數分別為：伺服器名稱、帳號、密碼、資料庫名稱</span>
  <span class="token variable">$conn</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">mysqli</span><span class="token punctuation">(</span><span class="token variable">$server_name</span><span class="token punctuation">,</span> <span class="token variable">$username</span><span class="token punctuation">,</span> <span class="token variable">$password</span><span class="token punctuation">,</span> <span class="token variable">$db_name</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">empty</span><span class="token punctuation">(</span><span class="token variable">$conn</span><span class="token operator">-></span><span class="token property">connect_error</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'資料庫連線錯誤:'</span> <span class="token operator">.</span> <span class="token variable">$conn</span><span class="token operator">-></span><span class="token property">connect_error</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// die()：終止程序</span>
  <span class="token punctuation">&#125;</span>
<span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="讀取資料"><a href="#讀取資料" class="headerlink" title="讀取資料"></a>讀取資料</h4><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
  <span class="token comment">// 連線到資料庫</span>
  <span class="token keyword">require_once</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'conn.php'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// 用 empty 檢查表單是否為空</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">empty</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token keyword">empty</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'age'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
      <span class="token keyword">echo</span> <span class="token string single-quoted-string">'資料有缺，請再次填寫&lt;br>'</span><span class="token punctuation">;</span>
      <span class="token keyword">exit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 終止程序</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
  <span class="token comment">// 接收 method 為 GET 的 From input</span>
  <span class="token keyword">echo</span> <span class="token string double-quoted-string">"Hello! "</span> <span class="token operator">.</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'name'</span><span class="token punctuation">]</span> <span class="token operator">.</span> <span class="token string double-quoted-string">" &lt;br>"</span><span class="token punctuation">;</span>
  <span class="token keyword">echo</span> <span class="token string double-quoted-string">"Your age is "</span> <span class="token operator">.</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'age'</span><span class="token punctuation">]</span> <span class="token operator">.</span> <span class="token string double-quoted-string">" &lt;br>"</span><span class="token punctuation">;</span>

  <span class="token function">print_r</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="新增資料"><a href="#新增資料" class="headerlink" title="新增資料"></a>新增資料</h4><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
  <span class="token comment">// 連線到資料庫</span>
  <span class="token keyword">require_once</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'conn.php'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// $_POST['key-name'] 取得輸入的資料</span>
  <span class="token comment">// 以 empty() 判斷值是否為 null</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">empty</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'username'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// 中斷後面程序並顯示內容，() 內可輸入訊息字串</span>
    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'請輸入 username'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
  <span class="token punctuation">&#125;</span>
 
  <span class="token variable">$username</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'username'</span><span class="token punctuation">]</span><span class="token punctuation">;</span> 
         <span class="token comment">// sprintf() 裡面可以放入替代字元</span>
  <span class="token variable">$sql</span> <span class="token operator">=</span> <span class="token function">sprintf</span><span class="token punctuation">(</span>  
     <span class="token comment">// 插入新欄位，%s 代表字串，值是第二個參數</span>
    <span class="token string double-quoted-string">"INSERT INTO users(username) VALUES('%s')"</span><span class="token punctuation">,</span>
    <span class="token variable">$username</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 執行結果存在 $result 這個變數中</span>
  <span class="token variable">$result</span> <span class="token operator">=</span> <span class="token variable">$conn</span><span class="token operator">-></span><span class="token function">query</span><span class="token punctuation">(</span><span class="token variable">$sql</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 確認是否有拿到結果</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$result</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token variable">$conn</span><span class="token operator">-></span><span class="token property">error</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token function">header</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"Location: index.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 自動跳轉回 index.php</span>
<span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="刪除資料"><a href="#刪除資料" class="headerlink" title="刪除資料"></a>刪除資料</h4><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
  <span class="token comment">// 連線到資料庫</span>
  <span class="token keyword">require_once</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'conn.php'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">empty</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'id'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'請輸入 id'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token variable">$id</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'id'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token variable">$sql</span> <span class="token operator">=</span> <span class="token function">sprintf</span><span class="token punctuation">(</span>
    <span class="token string double-quoted-string">"delete from users where id = %d"</span><span class="token punctuation">,</span>
    <span class="token variable">$id</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">echo</span> <span class="token variable">$sql</span> <span class="token operator">.</span> <span class="token string single-quoted-string">'&lt;br>'</span><span class="token punctuation">;</span>
  <span class="token variable">$result</span> <span class="token operator">=</span> <span class="token variable">$conn</span><span class="token operator">-></span><span class="token function">query</span><span class="token punctuation">(</span><span class="token variable">$sql</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$result</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token variable">$conn</span><span class="token operator">-></span><span class="token property">error</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$conn</span><span class="token operator">-></span><span class="token property">affected_rows</span> <span class="token operator">>=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 判斷影響 1 列以上資料</span>
    <span class="token keyword">echo</span> <span class="token string single-quoted-string">'刪除成功'</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">echo</span> <span class="token string single-quoted-string">'查無資料'</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token comment">// header("Location: index.php");</span>
<span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="編輯資料"><a href="#編輯資料" class="headerlink" title="編輯資料"></a>編輯資料</h4><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
  <span class="token keyword">require_once</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'conn.php'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">empty</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'id'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token keyword">empty</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'username'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'請輸入 id 與 username'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token variable">$id</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'id'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token variable">$username</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'username'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token variable">$sql</span> <span class="token operator">=</span> <span class="token function">sprintf</span><span class="token punctuation">(</span>
    <span class="token comment">// 帶入兩個參數：%s（字串）、%d</span>
    <span class="token string double-quoted-string">"update users set username='%s' where id=%d"</span><span class="token punctuation">,</span>
    <span class="token variable">$username</span><span class="token punctuation">,</span>
    <span class="token variable">$id</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">echo</span> <span class="token variable">$sql</span> <span class="token operator">.</span> <span class="token string single-quoted-string">'&lt;br>'</span><span class="token punctuation">;</span>
  <span class="token variable">$result</span> <span class="token operator">=</span> <span class="token variable">$conn</span><span class="token operator">-></span><span class="token function">query</span><span class="token punctuation">(</span><span class="token variable">$sql</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$result</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token variable">$conn</span><span class="token operator">-></span><span class="token property">error</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token function">header</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"Location: index.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<hr>
<p>參考資料：</p>
<ol>
<li><span class="exturl" data-url="aHR0cHM6Ly9tZWRpdW0uY29tL0BtaWFoc3V3b3JrLyVFNyVBQyVBQyVFNCVCOSU5RCVFOSU4MCVCMS0lRTUlQkUlOEMlRTclQUIlQUYlRTUlOUYlQkElRTclQTQlOEUtJUU1JTlGJUJBJUU2JTlDJUFDJUU5JTgxJThCJUU0JUJEJTlDJUU1JThFJTlGJUU3JTkwJTg2LSVFNiU5MCVBRCVFOSU4NSU4RC14YW1wcC0xNTkzZjk4MTczNzc=">[第九週]後端基礎— 基本運作原理(搭配 XAMPP) - Mia<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9tZWRpdW0uY29tL0BtaWFoc3V3b3JrLyVFNyVBQyVBQyVFNCVCOSU5RCVFOSU4MCVCMS0lRTUlQkUlOEMlRTclQUIlQUYlRTUlOUYlQkElRTclQTQlOEUtcGhwLSVFNSU5RiVCQSVFNyVBNCU4RSVFOCVBQSU5RSVFNiVCMyU5NS1hNjMyODc4YmY4ZWE=">[第九週]後端基礎 — PHP 基礎語法- Mia<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9oYWNrbWQuaW8vYlMtMmV2bEFUY2VWYy1kaS1STXhWQQ==">後端基礎 - PHP、SQL、Database - RZ-Huang<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9oYWNrbWQuaW8vSFNnaWJSajJSMjJlbzdiay1xYkpzdz92aWV3LQ==">後端基礎 PHP 與 MySQL - Ruofan Wei<i class="fa fa-external-link-alt"></i></span></li>
</ol>
]]></content>
      <categories>
        <category>Back-End</category>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>Back-End</tag>
        <tag>Database</tag>
        <tag>PHP</tag>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>[week 12] 結合前端與後端功能實作 Todo List</title>
    <url>/php-todolist/</url>
    <content><![CDATA[<blockquote>
<p>本篇為 <span class="exturl" data-url="aHR0cHM6Ly9saWRlbXkuY29tL3AvYmUxMDEtcGhwLW15c3Fs">[BE101] 用 PHP 與 MySQL 學習後端基礎<i class="fa fa-external-link-alt"></i></span> 這門課程的學習筆記。如有錯誤歡迎指正。</p>
</blockquote>
<blockquote>
<p>hw2：<span class="exturl" data-url="aHR0cDovL21lbnRvci1wcm9ncmFtLmNvL210cjA0Z3JvdXAyL0hlaWRpL3dlZWsxMi9odzIvaW5kZXguaHRtbA==">Todo List<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
<span id="more"></span>

<h2 id="前端實作"><a href="#前端實作" class="headerlink" title="前端實作"></a>前端實作</h2><h3 id="目標功能："><a href="#目標功能：" class="headerlink" title="目標功能："></a>目標功能：</h3><ul>
<li>新增功能：add</li>
<li>刪除功能：delete</li>
<li>編輯功能：update</li>
<li>更新狀態功能：checked / unchecked</li>
<li>切換列表：All / Active / Completed </li>
<li>清除所有 todo：Clear</li>
</ul>
<p>以上功能只要利用前端就能達成，程式碼如下：</p>
<h3 id="前端介面"><a href="#前端介面" class="headerlink" title="前端介面"></a>前端介面</h3><pre class="line-numbers language-htmlmixed" data-language="htmlmixed"><code class="language-htmlmixed">&lt;!DOCTYPE html&gt;
&lt;html lang&#x3D;&quot;en&quot;&gt;

&lt;head&gt;
  &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;
  &lt;meta name&#x3D;&quot;viewport&quot; content&#x3D;&quot;width&#x3D;device-width, initial-scale&#x3D;1.0&quot;&gt;
  &lt;title&gt;Week12 Todo List&lt;&#x2F;title&gt;
  &lt;script src&#x3D;&quot;https:&#x2F;&#x2F;code.jquery.com&#x2F;jquery-3.5.1.js&quot;&gt;&lt;&#x2F;script&gt;
  &lt;link rel&#x3D;&quot;stylesheet&quot; href&#x3D;&quot;https:&#x2F;&#x2F;stackpath.bootstrapcdn.com&#x2F;bootstrap&#x2F;4.5.2&#x2F;css&#x2F;bootstrap.min.css&quot;
    integrity&#x3D;&quot;sha384-JcKb8q3iqJ61gNV9KGb8thSsNjpSL0n8PARn9HuZOnIxN0hoP+VmmDGMN5t9UJ0Z&quot; crossorigin&#x3D;&quot;anonymous&quot;&gt;
  &lt;link rel&#x3D;&quot;stylesheet&quot; href&#x3D;&quot;css&#x2F;style.css&quot;&gt;
&lt;&#x2F;head&gt;

&lt;body&gt;

  &lt;div class&#x3D;&quot;wrapper&quot;&gt;
    &lt;div class&#x3D;&quot;todo__header&quot;&gt;
      &lt;button type&#x3D;&quot;button&quot; class&#x3D;&quot;btn btn-save&quot; href&#x3D;&quot;#&quot;&gt;Save&lt;&#x2F;button&gt;
      &lt;button type&#x3D;&quot;button&quot; class&#x3D;&quot;btn clear-all&quot; href&#x3D;&quot;#&quot;&gt;Reset&lt;&#x2F;button&gt;
    &lt;&#x2F;div&gt;
    &lt;h1&gt;Todo List&lt;&#x2F;h1&gt;
    &lt;div class&#x3D;&quot;todo__input-block&quot;&gt;
      &lt;input class&#x3D;&quot;todo__input&quot; type&#x3D;&quot;text&quot; placeholder&#x3D;&quot;Add New Todo Here...&quot; minlength&#x3D;&quot;1&quot; maxlength&#x3D;&quot;128&quot;&gt;
      &lt;button class&#x3D;&quot;btn-new&quot;&gt;&lt;&#x2F;button&gt;
    &lt;&#x2F;div&gt;
  
    &lt;ul class&#x3D;&quot;nav nav-middle justify-content-center todo__status&quot;&gt;
      &lt;li class&#x3D;&quot;nav-item&quot;&gt;
        &lt;a class&#x3D;&quot;nav-link active&quot; href&#x3D;&quot;#&quot; data-filter&#x3D;&quot;all&quot;&gt;All&lt;&#x2F;a&gt;
      &lt;&#x2F;li&gt;
      &lt;li class&#x3D;&quot;nav-item&quot;&gt;
        &lt;a class&#x3D;&quot;nav-link&quot; href&#x3D;&quot;#&quot; data-filter&#x3D;&quot;in-progress&quot;&gt;In Progress&lt;&#x2F;a&gt;
      &lt;&#x2F;li&gt;
      &lt;li class&#x3D;&quot;nav-item&quot;&gt;
        &lt;a class&#x3D;&quot;nav-link&quot; href&#x3D;&quot;#&quot; data-filter&#x3D;&quot;completed&quot;&gt;Completed&lt;&#x2F;a&gt;
      &lt;&#x2F;li&gt;
    &lt;&#x2F;ul&gt;

    &lt;ul class&#x3D;&quot;todo__list&quot;&gt;
      &lt;!-- 要新增 template 的區塊 --&gt;
      &lt;li class&#x3D;&quot;todo&quot;&gt;
        &lt;input class&#x3D;&quot;todo__check&quot; type&#x3D;&quot;checkbox&quot; id&#x3D;&quot;todo-0&quot;&gt;
        &lt;label class&#x3D;&quot;todo__title&quot; for&#x3D;&quot;todo&quot;&gt;Coding&lt;&#x2F;label&gt;
        &lt;button class&#x3D;&quot;btn-delete&quot;&gt;&lt;&#x2F;button&gt;
      &lt;&#x2F;li&gt;
    &lt;&#x2F;ul&gt;
  &lt;&#x2F;div&gt;

 
&lt;&#x2F;body&gt;
&lt;&#x2F;html&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="前端-JavaScript"><a href="#前端-JavaScript" class="headerlink" title="前端 JavaScript"></a>前端 JavaScript</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">></span>
  <span class="token keyword">let</span> id <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> 

  <span class="token keyword">const</span> template <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">
    &lt;li class="todo">
      &lt;input class="todo__check" type="checkbox" id="todo-&#123;id&#125;">
      &lt;label class="todo__title" for="todo-&#123;id&#125;">&#123;content&#125;&lt;/label>
      &lt;button class="btn-delete">&lt;/button>
    &lt;/li>
  </span><span class="token template-punctuation string">`</span></span>
  <span class="token comment">// 新增功能: 點擊</span>
  <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'.btn-new'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token function">addTodo</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 新增功能: 按 Enter</span>
  <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'.todo__input'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">keydown</span><span class="token punctuation">(</span><span class="token parameter">e</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>key <span class="token operator">===</span> <span class="token string">'Enter'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token function">addTodo</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// 刪除功能: 利用事件代理</span>
  <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'.todo__list'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token string">'.btn-delete'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token function">$</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>target<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">parent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// 標記狀態: 已完成 / 未完成</span>
  <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'.todo__list'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'change'</span><span class="token punctuation">,</span> <span class="token string">'.todo__check'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">const</span> target <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> isChecked <span class="token operator">=</span> target<span class="token punctuation">.</span><span class="token function">is</span><span class="token punctuation">(</span><span class="token string">":checked"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>isChecked<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      target<span class="token punctuation">.</span><span class="token function">parents</span><span class="token punctuation">(</span><span class="token string">'.todo'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addClass</span><span class="token punctuation">(</span><span class="token string">'checked'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
      target<span class="token punctuation">.</span><span class="token function">parents</span><span class="token punctuation">(</span><span class="token string">'.todo'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">removeClass</span><span class="token punctuation">(</span><span class="token string">'checked'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// 篩選 todo 狀態</span>
  <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'.todo__status'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token parameter">e</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">const</span> target <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> filter <span class="token operator">=</span> target<span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">'data-filter'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'.todo__status a.active'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">removeClass</span><span class="token punctuation">(</span><span class="token string">'active'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    target<span class="token punctuation">.</span><span class="token function">addClass</span><span class="token punctuation">(</span><span class="token string">'active'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>filter <span class="token operator">===</span> <span class="token string">'all'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'.todo'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>filter <span class="token operator">===</span> <span class="token string">'in-progress'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'.todo'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'.todo.checked'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hide</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// completed</span>
      <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'.todo'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hide</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'.todo.checked'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// 清除所有 todo</span>
  <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'.clear-all'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'.todo'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// 儲存 todo</span>
  <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'.btn-save'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">let</span> todos <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'.todo'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">each</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">i<span class="token punctuation">,</span> element</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">const</span> input <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">'.todo__check'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">const</span> label <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">'.todo__title'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      todos<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
        id<span class="token operator">:</span> input<span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">'id'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">'todo-'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token comment">// 把 todo-id 的 todo- 換成空字串</span>
        content<span class="token operator">:</span> label<span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        isDone<span class="token operator">:</span> <span class="token function">$</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hasClass</span><span class="token punctuation">(</span><span class="token string">'checked'</span><span class="token punctuation">)</span>
      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>todos<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">// 將 JS 物件轉換成 JSON 字串</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">function</span> <span class="token function">addTodo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">const</span> value <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'.todo__input'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>value<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'.todo__list'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">prepend</span><span class="token punctuation">(</span>
      template
        <span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">'&#123;content&#125;'</span><span class="token punctuation">,</span> <span class="token function">escape</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">&#123;id&#125;</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> id<span class="token punctuation">)</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
    id <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'.todo__input'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token keyword">function</span> <span class="token function">escape</span><span class="token punctuation">(</span><span class="token parameter">toOutput</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> toOutput
      <span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">&amp;</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">'&amp;amp;'</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">&lt;</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">'&amp;lt;'</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">></span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">'&amp;gt;'</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">"</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">'&amp;quot;'</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">'</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">'&amp;#039;'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="前後端串接"><a href="#前後端串接" class="headerlink" title="前後端串接"></a>前後端串接</h2><h3 id="目標功能"><a href="#目標功能" class="headerlink" title="目標功能"></a>目標功能</h3><ul>
<li>儲存功能：Save</li>
</ul>
<h3 id="PHP-API"><a href="#PHP-API" class="headerlink" title="PHP API"></a>PHP API</h3><p>將前端得到的資料 <code>JSON.stringify(todos)</code>，利用 Ajax 方式 POST 到資料庫：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 儲存 todo</span>
<span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'.btn-save'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">let</span> todos <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'.todo'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">each</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">i<span class="token punctuation">,</span> element</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">const</span> input <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">'.todo__check'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> label <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">'.todo__title'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    todos<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
      id<span class="token operator">:</span> input<span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">'id'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">'todo-'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token comment">// 把 todo-id 的 todo- 換成空字串</span>
      content<span class="token operator">:</span> label<span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      isDone<span class="token operator">:</span> <span class="token function">$</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hasClass</span><span class="token punctuation">(</span><span class="token string">'checked'</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>todos<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">// 將 JS 物件轉換成 JSON 字串</span>
  $<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
    type<span class="token operator">:</span> <span class="token string">'POST'</span><span class="token punctuation">,</span>
    url<span class="token operator">:</span> <span class="token string">'http://localhost/heidi/week12_local/hw2/api_add_todo.php'</span><span class="token punctuation">,</span>
    data<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
      todo<span class="token operator">:</span> data
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token function-variable function">success</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">resp</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">const</span> respId <span class="token operator">=</span> resp<span class="token punctuation">.</span>id
      window<span class="token punctuation">.</span>location <span class="token operator">=</span> <span class="token string">'index.html?id='</span> <span class="token operator">+</span> respId<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token function-variable function">error</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'Error!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>如此即可利用前端 JavaScript 從後端拿取 JSON 格式的資料，並用 <code>JSON.parse()</code> 將 JSON 字串轉換成 JavaScript 物件：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// URLSearchParams(): 解析網址參數</span>
<span class="token keyword">const</span> serchParams <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URLSearchParams</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>location<span class="token punctuation">.</span>search<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// ?id=...</span>
<span class="token keyword">const</span> todoId <span class="token operator">=</span> serchParams<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'id'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span>todoId<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  $<span class="token punctuation">.</span><span class="token function">getJSON</span><span class="token punctuation">(</span><span class="token string">'http://localhost/heidi/week12_local/hw2/api_get_todo.php?id='</span> <span class="token operator">+</span> todoId<span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">const</span> todos <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>data<span class="token punctuation">.</span>todo<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">restoreTodos</span><span class="token punctuation">(</span>todos<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>將拿到的資料再以 JS 處理新增到頁面，把模版 template 加上 content、id、todoClass：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">restoreTodos</span><span class="token punctuation">(</span><span class="token parameter">todos</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>todos<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
  <span class="token comment">// id 要從讀取的最後一個 todo id 繼續增加</span>
  id <span class="token operator">=</span> todos<span class="token punctuation">[</span>todos<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>id <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> todos<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">const</span> todo <span class="token operator">=</span> todos<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'.todo__list'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">prepend</span><span class="token punctuation">(</span>
      template
        <span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">'&#123;content&#125;'</span><span class="token punctuation">,</span> <span class="token function">escape</span><span class="token punctuation">(</span>todo<span class="token punctuation">.</span>content<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">&#123;id&#125;</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> todo<span class="token punctuation">.</span>id<span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">'&#123;todoClass&#125;'</span><span class="token punctuation">,</span> todo<span class="token punctuation">.</span>isDone <span class="token operator">?</span> <span class="token string">'checked'</span> <span class="token operator">:</span> <span class="token string">''</span><span class="token punctuation">)</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<hr>
<h2 id="Single-Page-Application"><a href="#Single-Page-Application" class="headerlink" title="Single Page Application"></a>Single Page Application</h2><p>Single Page Application（單頁面應用程式），簡稱 SPA。是前端利用 Ajax 以非同步方式串接後端 API，如此可將前後端分離，在交換資料時不需換頁，可透過動態方式更新部分頁面。</p>
<p>而早期的網頁主要採用 Multiple Page Application（多頁式應用程式）設計，與 SPA 概念相對應，每次交換資料時都需換頁。</p>
<h2 id="SPA-的優缺點"><a href="#SPA-的優缺點" class="headerlink" title="SPA 的優缺點"></a>SPA 的優缺點</h2><h3 id="優點"><a href="#優點" class="headerlink" title="優點"></a>優點</h3><ol>
<li>增進使用者體驗<br>不需換頁即可載入新的資訊。例如 Gmail 或影音播放網站，可以在播放音樂的同時，繼續瀏覽網站其他資訊。</li>
<li>前後端分離<br>後端只需負責制定 API 文件，提供前端資料。前端則利用 Ajax 從後端拿取資料，並以 JavaScript 在 html 動態產生內容。</li>
</ol>
<h3 id="缺點"><a href="#缺點" class="headerlink" title="缺點"></a>缺點</h3><ol>
<li>SEO（搜尋引擎最佳化）較差<br>由於 SPA 是利用 JavaScript 動態產生內容，檢視原始碼會發現原始內容是空的，<br>解決方法：第一次頁面由 Server side render，之後的操作都改用 Client side render，就可以保證搜尋引擎也能爬到完整的 HTML。</li>
<li>前端工作複雜化<br>原先是利用不同路由處理不同功能，改成由單一頁面統一管理，就像在網頁上實作 APP。</li>
<li>初次載入頁面費時<br>初次瀏覽頁面時會需要下載 JavaScript 或是其他頁面的 template。</li>
</ol>
<h2 id="由後端負責提供只輸出資料的-API-vs-PHP-直接輸出內容"><a href="#由後端負責提供只輸出資料的-API-vs-PHP-直接輸出內容" class="headerlink" title="由後端負責提供只輸出資料的 API vs PHP 直接輸出內容"></a>由後端負責提供只輸出資料的 API vs PHP 直接輸出內容</h2><h3 id="後端負責提供只輸出資料的-API"><a href="#後端負責提供只輸出資料的-API" class="headerlink" title="後端負責提供只輸出資料的 API"></a>後端負責提供只輸出資料的 API</h3><ul>
<li>Server 端接收到請求，會回傳 JSON 或其他特定格式的資料給前端，瀏覽器再將資料動態更新至頁面</li>
<li>因為是動態產生資料，檢視原始碼會發現動態更新的內容是空的</li>
</ul>
<h3 id="PHP-直接輸出內容"><a href="#PHP-直接輸出內容" class="headerlink" title="PHP 直接輸出內容"></a>PHP 直接輸出內容</h3><ul>
<li>Server 端接收到請求，會將所需資料與頁面經處理後回傳 html 檔給前端，瀏覽器透過重整頁面顯示</li>
<li>因此回傳的頁面，檢視原始碼是有包含資料的</li>
</ul>
<p>參考資料：</p>
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9tZWRpdW0uY29tL0BodWxpdHcvaW50cm9kdWN0aW9uLW12Yy1zcGEtYW5kLXNzci01NDVjOTQxNjY5ZTk=">跟著小明一起搞懂技術名詞：MVC、SPA 與 SSR<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLnRlY2hicmlkZ2UuY2MvMjAxNy8wOS8xNi9mcm9udGVuZC1iYWNrZW5kLW12Yy8=">前後端分離與 SPA<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9pdGhlbHAuaXRob21lLmNvbS50dy9hcnRpY2xlcy8xMDE2MDcwOQ==">Day20– 前端小字典三十天【每日一字】– SPA<i class="fa fa-external-link-alt"></i></span></li>
</ul>
]]></content>
      <categories>
        <category>Back-End</category>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>Back-End</tag>
        <tag>PHP</tag>
      </tags>
  </entry>
  <entry>
    <title>[week 21] 補充：Prettier 套件 - 自動整理程式碼格式</title>
    <url>/prettier-code-formatter/</url>
    <content><![CDATA[<h2 id="Prettier：Code-formatter"><a href="#Prettier：Code-formatter" class="headerlink" title="Prettier：Code formatter"></a>Prettier：Code formatter</h2><blockquote>
<p>相關安裝套件與如何操作可參考<span class="exturl" data-url="aHR0cHM6Ly9jcmVhdGUtcmVhY3QtYXBwLmRldi9kb2NzL3NldHRpbmctdXAteW91ci1lZGl0b3Iv">官方文件<i class="fa fa-external-link-alt"></i></span>。</p>
</blockquote>
<p>Prettier 是一個 Code formatter，能夠將 JavaScript, TypeScript, CSS 程式碼格式化，進而統一程式碼風格（Coding Style）。</p>
<span id="more"></span>

<h3 id="安裝套件-amp-設定檔"><a href="#安裝套件-amp-設定檔" class="headerlink" title="安裝套件 &amp; 設定檔"></a>安裝套件 &amp; 設定檔</h3><p>為了進行程式碼格式化，共需要安裝下列三個套件：</p>
<ul>
<li><code>husky</code>: makes it possible to use githooks as if they are npm scripts.</li>
<li><code>lint-staged</code>: allows us to run scripts on staged files in git. See this blog post about lint-staged to learn more about it.</li>
<li><code>prettier</code>: is the JavaScript formatter we will run before commits.</li>
</ul>
<p>並在 package.json 檔案中加上套件相關資訊：</p>
<pre class="line-numbers language-json" data-language="json"><code class="language-json">+  <span class="token property">"husky"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
+    <span class="token property">"hooks"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
+      <span class="token property">"pre-commit"</span><span class="token operator">:</span> <span class="token string">"lint-staged"</span>
+    <span class="token punctuation">&#125;</span>
+  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>

+ <span class="token property">"lint-staged"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
+   <span class="token property">"src/**/*.&#123;js,jsx,ts,tsx,json,css,scss,md&#125;"</span><span class="token operator">:</span> <span class="token punctuation">[</span>
+     <span class="token string">"prettier --write"</span>
+   <span class="token punctuation">]</span>
+ <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>簡單來說，就是在 pre-commit 之前，透過 husky -&gt; lint-staged -&gt; prettier 這個傳遞過程，對 commit 的檔案做 prettier。</p>
<p>安裝完成後，在 commit 之前，prettier 就會自動檢查程式碼並進行格式化：</p>
<p><img src="https://i.imgur.com/JlV2aOS.png"></p>
<h3 id="在-VSCode-安裝-prettier"><a href="#在-VSCode-安裝-prettier" class="headerlink" title="在 VSCode 安裝 prettier"></a>在 VSCode 安裝 prettier</h3><p>除了安裝套件，在 VSCode 也有提供 <span class="exturl" data-url="aHR0cHM6Ly9tYXJrZXRwbGFjZS52aXN1YWxzdHVkaW8uY29tL2l0ZW1zP2l0ZW1OYW1lPWVzYmVucC5wcmV0dGllci12c2NvZGU=">Prettier<i class="fa fa-external-link-alt"></i></span> plugin 能夠使用。</p>
<p><img src="https://i.imgur.com/PBQKXwF.png"></p>
<p>接下來，就可以設定在存檔時執行 prettier，在設定中把 Format on Save 選項打勾：</p>
<p><img src="https://i.imgur.com/OEF4TpC.png"></p>
<p>接著隨意更改 JS 檔案並存檔，會看到右下角的小鈴鐺出現通知：</p>
<p><img src="https://i.imgur.com/vBbep8k.png"></p>
<p>點選設定後，可選取預設格式器：</p>
<p><img src="https://i.imgur.com/w33Lf4T.png"></p>
<p>這時候再次存檔，就會發現又下方有顯示 Prettier 運行結果，檔案中若有沒加逗號的地方、或是多於的空格會被格式化：</p>
<p><img src="https://i.imgur.com/1luVuIV.png"></p>
<p>透過 Prettier 這套工具，可以快速將程式碼格式化，但需注意 Prettier 只管理格式問題，語法上的錯誤仍需由 eslint 套件來檢查。</p>
<blockquote>
<p>可參考之前的學習筆記：<span class="exturl" data-url="aHR0cHM6Ly9oYWNrbWQuaW8vQEhlaWRpLUxpdS9ub3RlLWVzbGludA==">[week3] 設定 eslint：用來檢查語法的工具<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
]]></content>
      <categories>
        <category>Front-End</category>
      </categories>
      <tags>
        <tag>Front-End</tag>
      </tags>
  </entry>
  <entry>
    <title>[week 22] 再探 React：Function component vs Class component</title>
    <url>/react-class-function-hook/</url>
    <content><![CDATA[<blockquote>
<p>本篇為 <span class="exturl" data-url="aHR0cHM6Ly9saWRlbXkuY29tL3AvZmUzMDItcmVhY3QtaG9va3M=">[FE302] React 基礎 - hooks 版本<i class="fa fa-external-link-alt"></i></span> 這門課程的學習筆記。如有錯誤歡迎指正！</p>
</blockquote>
<ul>
<li>參考：<span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmh1bGkudHcvMjAyMC8wNi8xNS9yZWFjdC1mdW5jdGlvbi1jbGFzcy1ob29rLXVzZWVmZmVjdC8=">從實際案例看 class 與 function component 的差異<i class="fa fa-external-link-alt"></i></span><span id="more"></span>

</li>
</ul>
<p>在學會如何在 React 中，以 Function component  搭配 Hooks 寫出簡單的 Todo List 之後，再來要探討使用 Function 或 Class 寫 component 的差異，即使目前主流是使用 Function component，未來還是有機會碰到 Class component 的寫法。</p>
<h2 id="Function-component-vs-Class-component"><a href="#Function-component-vs-Class-component" class="headerlink" title="Function component vs Class component"></a>Function component vs Class component</h2><p>在 React 16.8 之前，因為 function component 還沒有 useState、Hooks 的概念，需要描述 component 的狀態時通常會使用 Class component。</p>
<p>但在 React 16.8 有了 Hooks 以後，就能夠在  Function component 引入 Hooks 來表示狀態，這種寫法也成為目前主流。</p>
<p>而 class component 與 function component 兩者之間的差別主要在於：</p>
<ul>
<li>class component：關注的是這個「生命週期」要做什麼，</li>
<li>function component：每一次 render，都是「重新」呼叫一次 function，並且會記住「當下」傳入的值</li>
</ul>
<hr>
<h2 id="什麼是-Class-component？"><a href="#什麼是-Class-component？" class="headerlink" title="什麼是 Class component？"></a>什麼是 Class component？</h2><p>顧名思義，就是用 class 去實作一個 component，但這種寫法比起 function component，其實需要具備 JavsScript 物件導向的相關知識。</p>
<h3 id="範例：寫出一個-Button-component"><a href="#範例：寫出一個-Button-component" class="headerlink" title="範例：寫出一個 Button component"></a>範例：寫出一個 Button component</h3><p>舉例來說，在之前 Todo List 以 function  寫一個 Button component：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Button</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">&#123;</span> onClick<span class="token punctuation">,</span> children <span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">&#123;</span>onClick<span class="token punctuation">&#125;</span><span class="token operator">></span><span class="token punctuation">&#123;</span>children<span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">"App"</span><span class="token operator">></span>
      <span class="token operator">&lt;</span>Button onClick<span class="token operator">=</span><span class="token punctuation">&#123;</span>handleButtonClick<span class="token punctuation">&#125;</span><span class="token operator">></span>Add Todo<span class="token operator">&lt;</span><span class="token operator">/</span>Button<span class="token operator">></span>
    <span class="token comment">// 以下略</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>換成 class component 的寫法如下，兩者的功能其實相同：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 引入 React</span>
<span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">Button</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">&#123;</span>
  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// 用 this.props 拿取這個 component 的 props</span>
    <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> onClick<span class="token punctuation">,</span> children <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">&#123;</span>onClick<span class="token punctuation">&#125;</span><span class="token operator">></span><span class="token punctuation">&#123;</span>children<span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="範例：改寫-TodoItem-component"><a href="#範例：改寫-TodoItem-component" class="headerlink" title="範例：改寫 TodoItem component"></a>範例：改寫 TodoItem component</h3><p>或是改寫之前用 function 寫的 TodoItem：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">TodoItem</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">&#123;</span>
  todo<span class="token punctuation">,</span>
  handleDeleteTodo<span class="token punctuation">,</span>
  handleToggleIsDone<span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">const</span> <span class="token function-variable function">handleToggleClick</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token function">handleToggleIsDone</span><span class="token punctuation">(</span>todo<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

  <span class="token keyword">const</span> <span class="token function-variable function">handleDeleteClick</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token function">handleDeleteTodo</span><span class="token punctuation">(</span>todo<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token operator">&lt;</span>TodoItemWrapper data<span class="token operator">-</span>todo<span class="token operator">-</span>id<span class="token operator">=</span><span class="token punctuation">&#123;</span>todo<span class="token punctuation">.</span>id<span class="token punctuation">&#125;</span><span class="token operator">></span>
      <span class="token operator">&lt;</span>TodoContent $isDone<span class="token operator">=</span><span class="token punctuation">&#123;</span>todo<span class="token punctuation">.</span>isDone<span class="token punctuation">&#125;</span><span class="token operator">></span><span class="token punctuation">&#123;</span>todo<span class="token punctuation">.</span>content<span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>TodoContent<span class="token operator">></span>
      <span class="token operator">&lt;</span>TodoButtonWrapper<span class="token operator">></span>
        <span class="token operator">&lt;</span>Button onClick<span class="token operator">=</span><span class="token punctuation">&#123;</span>handleToggleClick<span class="token punctuation">&#125;</span><span class="token operator">></span>
          <span class="token punctuation">&#123;</span>todo<span class="token punctuation">.</span>isDone <span class="token operator">&amp;&amp;</span> <span class="token string">"已完成"</span><span class="token punctuation">&#125;</span>
          <span class="token punctuation">&#123;</span><span class="token operator">!</span>todo<span class="token punctuation">.</span>isDone <span class="token operator">&amp;&amp;</span> <span class="token string">"未完成"</span><span class="token punctuation">&#125;</span>
        <span class="token operator">&lt;</span><span class="token operator">/</span>Button<span class="token operator">></span>
        <span class="token operator">&lt;</span>RedButton onClick<span class="token operator">=</span><span class="token punctuation">&#123;</span>handleDeleteClick<span class="token punctuation">&#125;</span><span class="token operator">></span>刪除<span class="token operator">&lt;</span><span class="token operator">/</span>RedButton<span class="token operator">></span>
      <span class="token operator">&lt;</span><span class="token operator">/</span>TodoButtonWrapper<span class="token operator">></span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>TodoItemWrapper<span class="token operator">></span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>以 class component 改寫如下，但這樣寫其實會出現錯誤訊息，this 的值會是 undefined：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">TodoItemC</span>  <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// 變成 component 的 method (也可用 inline function 的寫法)</span>
  <span class="token function">handleToggleClick</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> handleToggleIsDone<span class="token punctuation">,</span> todo <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">;</span>
    <span class="token function">handleToggleIsDone</span><span class="token punctuation">(</span>todo<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token function">handleDeleteClick</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> handleDeleteTodo<span class="token punctuation">,</span> todo <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">;</span>
    <span class="token function">handleDeleteTodo</span><span class="token punctuation">(</span>todo<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> todo <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>
      <span class="token operator">&lt;</span>TodoItemWrapper data<span class="token operator">-</span>todo<span class="token operator">-</span>id<span class="token operator">=</span><span class="token punctuation">&#123;</span>todo<span class="token punctuation">.</span>id<span class="token punctuation">&#125;</span><span class="token operator">></span>
        <span class="token operator">&lt;</span>TodoContent $isDone<span class="token operator">=</span><span class="token punctuation">&#123;</span>todo<span class="token punctuation">.</span>isDone<span class="token punctuation">&#125;</span><span class="token operator">></span><span class="token punctuation">&#123;</span>todo<span class="token punctuation">.</span>content<span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>TodoContent<span class="token operator">></span>
        <span class="token operator">&lt;</span>TodoButtonWrapper<span class="token operator">></span>
          <span class="token operator">&lt;</span>Button onClick<span class="token operator">=</span><span class="token punctuation">&#123;</span>handleToggleClick<span class="token punctuation">&#125;</span><span class="token operator">></span>
            <span class="token punctuation">&#123;</span>todo<span class="token punctuation">.</span>isDone <span class="token operator">?</span> <span class="token string">"已完成"</span> <span class="token operator">:</span> <span class="token string">"未完成"</span><span class="token punctuation">&#125;</span>
          <span class="token operator">&lt;</span><span class="token operator">/</span>Button<span class="token operator">></span>
          <span class="token operator">&lt;</span>RedButton onClick<span class="token operator">=</span><span class="token punctuation">&#123;</span>handleDeleteClick<span class="token punctuation">&#125;</span><span class="token operator">></span>刪除<span class="token operator">&lt;</span><span class="token operator">/</span>RedButton<span class="token operator">></span>
        <span class="token operator">&lt;</span><span class="token operator">/</span>TodoButtonWrapper<span class="token operator">></span>
      <span class="token operator">&lt;</span><span class="token operator">/</span>TodoItemWrapper<span class="token operator">></span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>這是因為 this 的值會根據怎麼呼叫 function 決定，在嚴格模式中直接呼叫 onClick 的話 this 的值就會是 undefined：</p>
<p><img src="https://i.imgur.com/ZQOcT1O.png"></p>
<p>有兩種解決方式：</p>
<ul>
<li>透過 cunstructor 初始化 props 並綁定 this 指向</li>
<li>改成 classmethod 綁定 this 指向</li>
</ul>
<h4 id="透過-cunstructor-初始化-props-並綁定-this-指向"><a href="#透過-cunstructor-初始化-props-並綁定-this-指向" class="headerlink" title="透過 cunstructor 初始化 props 並綁定 this 指向"></a>透過 cunstructor 初始化 props 並綁定 this 指向</h4><p>透過 constructor，將 props 初始化，在利用 bind 來綁定 this 指向 constructor 裡面的 this，也就是 TodoItemC 這個 component：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">TodoItemC</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">&#123;</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// 初始化 props</span>
    <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 利用 bind 將 this 固定指向現在 constructor 裡面的 this</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>handleToggleClick <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">handleToggleClick</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>handleDeleteClick <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">handleDeleteClick</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token comment">// 變成 component 的 method (也可用 inline function 的寫法)</span>
  <span class="token function">handleToggleClick</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> handleToggleIsDone<span class="token punctuation">,</span> todo <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">;</span>
    <span class="token function">handleToggleIsDone</span><span class="token punctuation">(</span>todo<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token function">handleDeleteClick</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> handleDeleteTodo<span class="token punctuation">,</span> todo <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">;</span>
    <span class="token function">handleDeleteTodo</span><span class="token punctuation">(</span>todo<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> todo <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>
      <span class="token operator">&lt;</span>TodoItemWrapper data<span class="token operator">-</span>todo<span class="token operator">-</span>id<span class="token operator">=</span><span class="token punctuation">&#123;</span>todo<span class="token punctuation">.</span>id<span class="token punctuation">&#125;</span><span class="token operator">></span>
        <span class="token operator">&lt;</span>TodoContent $isDone<span class="token operator">=</span><span class="token punctuation">&#123;</span>todo<span class="token punctuation">.</span>isDone<span class="token punctuation">&#125;</span><span class="token operator">></span><span class="token punctuation">&#123;</span>todo<span class="token punctuation">.</span>content<span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>TodoContent<span class="token operator">></span>
        <span class="token operator">&lt;</span>TodoButtonWrapper<span class="token operator">></span>
          <span class="token comment">// 這裡要加上 this 使用</span>
          <span class="token operator">&lt;</span>Button onClick<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>handleToggleClick<span class="token punctuation">&#125;</span><span class="token operator">></span>
            <span class="token punctuation">&#123;</span>todo<span class="token punctuation">.</span>isDone <span class="token operator">?</span> <span class="token string">"已完成"</span> <span class="token operator">:</span> <span class="token string">"未完成"</span><span class="token punctuation">&#125;</span>
          <span class="token operator">&lt;</span><span class="token operator">/</span>Button<span class="token operator">></span>
          <span class="token operator">&lt;</span>RedButton onClick<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>handleDeleteClick<span class="token punctuation">&#125;</span><span class="token operator">></span>刪除<span class="token operator">&lt;</span><span class="token operator">/</span>RedButton<span class="token operator">></span>
        <span class="token operator">&lt;</span><span class="token operator">/</span>TodoButtonWrapper<span class="token operator">></span>
      <span class="token operator">&lt;</span><span class="token operator">/</span>TodoItemWrapper<span class="token operator">></span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="改用-classmethod-綁定-this-指向"><a href="#改用-classmethod-綁定-this-指向" class="headerlink" title="改用 classmethod 綁定 this 指向"></a>改用 classmethod 綁定 this 指向</h4><p>另一種解決方法，就是改用 classmethod 寫法，類似箭頭函式，同樣能綁定 this：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">TodoItemC</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">&#123;</span>
  <span class="token function-variable function">handleToggleClick</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> handleToggleIsDone<span class="token punctuation">,</span> todo <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">;</span>
    <span class="token function">handleToggleIsDone</span><span class="token punctuation">(</span>todo<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
  <span class="token function-variable function">handleDeleteClick</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> handleDeleteTodo<span class="token punctuation">,</span> todo <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">;</span>
    <span class="token function">handleDeleteTodo</span><span class="token punctuation">(</span>todo<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
  
<span class="token comment">// 以下略</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="Class-component-中的-state"><a href="#Class-component-中的-state" class="headerlink" title="Class component 中的 state"></a>Class component 中的 state</h3><p>在 Class Component 的 state 同樣要寫在 constructor 裡面，進行 props 初始化，以及設定初始 state：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">TodoItemC</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">&#123;</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// 初始化</span>
    <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 設定初始 state</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
      counter<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token function-variable function">handleToggleClick</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> handleToggleIsDone<span class="token punctuation">,</span> todo <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">;</span>
    <span class="token function">handleToggleIsDone</span><span class="token punctuation">(</span>todo<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 設定 state</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>setState <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
      counter<span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>counter <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="Class-component-的生命週期"><a href="#Class-component-的生命週期" class="headerlink" title="Class component 的生命週期"></a>Class component 的生命週期</h2><p>關於 class component 的生命週期架構可參考附圖：</p>
<p><img src="https://i.imgur.com/CV4MKmC.png"><br>（圖片來源：<span class="exturl" data-url="aHR0cHM6Ly9wcm9qZWN0cy53b2p0ZWttYWoucGwvcmVhY3QtbGlmZWN5Y2xlLW1ldGhvZHMtZGlhZ3JhbS8=">React LifeCycle Methods Diagram<i class="fa fa-external-link-alt"></i></span>）</p>
<p>可和之前提過的 React Hook 流程圖進行對照，改成用 useEffect 執行：</p>
<p><img src="https://i.imgur.com/iY123nV.png"><br>（圖片來源：<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2RvbmF2b24vaG9vay1mbG93JUVGJUJDJTg5">https://github.com/donavon/hook-flow）<i class="fa fa-external-link-alt"></i></span></p>
<h3 id="實作一個-Counter-component"><a href="#實作一個-Counter-component" class="headerlink" title="實作一個 Counter component"></a>實作一個 Counter component</h3><p>這裡重新建立一個 Counter.js 作為範例，首先將 index.js 改成引入 Counter：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> ReactDOM <span class="token keyword">from</span> <span class="token string">"react-dom"</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> Counter <span class="token keyword">from</span> <span class="token string">"./Counter"</span><span class="token punctuation">;</span>

ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>Counter <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"root"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>建立 Counter.js：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">Counter</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">&#123;</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// 初始化</span>
    <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
      counter<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token function-variable function">handleClick</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
      counter<span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>counter <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> counter <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>
      <span class="token operator">&lt;</span>div<span class="token operator">></span>
        <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>handleClick<span class="token punctuation">&#125;</span><span class="token operator">></span><span class="token operator">+</span><span class="token number">1</span><span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>
        counter<span class="token operator">:</span> <span class="token punctuation">&#123;</span>counter<span class="token punctuation">&#125;</span>
      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>結果如下，藉由點擊事件來改變 component 狀態：</p>
<iframe src="https://codesandbox.io/embed/reactclass-component-life-cycle-1-yhws5?fontsize=14&hidenavigation=1&theme=dark"
     style="width:80%; height:200px; border:0; border-radius: 4px; overflow:hidden;"
     title="React_class component_ life cycle-1"
     allow="accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking"
     sandbox="allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts"
   ></iframe>

<h3 id="Test-component-amp-內建-method"><a href="#Test-component-amp-內建-method" class="headerlink" title="Test component &amp; 內建 method"></a>Test component &amp; 內建 method</h3><p>加上 Test component，並設定只有在 count 等於 1 時會出現 Test，以及使用 React 內建 method 來觀察 component 的生命週期：</p>
<ul>
<li>componentDidMount：會在 component mount 之後執行</li>
<li>componentDidUpdate：會在 component update 之後執行</li>
<li>componentWillUnmount：會在 component unmount 之前執行</li>
</ul>
<pre class="line-numbers language-none"><code class="language-none">class Test extends React.Component &#123;
  componentDidMount() &#123;
    console.log(&quot;test mount&quot;);
  &#125;
  componentWillUnmount() &#123;
    console.log(&quot;test unmount&quot;);
  &#125;
  render() &#123;
    return &lt;div&gt;test!&lt;&#x2F;div&gt;;
  &#125;
&#125;

export default class Counter extends React.Component &#123;
  constructor(props) &#123;
    super(props);
    this.state &#x3D; &#123;
      counter: 1,
    &#125;;
    console.log(&quot;constructor&quot;);
  &#125;
  &#x2F;&#x2F; 使用 react 內建的 method, this 會指向這個 component
  componentDidMount() &#123;
    &#x2F;&#x2F; 會在 component mount 之後執行
    console.log(&quot;did mount&quot;, this.state);
  &#125;
  &#x2F;&#x2F; 拿到上一次的參數: prevProps 和 prevState
  componentDidUpdate(prevProps, prevState) &#123;
    &#x2F;&#x2F; 會在 component update 之後執行
    console.log(&quot;prevState&quot;, prevState);
    console.log(&quot;update!&quot;);
  &#125;
  componentWillUnmount() &#123;
    &#x2F;&#x2F; 會在 component unmount 之前執行
    console.log(&quot;unmount&quot;);
  &#125;

  handleClick &#x3D; () &#x3D;&gt; &#123;
    this.setState(&#123;
      counter: this.state.counter + 1,
    &#125;);
  &#125;;

  render() &#123;
    const &#123; counter &#125; &#x3D; this.state;
    console.log(&quot;render&quot;);
    return (
      &lt;div&gt;
        &lt;button onClick&#x3D;&#123;this.handleClick&#125;&gt;+1&lt;&#x2F;button&gt;
        counter: &#123;counter&#125;
        &#123;counter &#x3D;&#x3D;&#x3D; 1 &amp;&amp; &lt;Test &#x2F;&gt;&#125;
      &lt;&#x2F;div&gt;
    );
  &#125;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>


<p>結果如下：</p>
<iframe src="https://codesandbox.io/embed/reactclass-component-life-cycle-2-ikftq?fontsize=14&hidenavigation=1&theme=dark"
     style="width:80%; height:200px; border:0; border-radius: 4px; overflow:hidden;"
     title="React_class component_ life cycle-2"
     allow="accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking"
     sandbox="allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts"
   ></iframe>
   

<p>第一次渲染畫面，只有第一次會有 constructor 和 mount：</p>
<p><img src="https://i.imgur.com/iG3pxlB.png"></p>
<p>點擊第一次，第二次渲染畫面，count 不等於 1，test unmount：</p>
<p><img src="https://i.imgur.com/RLdOBft.png"></p>
<p>點擊第二次，第三次渲染畫面：</p>
<p><img src="https://i.imgur.com/r6zc3yw.png"></p>
<h3 id="其他少見的-method"><a href="#其他少見的-method" class="headerlink" title="其他少見的 method"></a>其他少見的 method</h3><p>輸入 component 會發現有些 method 被畫刪除線，代表目前版本不建議使用：</p>
<p><img src="https://i.imgur.com/xWDgAL8.png"></p>
<ul>
<li>componentDidCatch：進行錯誤處理</li>
<li>shouldComponentUpdate：決定要不要 update，也可透過傳入的參數決定要不要 update，詳細可參考<span class="exturl" data-url="aHR0cHM6Ly96aC1oYW50LnJlYWN0anMub3JnL2RvY3MvcmVhY3QtY29tcG9uZW50Lmh0bWw=">官方文件<i class="fa fa-external-link-alt"></i></span></li>
</ul>
<p>舉例來說，在 Counter component 加入這段，若 return false 就不會進行 update；反之 return true 就會：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">shouldComponentUpdate</span><span class="token punctuation">(</span><span class="token parameter">nextProps<span class="token punctuation">,</span> nextState</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>以下舉個簡單範例：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">shouldComponentUpdate</span><span class="token punctuation">(</span><span class="token parameter">nextProps<span class="token punctuation">,</span> nextState</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// 當 counter > 5 時，就不會再 update</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>nextState<span class="token punctuation">.</span>counter <span class="token operator">></span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>結果如下，當 counter: 5 之後，再點擊也不會有反應：</p>
<p><img src="https://i.imgur.com/XrScAIB.png"></p>
<p>這通常會和之前在 React 效能優化提到的 memo 搭配使用，根據比對 props 是否相同或自訂條件。</p>
<p>另一個方法，是把 Component 改寫成 PureComponent，和 memo 的效果類似：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">Counter</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>PureComponent</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>React 會自動進行優化，加上 shouldComponentUpdate 判斷，當 props 裡面的屬性有變動時才會進行 update，沒有的話就不進行 re-render。</p>
<p>–</p>
<h2 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h2><p>在實作 React 時，會瞭解到 class component 和 function component 用不同方式去思考如何建立 component，背後的概念其實差蠻多的，需要轉變成另一種想法。</p>
<p>最後再簡單記錄 class component 和 function component 兩者之間的差異：</p>
<h3 id="class-component"><a href="#class-component" class="headerlink" title="class component"></a>class component</h3><ul>
<li>透過 ES6 語法來實作物件導向的 class component</li>
<li>由於 this 指向的關係，state 和 props 會拿到最新的結果，但是會較不易於進行 callback 操作</li>
<li>提供許多 lifecycle method 使用，方便管理較複雜的 component 狀態</li>
</ul>
<h3 id="function-component"><a href="#function-component" class="headerlink" title="function component"></a>function component</h3><ul>
<li>透過閉包的形式來管理狀態的 function component</li>
<li>把許多 method 都寫在 function 中，自己本身就像是 render function，較容易抽出共同邏輯，或是進行模組化測試</li>
<li>生命週期的方法，是以 useEffect 來決定 render 要做的事情</li>
</ul>
<p>參考文章：</p>
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9wamNoZW5kZXIuZ2l0aHViLmlvLzIwMTgvMDgvMjkvcmVhY3QtJUU3JTk0JTlGJUU1JTkxJUJEJUU5JTgwJUIxJUU2JTlDJTlGJUVGJUJDJTg4bGlmZS1jeWNsZSVFRiVCQyU4OS8=">[React] 生命週期（life cycle）<i class="fa fa-external-link-alt"></i></span></li>
</ul>
]]></content>
      <categories>
        <category>Front-End</category>
        <category>React</category>
      </categories>
      <tags>
        <tag>React</tag>
        <tag>Hooks</tag>
      </tags>
  </entry>
  <entry>
    <title>[學習筆記] React 內建的所有 Hooks 功能整理</title>
    <url>/react-hooks/</url>
    <content><![CDATA[<blockquote>
<p>本篇是參考<span class="exturl" data-url="aHR0cHM6Ly96aC1oYW50LnJlYWN0anMub3JnL2RvY3MvaG9va3MtcmVmZXJlbmNlLmh0bWw=">官方文件<i class="fa fa-external-link-alt"></i></span>，整理 React 內建的所有 Hooks API 功能。</p>
</blockquote>
<span id="more"></span>
<ul>
<li>Basic Hooks<ul>
<li>useState</li>
<li>useEffect</li>
<li>useContext</li>
</ul>
</li>
<li>Additional Hooks<ul>
<li>useReducer</li>
<li>useCallback</li>
<li>useMemo</li>
<li>useRef</li>
<li>useImperativeHandle</li>
<li>useLayoutEffect</li>
<li>useDebugValue</li>
</ul>
</li>
</ul>
<h2 id="Basic-Hooks"><a href="#Basic-Hooks" class="headerlink" title="Basic Hooks"></a>Basic Hooks</h2><h3 id="useState：用來設定-component-的-state"><a href="#useState：用來設定-component-的-state" class="headerlink" title="useState：用來設定 component 的 state"></a>useState：用來設定 component 的 state</h3><ul>
<li>第一次 render 時，回傳的 state 值會和 initialState 參數相同</li>
<li>可透過 setState 來更新 state，state 一旦改變，就會觸發 React 去重新渲染畫面</li>
</ul>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token punctuation">[</span>state<span class="token punctuation">,</span> setState<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span>initialState

<span class="token function">setState</span><span class="token punctuation">(</span>newState<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<h3 id="useEffect：用來告訴-React-component-在-render-之後要做的事情"><a href="#useEffect：用來告訴-React-component-在-render-之後要做的事情" class="headerlink" title="useEffect：用來告訴 React component 在 render 之後要做的事情"></a>useEffect：用來告訴 React component 在 render 之後要做的事情</h3><ul>
<li>第一個參數帶入的 function 會在「畫面渲染完成後」被呼叫</li>
<li>第二個參數傳入一個陣列，用來放想要關注的資料，當變數改變時才會呼叫 useEffect</li>
</ul>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">useEffect</span><span class="token punctuation">(</span>
  <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">const</span> subscription <span class="token operator">=</span> props<span class="token punctuation">.</span>source<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
      subscription<span class="token punctuation">.</span><span class="token function">unsubscribe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">[</span>props<span class="token punctuation">.</span>source<span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="useContext：解決跨多層傳遞資料的問題，就像建立了全域變數"><a href="#useContext：解決跨多層傳遞資料的問題，就像建立了全域變數" class="headerlink" title="useContext：解決跨多層傳遞資料的問題，就像建立了全域變數"></a>useContext：解決跨多層傳遞資料的問題，就像建立了全域變數</h3><ul>
<li>讓父層的資料能夠被底下的任意子層存取，不需要像 props 一層一層傳遞下去，避免造成 Props drilling</li>
<li>用 <code>React.createContext</code> 建立一個 context 物件，並由 <code>&lt;MyContext.Provider value=&#123;&#125;&gt;</code> 存取該物件的值，底下的子層就可以直接透過 useContext 來存取 MyContext</li>
</ul>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> value <span class="token operator">=</span> <span class="token function">useContext</span><span class="token punctuation">(</span>MyContext<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<br/>

<h2 id="Additional-Hooks"><a href="#Additional-Hooks" class="headerlink" title="Additional Hooks"></a>Additional Hooks</h2><h3 id="useReducer：是-useState-的替代方案，當-state-邏輯變得複雜，需要操作多種-state-時可使用"><a href="#useReducer：是-useState-的替代方案，當-state-邏輯變得複雜，需要操作多種-state-時可使用" class="headerlink" title="useReducer：是 useState 的替代方案，當 state 邏輯變得複雜，需要操作多種 state 時可使用"></a>useReducer：是 useState 的替代方案，當 state 邏輯變得複雜，需要操作多種 state 時可使用</h3><ul>
<li>state：當前的 state 值</li>
<li>dispatch：透過參數來和 function 溝通，藉此控制處理方式</li>
<li>reducer： 用來接受一個 <code>(state, action) =&gt; newState</code>，並回傳當前的 state 和對應的 dispatch 方法</li>
<li>initState：設定 state 的初始值</li>
</ul>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token punctuation">[</span>state<span class="token punctuation">,</span> dispatch<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useReducer</span><span class="token punctuation">(</span>reducer<span class="token punctuation">,</span> initState<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h3 id="useCallback：用來記憶父元件的記憶體位置，避免在重新渲染時被重新分配"><a href="#useCallback：用來記憶父元件的記憶體位置，避免在重新渲染時被重新分配" class="headerlink" title="useCallback：用來記憶父元件的記憶體位置，避免在重新渲染時被重新分配"></a>useCallback：用來記憶父元件的記憶體位置，避免在重新渲染時被重新分配</h3><ul>
<li>第一個參數是 function，第二個參數是其依賴陣列，會回傳一個 memoized 的 callback</li>
<li>在重新渲染時，只會在依賴改變時才更新，防止不必要的渲染，減少效能上的消耗</li>
</ul>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> memoizedCallback <span class="token operator">=</span> <span class="token function">useCallback</span><span class="token punctuation">(</span>
  <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token function">doSomething</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">[</span>a<span class="token punctuation">,</span> b<span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="useMemo：用途是當-component-重新渲染時，能避免複雜的程式被重複執行"><a href="#useMemo：用途是當-component-重新渲染時，能避免複雜的程式被重複執行" class="headerlink" title="useMemo：用途是當 component 重新渲染時，能避免複雜的程式被重複執行"></a>useMemo：用途是當 component 重新渲染時，能避免複雜的程式被重複執行</h3><ul>
<li>第一個參數是 function，第二個參數是其依賴陣列，會回傳一個 memoized 的值</li>
<li>在重新渲染時，傳到 useMemo 的 function 就只會在依賴改變時才執行，將 memoized 更新成回傳的值</li>
</ul>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> memoizedValue <span class="token operator">=</span> <span class="token function">useMemo</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">computeExpensiveValue</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>a<span class="token punctuation">,</span> b<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h3 id="useRef：用來抓取-DOM-節點，存放的值不會受到-render-影響"><a href="#useRef：用來抓取-DOM-節點，存放的值不會受到-render-影響" class="headerlink" title="useRef：用來抓取 DOM 節點，存放的值不會受到 render 影響"></a>useRef：用來抓取 DOM 節點，存放的值不會受到 render 影響</h3><ul>
<li>會回傳一個 mutable 的 ref object，其 <code>.current</code> 屬性會被初始為傳入的參數 initialValue</li>
<li>當 <code>.current</code> 屬性有變動時不會觸發重新 render，而每次 render 時都會給同一個 ref object</li>
</ul>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> refContainer <span class="token operator">=</span> <span class="token function">useRef</span><span class="token punctuation">(</span>initialValue<span class="token punctuation">)</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>refContainer<span class="token punctuation">.</span>current<span class="token punctuation">)</span>
<span class="token comment">// initialValue</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="useImperativeHandle：可以在父層調用子層中-ref，選取指定的-DOM-節點"><a href="#useImperativeHandle：可以在父層調用子層中-ref，選取指定的-DOM-節點" class="headerlink" title="useImperativeHandle：可以在父層調用子層中 ref，選取指定的 DOM 節點"></a>useImperativeHandle：可以在父層調用子層中 ref，選取指定的 DOM 節點</h3><ul>
<li>第一個參數是接收的 ref</li>
<li>第二個參數是傳給父層的方法</li>
</ul>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">useImperativeHandle</span><span class="token punctuation">(</span>ref<span class="token punctuation">,</span> createHandle<span class="token punctuation">,</span> <span class="token punctuation">[</span>deps<span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h3 id="useLayoutEffect：功能與-useEffect-相似，差別在於-useLayoutEffect-會在-render-之前執行"><a href="#useLayoutEffect：功能與-useEffect-相似，差別在於-useLayoutEffect-會在-render-之前執行" class="headerlink" title="useLayoutEffect：功能與 useEffect 相似，差別在於 useLayoutEffect 會在 render 之前執行"></a>useLayoutEffect：功能與 useEffect 相似，差別在於 useLayoutEffect 會在 render 之前執行</h3><h3 id="useDebugValue：可用來在-React-DevTools-中顯示自訂義-hook-的標籤"><a href="#useDebugValue：可用來在-React-DevTools-中顯示自訂義-hook-的標籤" class="headerlink" title="useDebugValue：可用來在 React DevTools 中顯示自訂義 hook 的標籤"></a>useDebugValue：可用來在 React DevTools 中顯示自訂義 hook 的標籤</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">useDebugValue</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
]]></content>
      <categories>
        <category>Front-End</category>
        <category>React</category>
      </categories>
      <tags>
        <tag>React</tag>
        <tag>Hooks</tag>
      </tags>
  </entry>
  <entry>
    <title>[week 21] 初探 React：Component、JSX 語法、props 與 state 的不同</title>
    <url>/react-jsx-props/</url>
    <content><![CDATA[<blockquote>
<p>本篇為 <span class="exturl" data-url="aHR0cHM6Ly9saWRlbXkuY29tL3AvZmUzMDItcmVhY3QtaG9va3M=">[FE302] React 基礎 - hooks 版本<i class="fa fa-external-link-alt"></i></span> 這門課程的學習筆記。如有錯誤歡迎指正！</p>
</blockquote>
<pre class="line-numbers language-none"><code class="language-none">學習目標：

 P1 我知道 React 的目的以及原理
 P1 我知道我們為什麼需要 React
 P1 我知道使用 React 跟之前使用 jQuery 的區別
 P1 我理解 state 跟 props 的不同<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<span id="more"></span>
<hr>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><h3 id="React-版本差異"><a href="#React-版本差異" class="headerlink" title="React 版本差異"></a>React 版本差異</h3><p>關於 React 發展歷史，其實起源於 2013 年由 Facebook 開源出來的一個 Library，直到 2015 年更新到 v15 版本後又為更多人使用。</p>
<p>而 React 16.8.0 則是第一個支援 Hook 的版本，這部分我們之後會再提到。到 2020 年 10 月出現 React v17，課程將以此版本為主，和 v16 基本上沒有太大的差異。</p>
<h3 id="React-中一定會用到的-ES6-語法"><a href="#React-中一定會用到的-ES6-語法" class="headerlink" title="React 中一定會用到的 ES6 語法"></a>React 中一定會用到的 ES6 語法</h3><p>在開始之前，可以先複習這篇：<span class="exturl" data-url="aHR0cHM6Ly9pdGhlbHAuaXRob21lLmNvbS50dy9hcnRpY2xlcy8xMDIxNzA4NQ==">React 中一定會用到的 JavaScript 語法<i class="fa fa-external-link-alt"></i></span>，主要包括下列幾個重點：</p>
<ul>
<li>樣板字面值（Template literals／Template strings）</li>
<li>箭頭函式（arrow functions）</li>
<li>物件屬性名稱縮寫（Shorthand property names）</li>
<li>解構賦值（Destructuring assignment）</li>
<li>展開語法（spread syntax）</li>
<li>其餘語法（rest syntax）</li>
</ul>
<p>可事先具備這些知識，或到時候再搭配 MDN 查詢用法，因為這些是之後實作 React 時一定會碰到的語法。</p>
<hr>
<h2 id="React：JavaScript-函式庫"><a href="#React：JavaScript-函式庫" class="headerlink" title="React：JavaScript 函式庫"></a>React：JavaScript 函式庫</h2><p>我們經常會聽到前端三大框架：React、Vue、Angular，但根據 <span class="exturl" data-url="aHR0cHM6Ly96aC1oYW50LnJlYWN0anMub3JnLw==">React<i class="fa fa-external-link-alt"></i></span> 官網定義：</p>
<blockquote>
<p>React: A JavaScript library for building user interfaces</p>
</blockquote>
<p>嚴格來說，React 其實不算是一個框架，而是一個 JavaScript Libaray。通常使用 React 時會搭配其他 Libaray 使用，整個生態系結合起來就會和框架差不多。</p>
<h3 id="為什麼我們需要-React？"><a href="#為什麼我們需要-React？" class="headerlink" title="為什麼我們需要 React？"></a>為什麼我們需要 React？</h3><p>我們可以從「React 提供了哪些功能」的角度來思考這個問題。</p>
<p>之所以會有 React 的誕生，可從原有的 JavaScript MVC 架構談起：Facebook 認為 MVC 模式已無法滿足擴展需求，隨著應用規模增加，系統的複雜度會成級數成長，增加開發難度以及不易進行後續維護。</p>
<p>因此開源出 React 這個 JavaScript Library，負責處理 MVC 的 View（介面）部分，解決思路就是「當狀態改變時，直接重新渲染畫面」，引入 Virtual DOM 的概念，透過 DOM Diff 演算法算出實際需要更新的部分，有效減少渲染次數以提高效能。</p>
<p>瞭解到 React 的發展過程之後，再回到「為什麼我們需要 React？」這個問題，React 的核心概念如下：</p>
<ul>
<li>Component 元件化<ul>
<li>開發 React 很重要的一點，就是去思考在頁面有哪些重複性高或相似的 Element，再透過 JSX 語法將這些 Element 建立成一個 Component</li>
<li>讓每個 Components 擁有重複性及可擴充性，以模組化的方式進行開發</li>
</ul>
</li>
<li>JSX 語法<ul>
<li>透過 JSX 語法，即可將 HTML 語法轉成 JavaScript 的形式，讓我們用來建立 React elements</li>
</ul>
</li>
<li>Virtual DOM<ul>
<li>因為操作 DOM 這件事，其實會耗費很大的成本；而 React 背後運行機制，就是透過比對 Virtual DOM 來避免直接操作 DOM，藉此來提升效能</li>
<li>此外，因為建立 Virtual DOM 這一虛擬層，也讓我們能夠對程式碼進行更多操作</li>
</ul>
</li>
<li>Hooks API<ul>
<li>hook 其實就是 function，讓我們可以在 function component 中管理狀態和使用生命周期等功能，藉此簡化程式碼與提高重用性</li>
</ul>
</li>
</ul>
<h3 id="可以不用-React-嗎？"><a href="#可以不用-React-嗎？" class="headerlink" title="可以不用 React 嗎？"></a>可以不用 React 嗎？</h3><p>由於 React 中，強調「模組化」的概念，如果是實作一個靜態網頁，或是專案規模較小、沒有模組化需求時，直接使用 HTML、CSS、JavaScript 等進行開發會更方便省時。</p>
<p>因此，並不是所有專案都適合用 React 進行開發，應該根據網站需求去決定合適的工具。</p>
<p>參考資料：</p>
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cuZm9vaXNoLmNvbS9yZWFjdGpzLw==">React 教學 - React JavaScript UI Library<i class="fa fa-external-link-alt"></i></span></li>
</ul>
<hr>
<h2 id="初探-React"><a href="#初探-React" class="headerlink" title="初探 React"></a>初探 React</h2><p>在開始前可先透過 <span class="exturl" data-url="aHR0cHM6Ly9jb2Rlc2FuZGJveC5pby8=">CodeSandbox<i class="fa fa-external-link-alt"></i></span> 進行練習，這是一個支援前端框架開發線上編輯器（IDE），類似複雜版的 Codepen。</p>
<p>點選 Create Sandbox，並選擇 React 來快速建立開發環境：</p>
<p><img src="https://i.imgur.com/j6UFABA.png"></p>
<p>建立完成的初始畫面如下，藉由像這樣快速建立環境，也能用來幫助線上 debug：</p>
<p><img src="https://i.imgur.com/d5LQgbX.png"></p>
<h3 id="JSX：用來建立-React-元素"><a href="#JSX：用來建立-React-元素" class="headerlink" title="JSX：用來建立 React 元素"></a>JSX：用來建立 React 元素</h3><blockquote>
<p>簡單來說，JSX（JavaScript extension syntax）就是 HTML/XML + JavaScript。</p>
</blockquote>
<p>React 提供的 JSX 語法，是透過底層的 Babel 機制，將 HTML 語法轉成 JavaScript Function 的形式，讓我們能用來建立 React elements：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> rootElement <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"root"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>h2<span class="token operator">></span>app<span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">></span><span class="token punctuation">,</span> rootElement
<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>以 mount Hello 這個 component 為例：</p>
<blockquote>
<p>mount：意思是把 component 放到畫面上</p>
</blockquote>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// 在 Hello() 中 return 什麼，就會在畫面 render 出什麼</span>
  <span class="token keyword">return</span> <span class="token operator">&lt;</span>h1<span class="token operator">></span>hello world<span class="token operator">!</span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">const</span> rootElement <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"root"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>Hello <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">,</span> rootElement
<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><img src="https://i.imgur.com/CapcKxx.png"></p>
<p>Hello() 這個 component 可以接收參數 props，寫在大括號中會被解讀 React 為 JavaScript 程式碼執行，例如 <code>&#123;JS code&#125;</code>：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Hello</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token operator">&lt;</span>h1<span class="token operator">></span>Hello<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>props<span class="token punctuation">.</span>name<span class="token punctuation">&#125;</span><span class="token operator">!</span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">const</span> rootElement <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"root"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>Hello name<span class="token operator">=</span><span class="token string">"Heidi"</span><span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">,</span> rootElement
<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="ES6-的解構寫法"><a href="#ES6-的解構寫法" class="headerlink" title="ES6 的解構寫法"></a>ES6 的解構寫法</h4><p>更常見的寫法，是把 props 參數改成 ES6 的解構寫法，也就是在大括號內傳入參數：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Hello</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">&#123;</span>name<span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token operator">&lt;</span>h1<span class="token operator">></span>Hello<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>name<span class="token punctuation">&#125;</span><span class="token operator">!</span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<h3 id="使用-JSX-語法需注意的地方"><a href="#使用-JSX-語法需注意的地方" class="headerlink" title="使用 JSX 語法需注意的地方"></a>使用 JSX 語法需注意的地方</h3><p>JSX 語法和 template engine 不同，在使用上沒有那麼自由，必須遵守幾點規則，以避免寫出不合法的 JSX ：</p>
<ul>
<li>沒有迴圈的概念</li>
<li>沒有 if-else 判斷式</li>
</ul>
<p>那麼該如何解決這種情況呢？以下有兩種解決方式，以及範例程式碼：</p>
<ul>
<li>透過三元運算子來進行判斷：適用於只有 ture/false 的情況</li>
</ul>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">&#123;</span>todo<span class="token punctuation">.</span>isDone <span class="token operator">?</span> <span class="token string">'已完成'</span> <span class="token operator">:</span> <span class="token string">'未完成'</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ul>
<li>透過邏輯運算子 &amp;&amp; 的短路行為：適用於多種可能的情況</li>
</ul>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">&#123;</span>todo<span class="token punctuation">.</span>isDone <span class="token operator">&amp;&amp;</span> <span class="token string">'已完成'</span><span class="token punctuation">&#125;</span>
<span class="token punctuation">&#123;</span><span class="token operator">!</span>todo<span class="token punctuation">.</span>isDone <span class="token operator">&amp;&amp;</span> <span class="token string">'未完成'</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h3 id="JSX-特性：自動-escape"><a href="#JSX-特性：自動-escape" class="headerlink" title="JSX 特性：自動 escape"></a>JSX 特性：自動 escape</h3><p>此外，根據<span class="exturl" data-url="aHR0cHM6Ly9yZWFjdGpzLm9yZy9kb2NzL2ludHJvZHVjaW5nLWpzeC5odG1sI2pzeC1wcmV2ZW50cy1pbmplY3Rpb24tYXR0YWNrcw==">官方文件<i class="fa fa-external-link-alt"></i></span>，JSX 語法能夠預防 Injection Attacks，提供 escape 功能。</p>
<p><img src="https://i.imgur.com/eRabFE4.png"></p>
<p>如果真的想要 render 出 innerHTML，則需透過 <span class="exturl" data-url="aHR0cHM6Ly9yZWFjdGpzLm9yZy9kb2NzL2RvbS1lbGVtZW50cy5odG1sI2Rhbmdlcm91c2x5c2V0aW5uZXJodG1s">dangerouslysetinnerhtml<i class="fa fa-external-link-alt"></i></span> 這個冗長的標籤，一般而言不會使用這個方法。</p>
<p>但需要注意，如果在 a 連結標間中，有使用者輸入的區塊，例如：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token punctuation">&#123;</span>todo<span class="token punctuation">.</span>content<span class="token punctuation">&#125;</span><span class="token operator">></span>click me<span class="token operator">!</span><span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>這時若被惡意輸入 <code>javascript:alert()</code> 程式碼，點擊 a 連結就會執行該 JS 程式碼。這其實因為 React 沒有跳脫冒號，造成的 click based XSS：</p>
<p><img src="https://i.imgur.com/bnbqnMb.png"></p>
<p>防範方式有兩種：</p>
<ul>
<li>不要在 a 標籤內放入使用者輸入</li>
<li>加上 encodeURIComponent() 語法，把字串轉化成 escape 格式的字符串</li>
</ul>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token punctuation">&#123;</span>window<span class="token punctuation">.</span><span class="token function">encodeURIComponent</span><span class="token punctuation">(</span>todo<span class="token punctuation">.</span>content<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token operator">></span>click me<span class="token operator">!</span><span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h3 id="常見的-component：Counter"><a href="#常見的-component：Counter" class="headerlink" title="常見的 component：Counter"></a>常見的 component：Counter</h3><p>最後再以常見的 Counter component 為例：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Counter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// useState() 會建立一個陣列 state, 傳入參數為初始值</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span>value<span class="token punctuation">,</span> setValue<span class="token punctuation">]</span> <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">function</span> <span class="token function">handleClick</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// 透過呼叫 setValue() 來更動 state</span>
    <span class="token function">setValue</span><span class="token punctuation">(</span>value <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token comment">// 建立 onClick 監聽事件</span>
  <span class="token keyword">return</span> <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">&#123;</span>handleClick<span class="token punctuation">&#125;</span><span class="token operator">></span><span class="token punctuation">&#123;</span>value<span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">const</span> rootElement <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"root"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>
<span class="token operator">&lt;</span>Counter <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">,</span> rootElement
<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>透過點擊 button 觸發事件來改變 state，React 再根據 state 內容來 render 出畫面：</p>
<iframe src="https://codesandbox.io/embed/chutan-react-n4z9g?fontsize=14&hidenavigation=1&theme=dark"
     style="width:80%; height:200px; border:0; border-radius: 4px; overflow:hidden;"
     title="初探 React"
     allow="accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking"
     sandbox="allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts"
   ></iframe>

<hr>
<h2 id="React-的思考模式跟以前的思考模式有什麼不一樣？"><a href="#React-的思考模式跟以前的思考模式有什麼不一樣？" class="headerlink" title="React 的思考模式跟以前的思考模式有什麼不一樣？"></a>React 的思考模式跟以前的思考模式有什麼不一樣？</h2><p>React 最大的不同，在於多了 Component 和 State 這兩個概念。</p>
<h3 id="Component-元件"><a href="#Component-元件" class="headerlink" title="Component 元件"></a>Component 元件</h3><p>這和以往的思考模式其實很不一樣，像是在切好的 UI 畫面上，將每個 element 新增各種功能；或是以 MVC 架構進行開發。</p>
<p>而在 React 中，一個元件（component）是 React 的最小單位，再透過 Props 來設定屬性或資料。由於所有東西或介面都是由元件所組成，強調的是 UI 元件的封裝性、共用性及擴展性。</p>
<h3 id="React-State"><a href="#React-State" class="headerlink" title="React State"></a>React State</h3><p>在 React 是「透過資料的狀態，決定是否重新渲染畫面」，這和以往直接更改操作 DOM 元素不同；而是以類似間接的方式，透過 React 演算法比對 Virtual DOM 來決定是否更新真實 DOM。</p>
<p>也就是說，Component 是透過資料狀態，來決定是否更新 UI 畫面，而 Component 中有兩種資料來源：</p>
<ol>
<li>外部傳進 Component 的 Props</li>
<li>Component 內部的 State</li>
</ol>
<p>每當 React 偵測到 Props 或 State 有改變時，就會自動重新渲染。</p>
<p>剛開始對這種以 Component 和 State 為核心概念的寫法很不習慣，但卻也有點熟悉的感覺，就像以前在實作前後端分離的留言板或 Todo List 時很像。可能也因為 function component，又和透過功能區分的模組化很類似，但需要考慮到該如何更改 State 來呈現畫面。</p>
<hr>
<h2 id="State-跟-Props-的差別在哪裡？"><a href="#State-跟-Props-的差別在哪裡？" class="headerlink" title="State 跟 Props 的差別在哪裡？"></a>State 跟 Props 的差別在哪裡？</h2><p>State 和 Props 都是 JavaScript 物件，我們在前面有提到，當這兩者之一有改變時，會觸發 React 重新渲染畫面。兩者差別在於：</p>
<h3 id="State"><a href="#State" class="headerlink" title="State"></a>State</h3><ul>
<li>在 Component 內部被管理，類似於 function 中的宣告變數</li>
<li>是 Component 本身的狀態，只有該 Component 能透過 setState 變更 state，這部分我們會在之後的 Hooks 詳細介紹</li>
</ul>
<h3 id="Props"><a href="#Props" class="headerlink" title="Props"></a>Props</h3><ul>
<li>從外部傳進 Component，類似於 function 的參數</li>
<li>由於 React 單向資料流的特性，Props 是父層由上往下傳遞給子層</li>
<li>Props 不能被接收的子層修改，但也可能是父層的 State，可透過 setState 進行變更，再把更新的 State 值做為新的 Props 傳遞給子層</li>
</ul>
<h3 id="包在標籤中間的-props：children"><a href="#包在標籤中間的-props：children" class="headerlink" title="包在標籤中間的 props：children"></a>包在標籤中間的 props：children</h3><p>在 React component 中，包在標籤中間的東西，稱為 children，children 也是一個 props。</p>
<p>以 Todoitem 為例，這裡的 children 指的就是 <code>Watch a movie</code>：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Todoitem</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">&#123;</span>n<span class="token punctuation">,</span> children<span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token operator">&lt;</span>h1<span class="token operator">></span>Todo <span class="token punctuation">&#123;</span>n<span class="token punctuation">&#125;</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>children<span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">const</span> rootElement <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"root"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>
<span class="token operator">&lt;</span>Todoitem n<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token operator">></span>
  Watch a movie
<span class="token operator">&lt;</span><span class="token operator">/</span>Todoitem<span class="token operator">></span><span class="token punctuation">,</span> rootElement
<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><img src="https://i.imgur.com/gX8yUJ5.png"></p>
<p>參考資料：</p>
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cuZm9vaXNoLmNvbS9yZWFjdGpzL3N0YXRlLmh0bWw=">React State - React 教學Tutorial - Fooish 程式技術<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9pdGhlbHAuaXRob21lLmNvbS50dy9hcnRpY2xlcy8xMDE4NTA5NQ==">React Day5 - state 與 setState<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9pdGhlbHAuaXRob21lLmNvbS50dy9hcnRpY2xlcy8xMDIxMDIyMQ==">React的props與state<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9pdGhlbHAuaXRob21lLmNvbS50dy9hcnRpY2xlcy8xMDIwMDY0MA==">【DAY 04】React！說，Props是誰啊？<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9pdGhlbHAuaXRob21lLmNvbS50dy9hcnRpY2xlcy8xMDIxNDQ5NQ==">【Day 6】Child Component &amp;&amp; Props<i class="fa fa-external-link-alt"></i></span></li>
</ul>
<hr>
<h2 id="環境建置：create-react-app"><a href="#環境建置：create-react-app" class="headerlink" title="環境建置：create-react-app"></a>環境建置：create-react-app</h2><p>React 環境建置可分為兩種：</p>
<ul>
<li>自己從頭開始做<ul>
<li>使用 React + Webpack 打包 + Bable 編譯 + Webpack Dev Server</li>
</ul>
</li>
<li>使用現成的套件<ul>
<li>create-react-app，由 React 官方提供</li>
</ul>
</li>
</ul>
<p>這裡會以現成的程式來做示範，詳細說明可參考 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL2NyZWF0ZS1yZWFjdC1hcHA=">facebook/create-react-app<i class="fa fa-external-link-alt"></i></span>。</p>
<h3 id="安裝指令"><a href="#安裝指令" class="headerlink" title="安裝指令"></a>安裝指令</h3><p>依照下方指令安裝相關套件並啟動：</p>
<pre class="line-numbers language-none"><code class="language-none">$ npx create-react-app my-app
$ cd my-app
$ npm start<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>成功運行後，就會在 localhost 開一個 server：</p>
<p><img src="https://i.imgur.com/K7dEnLz.png"></p>
<p>在開始專案之前，首先要閱讀 <code>README.md</code> 的說明，還有查看 <code>package.json</code> 確認安裝了哪些套件等訊息。</p>
<p>再來是 src\index.js 檔案，和我們在 CodeSandbox 看到的內容非常類似：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> ReactDOM <span class="token keyword">from</span> <span class="token string">'react-dom'</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token string">'./index.css'</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">'./App'</span><span class="token punctuation">;</span>
<span class="token comment">// 與資料收集、效能有關</span>
<span class="token keyword">import</span> reportWebVitals <span class="token keyword">from</span> <span class="token string">'./reportWebVitals'</span><span class="token punctuation">;</span>

ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>
  <span class="token operator">&lt;</span>React<span class="token punctuation">.</span>StrictMode<span class="token operator">></span>
    <span class="token operator">&lt;</span>App <span class="token operator">/</span><span class="token operator">></span>
  <span class="token operator">&lt;</span><span class="token operator">/</span>React<span class="token punctuation">.</span>StrictMode<span class="token operator">></span><span class="token punctuation">,</span>
  document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">reportWebVitals</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li><code>React.StrictMode</code>：代表<span class="exturl" data-url="aHR0cHM6Ly9yZWFjdGpzLm9yZy9kb2NzL3N0cmljdC1tb2RlLmh0bWwjaWRlbnRpZnlpbmctdW5zYWZlLWxpZmVjeWNsZXM=">嚴格模式<i class="fa fa-external-link-alt"></i></span>中，會像 ESLint 進行檢查與警告，但有時為了偵測，可能會呼叫兩次，造成和想像中不同的結果，因此建議不加上</li>
<li><code>&lt;App /&gt;</code>：render 出 App conponent，也就是 render 的畫面</li>
</ul>
<p>可在 src\App.js 檔案，修改要 render 的畫面：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">"App"</span><span class="token operator">></span>
      Hello World<span class="token operator">!</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> App<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>重整頁面即可看到結果：</p>
<p><img src="https://i.imgur.com/HPUh5ly.png"></p>
<h2 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h2><p>到這裡我們瞭解 React 重要的概念 Component，以及如何使用 JSX 語法來建立 React 元素。</p>
<p>此外，除了可以利用線上編輯器 CodeSandbox，也可以在本地端安裝官方提供的 create-react-app 套件，來快速建置 React 開發環境。</p>
]]></content>
      <categories>
        <category>Front-End</category>
        <category>React</category>
      </categories>
      <tags>
        <tag>React</tag>
      </tags>
  </entry>
  <entry>
    <title>[week 22] React：用 SPA 架構實作一個部落格（四）- 優化篇</title>
    <url>/react-optimization/</url>
    <content><![CDATA[<p>在完成部落格的基本功能之後，再來要進行優化的部分，也就是解決畫面閃爍的問題。</p>
<p><a href="https://heidiliu2020.github.io/react-blog-test/#/">部落格 DEMO</a></p>
<span id="more"></span>
<h2 id="一、處理登入狀態的畫面閃爍"><a href="#一、處理登入狀態的畫面閃爍" class="headerlink" title="一、處理登入狀態的畫面閃爍"></a>一、處理登入狀態的畫面閃爍</h2><p>在 <span class="exturl" data-url="aHR0cHM6Ly9oYWNrbWQuaW8vQEhlaWRpLUxpdS9ub3RlLWZlMzAyLXJlYWN0LWJsb2ctbG9naW4=">[week 22] React：用 SPA 架構實作一個部落格（二）- 身分驗證<i class="fa fa-external-link-alt"></i></span> 這篇筆記中，有提到登入狀態時，重整頁面會出現畫面閃爍的問題，之所以會有這個現象，是因為畫面進行了兩次 render：</p>
<ul>
<li>預設為登出狀態（第一次 render）</li>
<li>當我們發 API 確認有登入之後，才會顯示登入狀態（第二次 render）</li>
</ul>
<p>為了解決這個問題，就是在「確認是否登入之前，不要顯示和登入登出狀態有關的東西」。</p>
<h3 id="App-js：設定-isLoadingGetMe-狀態"><a href="#App-js：設定-isLoadingGetMe-狀態" class="headerlink" title="App.js：設定 isLoadingGetMe 狀態"></a>App.js：設定 isLoadingGetMe 狀態</h3><ul>
<li>App.js</li>
</ul>
<p>在 App.js 執行開始，就先設定一個 isLoadingGetMe，預設值為 true，也就是不顯示登入登出：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token punctuation">[</span>isLoadingGetMe<span class="token punctuation">,</span> setLoadingGetMe<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>一旦接收到 getMe() 回傳的 response 時，或是發現沒有 token 時，就會改成 false，顯示登入登出：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> getMe <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"../../WebAPI"</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> getAuthToken <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"../../utils"</span><span class="token punctuation">;</span>

<span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// 以 getAuthToken 從 localStorage 讀取 token</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">getAuthToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// 有 token 才 call API</span>
    <span class="token function">getMe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">response</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>response<span class="token punctuation">.</span>ok<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token function">setUser</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">setLoadingGetMe</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
    <span class="token function">setLoadingGetMe</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>並透過 Provider 將參數設為全域變數：</p>
<pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> AuthContext<span class="token punctuation">,</span> LoadingContext <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"../../contexts"</span><span class="token punctuation">;</span>

<span class="token comment">// ...</span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">AuthContext.Provider</span></span> <span class="token attr-name">value</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> user<span class="token punctuation">,</span> setUser <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span><span class="token plain-text">
  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Root</span></span><span class="token punctuation">></span></span><span class="token plain-text">
     </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">LoadingContext.Provider</span></span>
        <span class="token attr-name">value</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> isLoading<span class="token punctuation">,</span> setIsLoading<span class="token punctuation">,</span> isLoadingGetMe <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></span>
      <span class="token punctuation">></span></span><span class="token plain-text">
 
    //  ...   

    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">LoadingContext.Provider</span></span><span class="token punctuation">></span></span><span class="token plain-text">
  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Root</span></span><span class="token punctuation">></span></span><span class="token plain-text">
</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">AuthContext.Provider</span></span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="context-js：建立-context"><a href="#context-js：建立-context" class="headerlink" title="context.js：建立 context"></a>context.js：建立 context</h3><p>在 src/context.js 建立 context，初始值設為 null：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> createContext <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span>

<span class="token comment">// 初始值為 null</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> AuthContext <span class="token operator">=</span> <span class="token function">createContext</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> LoadingContext <span class="token operator">=</span> <span class="token function">createContext</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="Header-js：根據-isLoadingGetMe-顯示登入狀態"><a href="#Header-js：根據-isLoadingGetMe-顯示登入狀態" class="headerlink" title="Header.js：根據 isLoadingGetMe 顯示登入狀態"></a>Header.js：根據 isLoadingGetMe 顯示登入狀態</h3><p>首先從 context.js 引入參數，以及引入需要的 hooks：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> useContext <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> Link<span class="token punctuation">,</span> NavLink<span class="token punctuation">,</span> useHistory<span class="token punctuation">,</span> useLocation <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"react-router-dom"</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> AuthContext<span class="token punctuation">,</span> LoadingContext <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"../../contexts"</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> setAuthToken <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"../../utils"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>接著就可以根據 isLoadingGetMe 以及 user 的布林值，決定如何顯示登入狀態：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">Header</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> isLoadingGetMe <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token function">useContext</span><span class="token punctuation">(</span>LoadingContext<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> user<span class="token punctuation">,</span> setUser <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token function">useContext</span><span class="token punctuation">(</span>AuthContext<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> location <span class="token operator">=</span> <span class="token function">useLocation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// 登出功能</span>
  <span class="token keyword">const</span> history <span class="token operator">=</span> <span class="token function">useHistory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> <span class="token function-variable function">handleLogout</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token function">setAuthToken</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">setUser</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>location<span class="token punctuation">.</span>pathname <span class="token operator">!==</span> <span class="token string">"/"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      history<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token operator">&lt;</span>HeaderContainer<span class="token operator">></span>
      <span class="token operator">&lt;</span>Brand<span class="token operator">></span>
        <span class="token operator">&lt;</span>Link to<span class="token operator">=</span><span class="token string">"/"</span> replace<span class="token operator">></span>
          React 部落格
        <span class="token operator">&lt;</span><span class="token operator">/</span>Link<span class="token operator">></span>
      <span class="token operator">&lt;</span><span class="token operator">/</span>Brand<span class="token operator">></span>
      <span class="token operator">&lt;</span>NavbarList<span class="token operator">></span>
        <span class="token operator">&lt;</span>StyledLink exact to<span class="token operator">=</span><span class="token string">"/about"</span> replace activeClassName<span class="token operator">=</span><span class="token string">"active"</span><span class="token operator">></span>
          關於我
        <span class="token operator">&lt;</span><span class="token operator">/</span>StyledLink<span class="token operator">></span>
        <span class="token operator">&lt;</span>StyledLink to<span class="token operator">=</span><span class="token string">"/post-list/"</span> replace activeClassName<span class="token operator">=</span><span class="token string">"active"</span><span class="token operator">></span>
          文章列表
        <span class="token operator">&lt;</span><span class="token operator">/</span>StyledLink<span class="token operator">></span>
        <span class="token punctuation">&#123;</span>isLoadingGetMe <span class="token operator">?</span> <span class="token punctuation">(</span>
          <span class="token operator">&lt;</span>LoadingGetMe<span class="token operator">></span>資料讀取中<span class="token operator">...</span><span class="token operator">&lt;</span><span class="token operator">/</span>LoadingGetMe<span class="token operator">></span>
        <span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token punctuation">(</span>
          <span class="token operator">&lt;</span><span class="token operator">></span>
            <span class="token punctuation">&#123;</span><span class="token operator">!</span>user <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>
              <span class="token operator">&lt;</span>StyledLink to<span class="token operator">=</span><span class="token string">"/register"</span> replace activeClassName<span class="token operator">=</span><span class="token string">"active"</span><span class="token operator">></span>
                註冊
              <span class="token operator">&lt;</span><span class="token operator">/</span>StyledLink<span class="token operator">></span>
            <span class="token punctuation">)</span><span class="token punctuation">&#125;</span>
            <span class="token punctuation">&#123;</span><span class="token operator">!</span>user <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>
              <span class="token operator">&lt;</span>StyledLink to<span class="token operator">=</span><span class="token string">"/login"</span> replace activeClassName<span class="token operator">=</span><span class="token string">"active"</span><span class="token operator">></span>
                登入
              <span class="token operator">&lt;</span><span class="token operator">/</span>StyledLink<span class="token operator">></span>
            <span class="token punctuation">)</span><span class="token punctuation">&#125;</span>
            <span class="token punctuation">&#123;</span>user <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>
              <span class="token operator">&lt;</span>StyledLink to<span class="token operator">=</span><span class="token string">"/new-post"</span> replace activeClassName<span class="token operator">=</span><span class="token string">"active"</span><span class="token operator">></span>
                發布文章
              <span class="token operator">&lt;</span><span class="token operator">/</span>StyledLink<span class="token operator">></span>
            <span class="token punctuation">)</span><span class="token punctuation">&#125;</span>
            <span class="token punctuation">&#123;</span>user <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>
              <span class="token operator">&lt;</span>StyledLink to<span class="token operator">=</span><span class="token string">""</span> replace onClick<span class="token operator">=</span><span class="token punctuation">&#123;</span>handleLogout<span class="token punctuation">&#125;</span><span class="token operator">></span>
                登出
              <span class="token operator">&lt;</span><span class="token operator">/</span>StyledLink<span class="token operator">></span>
            <span class="token punctuation">)</span><span class="token punctuation">&#125;</span>
          <span class="token operator">&lt;</span><span class="token operator">/</span><span class="token operator">></span>
        <span class="token punctuation">)</span><span class="token punctuation">&#125;</span>
      <span class="token operator">&lt;</span><span class="token operator">/</span>NavbarList<span class="token operator">></span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>HeaderContainer<span class="token operator">></span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>重點在於 isLoadingGetMe  的判斷邏輯：</p>
<ul>
<li>如果 isLoadingGetMe 為 true，就不會顯示裡面和登入狀態有關的東西</li>
<li>當 isLoadingGetMe 為 faluse，才會再根據 user 是否為 true，決定要顯示「註冊、登入」還是「發布文章、登出」</li>
</ul>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">&#123;</span>isLoadingGetMe <span class="token operator">?</span> <span class="token punctuation">(</span>
  <span class="token operator">&lt;</span>LoadingGetMe<span class="token operator">></span>資料讀取中<span class="token operator">...</span><span class="token operator">&lt;</span><span class="token operator">/</span>LoadingGetMe<span class="token operator">></span>
<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token punctuation">(</span>
  <span class="token operator">&lt;</span><span class="token operator">></span>
    <span class="token punctuation">&#123;</span><span class="token operator">!</span>user <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>
      <span class="token operator">&lt;</span>StyledLink to<span class="token operator">=</span><span class="token string">"/register"</span> replace activeClassName<span class="token operator">=</span><span class="token string">"active"</span><span class="token operator">></span>
        註冊
      <span class="token operator">&lt;</span><span class="token operator">/</span>StyledLink<span class="token operator">></span>
    <span class="token punctuation">)</span><span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#123;</span><span class="token operator">!</span>user <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>
      <span class="token operator">&lt;</span>StyledLink to<span class="token operator">=</span><span class="token string">"/login"</span> replace activeClassName<span class="token operator">=</span><span class="token string">"active"</span><span class="token operator">></span>
        登入
      <span class="token operator">&lt;</span><span class="token operator">/</span>StyledLink<span class="token operator">></span>
    <span class="token punctuation">)</span><span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#123;</span>user <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>
      <span class="token operator">&lt;</span>StyledLink to<span class="token operator">=</span><span class="token string">"/new-post"</span> replace activeClassName<span class="token operator">=</span><span class="token string">"active"</span><span class="token operator">></span>
        發布文章
      <span class="token operator">&lt;</span><span class="token operator">/</span>StyledLink<span class="token operator">></span>
    <span class="token punctuation">)</span><span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#123;</span>user <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>
      <span class="token operator">&lt;</span>StyledLink to<span class="token operator">=</span><span class="token string">""</span> replace onClick<span class="token operator">=</span><span class="token punctuation">&#123;</span>handleLogout<span class="token punctuation">&#125;</span><span class="token operator">></span>
        登出
      <span class="token operator">&lt;</span><span class="token operator">/</span>StyledLink<span class="token operator">></span>
    <span class="token punctuation">)</span><span class="token punctuation">&#125;</span>
  <span class="token operator">&lt;</span><span class="token operator">/</span><span class="token operator">></span>
<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<hr>
<h2 id="二、處理呼叫-API-造成的畫面閃爍"><a href="#二、處理呼叫-API-造成的畫面閃爍" class="headerlink" title="二、處理呼叫 API 造成的畫面閃爍"></a>二、處理呼叫 API 造成的畫面閃爍</h2><p>當我們需要 call API 時，必須考慮到非同步的問題。舉例來說，當我們進入文章列表時，第一次 render 會先看到空的列表，第二次 render 才會出現文章。</p>
<p>為了解決這個問題，我們可以將第一次 render 改為 Loading 畫面，等到第二次 render 再顯示文章頁面。</p>
<p>那麼就開始吧！</p>
<h3 id="App-js：設定-isLoading-狀態"><a href="#App-js：設定-isLoading-狀態" class="headerlink" title="App.js：設定 isLoading 狀態"></a>App.js：設定 isLoading 狀態</h3><p>首先，同樣在 APP 執行時就先設第一個 isLoading 狀態，預設值為 false，當我們有進行 call API 的動作時才會設為 true：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token punctuation">[</span>isLoading<span class="token punctuation">,</span> setIsLoading<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>同樣透過 Provider 將參數設為全域變數：</p>
<pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">LoadingContext.Provider</span></span>
    <span class="token attr-name">value</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> isLoading<span class="token punctuation">,</span> setIsLoading<span class="token punctuation">,</span> isLoadingGetMe <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span><span class="token plain-text">
    // ...
</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">LoadingContext.Provider</span></span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="PoseListPage-js：根據-isLoading-狀態顯示畫面"><a href="#PoseListPage-js：根據-isLoading-狀態顯示畫面" class="headerlink" title="PoseListPage.js：根據 isLoading 狀態顯示畫面"></a>PoseListPage.js：根據 isLoading 狀態顯示畫面</h3><p>接著引入 context，還有 isLoading 時要顯示的 Loading component：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> useState<span class="token punctuation">,</span> useEffect<span class="token punctuation">,</span> useRef<span class="token punctuation">,</span> useContext <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> LoadingContext<span class="token punctuation">,</span> AuthContext <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"../../contexts"</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> Loading <span class="token keyword">from</span> <span class="token string">"../../components/Loading"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>接著是根據 isLoading 狀態顯示畫面，在 call API 時會設為 true，直到接收 response 後會設為 false：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">HomePage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> isLoading<span class="token punctuation">,</span> setIsLoading <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token function">useContext</span><span class="token punctuation">(</span>LoadingContext<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span>posts<span class="token punctuation">,</span> setPosts<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token function">setIsLoading</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">getPosts</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">posts</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">setPosts</span><span class="token punctuation">(</span>posts<span class="token punctuation">)</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
        <span class="token function">setIsLoading</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>setIsLoading<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token operator">&lt;</span>Root<span class="token operator">></span>
      <span class="token punctuation">&#123;</span>isLoading <span class="token operator">?</span> <span class="token punctuation">(</span>
        <span class="token operator">&lt;</span>Loading <span class="token operator">/</span><span class="token operator">></span>
      <span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token punctuation">(</span>
        <span class="token operator">&lt;</span>PostsListContainer<span class="token operator">></span>
          <span class="token operator">&lt;</span>PostsListTitle<span class="token operator">></span>最新文章<span class="token operator">&lt;</span><span class="token operator">/</span>PostsListTitle<span class="token operator">></span>
          <span class="token punctuation">&#123;</span>posts <span class="token operator">&amp;&amp;</span> posts<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">post</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token operator">&lt;</span>PostList post<span class="token operator">=</span><span class="token punctuation">&#123;</span>post<span class="token punctuation">&#125;</span> key<span class="token operator">=</span><span class="token punctuation">&#123;</span>post<span class="token punctuation">.</span>id<span class="token punctuation">&#125;</span> <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span>
          <span class="token operator">&lt;</span>ReadMore<span class="token operator">></span>
            <span class="token operator">&lt;</span>Link to<span class="token operator">=</span><span class="token string">"/post-list"</span><span class="token operator">></span>查看更多<span class="token operator">&lt;</span><span class="token operator">/</span>Link<span class="token operator">></span>
          <span class="token operator">&lt;</span><span class="token operator">/</span>ReadMore<span class="token operator">></span>
        <span class="token operator">&lt;</span><span class="token operator">/</span>PostsListContainer<span class="token operator">></span>
      <span class="token punctuation">)</span><span class="token punctuation">&#125;</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>Root<span class="token operator">></span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="三、透過-react-spinner-設定-loading-畫面"><a href="#三、透過-react-spinner-設定-loading-畫面" class="headerlink" title="三、透過 react-spinner 設定 loading 畫面"></a>三、透過 react-spinner 設定 loading 畫面</h2><blockquote>
<p>使用方法可參考 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2RhdmlkaHUyMDAwL3JlYWN0LXNwaW5uZXJz">davidhu2000 / react-spinners<i class="fa fa-external-link-alt"></i></span> 介紹，以及樣式 <span class="exturl" data-url="aHR0cHM6Ly93d3cuZGF2aWRodS5pby9yZWFjdC1zcGlubmVycy8=">DEMO<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
<h3 id="安裝套件"><a href="#安裝套件" class="headerlink" title="安裝套件"></a>安裝套件</h3><pre class="line-numbers language-none"><code class="language-none">npm install react-spinners --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h3 id="官方使用範例"><a href="#官方使用範例" class="headerlink" title="官方使用範例"></a>官方使用範例</h3><p>官方範例是用 class component 去寫的，但其實概念和 function component 沒有差太多，狀態就從 App.js 設定的 isLoading 去判斷即可：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> css <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"@emotion/core"</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> ClipLoader <span class="token keyword">from</span> <span class="token string">"react-spinners/ClipLoader"</span><span class="token punctuation">;</span>

<span class="token comment">// Can be a string as well. Need to ensure each key-value pair ends with ;</span>
<span class="token keyword">const</span> override <span class="token operator">=</span> css<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">
  display: block;
  margin: 0 auto;
  border-color: red;
</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">AwesomeComponent</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">&#123;</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
      loading<span class="token operator">:</span> <span class="token boolean">true</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>
      <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">"sweet-loading"</span><span class="token operator">></span>
        <span class="token operator">&lt;</span>ClipLoader
          css<span class="token operator">=</span><span class="token punctuation">&#123;</span>override<span class="token punctuation">&#125;</span>
          size<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token number">150</span><span class="token punctuation">&#125;</span>
          color<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">"#123abc"</span><span class="token punctuation">&#125;</span>
          loading<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>loading<span class="token punctuation">&#125;</span>
        <span class="token operator">/</span><span class="token operator">></span>
      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>Loading.js</li>
</ul>
<p>改寫 Loading component 如下：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> styled <span class="token keyword">from</span> <span class="token string">"styled-components"</span><span class="token punctuation">;</span>
<span class="token comment">// 要引用的樣式</span>
<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> PuffLoader <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"react-spinners"</span><span class="token punctuation">;</span>

<span class="token comment">// 全版的半透明背景</span>
<span class="token keyword">const</span> LoadingWapper <span class="token operator">=</span> styled<span class="token punctuation">.</span>div<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">
  position: fixed;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background: rgba(0, 0, 0, 0.6);
  display: flex;
  align-items: center;
  justify-content: center;
</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">Loading</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token operator">&lt;</span>LoadingWapper<span class="token operator">></span>
      <span class="token operator">&lt;</span>PuffLoader size<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token number">60</span><span class="token punctuation">&#125;</span> color<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">"#4A90E2"</span><span class="token punctuation">&#125;</span> <span class="token operator">/</span><span class="token operator">></span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>LoadingWapper<span class="token operator">></span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>效果如下：</p>
<p><img src="https://i.imgur.com/MNaWqI0.gif"></p>
]]></content>
      <categories>
        <category>Front-End</category>
        <category>React</category>
      </categories>
      <tags>
        <tag>React</tag>
        <tag>useEffect</tag>
        <tag>useState</tag>
        <tag>useContext</tag>
      </tags>
  </entry>
  <entry>
    <title>[week 21] 補充：在 React 使用 PropTypes 進行型別檢查</title>
    <url>/react-proptypes/</url>
    <content><![CDATA[<blockquote>
<p>本篇為 <span class="exturl" data-url="aHR0cHM6Ly9saWRlbXkuY29tL3AvZmUzMDItcmVhY3QtaG9va3M=">[FE302] React 基礎 - hooks 版本<i class="fa fa-external-link-alt"></i></span> 這門課程的學習筆記。如有錯誤歡迎指正！</p>
</blockquote>
<p>之前介紹過 Prettier 和 eslint 這兩個前端工具，能夠分別檢查程式碼格式，以及檢查語法：</p>
<span id="more"></span>
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9oYWNrbWQuaW8vQEhlaWRpLUxpdS9ub3RlLXByZXR0aWVy">[week 21] 補充：Prettier 套件 - 自動整理程式碼格式<i class="fa fa-external-link-alt"></i></span></li>
<li><ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9oYWNrbWQuaW8vQEhlaWRpLUxpdS9ub3RlLWVzbGludA==">[week 3] 設定 eslint：用來檢查語法的工具<i class="fa fa-external-link-alt"></i></span></li>
</ul>
</li>
</ul>
<p>在 VSCode 可以針對錯誤進行快速修復，也可以選擇加入註解，忽略 eslint 的錯誤訊息：</p>
<p><img src="https://i.imgur.com/NPyX5Mj.png"></p>
<p>除此之外，React 有另一個能夠提升程式碼品質的功能，也就是透過 PropTypes 來驗證 Props 型態。</p>
<h2 id="利用-PropTypes-驗證-Props"><a href="#利用-PropTypes-驗證-Props" class="headerlink" title="利用 PropTypes 驗證 Props"></a>利用 PropTypes 驗證 Props</h2><blockquote>
<p>詳細可參考官方文件：<span class="exturl" data-url="aHR0cHM6Ly96aC1oYW50LnJlYWN0anMub3JnL2RvY3MvdHlwZWNoZWNraW5nLXdpdGgtcHJvcHR5cGVzLmh0bWw=">Typechecking With PropTypes<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
<p>在使用前，需要先修改 eslint 規則，也就是在 react 專案新增 .eslintrc.json 檔案。</p>
<p>內容如下，或是參考 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3lhbm5pY2tjci9lc2xpbnQtcGx1Z2luLXJlYWN0">yannickcr/eslint-plugin-react<i class="fa fa-external-link-alt"></i></span>，意思是專案中的每個 component 都要加上 props，否則會出現警告訊息：</p>
<pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>
  <span class="token property">"extends"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"react-app"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token property">"rules"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    <span class="token property">"react/prop-types"</span><span class="token operator">:</span> <span class="token string">"warn"</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>之後輸入 npm start 指令運行 React，就會在終端機介面看到警告訊息。</p>
<p>接下來會以 TodoItem component 作為範例。</p>
<h3 id="引入使用-ProtoTypes"><a href="#引入使用-ProtoTypes" class="headerlink" title="引入使用 ProtoTypes"></a>引入使用 ProtoTypes</h3><p>首先要在 TodoItem.js 引入使用 ProtoTypes：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> PropTypes <span class="token keyword">from</span> <span class="token string">'prop-types'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>接著幫 TodoItem component 的 props 加上 PropTypes，注意 function 在這裡是縮寫 func：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">TodoItem<span class="token punctuation">.</span>propTypes <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  todo<span class="token operator">:</span> PropTypes<span class="token punctuation">.</span>object<span class="token punctuation">,</span>
  handleDeleteTodo<span class="token operator">:</span> PropTypes<span class="token punctuation">.</span>func<span class="token punctuation">,</span>
  handleToggleIsDone<span class="token operator">:</span> PropTypes<span class="token punctuation">.</span>func<span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>也可以將 object 寫得更詳細，描述物件中的 key-value 以及型別：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">TodoItem<span class="token punctuation">.</span>propTypes <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  todo<span class="token operator">:</span> PropTypes<span class="token punctuation">.</span><span class="token function">shape</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
    id<span class="token operator">:</span> PropTypes<span class="token punctuation">.</span>number<span class="token punctuation">,</span>
    content<span class="token operator">:</span> PropTypes<span class="token punctuation">.</span>string<span class="token punctuation">,</span>
    isDone<span class="token operator">:</span> PropTypes<span class="token punctuation">.</span>bool<span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  handleDeleteTodo<span class="token operator">:</span> PropTypes<span class="token punctuation">.</span>func<span class="token punctuation">,</span>
  handleToggleIsDone<span class="token operator">:</span> PropTypes<span class="token punctuation">.</span>func<span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>加上 PropTypes 進行修改的好處在於：</p>
<ul>
<li>Console 不會再出現 warning</li>
<li>未來若有其他人接手專案時，能夠快速瀏覽這個 Component 有哪些參數，以及瞭解 PropTypes 型別</li>
<li>也能透過一些 Library 將 PropTypes 產生一份文件</li>
</ul>
]]></content>
      <categories>
        <category>Front-End</category>
        <category>React</category>
      </categories>
      <tags>
        <tag>React</tag>
      </tags>
  </entry>
  <entry>
    <title>[week 21] React 基礎：style &amp; 如何撰寫 CSS</title>
    <url>/react-styled-component/</url>
    <content><![CDATA[<blockquote>
<p>本篇為 <span class="exturl" data-url="aHR0cHM6Ly9saWRlbXkuY29tL3AvZmUzMDItcmVhY3QtaG9va3M=">[FE302] React 基礎 - hooks 版本<i class="fa fa-external-link-alt"></i></span> 這門課程的學習筆記。如有錯誤歡迎指正！</p>
</blockquote>
<span id="more"></span>
<hr>
<h2 id="React-中的-style"><a href="#React-中的-style" class="headerlink" title="React 中的 style"></a>React 中的 style</h2><p>在 React 中有很多種方式可以寫 CSS，主要又可分為下列三種：</p>
<h3 id="一、inline-style-行內樣式"><a href="#一、inline-style-行內樣式" class="headerlink" title="一、inline-style 行內樣式"></a>一、inline-style 行內樣式</h3><p>直接在 HTML 標籤內加入 style 屬性，例如 <code>style=&#123;&#125;</code>，但需注意下列幾點：</p>
<ul>
<li>inline style 裡面放的是 object</li>
<li>只能傳入該元素支援的 inline style</li>
<li>而不能傳入偽元素或 hover</li>
<li>因為是 JavaScript 程式碼，需改為駝峰式命名</li>
</ul>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Title</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">&#123;</span> size <span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>size <span class="token operator">===</span> <span class="token string">'XL'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token operator">&lt;</span>h1<span class="token operator">></span>hello<span class="token operator">!</span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">return</span><span class="token punctuation">(</span>
    <span class="token comment">// 兩個大括號包住: JavaScript 程式碼 + 以物件形式</span>
    <span class="token operator">&lt;</span>h2 style<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>
      color<span class="token operator">:</span> <span class="token string">'blue'</span><span class="token punctuation">,</span>
      <span class="token comment">// 需改為駝峰式命名</span>
      textAlign<span class="token operator">:</span> <span class="token string">'center'</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">></span>hello<span class="token operator">!</span><span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">></span>
  <span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>顯示結果：</p>
<p><img src="https://i.imgur.com/QGFGRwV.png"></p>
<h3 id="二、使用-webpack-打包"><a href="#二、使用-webpack-打包" class="headerlink" title="二、使用 webpack 打包"></a>二、使用 webpack 打包</h3><p>在標籤加上 className 屬性（因為 class 是保留字），會被瀏覽器渲染成 css 中的 class，再透過 webpack 打包來引入該 css 檔案：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 透過 webpack 來引入 css</span>
<span class="token keyword">import</span> <span class="token string">'./App.css'</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">"App"</span><span class="token operator">></span>
      <span class="token operator">&lt;</span>Title <span class="token operator">/</span><span class="token operator">></span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>然後編輯 App.css 檔案：</p>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.App</span> <span class="token punctuation">&#123;</span>
  <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>
  <span class="token property">background</span><span class="token punctuation">:</span> yellowgreen<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>顯示結果：</p>
<p><img src="https://i.imgur.com/nBoFnXg.png"></p>
<h3 id="三、使用-styled-components-套件"><a href="#三、使用-styled-components-套件" class="headerlink" title="三、使用 styled-components 套件"></a>三、使用 styled-components 套件</h3><p>styled-components 是一個 library，也是目前的主流作法。用了 styled-components 套件之後，基本上就不需再直接寫 App.css 等檔案，之後會以此方法進行介紹。</p>
<p>首先安裝 <span class="exturl" data-url="aHR0cHM6Ly9zdHlsZWQtY29tcG9uZW50cy5jb20v">styled-components<i class="fa fa-external-link-alt"></i></span> 套件，然後運行程式：</p>
<pre class="line-numbers language-none"><code class="language-none">$ npm install --save styled-components
$ npm run start<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>css 是透過標籤模板的寫法，在也就是在 “`” 反引號裡面寫入 css 樣式：</p>
<pre class="line-numbers language-css" data-language="css"><code class="language-css">style.p`&lt;css code>`<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>修改 App.js 檔案，直接在 style 後面接元素名稱，並在反引號中寫入 css 程式碼：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 引入 styled-components 套件</span>
<span class="token keyword">import</span> styled <span class="token keyword">from</span> <span class="token string">'styled-components'</span><span class="token punctuation">;</span>
 
<span class="token keyword">const</span> Description <span class="token operator">=</span> styled<span class="token punctuation">.</span>p<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">
  color: red;
  padding: 20px;
  bottom: 1px solid #000;
</span><span class="token template-punctuation string">`</span></span>

<span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">"App"</span><span class="token operator">></span>
      <span class="token operator">&lt;</span>Title <span class="token operator">/</span><span class="token operator">></span>
      <span class="token operator">&lt;</span>Description<span class="token operator">></span>  <span class="token comment">// => 編譯後會變成 &lt;p></span>
        這是副標題
      <span class="token operator">&lt;</span><span class="token operator">/</span>Description<span class="token operator">></span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>可以想成 Description 就是有 style.p 的 component，而 React 會動態隨機產生 className，並加入設定好的 class：</p>
<p><img src="https://i.imgur.com/634Pzhw.png"></p>
<h3 id="以切出簡單的-TodoItem-為例"><a href="#以切出簡單的-TodoItem-為例" class="headerlink" title="以切出簡單的 TodoItem 為例"></a>以切出簡單的 TodoItem 為例</h3><p>根據上述範例，其實就是在 styled 後面寫 css 程式碼，因此也可寫成 Sass 語法：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> TodoItemWrapper <span class="token operator">=</span> styled<span class="token punctuation">.</span>div<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">
  max-width: 80%;
  margin: 5px auto;
  display: flex;
  align-items: center;
  justify-content: space-between;
  padding: 8px 16px;
  border: 1px solid #eee;
</span><span class="token template-punctuation string">`</span></span>
<span class="token keyword">const</span> TodoContent <span class="token operator">=</span> styled<span class="token punctuation">.</span>div<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">
  color: #000;
</span><span class="token template-punctuation string">`</span></span>

<span class="token comment">// 不用傳入任何東西，但仍需在最後加上反引號</span>
<span class="token keyword">const</span> TodoButtonWrapper <span class="token operator">=</span> styled<span class="token punctuation">.</span>div<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token template-punctuation string">`</span></span>

<span class="token keyword">const</span> Button <span class="token operator">=</span> styled<span class="token punctuation">.</span>button<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">
  padding: 4px;
  color: #232332;
  // 也可使用 Sass 語法
  &amp;:hover &#123;
    color: red;
  &#125;
  &amp; + &amp; &#123;
    margin-left: 4px;
  &#125;
</span><span class="token template-punctuation string">`</span></span>

<span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">"App"</span><span class="token operator">></span>
      <span class="token operator">&lt;</span>TodoItemWrapper<span class="token operator">></span>
        <span class="token operator">&lt;</span>TodoContent<span class="token operator">></span>This is Todo<span class="token operator">&lt;</span><span class="token operator">/</span>TodoContent<span class="token operator">></span>
        <span class="token operator">&lt;</span>TodoButtonWrapper<span class="token operator">></span>
          <span class="token operator">&lt;</span>Button<span class="token operator">></span>未完成<span class="token operator">&lt;</span><span class="token operator">/</span>Button<span class="token operator">></span>
          <span class="token operator">&lt;</span>Button<span class="token operator">></span>刪除<span class="token operator">&lt;</span><span class="token operator">/</span>Button<span class="token operator">></span>
        <span class="token operator">&lt;</span><span class="token operator">/</span>TodoButtonWrapper<span class="token operator">></span>
      <span class="token operator">&lt;</span><span class="token operator">/</span>TodoItemWrapper<span class="token operator">></span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>結果如下：</p>
<p><img src="https://i.imgur.com/NTDXvq3.png"></p>
<p>通常會把模板 TodoItem 獨立寫成 component，改寫後如下：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">TodoItem</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">&#123;</span> size<span class="token punctuation">,</span> content <span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token operator">&lt;</span>TodoItemWrapper<span class="token operator">></span>
      <span class="token operator">&lt;</span>TodoContent size<span class="token operator">=</span><span class="token punctuation">&#123;</span>size<span class="token punctuation">&#125;</span><span class="token operator">></span><span class="token punctuation">&#123;</span>content<span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>TodoContent<span class="token operator">></span>
      <span class="token operator">&lt;</span>TodoButtonWrapper<span class="token operator">></span>
        <span class="token operator">&lt;</span>Button<span class="token operator">></span>未完成<span class="token operator">&lt;</span><span class="token operator">/</span>Button<span class="token operator">></span>
        <span class="token operator">&lt;</span>Button<span class="token operator">></span>刪除<span class="token operator">&lt;</span><span class="token operator">/</span>Button<span class="token operator">></span>
      <span class="token operator">&lt;</span><span class="token operator">/</span>TodoButtonWrapper<span class="token operator">></span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>TodoItemWrapper<span class="token operator">></span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">const</span> titleSize <span class="token operator">=</span> <span class="token string">"M"</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">"App"</span><span class="token operator">></span>
      <span class="token operator">&lt;</span>TodoItem content<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token number">123</span><span class="token punctuation">&#125;</span> <span class="token operator">/</span><span class="token operator">></span>
      <span class="token operator">&lt;</span>TodoItem content<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token number">456</span><span class="token punctuation">&#125;</span> size<span class="token operator">=</span><span class="token string">"XL"</span> <span class="token operator">/</span><span class="token operator">></span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>也可以在 TodoContent 傳入參數 props，傳入參數的程式碼需寫在 <code>$&#123;...&#125;</code> 裡面，而在括號內的 css 程式碼則要用反引號包住：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> TodoContent <span class="token operator">=</span> styled<span class="token punctuation">.</span>div<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">
  color: #000;
  font-size: 12px;
  </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token parameter">props</span> <span class="token operator">=></span> props<span class="token punctuation">.</span>size <span class="token operator">===</span> <span class="token string">'XL'</span> <span class="token operator">&amp;&amp;</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">
    font-size: 20px;
  </span><span class="token template-punctuation string">`</span></span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">
</span><span class="token template-punctuation string">`</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>結果如下：</p>
<p><img src="https://i.imgur.com/P06HZye.png"></p>
<h2 id="styled-component-實戰"><a href="#styled-component-實戰" class="headerlink" title="styled component 實戰"></a>styled component 實戰</h2><p>有關 styled component 套件的詳細功能可參考<span class="exturl" data-url="aHR0cHM6Ly9zdHlsZWQtY29tcG9uZW50cy5jb20vZG9jcy9iYXNpY3M=">官方文件<i class="fa fa-external-link-alt"></i></span>，接著要舉一些常用語法作為範例。</p>
<h3 id="範例一：透過-styled-繼承樣式"><a href="#範例一：透過-styled-繼承樣式" class="headerlink" title="範例一：透過 styled() 繼承樣式"></a>範例一：透過 styled() 繼承樣式</h3><ul>
<li>如果是對 styled component 進行 restyle，裡面寫的 css 程式碼會蓋過原本的樣式：</li>
</ul>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 繼承 Button 這個 styled component</span>
<span class="token keyword">const</span> GreenButton <span class="token operator">=</span> <span class="token function">styled</span><span class="token punctuation">(</span>Button<span class="token punctuation">)</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">
  background: green;
  color: #eee;
</span><span class="token template-punctuation string">`</span></span>

<span class="token keyword">function</span> <span class="token function">TodoItem</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">&#123;</span> size<span class="token punctuation">,</span> content <span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token operator">&lt;</span>TodoItemWrapper<span class="token operator">></span>
      <span class="token operator">&lt;</span>TodoContent size<span class="token operator">=</span><span class="token punctuation">&#123;</span>size<span class="token punctuation">&#125;</span><span class="token operator">></span><span class="token punctuation">&#123;</span>content<span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>TodoContent<span class="token operator">></span>
      <span class="token operator">&lt;</span>TodoButtonWrapper<span class="token operator">></span>
        <span class="token operator">&lt;</span>Button<span class="token operator">></span>未完成<span class="token operator">&lt;</span><span class="token operator">/</span>Button<span class="token operator">></span>
        <span class="token operator">&lt;</span>GreenButton<span class="token operator">></span>刪除<span class="token operator">&lt;</span><span class="token operator">/</span>GreenButton<span class="token operator">></span>
      <span class="token operator">&lt;</span><span class="token operator">/</span>TodoButtonWrapper<span class="token operator">></span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>TodoItemWrapper<span class="token operator">></span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>如果是對一般的 component 進行 restyle，則需要在 component 傳入 className，用來接收 BlackTodoItem 這個 class 屬性：</li>
</ul>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 繼承 TodoItem component，需要傳入 className</span>
<span class="token keyword">function</span> <span class="token function">TodoItem</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">&#123;</span> className<span class="token punctuation">,</span> size<span class="token punctuation">,</span> content <span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token operator">&lt;</span>TodoItemWrapper className<span class="token operator">=</span><span class="token punctuation">&#123;</span>className<span class="token punctuation">&#125;</span><span class="token operator">></span>
      <span class="token operator">&lt;</span>TodoContent size<span class="token operator">=</span><span class="token punctuation">&#123;</span>size<span class="token punctuation">&#125;</span><span class="token operator">></span><span class="token punctuation">&#123;</span>content<span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>TodoContent<span class="token operator">></span>
      <span class="token operator">&lt;</span>TodoButtonWrapper<span class="token operator">></span>
        <span class="token operator">&lt;</span>Button<span class="token operator">></span>未完成<span class="token operator">&lt;</span><span class="token operator">/</span>Button<span class="token operator">></span>
        <span class="token operator">&lt;</span>GreenButton<span class="token operator">></span>刪除<span class="token operator">&lt;</span><span class="token operator">/</span>GreenButton<span class="token operator">></span>
      <span class="token operator">&lt;</span><span class="token operator">/</span>TodoButtonWrapper<span class="token operator">></span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>TodoItemWrapper<span class="token operator">></span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
  <span class="token comment">// 繼承 TodoItem</span>
  <span class="token keyword">const</span> BlackTodoItem <span class="token operator">=</span> <span class="token function">styled</span><span class="token punctuation">(</span>TodoItem<span class="token punctuation">)</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">
    background: #000;
  </span><span class="token template-punctuation string">`</span></span>

<span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">const</span> titleSize <span class="token operator">=</span> <span class="token string">"M"</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">"App"</span><span class="token operator">></span>
      <span class="token operator">&lt;</span>TodoItem content<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token number">123</span><span class="token punctuation">&#125;</span> <span class="token operator">/</span><span class="token operator">></span>
      <span class="token operator">&lt;</span>BlackTodoItem content<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token number">456</span><span class="token punctuation">&#125;</span> size<span class="token operator">=</span><span class="token string">"XL"</span> <span class="token operator">/</span><span class="token operator">></span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><img src="https://i.imgur.com/teWo6kl.png"></p>
<h3 id="範例二：透過-MEDIA-QUERY-實作-RWD"><a href="#範例二：透過-MEDIA-QUERY-實作-RWD" class="headerlink" title="範例二：透過 MEDIA QUERY 實作 RWD"></a>範例二：透過 MEDIA QUERY 實作 RWD</h3><p>像 MEDIA QUERY 這類通用性高的程式碼，可以獨立放在 constants\style.js 檔案，以便重複使用：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token constant">MEDIA_QUERY_MD</span> <span class="token operator">=</span> <span class="token string">'@media screen and &#123;min-width: 768px&#125;'</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token constant">MEDIA_QUERY_LG</span> <span class="token operator">=</span> <span class="token string">'@media screen and &#123;min-width: 1000px&#125;'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>接著就可直接在 App.js 引入使用：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> <span class="token constant">MEDIA_QUERY_MD</span><span class="token punctuation">,</span> <span class="token constant">MEDIA_QUERY_LG</span><span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'./constants/style'</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> Button <span class="token operator">=</span> styled<span class="token punctuation">.</span>button<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">
  padding: 4px;
  color: #232332;
  font-size: 20px;
  
  </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token constant">MEDIA_QUERY_MD</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> &#123;
    font-size 16px;
  &#125;

  </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token constant">MEDIA_QUERY_LG</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> &#123;
    font-size: 12px;
  &#125;
  
  &amp;:hover &#123;
    color: red;
  &#125;
  &amp; + &amp; &#123;
    margin-left: 4px;
  &#125;
</span><span class="token template-punctuation string">`</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>RWD 結果如下：</p>
<p><img src="https://i.imgur.com/OVfi3XR.gif"></p>
<h3 id="範例三：使用-Sass-向量變數"><a href="#範例三：使用-Sass-向量變數" class="headerlink" title="範例三：使用 Sass 向量變數"></a>範例三：使用 Sass 向量變數</h3><p>透過傳入 Global 參數，我們能使用 Sass 向量變數。</p>
<p>舉例來說，我們可在 index.js 引入 <span class="exturl" data-url="aHR0cHM6Ly9zdHlsZWQtY29tcG9uZW50cy5jb20vZG9jcy9hcGkjdGhlbWVwcm92aWRlcg==">ThemeProvider<i class="fa fa-external-link-alt"></i></span>：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> ThemeProvider <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'styled-components'</span><span class="token punctuation">;</span>

<span class="token comment">// 宣告 theme 變數</span>
<span class="token keyword">const</span> theme <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  colors<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    primary_300<span class="token operator">:</span> <span class="token string">'#ff7777'</span><span class="token punctuation">,</span>
    primary_400<span class="token operator">:</span> <span class="token string">'#e33e3e'</span><span class="token punctuation">,</span>
    primary_500<span class="token operator">:</span> <span class="token string">'#af0505'</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>
  <span class="token comment">// 包住 App，並自訂 theme 屬性</span>
  <span class="token operator">&lt;</span>ThemeProvider theme<span class="token operator">=</span><span class="token punctuation">&#123;</span>theme<span class="token punctuation">&#125;</span><span class="token operator">></span>
    <span class="token operator">&lt;</span>App <span class="token operator">/</span><span class="token operator">></span>
  <span class="token operator">&lt;</span><span class="token operator">/</span>ThemeProvider<span class="token operator">></span><span class="token punctuation">,</span>
  document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>這樣就可以在 App.js 中取用這些變數：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> TodoContent <span class="token operator">=</span> styled<span class="token punctuation">.</span>div<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">
  font-size: 30px;
  color: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token parameter">props</span> <span class="token operator">=></span> props<span class="token punctuation">.</span>theme<span class="token punctuation">.</span>colors<span class="token punctuation">.</span>primary_300<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">;

  </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token constant">MEDIA_QUERY_MD</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> &#123;
    font-size: 20px;
    color: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token parameter">props</span> <span class="token operator">=></span> props<span class="token punctuation">.</span>theme<span class="token punctuation">.</span>colors<span class="token punctuation">.</span>primary_400<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">;
  &#125;

  </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token constant">MEDIA_QUERY_LG</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> &#123;
    font-size: 12px;
    color: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token parameter">props</span> <span class="token operator">=></span> props<span class="token punctuation">.</span>theme<span class="token punctuation">.</span>colors<span class="token punctuation">.</span>primary_500<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">;
  &#125;
</span><span class="token template-punctuation string">`</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>也可以把 TodoItem component 獨立成 TodoItem.js 這個檔案，並且 export ：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">TodoItem</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token operator">...</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>並在 App.js 引入：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> TodoItem <span class="token keyword">from</span> <span class="token string">'./TodoItem'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>這麼做的好處就是，依照功能切割程式碼，能夠達到模組化，進而提高程式碼可讀性。</p>
<p>參考資料：</p>
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9wamNoZW5kZXIuYmxvZ3Nwb3QuY29tLzIwMTcvMDEvamF2YXNjcmlwdC1lczYtdGVtcGxhdGUtbGl0ZXJhbHN0YWdnZWQuaHRtbA==">[筆記] JavaScript ES6 中的模版字符串（template literals）和標籤模版（tagged template）<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly95YWtpbWhzdS5jb20vcHJvamVjdC9wcm9qZWN0X3cyMV8wNV9SZWFjdF9iYXNpY19DU1MuaHRtbA==">[第二十一週] React 基礎：如何寫 CSS<i class="fa fa-external-link-alt"></i></span></li>
</ul>
]]></content>
      <categories>
        <category>Front-End</category>
        <category>React</category>
      </categories>
      <tags>
        <tag>Front-End</tag>
        <tag>CSS</tag>
        <tag>React</tag>
      </tags>
  </entry>
  <entry>
    <title>[week 22] React：用 SPA 架構實作一個部落格（三）- 淺談測試</title>
    <url>/react-test/</url>
    <content><![CDATA[<blockquote>
<p>本篇為 <span class="exturl" data-url="aHR0cHM6Ly9saWRlbXkuY29tL3AvZmUzMDItcmVhY3QtaG9va3M=">[FE302] React 基礎 - hooks 版本<i class="fa fa-external-link-alt"></i></span> 這門課程的學習筆記。如有錯誤歡迎指正！</p>
</blockquote>
<span id="more"></span>
<h2 id="淺談測試"><a href="#淺談測試" class="headerlink" title="淺談測試"></a>淺談測試</h2><p>這篇會稍微談談有關測試的東西，測試在現今已漸漸成為重要的議題，主要目的就是為了避免產品出現 Bug，藉此提高使用者體驗。</p>
<h3 id="測試的種類"><a href="#測試的種類" class="headerlink" title="測試的種類"></a>測試的種類</h3><p>測試簡單來說可分成以下三種：</p>
<ul>
<li>單元測試 Unit testing <ul>
<li>以程式碼的最小單位進行測試</li>
</ul>
</li>
<li>整合測試 Integration testing <ul>
<li>對不同模組之間的交互作用進行測試</li>
</ul>
</li>
<li>端對端測試 End-to-end testing 或 E2E testing <ul>
<li> 從使用者角度出發，對真實系統進行測試</li>
<li> 主要為「人工測試」</li>
</ul>
</li>
</ul>
<p><img src="https://i.imgur.com/ybx5NbQ.png"></p>
<p>（參考資料：<span class="exturl" data-url="aHR0cHM6Ly9ibG9nLm1pbmlhc3AuY29tL3Bvc3QvMjAxOS8wMi8xOC9Vbml0LXRlc3RpbmctSW50ZWdyYXRpb24tdGVzdGluZy1lMmUtdGVzdGluZw==">一次搞懂單元測試、整合測試、端對端測試之間的差異<i class="fa fa-external-link-alt"></i></span>）</p>
<h2 id="React-Testing-Library：測試-React-Component"><a href="#React-Testing-Library：測試-React-Component" class="headerlink" title="React Testing Library：測試 React Component"></a>React Testing Library：測試 React Component</h2><p>如果要測試 React Component，可使用 <span class="exturl" data-url="aHR0cHM6Ly90ZXN0aW5nLWxpYnJhcnkuY29tL2RvY3MvcmVhY3QtdGVzdGluZy1saWJyYXJ5L2ludHJvLw==">React Testing Library<i class="fa fa-external-link-alt"></i></span> 套件，這在安裝 React 時就有內建。</p>
<p>其原理是把 React 的 Component 給 render 出來，並非真的 render 在瀏覽器上，而是透過 JS DOM 模擬成 JS 來執行，即可針對 render 出來的畫面進行各種測試。</p>
<p>在我們建立專案時，就有個 App.test.js 檔案可用來寫測試內容：</p>
<p><img src="https://i.imgur.com/4dcIFV1.png"></p>
<p>每個測試會用一個 function 包住：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> render<span class="token punctuation">,</span> screen <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'@testing-library/react'</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">'./App'</span><span class="token punctuation">;</span>

<span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'renders learn react link'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// render component</span>
  <span class="token function">render</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>App <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 確認是否有出現指定文字</span>
  <span class="token keyword">const</span> linkElement <span class="token operator">=</span> screen<span class="token punctuation">.</span><span class="token function">getByText</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">learn react</span><span class="token regex-delimiter">/</span><span class="token regex-flags">i</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 確認是否有在 document 裡面</span>
  <span class="token function">expect</span><span class="token punctuation">(</span>linkElement<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBeInTheDocument</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>在終端機輸入指令即可執行測試：</p>
<pre class="line-numbers language-none"><code class="language-none">$ npm run test<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>測試預設會找 App.test.js 在上次 commit 時有更動的部分，例如輸入 a 可跑所有測試結果：</p>
<p><img src="https://i.imgur.com/Hao9KG7.png"></p>
<p>由於 App.test.js 是 watch 模式，只要檔案有變動就會自動跑測試，結果會長這樣：</p>
<p><img src="https://i.imgur.com/EA3y0KO.png"></p>
<h3 id="實際應用"><a href="#實際應用" class="headerlink" title="實際應用"></a>實際應用</h3><p>但實際在測試時並不會真的去 call API，因為 mock API 代表要做什麼事，而我們在意的點其實是：</p>
<ul>
<li>會不會發 request 去 back-end</li>
<li>拿到 API response 之後，會不會顯示想要的資料</li>
</ul>
<p>也就是說，測試其實不需要知道 back-end 回覆的內容，而是透過 mock API Point，就可以在打 API 之前回傳一個結構，藉此來測試顯示的資料。</p>
<p>例如以下範例，藉由 mock API 來模擬每次 fetch 會回傳的資料，再使用 await waitfor() 非同步處理進行測試：</p>
<p><img src="https://i.imgur.com/OX9LJ4X.png"></p>
<p>這種測試方法其實就類似於 Unit testing 或 Integration testing，再來要介紹的是用於 End-to-end testing 的程式。</p>
<h2 id="Cypress：JS-E2E-testing"><a href="#Cypress：JS-E2E-testing" class="headerlink" title="Cypress：JS E2E testing"></a>Cypress：JS E2E testing</h2><p>End-to-end testing 的特點在於會真的跑一個 Browser 起來，並將手動測試轉變成程式碼執行，因此會更接近使用者實際在使用網站的感受。</p>
<p>我們要介紹的是 <span class="exturl" data-url="aHR0cHM6Ly93d3cuY3lwcmVzcy5pby8=">cypress<i class="fa fa-external-link-alt"></i></span> 這套 E2E testing 程式，在測試時也有提供錄影功能，能夠記錄錯誤截圖等等。</p>
<h3 id="安裝程式"><a href="#安裝程式" class="headerlink" title="安裝程式"></a>安裝程式</h3><pre class="line-numbers language-none"><code class="language-none">$ npm install cypress<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h3 id="如何執行"><a href="#如何執行" class="headerlink" title="如何執行"></a>如何執行</h3><pre class="line-numbers language-none"><code class="language-none">$ npx cypress open<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>或是在 package.json 的 scripts 新增 cypress open 指令，即可使用 <code>npm run cypress:open</code> 指令執行：</p>
<p><img src="https://i.imgur.com/GNMrji1.png"></p>
<p>第一次執行 cypress open 時，會自動在 my-app 資料夾建立 cypress 相關程式，像是 integration 裡的內建測試等等。</p>
<p><img src="https://i.imgur.com/GPisKnv.png"></p>
<p>執行後會自動開啟 GUI 介面：</p>
<p><img src="https://i.imgur.com/deKsjBl.png"></p>
<p>預設的測試檔名為 <code>spec.js</code>，例如我們可在 integration 建立一個 home.spec.js，並在 my-app 底下的 cypress.json 新增 baseUrl：</p>
<pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>
  <span class="token property">"baseUrl"</span><span class="token operator">:</span> <span class="token string">"http://localhost:3000/react-board-test"</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>然後在 home.spec.js 寫入<span class="exturl" data-url="aHR0cHM6Ly9kb2NzLmN5cHJlc3MuaW8vZ3VpZGVzL2dldHRpbmctc3RhcnRlZC90ZXN0aW5nLXlvdXItYXBwLmh0bWwjU3RlcC0yLVZpc2l0LXlvdXItc2VydmVy">官網範例<i class="fa fa-external-link-alt"></i></span>：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">describe</span><span class="token punctuation">(</span><span class="token string">"The Home Page"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token function">it</span><span class="token punctuation">(</span><span class="token string">"successfully loads"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// 改成連線到首頁</span>
    cy<span class="token punctuation">.</span><span class="token function">visit</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>點選 cypress 介面中的 home.spec.js 執行：</p>
<p><img src="https://i.imgur.com/20LvIQ2.png"></p>
<p>此時會自動開啟 Chrome 瀏覽器跑測試，結果如下：</p>
<p><img src="https://i.imgur.com/L5NO3Ag.png"></p>
<h3 id="透過-route-來-mock-API"><a href="#透過-route-來-mock-API" class="headerlink" title="透過 route 來 mock API"></a>透過 route 來 mock API</h3><p>但是和先前的例子一樣，我們通常不會真的去 call API，而是會 mock API，在 cypress 可透過 route 來模擬 API，可參考<span class="exturl" data-url="aHR0cHM6Ly9kb2NzLmN5cHJlc3MuaW8vYXBpL2NvbW1hbmRzL3JvdXRlLmh0bWwjU3ludGF4">官方文件<i class="fa fa-external-link-alt"></i></span>。</p>
<p>首先要修改 cypress.json 設定檔，加上 <code>experimentalFetchPolyfill</code> 參數：</p>
<pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>
  <span class="token property">"baseUrl"</span><span class="token operator">:</span> <span class="token string">"http://localhost:3000/react-board-test"</span><span class="token punctuation">,</span>
  <span class="token property">"experimentalFetchPolyfill"</span><span class="token operator">:</span> <span class="token boolean">true</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>改寫 home.spec.js 範例如下，這樣就是一個簡單的測試：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">describe</span><span class="token punctuation">(</span><span class="token string">"The Home Page"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token function">it</span><span class="token punctuation">(</span><span class="token string">"successfully loads"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    cy<span class="token punctuation">.</span><span class="token function">server</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// mock API</span>
    cy<span class="token punctuation">.</span><span class="token function">route</span><span class="token punctuation">(</span>
      <span class="token string">"https://student-json-api.lidemy.me/posts?_sort=createdAt&amp;_order=desc"</span><span class="token punctuation">,</span>
      <span class="token punctuation">[</span>
        <span class="token punctuation">&#123;</span>
          id<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
          title<span class="token operator">:</span> <span class="token string">"Hello World!"</span><span class="token punctuation">,</span>
          createdAt<span class="token operator">:</span> <span class="token number">20202020</span><span class="token punctuation">,</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
      <span class="token punctuation">]</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 導向首頁</span>
    cy<span class="token punctuation">.</span><span class="token function">visit</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 測試: 確認頁面是否包含該字串</span>
    cy<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">"Hello World!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>測試結果如下：</p>
<p><img src="https://i.imgur.com/TdVmUf5.png"></p>
<p>查看 Request URL 會發現網址有被 cypress 換成 mock API，藉此來 mock 回傳結果：</p>
<p><img src="https://i.imgur.com/xYYEpka.png"></p>
<ul>
<li>參考文章：<span class="exturl" data-url="aHR0cHM6Ly9tZWRpdW0uY29tL2hhbm5haC1saW4vY3lwcmVzcy1lMmUtdGVzdGluZy0lRTUlODglOUQlRTYlOEUlQTItYTEwZWNhM2MwY2Y3">[Cypress 1] E2E Testing 初探<i class="fa fa-external-link-alt"></i></span></li>
</ul>
<h2 id="React-Testing-Library-vs-Cypress"><a href="#React-Testing-Library-vs-Cypress" class="headerlink" title="React Testing Library vs Cypress"></a>React Testing Library vs Cypress</h2><p>以上介紹的兩種測試，差別在於：</p>
<ul>
<li>React Testing Library<ul>
<li>類似於 Unit testing 或 Integration testing</li>
<li>利用 JavaScript 模擬環境</li>
</ul>
</li>
<li>Cypress<ul>
<li>E2E testing</li>
<li>實際在瀏覽器載入頁面，透過 mock API 的方式測試行為</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>Front-End</category>
        <category>React</category>
      </categories>
      <tags>
        <tag>React</tag>
        <tag>Testing</tag>
      </tags>
  </entry>
  <entry>
    <title>[week 22] React：用 SPA 架構實作一個部落格（二）- 身分驗證</title>
    <url>/react-usecontext/</url>
    <content><![CDATA[<blockquote>
<p>本篇為 <span class="exturl" data-url="aHR0cHM6Ly9saWRlbXkuY29tL3AvZmUzMDItcmVhY3QtaG9va3M=">[FE302] React 基礎 - hooks 版本<i class="fa fa-external-link-alt"></i></span> 這門課程的學習筆記。如有錯誤歡迎指正！</p>
</blockquote>
<blockquote>
<p>參考文章：<span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmh1bGkudHcvMjAxOS8wOS8xOC9zcGEtY29tbW9uLXByb2JsZW0tYWJvdXQtcm91dGVyLw==">淺談新手在學習 SPA 時的常見問題：以 Router 為例<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
<span id="more"></span>
<hr>
<h2 id="如何進行身分驗證？"><a href="#如何進行身分驗證？" class="headerlink" title="如何進行身分驗證？"></a>如何進行身分驗證？</h2><p>在實作登入功能之前，必須先瞭解下列兩種進行身分驗證的方法有何不同：</p>
<ul>
<li>透過 Cookie 驗證，取得 Session ID</li>
<li>把 Session ID 存在瀏覽器的 LocalStorage 裡</li>
</ul>
<h3 id="透過-Cookie-驗證"><a href="#透過-Cookie-驗證" class="headerlink" title="透過 Cookie 驗證"></a>透過 Cookie 驗證</h3><p>與本篇要實作的 SPA 不同，過去我們通常是利用 Cookie 來驗證使用者登入狀態，流程大致如下：</p>
<p><img src="https://i.imgur.com/giVnm0P.png"></p>
<ol>
<li>使用者在登入時會打一個 API 給 Server，Server 確認沒問題之後，會回傳包含 Set-Cookie 的 HTTP Response Header</li>
<li>當使用者需要進行身分驗證時，會打一個 GET/me 的 API 給 Server，瀏覽器會自動帶入 Cookie，假如 Session ID 是正確的，Server 就會回傳 data，反之則回傳錯誤</li>
</ol>
<h3 id="把-Session-ID-存在-LocalStorage"><a href="#把-Session-ID-存在-LocalStorage" class="headerlink" title="把 Session ID 存在 LocalStorage"></a>把 Session ID 存在 LocalStorage</h3><p>但是到了 SPA 之後，我們就比較少用 Cookie 來進行驗證，而是把 Session ID 存在瀏覽器的 LocalStorage 裡，每次發 Resquest 時會自動帶入資料，流程如下：</p>
<p><img src="https://i.imgur.com/8xvtM4x.png"></p>
<ol>
<li>使用者在登入後，Server 會回傳一個 JSON Web Token（一種固定格式的資料），並且儲存在瀏覽器的 LocalStorage 裡</li>
<li>當需要進行身分驗證時，就會自動在 header 帶上這個 JWT 給 Serever，確認沒問題後回傳 data</li>
</ol>
<h3 id="打一個-POST-API-到-Server"><a href="#打一個-POST-API-到-Server" class="headerlink" title="打一個 POST API 到 Server"></a>打一個 POST API 到 Server</h3><p>我們可以試著透過 Postman 打 POST API 到 Server 測試：</p>
<pre class="line-numbers language-none"><code class="language-none">POST&#x2F;
https:&#x2F;&#x2F;student-json-api.lidemy.me&#x2F;login

Body
&#123;&quot;username&quot;:&quot;user01&quot;, &quot;password&quot;:&quot;Lidemy&quot;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>若 username 和 password 驗證沒問題，Server 就會回傳一個以 base64 編碼的 JWT token：</p>
<pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>
    <span class="token property">"ok"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
    <span class="token property">"token"</span><span class="token operator">:</span> <span class="token string">"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6InVzZXIwMSIsInVzZXJJZCI6MSwiaWF0IjoxNjA3NzQzMTA5fQ.FgTlsa57WOYNZEBj5HtL74uIVDuKFWErrmQ72qXuHmo"</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>結果如下：</p>
<p><img src="https://i.imgur.com/QB2O67D.png"></p>
<p>把這段 JWT token 拿到 <span class="exturl" data-url="aHR0cHM6Ly9qd3QuaW8v">jwt 官網<i class="fa fa-external-link-alt"></i></span> 進行解析，可以轉換成 JSON 格式，因此不建議儲存一些敏感資訊（例如密碼、地址等）在 token：</p>
<p><img src="https://i.imgur.com/IVpVipo.png"></p>
<h3 id="透過-token-取得使用者資訊"><a href="#透過-token-取得使用者資訊" class="headerlink" title="透過 token 取得使用者資訊"></a>透過 token 取得使用者資訊</h3><p>接下來我們打一個 GET API 到 Server，並帶上剛才的 token，Server 就會回傳使用者資訊：</p>
<pre class="line-numbers language-none"><code class="language-none">GET&#x2F;
https:&#x2F;&#x2F;student-json-api.lidemy.me&#x2F;me

Bearer Token
eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6InVzZXIwMSIsInVzZXJJZCI6MSwiaWF0IjoxNjA3NzQzMTA5fQ.FgTlsa57WOYNZEBj5HtL74uIVDuKFWErrmQ72qXuHmo<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>結果如下：</p>
<p><img src="https://i.imgur.com/QyTsG90.png"></p>
<p>學會如何透過打 API 拿到 token 進行身分驗證後，再來我們要實際應用在部落格的登入機制，那麼開始吧！</p>
<hr>
<h2 id="實作：登入功能"><a href="#實作：登入功能" class="headerlink" title="實作：登入功能"></a>實作：登入功能</h2><h3 id="1-設定串接-API-的方法：登入-amp-身分驗證"><a href="#1-設定串接-API-的方法：登入-amp-身分驗證" class="headerlink" title="1. 設定串接 API 的方法：登入 &amp; 身分驗證"></a>1. 設定串接 API 的方法：登入 &amp; 身分驗證</h3><p>同樣參考<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0xpZGVteS9saWRlbXktc3R1ZGVudC1qc29uLWFwaS1zZXJ2ZXIjJUU4JUE4JUJCJUU1JTg2JThB"> API 文件說明<i class="fa fa-external-link-alt"></i></span>，在 WebAPI.js 新增 login 和 getMe 兩個 API：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 登入</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">login</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">username<span class="token punctuation">,</span> password</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token constant">BASE_URL</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">/login</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>
    method<span class="token operator">:</span> <span class="token string">"POST"</span><span class="token punctuation">,</span>
    headers<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
      <span class="token string">"content-type"</span><span class="token operator">:</span> <span class="token string">"application/json"</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    body<span class="token operator">:</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
      username<span class="token punctuation">,</span>
      password<span class="token punctuation">,</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token operator">=></span> res<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token comment">// 身分驗證</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">getMe</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// 從 localStorage 拿取 token</span>
  <span class="token keyword">const</span> token <span class="token operator">=</span> localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">"token"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token constant">BASE_URL</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">/me</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>
    headers<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
      authorization<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Bearer </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>token<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token operator">=></span> res<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="2-實作-LoginPage-js"><a href="#2-實作-LoginPage-js" class="headerlink" title="2. 實作 LoginPage.js"></a>2. 實作 LoginPage.js</h3><p>可透過 onSubmit 與 onChange 事件機制，拿到 input.value 的值。</p>
<p>在 React 中，value 若為空值（undefined），等同於沒有傳 value，所以這裡初始值要參數設為空字串，也就是 <code>useState(&quot;&quot;)</code>：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">LoginPage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// 在 React 中 value 若是 undefined，等同於沒有傳 value</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span>username<span class="token punctuation">,</span> setUsername<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span>password<span class="token punctuation">,</span> setPassword<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// 阻止送出表單</span>
  <span class="token keyword">const</span> <span class="token function-variable function">handleSubmit</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    e<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 確認是否有抓到 username</span>
    <span class="token function">alert</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

  <span class="token keyword">const</span> <span class="token function-variable function">handleUsername</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token function">setUsername</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

  <span class="token keyword">const</span> <span class="token function-variable function">handlePassword</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token function">setPassword</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token operator">&lt;</span>Root<span class="token operator">></span>
      <span class="token operator">&lt;</span>LoginForm onSubmit<span class="token operator">=</span><span class="token punctuation">&#123;</span>handleSubmit<span class="token punctuation">&#125;</span><span class="token operator">></span>
        <span class="token operator">&lt;</span>LoginTitle<span class="token operator">></span>登入<span class="token operator">&lt;</span><span class="token operator">/</span>LoginTitle<span class="token operator">></span>
        <span class="token operator">&lt;</span>LoginInput<span class="token operator">></span>
          username<span class="token operator">:</span> <span class="token operator">&lt;</span>input value<span class="token operator">=</span><span class="token punctuation">&#123;</span>username<span class="token punctuation">&#125;</span> onChange<span class="token operator">=</span><span class="token punctuation">&#123;</span>handleUsername<span class="token punctuation">&#125;</span> <span class="token operator">/</span><span class="token operator">></span>
        <span class="token operator">&lt;</span><span class="token operator">/</span>LoginInput<span class="token operator">></span>
        <span class="token operator">&lt;</span>LoginInput<span class="token operator">></span>
          password<span class="token operator">:</span>
          <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"password"</span> value<span class="token operator">=</span><span class="token punctuation">&#123;</span>password<span class="token punctuation">&#125;</span> onChange<span class="token operator">=</span><span class="token punctuation">&#123;</span>handlePassword<span class="token punctuation">&#125;</span> <span class="token operator">/</span><span class="token operator">></span>
        <span class="token operator">&lt;</span><span class="token operator">/</span>LoginInput<span class="token operator">></span>
        <span class="token operator">&lt;</span>LoginSubmit<span class="token operator">></span>
          <span class="token operator">&lt;</span>button<span class="token operator">></span>登入<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>
        <span class="token operator">&lt;</span><span class="token operator">/</span>LoginSubmit<span class="token operator">></span>
      <span class="token operator">&lt;</span><span class="token operator">/</span>LoginForm<span class="token operator">></span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>Root<span class="token operator">></span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>結果如下，按下 button 成功拿取 input.value：</p>
<p><img src="https://i.imgur.com/pJDBs0Z.png"></p>
<h3 id="3-建立-utils-js-管理常用功能"><a href="#3-建立-utils-js-管理常用功能" class="headerlink" title="3. 建立 utils.js 管理常用功能"></a>3. 建立 utils.js 管理常用功能</h3><p>在拿取 token 時，其實可以再進行優化，例如把 token 相關的程式碼獨立到 utils.js 管理，即可避免打錯字：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token constant">TOKEN_NAME</span> <span class="token operator">=</span> <span class="token string">"token"</span><span class="token punctuation">;</span>

<span class="token comment">// 將 token 存到 localStorage</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">setAuthToken</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">token</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  localStorage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span><span class="token constant">TOKEN_NAME</span><span class="token punctuation">,</span> token<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token comment">// 從 localStorage 讀取 token</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">getAuthToken</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token constant">TOKEN_NAME</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="4-串接-API：login"><a href="#4-串接-API：login" class="headerlink" title="4. 串接 API：login"></a>4. 串接 API：login</h3><ul>
<li>WebAPI.js：引入使用 getAuthToken()，從 localStorage 讀取 token 的值：</li>
</ul>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> getAuthToken <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"./utils"</span><span class="token punctuation">;</span>

<span class="token comment">// 身分驗證</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">getMe</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// 從 localStorage 讀取 token</span>
  <span class="token keyword">const</span> token <span class="token operator">=</span> <span class="token function">getAuthToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token constant">BASE_URL</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">/me</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>
    headers<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
      authorization<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Bearer </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>token<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token operator">=></span> res<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>LoginPage.js：使用 setAuthToken() 儲存 token：</li>
</ul>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> login <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"../../WebAPI"</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> setAuthToken <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"./utils"</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">LoginPage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// 在 React 中 value 若是 undefined，等同於沒有傳 value</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span>username<span class="token punctuation">,</span> setUsername<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span>password<span class="token punctuation">,</span> setPassword<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span>errorMessage<span class="token punctuation">,</span> setErrorMessage<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// 阻止送出表單</span>
  <span class="token keyword">const</span> <span class="token function-variable function">handleSubmit</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    e<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">login</span><span class="token punctuation">(</span>username<span class="token punctuation">,</span> password<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
      <span class="token comment">// 若 ok 為 0 代表錯誤</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>data<span class="token punctuation">.</span>ok <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token function">setErrorMessage</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span>
      <span class="token comment">// 成功的話就把 token 存到 localStorage</span>
      <span class="token function">setAuthToken</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
  
  <span class="token comment">// ...</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>確認是否有成功透過 localStorage 存取 token：</p>
<p><img src="https://i.imgur.com/mDMvUs9.png"></p>
<h3 id="useHistory：跳轉頁面"><a href="#useHistory：跳轉頁面" class="headerlink" title="useHistory：跳轉頁面"></a>useHistory：跳轉頁面</h3><p>登入成功之後，接著要把使用者導回首頁，可透過 react-router 提供的 Hooks：<span class="exturl" data-url="aHR0cHM6Ly9yZWFjdHJvdXRlci5jb20vd2ViL2FwaS9Ib29rcy91c2VoaXN0b3J5">useHistory<i class="fa fa-external-link-alt"></i></span> 來主動跳轉路由。</p>
<ul>
<li>引入套件：</li>
</ul>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> useHistory <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"react-router-dom"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ul>
<li>將程式碼修改如下，即可在登入後跳轉至首頁：</li>
</ul>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> history <span class="token operator">=</span> <span class="token function">useHistory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token function-variable function">handleSubmit</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  e<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">login</span><span class="token punctuation">(</span>username<span class="token punctuation">,</span> password<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>data<span class="token punctuation">.</span>ok <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">return</span> <span class="token function">setErrorMessage</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token comment">// 成功的話就把 token 存到 localStorage</span>
    <span class="token function">setAuthToken</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 並導回首頁</span>
    history<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="實作：身分驗證"><a href="#實作：身分驗證" class="headerlink" title="實作：身分驗證"></a>實作：身分驗證</h2><p>在完成登入功能後，在以 getMe() 拿到使用者資訊之前都還不算登入成功，我們還需要保持登入狀態，也就是把使用者資料透過 Context 存到全域環境中，才能傳給底下的每個 Component 使用。</p>
<h3 id="1-createContext：傳入預設值"><a href="#1-createContext：傳入預設值" class="headerlink" title="1. createContext：傳入預設值"></a>1. createContext：傳入預設值</h3><ul>
<li>contexts.js</li>
</ul>
<p>為了讓其他 Component 也能讀取 user 資料，可在 src 目錄底下建立一個 contexts.js，即可透過 AuthContext() 來取值：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> createContext <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"React"</span><span class="token punctuation">;</span>

<span class="token comment">// 初始值為 null</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> AuthContext <span class="token operator">=</span> <span class="token function">createContext</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>App.js</li>
</ul>
<p>把登入狀態存在 Component 的最頂端，只要在 App.js 存 user 狀態，即可透過有無 user 判斷是否登入：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// user 有東西就代表有登入</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span>user<span class="token punctuation">,</span> setUser<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  
  <span class="token comment">//...</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="2-Context-Provider：提供子層-value"><a href="#2-Context-Provider：提供子層-value" class="headerlink" title="2. Context Provider：提供子層 value"></a>2. Context Provider：提供子層 value</h3><ul>
<li>App.js</li>
</ul>
<p>用 Context Provider 包住整個組件，並設定 value，這裡可傳入物件型態的參數，把 <code>&#123;user, setUser&#125;</code> 傳給子層：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> AuthContext <span class="token keyword">from</span> <span class="token string">"../../contexts"</span><span class="token punctuation">;</span>
<span class="token comment">// ...</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token operator">&lt;</span>AuthContext<span class="token punctuation">.</span>Provider value<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>user<span class="token punctuation">,</span> setUser<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">></span>
      <span class="token operator">&lt;</span>Root<span class="token operator">></span>
       <span class="token comment">// 路由配置 ...        </span>
      <span class="token operator">&lt;</span><span class="token operator">/</span>Root<span class="token operator">></span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>AuthContext<span class="token punctuation">.</span>Provider<span class="token operator">></span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>LoginPage.js</li>
</ul>
<p>引入 AuthContext 取得 user 資訊，用 setUser 儲存狀態，並以 getMe 發出 resquest 進行身分驗證：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> AuthContext <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"../../contexts"</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">LoginPage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> setUser <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token function">useContext</span><span class="token punctuation">(</span>AuthContext<span class="token punctuation">)</span><span class="token punctuation">;</span>
  
<span class="token comment">// ...</span>

  <span class="token keyword">const</span> <span class="token function-variable function">handleSubmit</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    e<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">login</span><span class="token punctuation">(</span>username<span class="token punctuation">,</span> password<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>data<span class="token punctuation">.</span>ok <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token function">setErrorMessage</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span>
      <span class="token function">setAuthToken</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">getMe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">response</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>data<span class="token punctuation">.</span>ok <span class="token operator">!==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
          <span class="token comment">// 在 getMe() 出錯代表還沒成功登入，因此要把 token 清空</span>
          <span class="token function">setAuthToken</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token function">setErrorMessage</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token function">setUser</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 並導回首頁</span>
        history<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>Header.js</li>
</ul>
<p>接著就可以根據登入狀態，判斷導覽列是否顯示「登入、註冊」或是「發布文章、登出」。</p>
<p>注意這裡的判斷式裡面，只能包含一個 JSX 標籤，否則會出錯，例如 <code>&#123;user &amp;&amp; &lt;Link&gt;...&lt;/Link&gt;&#125;</code>：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">Header</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">const</span> location <span class="token operator">=</span> <span class="token function">useLocation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> user<span class="token punctuation">,</span> setUser <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token function">useContext</span><span class="token punctuation">(</span>AuthContext<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> history <span class="token operator">=</span> <span class="token function">useHistory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">const</span> <span class="token function-variable function">handleLogout</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token function">setAuthToken</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">setUser</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>location<span class="token punctuation">.</span>pathname <span class="token operator">!==</span> <span class="token string">"/"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      history<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token operator">&lt;</span>HeaderContainer<span class="token operator">></span>
      <span class="token operator">&lt;</span>Brand<span class="token operator">></span>
        <span class="token punctuation">&#123;</span><span class="token comment">/* 加上 replace: 避免出現錯誤 -> "Hash history cannot PUSH the same path" */</span><span class="token punctuation">&#125;</span>
        <span class="token operator">&lt;</span>Link to<span class="token operator">=</span><span class="token string">"/"</span> replace<span class="token operator">></span>
          React 部落格
        <span class="token operator">&lt;</span><span class="token operator">/</span>Link<span class="token operator">></span>
      <span class="token operator">&lt;</span><span class="token operator">/</span>Brand<span class="token operator">></span>
      <span class="token operator">&lt;</span>NavbarList<span class="token operator">></span>
        <span class="token operator">&lt;</span>StyledLink exact to<span class="token operator">=</span><span class="token string">"/about"</span> replace activeClassName<span class="token operator">=</span><span class="token string">"active"</span><span class="token operator">></span>
          關於我
        <span class="token operator">&lt;</span><span class="token operator">/</span>StyledLink<span class="token operator">></span>
        <span class="token operator">&lt;</span>StyledLink exact to<span class="token operator">=</span><span class="token string">"/posts"</span> replace activeClassName<span class="token operator">=</span><span class="token string">"active"</span><span class="token operator">></span>
          文章列表
        <span class="token operator">&lt;</span><span class="token operator">/</span>StyledLink<span class="token operator">></span>
        <span class="token punctuation">&#123;</span><span class="token operator">!</span>user <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>
          <span class="token operator">&lt;</span>StyledLink to<span class="token operator">=</span><span class="token string">"/register"</span> activeClassName<span class="token operator">=</span><span class="token string">"active"</span><span class="token operator">></span>
            註冊
          <span class="token operator">&lt;</span><span class="token operator">/</span>StyledLink<span class="token operator">></span>
        <span class="token punctuation">)</span><span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#123;</span><span class="token operator">!</span>user <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>
          <span class="token operator">&lt;</span>StyledLink to<span class="token operator">=</span><span class="token string">"/login"</span> activeClassName<span class="token operator">=</span><span class="token string">"active"</span><span class="token operator">></span>
            登入
          <span class="token operator">&lt;</span><span class="token operator">/</span>StyledLink<span class="token operator">></span>
        <span class="token punctuation">)</span><span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#123;</span>user <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>
          <span class="token operator">&lt;</span>StyledLink to<span class="token operator">=</span><span class="token string">"/new-post"</span> activeClassName<span class="token operator">=</span><span class="token string">"active"</span><span class="token operator">></span>
            發布文章
          <span class="token operator">&lt;</span><span class="token operator">/</span>StyledLink<span class="token operator">></span>
        <span class="token punctuation">)</span><span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#123;</span>user <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>
          <span class="token operator">&lt;</span>StyledLink to<span class="token operator">=</span><span class="token string">""</span> onClick<span class="token operator">=</span><span class="token punctuation">&#123;</span>handleLogout<span class="token punctuation">&#125;</span><span class="token operator">></span>
            登出
          <span class="token operator">&lt;</span><span class="token operator">/</span>StyledLink<span class="token operator">></span>
        <span class="token punctuation">)</span><span class="token punctuation">&#125;</span>
      <span class="token operator">&lt;</span><span class="token operator">/</span>NavbarList<span class="token operator">></span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>HeaderContainer<span class="token operator">></span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>結果如下：</p>
<p><img src="https://i.imgur.com/NLbXTNr.png"></p>
<p>但這麼寫還有個問題，就是重新整理之後，又會變成未登入狀態，其實 localStorage 還是有 token 存在。</p>
<h3 id="3-useEffect：在-reneder-之後驗證身分"><a href="#3-useEffect：在-reneder-之後驗證身分" class="headerlink" title="3. useEffect：在 reneder 之後驗證身分"></a>3. useEffect：在 reneder 之後驗證身分</h3><p>可使用 useEffect 來解決這個問題，如此一來，在畫面 mount 的時候，就會透過 call getMe API 來驗證身分：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span>user<span class="token punctuation">,</span> setUser<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// 以 getAuthToken 從 localStorage 讀取 token</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">getAuthToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token comment">// 有 token 才 call API</span>
      <span class="token function">getMe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">response</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>response<span class="token punctuation">.</span>ok<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
          <span class="token function">setUser</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  
<span class="token comment">// ...</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>


<hr>
<h2 id="補充功能"><a href="#補充功能" class="headerlink" title="補充功能"></a>補充功能</h2><h3 id="1-styled-reset：CSS-Reset"><a href="#1-styled-reset：CSS-Reset" class="headerlink" title="1. styled-reset：CSS Reset"></a>1. styled-reset：CSS Reset</h3><p>React 也可搭配 styled-reset 套件，進行 CSS Reset 規格化，詳細參考<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3phY2FuZ2VyL3N0eWxlZC1yZXNldCNyZWFkbWU=">官方文件<i class="fa fa-external-link-alt"></i></span>。</p>
<p>安裝套件：</p>
<pre class="line-numbers language-none"><code class="language-none">$ npm i styled-reset<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>引入 styled-reset 套件使用：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">'react'</span>
<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> Reset <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'styled-reset'</span>

<span class="token keyword">const</span> <span class="token function-variable function">App</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span>
  <span class="token operator">&lt;</span>React<span class="token punctuation">.</span>Fragment<span class="token operator">></span>
    <span class="token operator">&lt;</span>Reset <span class="token operator">/</span><span class="token operator">></span>
    <span class="token operator">&lt;</span>div<span class="token operator">></span>Hi<span class="token punctuation">,</span> <span class="token constant">I</span>'m an app<span class="token operator">!</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
  <span class="token operator">&lt;</span><span class="token operator">/</span>React<span class="token punctuation">.</span>Fragment<span class="token operator">></span>
<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="2-在-Root-設置全域背景圖片"><a href="#2-在-Root-設置全域背景圖片" class="headerlink" title="2. 在 Root 設置全域背景圖片"></a>2. 在 Root 設置全域背景圖片</h3><p>在 App.js 引入 img：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> img <span class="token keyword">from</span> <span class="token string">"../../images/bg.jpg"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>以 styled-component 調整 App 中 Root Component 的 css，就會 render 到所有 pages：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> Root <span class="token operator">=</span> styled<span class="token punctuation">.</span>div<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">
  font-family: "monospace", "微軟正黑體";
  color: #4a4a4a;
  box-sizing: border-box;
  padding: 80px 10px;
  background: #fff url(</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>img<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">) center center fixed no-repeat;
  background-size: cover;
  height: 100%;
</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>以 LoginPage.js 為例，可針對不同頁面進行微調：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> Root <span class="token operator">=</span> styled<span class="token punctuation">.</span>div<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">
  height: 100vh;
  padding-top: 100px;
</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="3-優化：畫面閃爍問題"><a href="#3-優化：畫面閃爍問題" class="headerlink" title="3. 優化：畫面閃爍問題"></a>3. 優化：畫面閃爍問題</h3><p>在登入狀態時，重整畫面會出現畫面閃爍的問題，如下圖所示：</p>
<p><img src="https://i.imgur.com/bzRXGRP.gif"></p>
<p>之所以會有這個現象，是因為畫面進行了兩次 render：</p>
<ul>
<li>預設為登出狀態（第一次 render）</li>
<li>當我們發 API 確認有登入之後，才會顯示登入狀態（第二次 render）</li>
</ul>
<p>要改善這個問題的核心概念在於：</p>
<h4 id="在確認是否登入之前，不要顯示和登入登出狀態有關的東西。"><a href="#在確認是否登入之前，不要顯示和登入登出狀態有關的東西。" class="headerlink" title="在確認是否登入之前，不要顯示和登入登出狀態有關的東西。"></a>在確認是否登入之前，不要顯示和登入登出狀態有關的東西。</h4><p>在 APP 執行開始，可以有新的 state（isLoadingGetMe 或是 isGettingUser），預設值為 ture，也就是不顯示登入登出。</p>
<p>一旦接收到 getMe() 回傳的 response 時，或是發現沒有 token 時，就會改成 false，顯示登入登出。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// 以 getAuthToken 從 localStorage 讀取 token</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">getAuthToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// 有 token 才 call API</span>
    <span class="token function">getMe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">response</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>response<span class="token punctuation">.</span>ok<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token function">setUser</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">setLoadingGetMe</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
    <span class="token function">setLoadingGetMe</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>也可以實作一個 Loading 畫面，等到渲染完成再顯示頁面。</p>
<h3 id="4-函式宣告-vs-函式呼叫"><a href="#4-函式宣告-vs-函式呼叫" class="headerlink" title="4. 函式宣告 vs 函式呼叫"></a>4. 函式宣告 vs 函式呼叫</h3><p>這裡以 onChange 事件監聽為例：</p>
<ul>
<li>宣告函式 handlePageChange，當 onChange 時會執行函式 handlePageChange</li>
</ul>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">onChange<span class="token operator">=</span><span class="token punctuation">&#123;</span>handlePageChange<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ul>
<li>會直接呼叫函式 handlePageChange()，並傳入參數 page</li>
</ul>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">onChange<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token function">handlePageChange</span><span class="token punctuation">(</span>page<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ul>
<li>定義一個新的函式給 onChange，當 onChange 時會執行丟進去的函式</li>
</ul>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">onChange<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">handlePageChange</span><span class="token punctuation">(</span>page<span class="token punctuation">)</span><span class="token punctuation">&#125;</span>

<span class="token comment">// 等同於</span>
onChange<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> 
  <span class="token keyword">return</span> <span class="token function">handlePageChange</span><span class="token punctuation">(</span>page<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<hr>
<h2 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h2><p>在實作部落格時可以發現，我們在最一開始雖然擬定了專案架構，實際上還是會在實作的過程進行調整，最後構成的專案架構如下：</p>
<ul>
<li>src<ul>
<li>components 組件<ul>
<li>App 管理路由、設置全域變數</li>
<li>Header 導覽列</li>
<li>Footer 置底訊息</li>
</ul>
</li>
<li>constants 常數</li>
<li>pages 頁面<ul>
<li>HomePage 首頁（顯示最新五篇）</li>
<li>AboutPage 關於我</li>
<li>PostListPage 文章列表頁面</li>
<li>PostPage 單一文章頁面</li>
<li>NewPostPage 發布文章頁面</li>
<li>LoginPage 登入頁面</li>
<li>Register 註冊頁面</li>
</ul>
</li>
<li>WebAPI.js 管理 API</li>
<li>utils.js 管理常用方法</li>
<li>contexts.js 管理傳給子層的 value</li>
</ul>
</li>
</ul>
<p>一旦 components 資料夾中，結構變得更複雜時，會再根據不同功能來區分資料夾，例如 common、post，注意當檔案是 compontent 時，才會以大寫英文開頭命名。</p>
]]></content>
      <categories>
        <category>Front-End</category>
        <category>React</category>
      </categories>
      <tags>
        <tag>React</tag>
        <tag>Hooks</tag>
        <tag>useContext</tag>
      </tags>
  </entry>
  <entry>
    <title>[week 21] React 性能優化：Virtual DOM &amp; 如何避免 re-render</title>
    <url>/react-virtual-dom/</url>
    <content><![CDATA[<blockquote>
<p>本篇為 <span class="exturl" data-url="aHR0cHM6Ly9saWRlbXkuY29tL3AvZmUzMDItcmVhY3QtaG9va3M=">[FE302] React 基礎 - hooks 版本<i class="fa fa-external-link-alt"></i></span> 這門課程的學習筆記。如有錯誤歡迎指正！</p>
</blockquote>
<span id="more"></span>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在 React 課程最一開始，也就是<span class="exturl" data-url="aHR0cHM6Ly9oYWNrbWQuaW8vQEhlaWRpLUxpdS9ub3RlLWZlMzAyLXJldmlldw==">實作 Todo List<i class="fa fa-external-link-alt"></i></span> 作為範例有提到，新增 todo 時「透過更改資料，畫面再根據資料進行渲染」，可確保兩者永遠一致：</p>
<p><img src="https://i.imgur.com/k1STU0n.png"></p>
<p>那時採取的是簡單暴力的作法，也就是當 State 改變，我們就清空畫面並重新渲染 DOM 元素：</p>
<p><img src="https://i.imgur.com/vf17UN9.png"></p>
<p>但這其實會有效能問題，假如我們今天總共有 100 個 DOM，即使只修改其中一個，卻還是必須清空並重新 Render 這 100 個 DOM。</p>
<p>這樣其實非常沒有效率，應該只需要重新 Render 有更動的部分就好。那麼 React 是如何解決這個問題呢？其實核心概念就是「如何快速找到要改變的地方」。</p>
<h2 id="Reconciliation：React-的渲染機制"><a href="#Reconciliation：React-的渲染機制" class="headerlink" title="Reconciliation：React 的渲染機制"></a>Reconciliation：React 的渲染機制</h2><p>在 React 當中，透過 Reconciliation 渲染機制可以快速找出 State 改變的地方：</p>
<ul>
<li>透過 State 的改變，render 出 Virtual DOM</li>
<li>透過比對 Virtual DOM 的不同，再更新真的 DOM 到畫面</li>
</ul>
<p><img src="https://i.imgur.com/ApLV4M6.png"></p>
<h3 id="什麼是-Virtual-DOM？"><a href="#什麼是-Virtual-DOM？" class="headerlink" title="什麼是 Virtual DOM？"></a>什麼是 Virtual DOM？</h3><p>Virtual DOM 實際上就是用 JavaScript 物件來描述 DOM 結構。</p>
<p>當 DOM 的節點需要更動時，不會直接修改 DOM，而是透過 DOM diff 演算法比較 Virtual DOM 修改前與修改後的樹狀結構，再批次更新真實的 DOM 節點。</p>
<p><img src="https://i.imgur.com/ADMTzi4.png"><br>（圖片來源：<span class="exturl" data-url="aHR0cHM6Ly90dXRvcmlhbHNsaW5rLmNvbS9BcnRpY2xlcy9XaGF0LWlzLVZpcnR1YWwtRE9NLzE1ODAlRUYlQkMlODk=">https://tutorialslink.com/Articles/What-is-Virtual-DOM/1580）<i class="fa fa-external-link-alt"></i></span></p>
<p>比如下方這段 DOM 結構：</p>
<pre class="line-numbers language-htmlmixed" data-language="htmlmixed"><code class="language-htmlmixed">&lt;div className&#x3D;&quot;APP&quot;&gt;
  &lt;TodoItem&gt;
    Watch a Movie
  &lt;&#x2F;TodoItem&gt;
&lt;&#x2F;div&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>若以 JavaScript 物件形式寫成 Virtual DOM：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">&#123;</span>
  tag<span class="token operator">:</span> <span class="token string">'div'</span><span class="token punctuation">,</span>
    props<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
      className<span class="token operator">:</span> <span class="token string">'APP'</span>
    <span class="token punctuation">&#125;</span>
  children<span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token punctuation">&#123;</span>
      tag<span class="token operator">:</span> <span class="token string">'TodoItem'</span><span class="token punctuation">,</span>
      children<span class="token operator">:</span> <span class="token string">'Watch a Movie'</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">]</span>
<span class="token punctuation">&#125;</span>    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="為什麼需要-Virtual-DOM？"><a href="#為什麼需要-Virtual-DOM？" class="headerlink" title="為什麼需要 Virtual DOM？"></a>為什麼需要 Virtual DOM？</h3><p>因為操作 DOM 這件事，其實會耗費很大的成本；而 React 背後運行機制，就是透過比對 Virtual DOM 來避免直接操作 DOM，藉此來提升效能。</p>
<p>除了提升效能這個優點，因為建立 Virtual DOM 這一虛擬層，我們能夠對程式碼進行更多操作，例如：</p>
<ul>
<li>轉成真的 DOM 結構</li>
<li>轉成 Markdown 語法</li>
<li>轉成 mobile APP 語法</li>
</ul>
<p>簡單總結 Virtual DOM 帶來的兩大優點：</p>
<ul>
<li>在 State 改變時，透過比對 Virtual DOM 來判斷是否更新、建立真的 DOM，藉此優化效能</li>
<li>可透過 Virtual DOM 建立更多操作</li>
</ul>
<p>參考文章：</p>
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9jeXRoaWx5YS5naXRodWIuaW8vMjAxNy8wMy8zMS92aXJ0dWFsLWRvbS8=">Virtual DOM 概述<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9tZWRpdW0uY29tLyVFNiU4OSU4QiVFNSVBRiVBQiVFNyVBRCU4NiVFOCVBOCU5OC9idWlsZC1hLXNpbXBsZS12aXJ0dWFsLWRvbS01Y2YxMmNjZjM3OWY=">Virtual DOM | 為了瞭解原理，那就來實作一個簡易 Virtual DOM 吧！<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLnRlY2hicmlkZ2UuY2MvMjAxOS8wMi8wNC92ZG9tLWZyb20tc2NyYXRjaC8=">從頭打造一個簡單的 Virtual DOM<i class="fa fa-external-link-alt"></i></span></li>
</ul>
<hr>
<h2 id="如何避免-re-render？"><a href="#如何避免-re-render？" class="headerlink" title="如何避免 re-render？"></a>如何避免 re-render？</h2><p>透過 React 的 Function Component，我們能將頁面切割成許多 Component 來方便管理。</p>
<p>但需注意這樣的結構，一但 props 或 state 改變時就很容易觸發 re-render（重新渲染），這如果發生在大型專案，不斷重新渲染可能產生效能問題，加重伺服器的負擔。</p>
<h3 id="memo：Higher-Order-Component"><a href="#memo：Higher-Order-Component" class="headerlink" title="memo：Higher Order Component"></a>memo：Higher Order Component</h3><p>React.memo 是一個 HOC（Higher Order Component），根據<span class="exturl" data-url="aHR0cHM6Ly96aC1oYW50LnJlYWN0anMub3JnL2RvY3MvaGlnaGVyLW9yZGVyLWNvbXBvbmVudHMuaHRtbA==">官網說明<i class="fa fa-external-link-alt"></i></span>：</p>
<blockquote>
<p>HOC: a higher-order component is a function that takes a component and returns a new component.<br>（把一個元件丟進 HOC 函數時，會經過一些處理並返回新元件）</p>
</blockquote>
<p>用法如下：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> MyComponent <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">memo</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">MyComponent</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token operator">...</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>比如說，當子元件依賴於父元件的狀態（state）或事件（event），在父元件中宣告狀態與事件方法，可透過 props 將傳遞到子元件中。</p>
<p>但如果是在父元件的狀態被改變，props 結果不變的情況下，子元件即使沒有改變，仍然會被重新渲染，像這樣多餘的渲染就會造成效能浪費。</p>
<p>而 React.memo 這個 HOC 就負責比較元件當中的 props 有沒有改變，減少元件不必要的渲染。</p>
<p>以下方 input 作為範例：</p>
<iframe height="265" style="width: 100%;" scrolling="no" title="React memo" src="https://codepen.io/heidiliu2020/embed/preview/rNMOpLY?height=265&theme-id=dark&default-tab=js,result" frameborder="no" loading="lazy" allowtransparency="true" allowfullscreen="true">
  See the Pen <a href='https://codepen.io/heidiliu2020/pen/rNMOpLY'>React memo</a> by Heidi-Liu
  (<a href='https://codepen.io/heidiliu2020'>@heidiliu2020</a>) on <a href='https://codepen.io'>CodePen</a>.
</iframe>

<h3 id="useCallback"><a href="#useCallback" class="headerlink" title="useCallback"></a>useCallback</h3><p>而 memo 與 useCallback 常會搭配使用，useCallback 讓 props 的 Object 在父元件重新渲染時，不重新分配記憶體位址，讓 memo 不會因為重新分配記憶體位址造成渲染。</p>
<h3 id="useMemo"><a href="#useMemo" class="headerlink" title="useMemo"></a>useMemo</h3><p>useMemo 的用法則是無關於父元件，主要用在當元件重新渲染時，減少在元件中複雜的程式重複執行。</p>
<h3 id="什麼情況需要進行優化"><a href="#什麼情況需要進行優化" class="headerlink" title="什麼情況需要進行優化"></a>什麼情況需要進行優化</h3><p>性能優化總是會有成本，但並不總是帶來好處。具體來說，使用這類型的 hooks 可能會複雜化程式碼；也可能反而使性能下降。因此，除非需要進行昂貴的運算，否則必要的情況下不建議使用。</p>
<p>參考資料：</p>
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9tZWRpdW0uY29tLyVFNiU4OSU4QiVFNSVBRiVBQiVFNyVBRCU4NiVFOCVBOCU5OC9yZWFjdC1vcHRpbWl6ZS1wZXJmb3JtYW5jZS11c2luZy1tZW1vLXVzZWNhbGxiYWNrLXVzZW1lbW8tYTc2YjZiMjcyZGYz">React 性能優化那件大事，使用 memo、useCallback、useMemo<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9pdGhlbHAuaXRob21lLmNvbS50dy9hcnRpY2xlcy8xMDI0MDI5Nj9zYz1pVGhvbWVS">關於props的記憶，React Memo (新增範例及說明)<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9qYW5jYXQuZ2l0aHViLmlvL3Bvc3QvMjAxOS90cmFuc2xhdGlvbi11c2VtZW1vLWFuZC11c2VjYWxsYmFjay8=">【譯】什麼時候使用useMemo 和useCallback<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC81Njk3NTY4MQ==">React Hooks 第一期：聊聊useCallback<i class="fa fa-external-link-alt"></i></span></li>
</ul>
<hr>
<h2 id="React-事件機制"><a href="#React-事件機制" class="headerlink" title="React 事件機制"></a>React 事件機制</h2><p>在 React 的事件機制，其實是透過 root 這層進行事件代理，而不是綁在 button 等 DOM 節點上。</p>
<p>當我們開啟開發者工具，查看修改 todo 狀態 button 的監聽事件，會是以下畫面：</p>
<p><img src="https://i.imgur.com/YKxqY4S.png"></p>
<p>但如果把 button 的 click 監聽事件給 remove，還是能夠更改狀態：</p>
<p><img src="https://i.imgur.com/7jftRiR.png"></p>
<p>這是因為，React 是由上層的節點 root 進行事件監聽，也就是以 <code>&lt;div id=&quot;root&quot;&gt;&lt;/div&gt;</code> 作為事件代理：</p>
<p><img src="https://i.imgur.com/7I8Yekk.png"></p>
<p>React 透過這樣的事件機制能夠提升效能，也確保動態新增的元素能夠捕捉到事件機制。</p>
<hr>
<h2 id="useContext：用來解決-Props-drilling"><a href="#useContext：用來解決-Props-drilling" class="headerlink" title="useContext：用來解決 Props drilling"></a>useContext：用來解決 Props drilling</h2><p>由於 React 單向資料流的特性，資料傳遞須遵循從上到下的單一方向性。</p>
<p>當子元件的狀態改變影響到父元件或共享元件，會透過事件機制等方式通知父元件，render 之後再透過 props 把更新的值傳遞給子元件達成畫面更新。</p>
<p>但如果父子之間隔了許多層元件，還是必須把 props 一層一層傳下去，這種情況就是 Props drilling，容易造成 bugs 難以維護。</p>
<p>而 useContext 可以解決這個問題。useContext 是用來接收與父元件傳遞資料時的 Hooks，用途和 props 相同，</p>
<p>參考文章：</p>
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLnRlY2hicmlkZ2UuY2MvMjAxOC8wNy8yMS9hZHZhbmNlZC1yZWFjdC1jb21wb25lbnQtcGF0dGVybnMtbm90ZS1JSS8=">進階 React Component Patterns 筆記（下）<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9wamNoZW5kZXIuYmxvZ3Nwb3QuY29tLzIwMTkvMDcvcmVhY3QtcmVhY3QtY29udGV4dC1hcGkuaHRtbA==">[React] React Context API 以及 useContext Hook 的使用<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9tZWRpdW0uY29tL2Vuam95LWxpZmUtZW5qb3ktY29kaW5nL3JlYWN0LSVFNSU5QyVBOC1ob29rcy0lRTQlQjglQUQlRTQlQkIlQTUtdXNlY29udGV4dC0lRTglODglODctdXNlcmVkdWNlci0lRTUlQUYlQTYlRTclOEYlQkUtcmVkdXgtM2E4YWE0MDNkOWU0">React | 在 Hooks 中以 useContext 與 useReducer 實現 Redux<i class="fa fa-external-link-alt"></i></span></li>
</ul>
<hr>
<h2 id="補充：Virtual-DOM-的起源"><a href="#補充：Virtual-DOM-的起源" class="headerlink" title="補充：Virtual DOM 的起源"></a>補充：Virtual DOM 的起源</h2><p>推薦這篇：<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL01yRXJIdS9ibG9nL2lzc3Vlcy8yNg==">了不起的Virtual DOM(一)：起源<i class="fa fa-external-link-alt"></i></span>，有談到 Virtual DOM 的起源，其實任何技術或工具的誕生都是有原因的，例如框架是因應逐漸擴大的程式規模，為了可維護性與便於開發而出現。</p>
<p>前端在 MVC 模式中，隨著應用規模增加，Model 與 View 之間的複雜關係使得開發難度增加。</p>
<p><img src="https://i.imgur.com/09TAbTq.png"></p>
<p>而為了改善 MVC 模式，之後就出現了 MVP 模式，將 MVC 中的 Controller 改為 Presenter，使 Model 和 View 兩者之間相互獨立，但這同樣有個缺點，就是 Presenter 需要承擔的功能過多，難以後續維護。</p>
<p><img src="https://i.imgur.com/UOlvxGZ.png"></p>
<p>MVVM 結構是以 MVP 作為基礎進行改良，將原來的 Presenter 進化為 View Of Model（VM：視圖模型），負責 View 與 Model 的雙向綁定，將 View與 Model 之間的手動維護更新改為自動更新，這麼做的好處是大幅提高可維護性。但也需注意 ViewModel 構建與維護成本相對較高，複雜的視圖也帶來性能成本，因此不適用較簡單的頁面。</p>
<p><img src="https://i.imgur.com/XaC6n6i.png"></p>
<p>直到 React 出現，解決思路就是「當 Model 發生改變時直接重新渲染 View」，引入 Virtual DOM 的概念。透過 JavaScript 物件來描述 DOM 結構，產生當下 Model 對應的 Virtual DOM 結構，再和上次的 Virtual DOM 結構透過 Diff 演算法比較，再將兩者差異建立在真實 DOM 上。</p>
<h2 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h2><p>其實關於 React 優化，還是不太瞭解該如何使用 hooks 來避免重新渲染，只有大概瞭解原理，還有並不是所有情況都是用性能優化。除非是在大型專案，需要進行昂貴的計算才可能會用到，因此這部分等之後有機會再來深入研究。</p>
]]></content>
      <categories>
        <category>Front-End</category>
        <category>React</category>
      </categories>
      <tags>
        <tag>React</tag>
      </tags>
  </entry>
  <entry>
    <title>[week 21] 前端框架 - 先別急著學 React</title>
    <url>/react/</url>
    <content><![CDATA[<blockquote>
<p>本篇為 <span class="exturl" data-url="aHR0cHM6Ly9saWRlbXkuY29tL3AvZmUzMDItcmVhY3QtaG9va3M=">[FE302] React 基礎 - hooks 版本<i class="fa fa-external-link-alt"></i></span> 這門課程的學習筆記。如有錯誤歡迎指正！</p>
</blockquote>
<pre class="line-numbers language-none"><code class="language-none">學習目標：

 P1 我知道 React 的目的以及原理
 P1 我知道我們為什麼需要 React
 P1 我知道使用 React 跟之前使用 jQuery 的區別
 P1 我理解 state 跟 props 的不同<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<span id="more"></span>
<hr>
<h2 id="先別急著學-React"><a href="#先別急著學-React" class="headerlink" title="先別急著學 React"></a>先別急著學 React</h2><p>在開始之前，我們先來複習如何用 jQuery 來做出一個簡單的 Todo List 吧！</p>
<ol>
<li>以下是套用 Bootstrap 切的版型，不過切版部分不是這次要探討的重點：</li>
</ol>
<pre class="line-numbers language-htmlmixed" data-language="htmlmixed"><code class="language-htmlmixed">&lt;link rel&#x3D;&quot;stylesheet&quot; href&#x3D;&quot;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;npm&#x2F;bootstrap@4.5.3&#x2F;dist&#x2F;css&#x2F;bootstrap.min.css&quot;
  integrity&#x3D;&quot;sha384-TX8t27EcRE3e&#x2F;ihU7zmQxVncDAy5uIKz4rEkgIXeMed4M0jlfIDPvg6uqKI2xXr2&quot; crossorigin&#x3D;&quot;anonymous&quot;&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<iframe height="324" style="width: 100%;" scrolling="no" title="[week21] Todo List template" src="https://codepen.io/heidiliu2020/embed/preview/vYKoNJK?height=324&theme-id=dark&default-tab=html,result" frameborder="no" loading="lazy" allowtransparency="true" allowfullscreen="true">
  See the Pen <a href='https://codepen.io/heidiliu2020/pen/vYKoNJK'>[week21] Todo List template</a> by Heidi-Liu
  (<a href='https://codepen.io/heidiliu2020'>@heidiliu2020</a>) on <a href='https://codepen.io'>CodePen</a>.
</iframe>

<ol start="2">
<li>接著引入使用 jQuery：</li>
</ol>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"http://code.jquery.com/jquery-latest.js"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ol start="3">
<li>就可以來新增功能了：</li>
</ol>
<ul>
<li>新增</li>
<li>切換已完成/未完成</li>
<li>刪除</li>
</ul>
<iframe height="265" style="width: 100%;" scrolling="no" title="[week21] Todo List template" src="https://codepen.io/heidiliu2020/embed/preview/vYKoNJK?height=265&theme-id=dark&default-tab=js,result" frameborder="no" loading="lazy" allowtransparency="true" allowfullscreen="true">
  See the Pen <a href='https://codepen.io/heidiliu2020/pen/vYKoNJK'>[week21] Todo List template</a> by Heidi-Liu
  (<a href='https://codepen.io/heidiliu2020'>@heidiliu2020</a>) on <a href='https://codepen.io'>CodePen</a>.
</iframe>

<h2 id="初探-Component"><a href="#初探-Component" class="headerlink" title="初探 Component"></a>初探 Component</h2><p>根據 <span class="exturl" data-url="aHR0cHM6Ly96aC1oYW50LnJlYWN0anMub3JnL2RvY3MvY29tcG9uZW50cy1hbmQtcHJvcHMuaHRtbA==">React<i class="fa fa-external-link-alt"></i></span> 官網定義：</p>
<blockquote>
<p>Component 使你可以將 UI 拆分成獨立且可複用的程式碼，並且專注於各別程式碼的思考。</p>
</blockquote>
<p>簡單來說，component（元件、組件）其實就像 JavaScript 的 function，可接收任意的 props（參數， property 的簡寫）並且回傳描述畫面的 React element。</p>
<p>以我們剛才實作的 todolist 來說，就可以根據功能分成不同的 component：</p>
<p><img src="https://i.imgur.com/XYSTyfM.png"></p>
<h3 id="Component-amp-Props"><a href="#Component-amp-Props" class="headerlink" title="Component &amp; Props"></a>Component &amp; Props</h3><p>再來我們可試著用 component 的概念改寫程式碼，例如切割出 Todo 和 Button component。</p>
<ol>
<li><p>必須用英文大寫開頭命名來辨別是 component：
　</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// Todo component: 用來回傳 html 內容, 用大寫英文開頭</span>
<span class="token keyword">function</span> <span class="token function">Todo</span><span class="token punctuation">(</span><span class="token parameter">content</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">
    &lt;li class="todo list-group-item d-flex justify-content-between align-items-center">
      &lt;div class="todo-title "></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>content<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">&lt;/div>
      &lt;div class="btn-group">
        </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token function">Button</span><span class="token punctuation">(</span><span class="token string">'btn-undone btn-outline-secondary'</span><span class="token punctuation">,</span> <span class="token string">'未完成'</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">
        </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token function">Button</span><span class="token punctuation">(</span><span class="token string">'btn-delete btn-outline-danger'</span><span class="token punctuation">,</span> <span class="token string">'刪除'</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">
      &lt;/div>
    &lt;/li>
  </span><span class="token template-punctuation string">`</span></span>
<span class="token punctuation">&#125;</span>
<span class="token comment">// Button component</span>
<span class="token keyword">function</span> <span class="token function">Button</span><span class="token punctuation">(</span><span class="token parameter">className<span class="token punctuation">,</span> content</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">
    &lt;button class="btn </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>className<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">" type="button"></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>content<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">&lt;/button>
  </span><span class="token template-punctuation string">`</span></span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>監聽事件就可改成 Button component 寫法，比起原本的 HTML 程式碼，用 component 寫法會更容易閱讀：</p>
</li>
</ol>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'.todos'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token string">'.btn-undone'</span><span class="token punctuation">,</span> <span class="token parameter">e</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">const</span> todo <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>target<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">parent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  e<span class="token punctuation">.</span>target<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  todo<span class="token punctuation">.</span><span class="token function">prepend</span><span class="token punctuation">(</span>
    <span class="token function">Button</span><span class="token punctuation">(</span><span class="token string">'btn-done btn-outline-success'</span><span class="token punctuation">,</span> <span class="token string">'已完成'</span><span class="token punctuation">)</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 

<span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'.todos'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token string">'.btn-done'</span><span class="token punctuation">,</span> <span class="token parameter">e</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">const</span> todo <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>target<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">parent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  e<span class="token punctuation">.</span>target<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  todo<span class="token punctuation">.</span><span class="token function">prepend</span><span class="token punctuation">(</span>
    <span class="token function">Button</span><span class="token punctuation">(</span><span class="token string">'btn-undone btn-outline-secondary'</span><span class="token punctuation">,</span> <span class="token string">'未完成'</span><span class="token punctuation">)</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ol start="3">
<li>但其實這個寫法還能再做優化，像是 Button() 如果要再傳入更多參數，就會很難快速判斷。因此我們可以改成傳入物件，也就是 props（參數）來簡化：</li>
</ol>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// Todo component: 傳入物件作為參數</span>
<span class="token keyword">function</span> <span class="token function">Todo</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">
    &lt;li class="todo list-group-item d-flex justify-content-between align-items-center">
      &lt;div class="todo-title "></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>props<span class="token punctuation">.</span>content<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">&lt;/div>
      &lt;div class="btn-group">
        </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token function">Button</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
          className<span class="token operator">:</span> <span class="token string">'btn-undone btn-outline-secondary'</span><span class="token punctuation">,</span>
          content<span class="token operator">:</span> <span class="token string">'未完成'</span>
          <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">
        </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token function">Button</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
          className<span class="token operator">:</span> <span class="token string">'btn-delete btn-outline-danger'</span><span class="token punctuation">,</span>
          content<span class="token operator">:</span> <span class="token string">'刪除'</span>
          <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">
      &lt;/div>
    &lt;/li>
  </span><span class="token template-punctuation string">`</span></span>
<span class="token punctuation">&#125;</span>
<span class="token comment">// Button component: 傳入物件作為參數</span>
<span class="token keyword">function</span> <span class="token function">Button</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">
    &lt;button class="btn </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>props<span class="token punctuation">.</span>className<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">" type="button"></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>props<span class="token punctuation">.</span>content<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">&lt;/button>
  </span><span class="token template-punctuation string">`</span></span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>監聽事件也同樣以物件的形式修改，完整程式碼與執行畫面如下：</p>
<iframe height="265" style="width: 100%;" scrolling="no" title="[week21] Todo List template_component" src="https://codepen.io/heidiliu2020/embed/preview/dypbKLw?height=265&theme-id=dark&default-tab=js,result" frameborder="no" loading="lazy" allowtransparency="true" allowfullscreen="true">
  See the Pen <a href='https://codepen.io/heidiliu2020/pen/dypbKLw'>[week21] Todo List template_component</a> by Heidi-Liu
  (<a href='https://codepen.io/heidiliu2020'>@heidiliu2020</a>) on <a href='https://codepen.io'>CodePen</a>.
</iframe>

<p>透過這種寫法，我們能夠將重複的區塊變成模板，建立統一的規則來封裝，也會提高程式碼的可讀性。</p>
<p>但 component 其實是一種抽象的概念，還有另外一種較為標準的寫法 <span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvV2ViX0NvbXBvbmVudHM=">Web Components<i class="fa fa-external-link-alt"></i></span>，類似建立新的 HTML 標籤來使用，只是目前瀏覽器支援度還不高，這部分我們並不進行討論。</p>
<h2 id="資料-vs-畫面（UI）"><a href="#資料-vs-畫面（UI）" class="headerlink" title="資料 vs 畫面（UI）"></a>資料 vs 畫面（UI）</h2><p>根據前面的範例，是把資料放到畫面上來呈現，也就是在新增、修改 todo 時，同時去更動資料和畫面。因此我們可從 UI 去抽取資料，但我們無法直接把 HTML 程式碼存到資料庫，而是要去除標籤，轉換成 JSON 等最原始的資料形式。</p>
<p>此外，透過這種方式其實有個壞處，假如有部分資料沒有更動到，就可能導致資料與畫面不一致。</p>
<p><img src="https://i.imgur.com/TKkUPnR.png"></p>
<p>至於要如何解決這個問題，我們可以改成直接修改資料，然後畫面從資料產生，即可保持資料與畫面的一致性。</p>
<p><img src="https://i.imgur.com/k1STU0n.png"></p>
<p>這其實就是 React 第二個重要概念 State，畫面永遠由 state 產生。用數學式可表示成 <code>UI = f(state)</code>，代表 state 不變的話，透過 state 產生的 UI 也不會改變。</p>
<h2 id="畫面永遠都由-state-產生"><a href="#畫面永遠都由-state-產生" class="headerlink" title="畫面永遠都由 state 產生"></a>畫面永遠都由 state 產生</h2><p>根據 <span class="exturl" data-url="aHR0cHM6Ly96aC1oYW50LnJlYWN0anMub3JnL2RvY3MvcmVhY3QtY29tcG9uZW50Lmh0bWwjc3RhdGU=">React<i class="fa fa-external-link-alt"></i></span> 官網定義：</p>
<blockquote>
<p>State 包含了某個 component 內特定的、會隨時間改變的資料，這個 state 是由使用者定義的。它應是一個簡單的 JavaScript object。</p>
</blockquote>
<blockquote>
<p>如果某個值並沒有在 render 或資料流中被使用（例如計時器的 ID），你不需要將它放在 state 內。</p>
</blockquote>
<p>繼續舉剛才的範例，我們可以把 todos 放到 state 物件中，並且將 Todo component 中的 todo 加上 id：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> id <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> state <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  todos<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">function</span> <span class="token function">Todo</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// 自訂屬性通常以 data- 開頭</span>
  <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">
    &lt;li class="data-id="</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>id<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">">
     ...
  </span><span class="token template-punctuation string">`</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>新增 todo：透過 updateState() 來更新資料</li>
</ul>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'.btn-add'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">const</span> content <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'.input-todo'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>content<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
  <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'.input-todo'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 更新 state</span>
  <span class="token function">updateState</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
    todos<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token operator">...</span>state<span class="token punctuation">.</span>todos<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>
      id<span class="token punctuation">,</span>
      content<span class="token punctuation">,</span>
      isDone<span class="token operator">:</span> <span class="token boolean">false</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">]</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  id<span class="token operator">++</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>呼叫 updateState() 來更新資料，再根據資料 render 出畫面：</li>
</ul>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 更新 state</span>
<span class="token keyword">function</span> <span class="token function">updateState</span><span class="token punctuation">(</span><span class="token parameter">newState</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  state <span class="token operator">=</span> newState<span class="token punctuation">;</span>
  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">function</span> <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// 先把畫面清空</span>
  <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'.todos'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'.todos'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>
    <span class="token comment">// 把每個 todo 的 HTML 集合起來放到畫面上</span>
    state<span class="token punctuation">.</span>todos<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">todo</span> <span class="token operator">=></span> <span class="token function">Todo</span><span class="token punctuation">(</span>todo<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>刪除 todo：透過篩選掉資料中相對應的 todo 來更新 state</li>
</ul>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'.todos'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token string">'.btn-delete'</span><span class="token punctuation">,</span> <span class="token parameter">e</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// 讀取該 todo id</span>
  <span class="token keyword">const</span> id <span class="token operator">=</span> <span class="token function">Number</span><span class="token punctuation">(</span><span class="token function">$</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>target<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">parents</span><span class="token punctuation">(</span><span class="token string">'.todo'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">'data-id'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 更新 state: 篩選掉資料中相對應的 todo</span>
  <span class="token function">updateState</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
    todos<span class="token operator">:</span> state<span class="token punctuation">.</span>todos <span class="token operator">=</span> state<span class="token punctuation">.</span>todos<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">todo</span> <span class="token operator">=></span> todo<span class="token punctuation">.</span>id <span class="token operator">!==</span> id<span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>修改 todo 狀態也是類似概念，完整程式碼如下：</p>
<iframe height="265" style="width: 100%;" scrolling="no" title="[week21] Todo List template_component &amp; state" src="https://codepen.io/heidiliu2020/embed/preview/wvzvBbY?height=265&theme-id=dark&default-tab=js,result" frameborder="no" loading="lazy" allowtransparency="true" allowfullscreen="true">
  See the Pen <a href='https://codepen.io/heidiliu2020/pen/wvzvBbY'>[week21] Todo List template_component &amp; state</a> by Heidi-Liu
  (<a href='https://codepen.io/heidiliu2020'>@heidiliu2020</a>) on <a href='https://codepen.io'>CodePen</a>.
</iframe>

<hr>
<h2 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h2><p>在剛接觸 React 時，覺得和之前實作的 <span class="exturl" data-url="aHR0cHM6Ly9oYWNrbWQuaW8vQEhlaWRpLUxpdS9ub3RlLWJlMTAxLXBocC10b2RvbGlzdA==">SPA 留言版<i class="fa fa-external-link-alt"></i></span>概念很類似，以非同步方式串接後端 API，透過將前後端分離，以動態方式來更新頁面，同樣是直接更新後端資料來顯示前端畫面。</p>
<p>我們也從 Todo List 範例中，學到 React 最重要的兩個概念 Component 和 State：</p>
<ul>
<li>透過 Component 將畫面與功能模組化，並以傳入的參數 props 來設定屬性或是資料</li>
<li>因為畫面永遠由 State 產生，我們會直接更改資料，再由資料去顯示畫面</li>
</ul>
<p>瞭解到這些概念後，我們就能正式入門 React 這套 JavaScript Library。</p>
]]></content>
      <categories>
        <category>Front-End</category>
        <category>React</category>
      </categories>
      <tags>
        <tag>React</tag>
        <tag>jQuery</tag>
      </tags>
  </entry>
  <entry>
    <title>[week 5] 複習週 - 前四週學習與解題心得</title>
    <url>/review/</url>
    <content><![CDATA[<ul>
<li>Command line 的使用</li>
<li>Git 的基本操作</li>
<li>JavaScript 基本語法及程式思維</li>
<li>網路基本概念</li>
<li>解題心得 - Lidemy HTTP Challenge</li>
</ul>
<span id="more"></span>
<h3 id="Command-line-的使用"><a href="#Command-line-的使用" class="headerlink" title="Command line 的使用"></a>Command line 的使用</h3><p>第一次在終端機輸入指令，像是害怕把電腦弄壞似的，總是擔心會輸錯指令；也還記得第一次卡在 vim 介面出不來，最後使用重開大法解決（？）事後也證明其實不需顧慮這麼多，就算手殘打錯字，也只會回傳錯誤訊息而已XD </p>
<h4 id="複習筆記："><a href="#複習筆記：" class="headerlink" title="複習筆記："></a>複習筆記：</h4><ul>
<li><a href="http://jtliu.coderbridge.io/2020/06/14/command-line-codediary/"><br>coderbridge - [Week 1] Command Line 入門 &amp; 基本指令</a></li>
</ul>
<h3 id="Git-的基本操作"><a href="#Git-的基本操作" class="headerlink" title="Git 的基本操作"></a>Git 的基本操作</h3><p>在剛學習程式語言時，就看過幾篇文章說 Git 版本控制非常重要！而且剛好現在工作的地方是使用 SVN，雖然平常只有接觸到下載或更新檔案，但實際接觸到也更能夠了解到彼此之間的差異。</p>
<p>到現在邁入第六週，許多指令也已經記在腦海裡，想想還真是不可思議！雖然每次交作業時還是會一邊看<span class="exturl" data-url="aHR0cHM6Ly9oYWNrbWQuaW8vcWltWTNLajRRVmVYM3ZmNC05dUJFQQ==">步驟<i class="fa fa-external-link-alt"></i></span>來操作，相信多練習幾次就會更加熟記起來！
　</p>
<h4 id="複習筆記：-1"><a href="#複習筆記：-1" class="headerlink" title="複習筆記："></a>複習筆記：</h4><ul>
<li><a href="https://jtliu.coderbridge.io/2020/06/19/git-beginner-codediary/"><br>coderbridge -  [week 1] 版本控制 - Git 概念 ＆ 基本指令</a></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9oYWNrbWQuaW8vRF9BUFZrSldUWnlad1M0VFYwZzk3Zw==">[week 1] 版本控制 - Git 進階指令 &amp; GitHub<i class="fa fa-external-link-alt"></i></span></li>
</ul>
<h3 id="JavaScript-基本語法及程式思維"><a href="#JavaScript-基本語法及程式思維" class="headerlink" title="JavaScript 基本語法及程式思維"></a>JavaScript 基本語法及程式思維</h3><p>在迴圈卡住似乎是必經之路，把觀念建立起來之後就是不斷解題練習。有時候還是會發生程式碼雖然幾乎對了，卻因為把值放在大括號錯誤位置，導致無法拿到預期輸出。</p>
<p>再來是了解如何在 LIOJ 上解題，一開始在「如何把值傳入」這件事情陷入苦戰，經歷過無數個 WA；最後還是先看了參考影片，也了解到有時卡住可能是某些觀念還需要釐清，例如值的型態、邊界數字等，都是需要注意的地方。還有透過 eslint 檢查語法，讓自己習慣依照規則去撰寫程式碼，熟悉之後在 commit 時就比較不會跳出一整排錯誤需要修正了。</p>
<p>雖然還有些題目沒做完，會再找空閒時間當作複習慢慢完成。筆記也想再好好整理，並且更新到 coderbridg 上。複習週沒能完成這些事情，之後如果有空檔會再回來補上！</p>
<h4 id="尚須整理-amp-補筆記（位移運算子、ES6）："><a href="#尚須整理-amp-補筆記（位移運算子、ES6）：" class="headerlink" title="尚須整理 &amp; 補筆記（位移運算子、ES6）："></a>尚須整理 &amp; 補筆記（位移運算子、ES6）：</h4><ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9oYWNrbWQuaW8vNzEwSlFnTUpSUnFxOTVfeDcxWl9Idw==">[week 2] 先別急著寫 leetcode - 虛擬碼、Debugger、解題技巧<i class="fa fa-external-link-alt"></i></span> </li>
<li><span class="exturl" data-url="aHR0cHM6Ly9oYWNrbWQuaW8vOVd5MGJ4c1NSdXlQWmx6RjhTTlR4QQ==">[week 2] JavaScript 基礎 - 基本語法、值的型別、變數、迴圈、函數<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9oYWNrbWQuaW8vVWdVS0ZGbFVUcW1VTkVZMU0wZmg4Zw==">[week 3] JavaScript 技能：ES6 + npm + Jest<i class="fa fa-external-link-alt"></i></span></li>
</ul>
<h3 id="網路基本概念"><a href="#網路基本概念" class="headerlink" title="網路基本概念"></a>網路基本概念</h3><p>是前四週挫折感最重的一週，但也難怪畢竟是接觸全新的東西，必須花費更多時間來熟悉。前面有關 HTTP 的概念在火球數也有提到一些，但到了實際串接 API 部分就突然懵懂了。</p>
<p>還記得在寫 week4 的第一項作業時完全沒有頭緒，最後還是先找了參考解答，了解整個流程應該要如何操作。了解之後其實就和課程提到的實戰練習很像，知道不同 Method 的使用時機。還有最一開始的傳紙條故事，其實就和送出請求、回傳資料的概念是一樣的，重新看過文章後才漸漸有所體會。</p>
<h4 id="尚須整理-amp-補筆記（curl-指令）"><a href="#尚須整理-amp-補筆記（curl-指令）" class="headerlink" title="尚須整理 &amp; 補筆記（curl 指令）"></a>尚須整理 &amp; 補筆記（curl 指令）</h4><ul>
<li><a href="https://heidiliu2020.github.io/http-protocol/">[week 4] 網路基礎概論 - HTTP 協定、TCP/IP、API</a></li>
</ul>
<hr>
<h2 id="解題心得-Lidemy-HTTP-Challenge"><a href="#解題心得-Lidemy-HTTP-Challenge" class="headerlink" title="解題心得 - Lidemy HTTP Challenge"></a>解題心得 - Lidemy HTTP Challenge</h2><p>謝謝 Huli 製作這麼有趣的小遊戲！其實剛開始對 API 串接還是有點不太了解，透過小遊戲實際操作，漸漸能夠知道自己究竟傳入哪些資訊，要如何才能拿到想要的資訊，或是該如何進行身分驗證等等，也讓自己對有點挫敗的第四週重拾些許信心。目前玩到 Lv10，之後也會想把後面慢慢解完！</p>
<h3 id="start"><a href="#start" class="headerlink" title="start"></a>start</h3><ul>
<li>了解如何使用 query string 傳入 token。</li>
<li><span class="exturl" data-url="aHR0cHM6Ly9saWRlbXktaHR0cC1jaGFsbGVuZ2UuaGVyb2t1YXBwLmNvbS9zdGFydA==">https://lidemy-http-challenge.herokuapp.com/start<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9saWRlbXktaHR0cC1jaGFsbGVuZ2UuaGVyb2t1YXBwLmNvbS9sdjE/dG9rZW49JTdCR09HT0dPJTdE">https://lidemy-http-challenge.herokuapp.com/lv1?token={GOGOGO}<i class="fa fa-external-link-alt"></i></span></li>
</ul>
<h3 id="Lv1"><a href="#Lv1" class="headerlink" title="Lv1"></a>Lv1</h3><ul>
<li>了解如何在 token 後面帶上其他資訊（name）。</li>
<li><span class="exturl" data-url="aHR0cHM6Ly9saWRlbXktaHR0cC1jaGFsbGVuZ2UuaGVyb2t1YXBwLmNvbS9sdjE/dG9rZW49JTdCR09HT0dPJTdEJmFtcDtuYW1lPUhlaWRp">https://lidemy-http-challenge.herokuapp.com/lv1?token={GOGOGO}&amp;name=Heidi<i class="fa fa-external-link-alt"></i></span></li>
</ul>
<h3 id="Lv2"><a href="#Lv2" class="headerlink" title="Lv2"></a>Lv2</h3><ul>
<li>了解如何在 token 後面帶上其他資訊（id）。</li>
<li>這題是 54~58 一個一個試，最後發現 id 56 符合結果。</li>
<li><span class="exturl" data-url="aHR0cHM6Ly9saWRlbXktaHR0cC1jaGFsbGVuZ2UuaGVyb2t1YXBwLmNvbS9sdjI/dG9rZW49JTdCSGVsbE9XT3JsZCU3RCZhbXA7aWQ9NTY=">https://lidemy-http-challenge.herokuapp.com/lv2?token={HellOWOrld}&amp;id=56<i class="fa fa-external-link-alt"></i></span></li>
</ul>
<h3 id="Lv3"><a href="#Lv3" class="headerlink" title="Lv3"></a>Lv3</h3><ul>
<li>了解如何透過 node.js 傳入 request，利用 POST 來新增書籍。</li>
<li>這題稍微卡關了一下，因為一開始有點搞不懂 header、body、form 的階層關係，修改過後原來這兩種寫法都能得到 response：<code>&#123; message: &#39;新增成功&#39;, id: &#39;1989&#39; &#125;</code>。</li>
</ul>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 在 body 以 query string 帶入 name 和 ISBN</span>
  headers<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    <span class="token string">'content-type'</span><span class="token operator">:</span> <span class="token string">'application/x-www-form-urlencoded'</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  body<span class="token operator">:</span> <span class="token string">'name=《大腦喜歡這樣學》&amp;ISBN=9789863594475'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 在 form 帶入 name 和 ISBN</span>
headers<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
  <span class="token string">'content-type'</span><span class="token operator">:</span> <span class="token string">'application/x-www-form-urlencoded'</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
form<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
　name<span class="token operator">:</span> <span class="token string">'《大腦喜歡這樣學》'</span><span class="token punctuation">,</span>
　<span class="token constant">ISBN</span><span class="token operator">:</span> <span class="token string">'9789863594475'</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>得到回應為：<code>&#123; message: &#39;新增成功&#39;, id: &#39;1989&#39; &#125; </code></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9saWRlbXktaHR0cC1jaGFsbGVuZ2UuaGVyb2t1YXBwLmNvbS9sdjM/dG9rZW49JTdCNTU2Nk5PMSU3RCZhbXA7aWQ9MTk4OQ==">https://lidemy-http-challenge.herokuapp.com/lv3?token={5566NO1}&amp;id=1989<i class="fa fa-external-link-alt"></i></span></li>
</ul>
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9saWRlbXktaHR0cC1jaGFsbGVuZ2UuaGVyb2t1YXBwLmNvbS9sdjQ/dG9rZW49JTdCTEVhcm5IT1d0b0xlQXJuJTdE">https://lidemy-http-challenge.herokuapp.com/lv4?token={LEarnHOWtoLeArn}<i class="fa fa-external-link-alt"></i></span></li>
</ul>
<h3 id="Lv4"><a href="#Lv4" class="headerlink" title="Lv4"></a>Lv4</h3><ul>
<li><p>了解如何透過 GET 來獲得所有書籍資訊，並從中篩選出符合結果的書名和作者。</p>
</li>
<li><p>得到回應為：<code> &#123; id: 79, name: &#39;世界末日與冷酷異境&#39;, author: &#39;村上春樹&#39;, ISBN: &#39;9571313408&#39; &#125;,</code></p>
</li>
<li><p><span class="exturl" data-url="aHR0cHM6Ly9saWRlbXktaHR0cC1jaGFsbGVuZ2UuaGVyb2t1YXBwLmNvbS9sdjQ/dG9rZW49JTdCTEVhcm5IT1d0b0xlQXJuJTdEJmFtcDtpZD03OQ==">https://lidemy-http-challenge.herokuapp.com/lv4?token={LEarnHOWtoLeArn}&amp;id=79<i class="fa fa-external-link-alt"></i></span></p>
</li>
<li><p><span class="exturl" data-url="aHR0cHM6Ly9saWRlbXktaHR0cC1jaGFsbGVuZ2UuaGVyb2t1YXBwLmNvbS9sdjU/dG9rZW49JTdCSGFydWtpTXVyYWthbWklN0Q=">https://lidemy-http-challenge.herokuapp.com/lv5?token={HarukiMurakami}<i class="fa fa-external-link-alt"></i></span></p>
</li>
</ul>
<h3 id="Lv5"><a href="#Lv5" class="headerlink" title="Lv5"></a>Lv5</h3><ul>
<li>了解如何透過 DELETE 來獲得刪除書籍。</li>
<li>得到的 response 好像讓人有點不安（？）下一題才知道是因為沒有登入就能夠新增刪除，缺少了身分驗證。</li>
</ul>
<pre class="line-numbers language-none"><code class="language-none">&#123;
  message: &#39;\n咦...是刪掉了沒錯，但總覺得哪裡怪怪的，算了，先這樣吧！下一關的 token 為 &#123;CHICKENCUTLET&#125;\n&#39;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9saWRlbXktaHR0cC1jaGFsbGVuZ2UuaGVyb2t1YXBwLmNvbS9sdjY/dG9rZW49JTdCQ0hJQ0tFTkNVVExFVCU3RA==">https://lidemy-http-challenge.herokuapp.com/lv6?token={CHICKENCUTLET}<i class="fa fa-external-link-alt"></i></span></li>
</ul>
<h3 id="Lv6"><a href="#Lv6" class="headerlink" title="Lv6"></a>Lv6</h3><ul>
<li>了解如何將 http basic authorization 帶入 Header 進行身分驗證。</li>
<li>這關有稍微卡住，一開始是驗證碼少加 Basic，然後又卡一陣子找不到錯在哪裡，才發現原來是 圖書館資訊系統 API v2 接點最後有多加 <code>/v2</code>，真是魔鬼藏在細節裡，諸此類小地方都需要更加注意！</li>
</ul>
<pre class="line-numbers language-js" data-language="js"><code class="language-js">method<span class="token operator">:</span> <span class="token string">'GET'</span><span class="token punctuation">,</span>
url<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">https://lidemy-http-challenge.herokuapp.com/api/v2/me</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>
headers<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
  <span class="token string">'Authorization'</span><span class="token operator">:</span> <span class="token string">'Basic YWRtaW46YWRtaW4xMjM='</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li><p>得到回應為：<code>&#123; username: &#39;admin&#39;, email: &#39;lib@lidemy.com&#39; &#125;</code></p>
</li>
<li><p><span class="exturl" data-url="aHR0cHM6Ly9saWRlbXktaHR0cC1jaGFsbGVuZ2UuaGVyb2t1YXBwLmNvbS9sdjY/dG9rZW49JTdCQ0hJQ0tFTkNVVExFVCU3RCZhbXA7dXNlcm5hbWU9YWRtaW4mYW1wO2VtYWlsPWxpYkBsaWRlbXkuY29t">https://lidemy-http-challenge.herokuapp.com/lv6?token={CHICKENCUTLET}&amp;username=admin&amp;email=lib@lidemy.com<i class="fa fa-external-link-alt"></i></span></p>
</li>
<li><p><span class="exturl" data-url="aHR0cHM6Ly9saWRlbXktaHR0cC1jaGFsbGVuZ2UuaGVyb2t1YXBwLmNvbS9sdjc/dG9rZW49JTdCU0VDdXJpdHlJc0ltUE9SVGFudCU3RA==">https://lidemy-http-challenge.herokuapp.com/lv7?token={SECurityIsImPORTant}<i class="fa fa-external-link-alt"></i></span></p>
</li>
</ul>
<h3 id="Lv7"><a href="#Lv7" class="headerlink" title="Lv7"></a>Lv7</h3><ul>
<li>和 Lv5 類似。了解如何透過 DELETE 刪除書籍，但要在 Header 多加上身分驗證。</li>
</ul>
<pre class="line-numbers language-js" data-language="js"><code class="language-js">method<span class="token operator">:</span> <span class="token string">'DELETE'</span><span class="token punctuation">,</span>
url<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">https://lidemy-http-challenge.herokuapp.com/api/v2/books/89</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>
headers<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
  <span class="token string">'Authorization'</span><span class="token operator">:</span> <span class="token string">'Basic YWRtaW46YWRtaW4xMjM='</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>得到回應為：<code>&#123; message: &#39;\n希望下一次進這本書的時候不會再被偷走了。下一關的 token 為 &#123;HsifnAerok&#125;\n&#39; &#125;</code></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9saWRlbXktaHR0cC1jaGFsbGVuZ2UuaGVyb2t1YXBwLmNvbS9sdjg/dG9rZW49JTdCSHNpZm5BZXJvayU3RA==">https://lidemy-http-challenge.herokuapp.com/lv8?token={HsifnAerok}<i class="fa fa-external-link-alt"></i></span></li>
</ul>
<h3 id="Lv8"><a href="#Lv8" class="headerlink" title="Lv8"></a>Lv8</h3><ul>
<li>了解如何透過 GET 查詢書籍，再以 PATCH 更改書籍資訊。</li>
</ul>
<pre class="line-numbers language-js" data-language="js"><code class="language-js">method<span class="token operator">:</span> <span class="token string">'GET'</span><span class="token punctuation">,</span>
url<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">https://lidemy-http-challenge.herokuapp.com/api/v2/books</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>
headers<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
  <span class="token string">'Authorization'</span><span class="token operator">:</span> <span class="token string">'Basic YWRtaW46YWRtaW4xMjM='</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li><p>找到與目標相符的資料：<code>&#123;id: 72, name: &#39;日日好日：茶道教我的幸福15味【電影書腰版】&#39;, author: &#39;森下典子&#39;, ISBN: &#39;9981835427&#39;&#125;,</code>，一開始還沒看清楚作者名字是四個字，幸好最後檢查有發現到！</p>
</li>
<li><p>把 ISBN 最後一碼改成 3，和 Lv3 使用的 POST 一樣要在 Header 加上 content type：</p>
</li>
</ul>
<pre class="line-numbers language-js" data-language="js"><code class="language-js">method<span class="token operator">:</span> <span class="token string">'PATCH'</span><span class="token punctuation">,</span>
url<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">https://lidemy-http-challenge.herokuapp.com/api/v2/books/72</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>
headers<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
  <span class="token string">'Authorization'</span><span class="token operator">:</span> <span class="token string">'Basic YWRtaW46YWRtaW4xMjM='</span><span class="token punctuation">,</span>
  <span class="token string">'content-type'</span><span class="token operator">:</span> <span class="token string">'application/x-www-form-urlencoded'</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
form<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
  name<span class="token operator">:</span> <span class="token string">'日日好日：茶道教我的幸福15味【電影書腰版】'</span><span class="token punctuation">,</span>
  <span class="token constant">ISBN</span><span class="token operator">:</span> <span class="token string">'9981835423'</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>得到回應為：<code>&#123; message: &#39;\n希望之後他們能引進語音輸入系統，我就只要講講話就好。下一關的 token 為 &#123;NeuN&#125;\n&#39; &#125;</code></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9saWRlbXktaHR0cC1jaGFsbGVuZ2UuaGVyb2t1YXBwLmNvbS9sdjk/dG9rZW49JTdCTmV1TiU3RA==">https://lidemy-http-challenge.herokuapp.com/lv9?token={NeuN}<i class="fa fa-external-link-alt"></i></span></li>
</ul>
<h3 id="Lv9"><a href="#Lv9" class="headerlink" title="Lv9"></a>Lv9</h3><ul>
<li>了解如何在 Header 帶上參數 <code>X-Library-Number</code> 和 <code>User-Agent</code>。想到在 Request 補充影片剛好就有提到 <code>User-Agent</code> 的用途，查到了這篇文章：<span class="exturl" data-url="aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC8yODA4NjI1Mg==">談談UserAgent 字符串的規律和偽造方法<i class="fa fa-external-link-alt"></i></span>。</li>
</ul>
<pre class="line-numbers language-js" data-language="js"><code class="language-js">method<span class="token operator">:</span> <span class="token string">'GET'</span><span class="token punctuation">,</span>
url<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">https://lidemy-http-challenge.herokuapp.com/api/v2/sys_info</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>
headers<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
  <span class="token string">'Authorization'</span><span class="token operator">:</span> <span class="token string">'Basic YWRtaW46YWRtaW4xMjM='</span><span class="token punctuation">,</span>
  <span class="token string">'User-Agent'</span><span class="token operator">:</span><span class="token string">'MSIE 6.0'</span><span class="token punctuation">,</span>
  <span class="token string">'X-Library-Number'</span><span class="token operator">:</span> <span class="token string">'20'</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>得到回傳值：</li>
</ul>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token punctuation">&#123;</span>
  message<span class="token operator">:</span> <span class="token string">'success'</span><span class="token punctuation">,</span>
  version<span class="token operator">:</span> <span class="token string">'1A4938Jl7'</span><span class="token punctuation">,</span>
  owner<span class="token operator">:</span> <span class="token string">'lib'</span><span class="token punctuation">,</span>
  createdAt<span class="token operator">:</span> <span class="token string">'121290329301'</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li><p>把 version 的值放到 query string：<span class="exturl" data-url="aHR0cHM6Ly9saWRlbXktaHR0cC1jaGFsbGVuZ2UuaGVyb2t1YXBwLmNvbS9sdjk/dG9rZW49JTdCTmV1TiU3RCZhbXA7dmVyc2lvbj0xQTQ5MzhKbDc=">https://lidemy-http-challenge.herokuapp.com/lv9?token={NeuN}&amp;version=1A4938Jl7<i class="fa fa-external-link-alt"></i></span></p>
</li>
<li><p><span class="exturl" data-url="aHR0cHM6Ly9saWRlbXktaHR0cC1jaGFsbGVuZ2UuaGVyb2t1YXBwLmNvbS9sdjEwP3Rva2VuPSU3QmR1WkRzRzN0dm9BJTdE">https://lidemy-http-challenge.herokuapp.com/lv10?token={duZDsG3tvoA}<i class="fa fa-external-link-alt"></i></span></p>
</li>
</ul>
<h3 id="Lv10"><a href="#Lv10" class="headerlink" title="Lv10"></a>Lv10</h3><ul>
<li><p>了解如何把數字放在 query string，並且用 num 當作 key 傳入，藉由回傳值判斷是否為目標數字。</p>
</li>
<li><p><span class="exturl" data-url="aHR0cHM6Ly9saWRlbXktaHR0cC1jaGFsbGVuZ2UuaGVyb2t1YXBwLmNvbS9sdjEwP3Rva2VuPSU3QmR1WkRzRzN0dm9BJTdEJmFtcDtudW09OTYxMw==">https://lidemy-http-challenge.herokuapp.com/lv10?token={duZDsG3tvoA}&amp;num=9613<i class="fa fa-external-link-alt"></i></span></p>
</li>
<li><p>這題還蠻快就猜到答案了，自己都有點嚇到XD 想說先判斷出四個對的數字之後再調整位置，能夠迅速解開真是太開心了！</p>
</li>
</ul>
]]></content>
      <categories>
        <category>lidemy</category>
      </categories>
      <tags>
        <tag>lidemy</tag>
      </tags>
  </entry>
  <entry>
    <title>[week 13] 前端工具之二 - CSS 預處理器、Babel</title>
    <url>/sass-babel/</url>
    <content><![CDATA[<blockquote>
<p>本篇為 <span class="exturl" data-url="aHR0cHM6Ly9saWRlbXkuY29tL3AvZmUyMDE=">[FE201] 前端中階：那些前端會用到的工具們<i class="fa fa-external-link-alt"></i></span> 這門課程的學習筆記。如有錯誤歡迎指正。</p>
</blockquote>
<span id="more"></span>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在使用新工具之前，大致會依照下列步驟：</p>
<ol>
<li>安裝工具</li>
<li>閱讀官方文件</li>
<li>更改設定檔</li>
</ol>
<hr>
<h2 id="SASS：CSS-預處理器"><a href="#SASS：CSS-預處理器" class="headerlink" title="SASS：CSS 預處理器"></a>SASS：CSS 預處理器</h2><p>在進入 CSS 預處理器之前，先談談 CSS 在開發上可能遇到哪些問題：</p>
<ul>
<li>全域會互相干擾<ul>
<li>例如：在 index.html 同時引入 main.css 和 normalize.css 可能會互相干擾，不易進行 debug 與維護</li>
</ul>
</li>
<li>沒有變數<ul>
<li>現在有 CSS Variable</li>
</ul>
</li>
<li>沒有辦法組合</li>
</ul>
<p>因此 CSS 預處理器就誕生了，讓我們能夠以寫程式的方式處理樣式，方便進行維護。</p>
<p><img src="https://i.imgur.com/p8sM9vr.png"></p>
<h3 id="什麼是-SASS？"><a href="#什麼是-SASS？" class="headerlink" title="什麼是 SASS？"></a>什麼是 SASS？</h3><h4 id="SASS（Syntactically-Awesome-Stylesheets）-SCSS"><a href="#SASS（Syntactically-Awesome-Stylesheets）-SCSS" class="headerlink" title="SASS（Syntactically Awesome Stylesheets）/ SCSS"></a><span class="exturl" data-url="aHR0cHM6Ly9zYXNzLWxhbmcuY29tL2luc3RhbGw=">SASS（Syntactically Awesome Stylesheets）/ SCSS<i class="fa fa-external-link-alt"></i></span></h4><ul>
<li>是 CSS 預處理器，能更有結構撰寫程式碼，方便後續維護</li>
<li>適合大型專案使用</li>
<li>SASS 無大括號；SCSS 有，因此後者和 CSS 相容</li>
<li>CSS 預處理器需另外編譯成 CSS，瀏覽器才能看得懂<blockquote>
<p>【註】<span class="exturl" data-url="aHR0cHM6Ly93d3cuc2FzLmNvbS96aF90dy9ob21lLmh0bWw=">SAS（Statistical Analysis System） / SPSS<i class="fa fa-external-link-alt"></i></span>：統計分析系統，用來進行數據分析的軟體</p>
</blockquote>
</li>
</ul>
<h3 id="SASS-提供的功能"><a href="#SASS-提供的功能" class="headerlink" title="SASS 提供的功能"></a>SASS 提供的功能</h3><ul>
<li>參數與結構化 CSS<ul>
<li>Nesting：巢狀語法</li>
<li>Variables：變數設定</li>
</ul>
</li>
<li>模組化 CSS<ul>
<li>Import</li>
<li>Extend</li>
<li>Mixin</li>
<li>Functions</li>
</ul>
</li>
<li>自動化 CSS<ul>
<li>Condition</li>
<li>Loop</li>
</ul>
</li>
</ul>
<h3 id="相關語法"><a href="#相關語法" class="headerlink" title="相關語法"></a>相關語法</h3><ul>
<li>安裝 Sass</li>
</ul>
<p><code>npm install -g sass</code>：<code>-g</code> 表示在全域安裝</p>
<ul>
<li>一次性編譯</li>
</ul>
<p><code>sass main.sass main.css</code>：將 main.sass 檔編譯成 main.css</p>
<ul>
<li>watch 模式</li>
</ul>
<p><code>sass --watch main.sass main.css</code>：每次存檔均會自動進行編譯</p>
<ul>
<li>壓縮功能</li>
</ul>
<p><code>sass --style=compressed mais.sass main.css</code>：通常是在開發最後才會執行</p>
<h2 id="Sass-實作補充"><a href="#Sass-實作補充" class="headerlink" title="Sass 實作補充"></a>Sass 實作補充</h2><p>main.css 通常由下列要素組成：</p>
<ol>
<li>utils：整理出常用的 variables（背景顏色等）和 mixins（垂直至中、對齊等樣式功能）</li>
<li>Components：整理跨頁元件</li>
<li>Layouts：獨立的大元件</li>
<li>Pages</li>
<li>其他樣式：themes（dark mode）、vendors（bootstrap css）</li>
</ol>
<h3 id="巢狀與變數"><a href="#巢狀與變數" class="headerlink" title="巢狀與變數"></a>巢狀與變數</h3><ol>
<li>巢狀語法：注意 <code>&amp;</code> 前的空格</li>
</ol>
<pre class="line-numbers language-sass" data-language="sass"><code class="language-sass"><span class="token selector">.section</span>
<span class="token property-line">  <span class="token property">width</span><span class="token punctuation">:</span> 100<span class="token operator">%</span></span>
<span class="token property-line">  <span class="token property">height</span><span class="token punctuation">:</span> 50<span class="token operator">%</span></span>
<span class="token property-line">  <span class="token property">border-bottom</span><span class="token punctuation">:</span> 1px solid #000</span>
<span class="token property-line">  <span class="token property">padding</span><span class="token punctuation">:</span> 2rem</span>
  <span class="token selector">&amp;__title</span>
<span class="token property-line">    <span class="token property">text-align</span><span class="token punctuation">:</span> center</span>
  <span class="token selector">&amp;__wrapper</span>
<span class="token property-line">    <span class="token property">display</span><span class="token punctuation">:</span> flex</span>
<span class="token property-line">    <span class="token property">justify-content</span><span class="token punctuation">:</span> center</span>
<span class="token property-line">    <span class="token property">align-items</span><span class="token punctuation">:</span> center</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>編譯結果：</p>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.section</span> <span class="token punctuation">&#123;</span>
  <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>
  <span class="token property">height</span><span class="token punctuation">:</span> 50%<span class="token punctuation">;</span>
  <span class="token property">border-bottom</span><span class="token punctuation">:</span> 1px solid #000<span class="token punctuation">;</span>
  <span class="token property">padding</span><span class="token punctuation">:</span> 2rem<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token selector">.section__title</span> <span class="token punctuation">&#123;</span>
  <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token selector">.section__wrapper</span> <span class="token punctuation">&#123;</span>
  <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>
  <span class="token property">justify-content</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>
  <span class="token property">align-items</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">/*# sourceMappingURL=main.css.map */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ol start="2">
<li>變數設定：使用 <code>$</code> 來命名</li>
</ol>
<pre class="line-numbers language-sass" data-language="sass"><code class="language-sass"><span class="token variable-line"><span class="token variable">$primary</span><span class="token punctuation">:</span> #0047AB</span>
<span class="token variable-line"><span class="token variable">$secondary</span><span class="token punctuation">:</span> #4D80E6</span>
<span class="token variable-line"><span class="token variable">$warning</span><span class="token punctuation">:</span> #CD5C5C</span>
<span class="token variable-line"><span class="token variable">$text</span><span class="token punctuation">:</span>#CCCCFF</span>
<span class="token variable-line"><span class="token variable">$background</span><span class="token punctuation">:</span> #eeeeee</span>

<span class="token selector">.color</span>
<span class="token property-line">  <span class="token property">width</span><span class="token punctuation">:</span> 50px</span>
<span class="token property-line">  <span class="token property">height</span><span class="token punctuation">:</span> 50px</span>
<span class="token property-line">  <span class="token property">margin</span><span class="token punctuation">:</span> 10px</span>
<span class="token property-line">  <span class="token property">background</span><span class="token punctuation">:</span> #000</span>
  <span class="token selector">&amp;-primary</span>
<span class="token property-line">    <span class="token property">background</span><span class="token punctuation">:</span> <span class="token variable">$primary</span></span>
  <span class="token selector">&amp;-secondary</span>
<span class="token property-line">    <span class="token property">background</span><span class="token punctuation">:</span> <span class="token variable">$secondary</span></span>
  <span class="token selector">&amp;-warning</span>
<span class="token property-line">    <span class="token property">background</span><span class="token punctuation">:</span> <span class="token variable">$warning</span></span>
  <span class="token selector">&amp;-text</span>
<span class="token property-line">    <span class="token property">background</span><span class="token punctuation">:</span> <span class="token variable">$text</span></span>
  <span class="token selector">&amp;-background</span>
<span class="token property-line">    <span class="token property">background</span><span class="token punctuation">:</span> <span class="token variable">$background</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>編譯結果：</p>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.color</span> <span class="token punctuation">&#123;</span>
  <span class="token property">width</span><span class="token punctuation">:</span> 50px<span class="token punctuation">;</span>
  <span class="token property">height</span><span class="token punctuation">:</span> 50px<span class="token punctuation">;</span>
  <span class="token property">margin</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span>
  <span class="token property">background</span><span class="token punctuation">:</span> #000<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token selector">.color-primary</span> <span class="token punctuation">&#123;</span>
  <span class="token property">background</span><span class="token punctuation">:</span> #0047AB<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token selector">.color-secondary</span> <span class="token punctuation">&#123;</span>
  <span class="token property">background</span><span class="token punctuation">:</span> #4D80E6<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token selector">.color-warning</span> <span class="token punctuation">&#123;</span>
  <span class="token property">background</span><span class="token punctuation">:</span> #CD5C5C<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token selector">.color-text</span> <span class="token punctuation">&#123;</span>
  <span class="token property">background</span><span class="token punctuation">:</span> #CCCCFF<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token selector">.color-background</span> <span class="token punctuation">&#123;</span>
  <span class="token property">background</span><span class="token punctuation">:</span> #eeeeee<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">/*# sourceMappingURL=main.css.map */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="模組化-CSS"><a href="#模組化-CSS" class="headerlink" title="模組化 CSS"></a>模組化 CSS</h3><h4 id="import：引入檔案，用來分別進行管理"><a href="#import：引入檔案，用來分別進行管理" class="headerlink" title="@import：引入檔案，用來分別進行管理"></a><code>@import</code>：引入檔案，用來分別進行管理</h4><ul>
<li>例如：將變數放到 <code>_variables.sass</code> 統一管理，然後在 <code>main.sass</code> 加上 <code>@import _variables.sass</code> 即可引入檔案</li>
</ul>
<h4 id="export：繼承，處理共同樣式"><a href="#export：繼承，處理共同樣式" class="headerlink" title="export：繼承，處理共同樣式"></a><code>export</code>：繼承，處理共同樣式</h4><ul>
<li>使用時機：可將所有相同樣式的內容合併，減少重複的行為</li>
<li>例如：<code>&lt;a&gt;</code> 統一去除底線、制定 template<pre class="line-numbers language-sass" data-language="sass"><code class="language-sass"><span class="token selector">%btn</span>
<span class="token property-line">  <span class="token property">padding</span><span class="token punctuation">:</span> 1rem 2rem</span>
<span class="token property-line">  <span class="token property">color</span><span class="token punctuation">:</span> <span class="token variable">$background</span></span>
<span class="token property-line">  <span class="token property">font-size</span><span class="token punctuation">:</span> 1rem</span>
<span class="token property-line">  <span class="token property">margin</span><span class="token punctuation">:</span> 1rem</span>
<span class="token property-line">  <span class="token property">transition</span><span class="token punctuation">:</span> .1s</span>

<span class="token selector">.btn</span>
  <span class="token selector">&amp;-primary</span>
<span class="token atrule-line">    <span class="token atrule">@extend</span> %btn</span>
  <span class="token selector">&amp;-secondary</span>
<span class="token atrule-line">    <span class="token atrule">@extend</span> %btn</span>
  <span class="token selector">&amp;-waring</span>
<span class="token atrule-line">    <span class="token atrule">@extend</span> %btn</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

</li>
</ul>
<p>編譯結果：</p>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.btn-waring, .btn-secondary, .btn-primary</span> <span class="token punctuation">&#123;</span>
  <span class="token property">padding</span><span class="token punctuation">:</span> 1rem 2rem<span class="token punctuation">;</span>
  <span class="token property">color</span><span class="token punctuation">:</span> #eeeeee<span class="token punctuation">;</span>
  <span class="token property">font-size</span><span class="token punctuation">:</span> 1rem<span class="token punctuation">;</span>
  <span class="token property">margin</span><span class="token punctuation">:</span> 1rem<span class="token punctuation">;</span>
  <span class="token property">transition</span><span class="token punctuation">:</span> 0.1s<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="mixin：打包常用功能，替換局部變數"><a href="#mixin：打包常用功能，替換局部變數" class="headerlink" title="mixin：打包常用功能，替換局部變數"></a><code>mixin</code>：打包常用功能，替換局部變數</h4><ul>
<li>使用時機：用於需重複使用到的屬性，且可帶入變數，以進行微調</li>
<li>例如：width、height、flex-center 等</li>
</ul>
<pre class="line-numbers language-sass" data-language="sass"><code class="language-sass"><span class="token atrule-line"><span class="token atrule">@mixin</span> btn</span>
<span class="token property-line">  <span class="token property">padding</span><span class="token punctuation">:</span> 1rem 2rem</span>
<span class="token property-line">  <span class="token property">color</span><span class="token punctuation">:</span> <span class="token variable">$background</span></span>
<span class="token property-line">  <span class="token property">font-size</span><span class="token punctuation">:</span> 1rem</span>
<span class="token property-line">  <span class="token property">margin</span><span class="token punctuation">:</span> 1rem</span>
<span class="token property-line">  <span class="token property">transition</span><span class="token punctuation">:</span> .1s</span>

<span class="token selector">.btn</span>
  <span class="token selector">&amp;-primary</span>
<span class="token atrule-line">    <span class="token atrule">+</span>btn</span>
  <span class="token selector">&amp;-secondary</span>
<span class="token atrule-line">    <span class="token atrule">+</span>btn</span>
  <span class="token selector">&amp;-waring</span>
<span class="token atrule-line">    <span class="token atrule">+</span>btn</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>編譯結果：</p>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.btn-primary</span> <span class="token punctuation">&#123;</span>
  <span class="token property">padding</span><span class="token punctuation">:</span> 1rem 2rem<span class="token punctuation">;</span>
  <span class="token property">color</span><span class="token punctuation">:</span> #eeeeee<span class="token punctuation">;</span>
  <span class="token property">font-size</span><span class="token punctuation">:</span> 1rem<span class="token punctuation">;</span>
  <span class="token property">margin</span><span class="token punctuation">:</span> 1rem<span class="token punctuation">;</span>
  <span class="token property">transition</span><span class="token punctuation">:</span> 0.1s<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token selector">.btn-secondary</span> <span class="token punctuation">&#123;</span>
  <span class="token property">padding</span><span class="token punctuation">:</span> 1rem 2rem<span class="token punctuation">;</span>
  <span class="token property">color</span><span class="token punctuation">:</span> #eeeeee<span class="token punctuation">;</span>
  <span class="token property">font-size</span><span class="token punctuation">:</span> 1rem<span class="token punctuation">;</span>
  <span class="token property">margin</span><span class="token punctuation">:</span> 1rem<span class="token punctuation">;</span>
  <span class="token property">transition</span><span class="token punctuation">:</span> 0.1s<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token selector">.btn-waring</span> <span class="token punctuation">&#123;</span>
  <span class="token property">padding</span><span class="token punctuation">:</span> 1rem 2rem<span class="token punctuation">;</span>
  <span class="token property">color</span><span class="token punctuation">:</span> #eeeeee<span class="token punctuation">;</span>
  <span class="token property">font-size</span><span class="token punctuation">:</span> 1rem<span class="token punctuation">;</span>
  <span class="token property">margin</span><span class="token punctuation">:</span> 1rem<span class="token punctuation">;</span>
  <span class="token property">transition</span><span class="token punctuation">:</span> 0.1s<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="function：可回傳數值，搭配變數和-mixin-使用"><a href="#function：可回傳數值，搭配變數和-mixin-使用" class="headerlink" title="function：可回傳數值，搭配變數和 mixin 使用"></a><code>function</code>：可回傳數值，搭配變數和 mixin 使用</h4><ul>
<li>與 <code>@mixin</code> 的不同之處，在於 <code>@function</code> 只會回傳一個值，而 <code>@mixin</code> 是回傳一段CSS程式碼</li>
</ul>
<h3 id="Sass-自動化"><a href="#Sass-自動化" class="headerlink" title="Sass 自動化"></a>Sass 自動化</h3><h4 id="loop-迴圈"><a href="#loop-迴圈" class="headerlink" title="loop 迴圈"></a>loop 迴圈</h4><ul>
<li>使用 <code>@each</code> 搭配 array<ul>
<li>以逗號表示 <code>center, start, end</code></li>
</ul>
</li>
</ul>
<pre class="line-numbers language-sass" data-language="sass"><code class="language-sass"><span class="token variable-line"><span class="token variable">$direction-typs</span><span class="token punctuation">:</span> center, start, end</span>

<span class="token atrule-line"><span class="token atrule">@each</span> $type in $direction-typs</span>
  <span class="token selector">.flex-#&#123;$type&#125;</span>
<span class="token property-line">    <span class="token property">display</span><span class="token punctuation">:</span> flex</span>
<span class="token property-line">    <span class="token property">justify-content</span><span class="token punctuation">:</span> <span class="token variable">$type</span></span>
<span class="token property-line">    <span class="token property">align-items</span><span class="token punctuation">:</span> center</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>編譯結果：</p>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.flex-center</span> <span class="token punctuation">&#123;</span>
  <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>
  <span class="token property">justify-content</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>
  <span class="token property">align-items</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token selector">.flex-start</span> <span class="token punctuation">&#123;</span>
  <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>
  <span class="token property">justify-content</span><span class="token punctuation">:</span> start<span class="token punctuation">;</span>
  <span class="token property">align-items</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token selector">.flex-end</span> <span class="token punctuation">&#123;</span>
  <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>
  <span class="token property">justify-content</span><span class="token punctuation">:</span> end<span class="token punctuation">;</span>
  <span class="token property">align-items</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>使用 <code>@each</code> 搭配 map<ul>
<li>在括號以 <code>參數:值</code> 表示 <code>(center: center, start: flex-start, end: flex-end)</code></li>
</ul>
</li>
</ul>
<pre class="line-numbers language-sass" data-language="sass"><code class="language-sass"><span class="token variable-line"><span class="token variable">$direction-typs</span><span class="token punctuation">:</span> (center<span class="token punctuation">:</span> center, start<span class="token punctuation">:</span> flex-start, end<span class="token punctuation">:</span> flex-end)</span>

<span class="token atrule-line"><span class="token atrule">@each</span> $type, $value in $direction-typs</span>
  <span class="token selector">.flex-#&#123;$type&#125;</span>
<span class="token property-line">    <span class="token property">display</span><span class="token punctuation">:</span> flex</span>
<span class="token property-line">    <span class="token property">justify-content</span><span class="token punctuation">:</span> <span class="token variable">$value</span></span>
<span class="token property-line">    <span class="token property">align-items</span><span class="token punctuation">:</span> center</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>編譯結果：</p>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.flex-center</span> <span class="token punctuation">&#123;</span>
  <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>
  <span class="token property">justify-content</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>
  <span class="token property">align-items</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token selector">.flex-start</span> <span class="token punctuation">&#123;</span>
  <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>
  <span class="token property">justify-content</span><span class="token punctuation">:</span> flex-start<span class="token punctuation">;</span>
  <span class="token property">align-items</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token selector">.flex-end</span> <span class="token punctuation">&#123;</span>
  <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>
  <span class="token property">justify-content</span><span class="token punctuation">:</span> flex-end<span class="token punctuation">;</span>
  <span class="token property">align-items</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>for 迴圈<ul>
<li>使用時機：用於預先設定，或特效網站需產生密集大小值<pre class="line-numbers language-sass" data-language="sass"><code class="language-sass"><span class="token atrule-line"><span class="token atrule">@for</span> $i from 0 through 5</span>
    <span class="token selector">.h#&#123;5 - $i + 1&#125;</span>
<span class="token property-line">        <span class="token property">font-size</span><span class="token punctuation">:</span> 1 <span class="token operator">+</span> 0.2rem <span class="token operator">*</span> <span class="token variable">$i</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

</li>
</ul>
</li>
</ul>
<p>編譯結果：</p>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.h6</span> <span class="token punctuation">&#123;</span>
  <span class="token property">font-size</span><span class="token punctuation">:</span> 1rem<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token selector">.h5</span> <span class="token punctuation">&#123;</span>
  <span class="token property">font-size</span><span class="token punctuation">:</span> 1.2rem<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token selector">.h4</span> <span class="token punctuation">&#123;</span>
  <span class="token property">font-size</span><span class="token punctuation">:</span> 1.4rem<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token selector">.h3</span> <span class="token punctuation">&#123;</span>
  <span class="token property">font-size</span><span class="token punctuation">:</span> 1.6rem<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token selector">.h2</span> <span class="token punctuation">&#123;</span>
  <span class="token property">font-size</span><span class="token punctuation">:</span> 1.8rem<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token selector">.h1</span> <span class="token punctuation">&#123;</span>
  <span class="token property">font-size</span><span class="token punctuation">:</span> 2rem<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="condition"><a href="#condition" class="headerlink" title="condition"></a>condition</h4><p>有關 Flow Control 可參考<span class="exturl" data-url="aHR0cHM6Ly9zYXNzLWxhbmcuY29tL2RvY3VtZW50YXRpb24vYXQtcnVsZXMvY29udHJvbC9mb3I=">官方文件<i class="fa fa-external-link-alt"></i></span>。</p>
<p>參考資料：</p>
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly90dy5hbHBoYWNhbXAuY28vYmxvZy9jc3MtcHJlcHJvY2Vzc29yLXNhc3Mtc2Nzcw==">Sass/SCSS 基本語法介紹，搞懂CSS 預處理器<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cDovL3d3dy5lYmFvbW9udGhseS5jb20vd2luZG93L3Bob3RvL2xlc3Nvbi9jb2xvckxpc3QuaHRt">常用色彩表<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9pY2d1YW55dS5naXRodWIuaW8vc2Nzcy9zY3NzXzIv">SCSS 筆記(2) - extend、mixin、function<i class="fa fa-external-link-alt"></i></span></li>
</ul>
<h3 id="重構檔案流程"><a href="#重構檔案流程" class="headerlink" title="重構檔案流程"></a>重構檔案流程</h3><ul>
<li>步驟一：將重複的部分用巢狀方式撰寫</li>
<li>步驟二：將顏色、字體大小，統一使用變數命名 <code>_variables.sass</code></li>
<li>步驟三：抽檔案，把重複的區塊放到 <code>_components.sass</code></li>
<li>步驟四：將分出的區塊以 <code>@import</code> 引入，完成後將所有檔案打包</li>
</ul>
<hr>
<h2 id="BABEL：JS-轉譯器"><a href="#BABEL：JS-轉譯器" class="headerlink" title="BABEL：JS 轉譯器"></a>BABEL：JS 轉譯器</h2><p><span class="exturl" data-url="aHR0cHM6Ly9iYWJlbGpzLmlvLw==">BABEL<i class="fa fa-external-link-alt"></i></span> 是 JavaScript 轉譯器，可將 ES6+ 程式碼轉為等效的 ES5 程式碼。</p>
<p>參考資料：<span class="exturl" data-url="aHR0cHM6Ly9taWNoYWVsY2hlbi50ZWNoL2phdmFzY3JpcHQtcHJvZ3JhbW1pbmcvYmFiZWwv">利用 Babel 支援現代 JavaScript 的特性<i class="fa fa-external-link-alt"></i></span></p>
]]></content>
      <categories>
        <category>Front-End</category>
        <category>HTML &amp; CSS</category>
      </categories>
      <tags>
        <tag>Front-End</tag>
        <tag>CSS</tag>
        <tag>Babel</tag>
      </tags>
  </entry>
  <entry>
    <title>Sass/SCSS 入門：變數、巢狀、混入、繼承</title>
    <url>/sass-css-preprocessor/</url>
    <content><![CDATA[<p>其實過去在 Lidemy 課程中，也有提過 CSS 預處理器的觀念：<span class="exturl" data-url="aHR0cHM6Ly9oYWNrbWQuaW8vQEhlaWRpLUxpdS9ub3RlLWZlMjAxLXNhc3MtYW5kLWJhYmVs">[week 13] 前端工具之二 - CSS 預處理器、Babel<i class="fa fa-external-link-alt"></i></span>，因為工作上需要使用，發現自己對語法還是不太熟悉，於是整理了這篇筆記。瞭解這套工具的由來，基本語法的使用，以及如何幫助我們解決前端開發可能遇到的問題。</p>
<span id="more"></span>

<h2 id="What-is-CSS-預處理器？"><a href="#What-is-CSS-預處理器？" class="headerlink" title="What is CSS 預處理器？"></a>What is CSS 預處理器？</h2><p>我們所熟知的 CSS，是用來撰寫網頁樣式的語言，但隨著網頁開發複雜度提高，尤其是大型專案，在開發時也面臨許多問題：</p>
<ul>
<li>全域樣式會互相干擾，不易進行 debug，可維護性差</li>
<li>重複撰寫相同樣式，程式碼不易閱讀</li>
</ul>
<p>為了解決這些問題，CSS 預處理器（CSS Preprocessor）就誕生了！透過將程式模組化的概念，新增了變數、巢狀結構、混入、繼承等寫法，作為 CSS 語法的擴充，用以改善程式碼的結構與可維護性。</p>
<p>現今較為主流的 CSS 預處理器有下列三種，均賦予 CSS 動態語言的特性：</p>
<ul>
<li>Sass/SCSS：最廣為開發者使用</li>
<li>Less：原先是基於 Ruby 開發，後來改用 Node.js 為基底實作</li>
<li>Stylus：基於 Node.js 開發</li>
</ul>
<p>而本篇所探討的 Sass/SCSS，主要包含兩種寫法，分別是：</p>
<ul>
<li>舊版的 SASS<ul>
<li>縮排語法，副檔名 .sass</li>
<li>使用縮排方式編輯巢狀關係</li>
</ul>
</li>
</ul>
<pre class="line-numbers language-sass" data-language="sass"><code class="language-sass"><span class="token selector">.nav </span>
<span class="token property-line">  <span class="token property">background</span><span class="token punctuation">:</span> #eee</span>
  <span class="token selector">li </span>
<span class="token property-line">    <span class="token property">display</span><span class="token punctuation">:</span> inline-block</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>新版的 SCSS<ul>
<li>塊語法，副檔名 .scss</li>
<li>使用大括號區分選擇器，使用分號區分屬性，較貼近原生 CSS</li>
</ul>
</li>
</ul>
<pre class="line-numbers language-scss" data-language="scss"><code class="language-scss"><span class="token selector">.nav </span><span class="token punctuation">&#123;</span>
  <span class="token property">background</span><span class="token punctuation">:</span> #eee<span class="token punctuation">;</span>
  <span class="token selector">li </span><span class="token punctuation">&#123;</span>
    <span class="token property">display</span><span class="token punctuation">:</span> inline-block<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>將上述範例程式碼，經編譯過的 CSS 寫法如下：</p>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.nav</span> <span class="token punctuation">&#123;</span>
  <span class="token property">background</span><span class="token punctuation">:</span> #eee<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token selector">.nav li</span> <span class="token punctuation">&#123;</span>
  <span class="token property">display</span><span class="token punctuation">:</span> inline-block<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>需注意不管使用哪種 CSS 預處理器，程式碼都必須先編譯（compiled）成 CSS 的形式，才能讓瀏覽器解讀並呈現出畫面。</p>
<h2 id="Sass-SCSS-基本語法"><a href="#Sass-SCSS-基本語法" class="headerlink" title="Sass/SCSS 基本語法"></a>Sass/SCSS 基本語法</h2><blockquote>
<p>詳細教程可參考 <span class="exturl" data-url="aHR0cHM6Ly9zYXNzLWxhbmcuY29tL2d1aWRl">Sass 官網<i class="fa fa-external-link-alt"></i></span>。</p>
</blockquote>
<p>Sass/SCSS 提供的功能主要如下：</p>
<ul>
<li>參數與結構化 CSS<ul>
<li>Nesting：巢狀語法</li>
<li>Variables：變數設定</li>
</ul>
</li>
<li>模組化 CSS<ul>
<li>Import 引入檔案，用來分別進行管理</li>
<li>Extend 繼承，處理共同樣式</li>
<li>Mixin 混入，打包常用功能，替換局部變數</li>
<li>Functions 函式</li>
</ul>
</li>
<li>自動化 CSS<ul>
<li>Condition 條件判斷</li>
<li>Loop 跑迴圈：例如使用 <code>@each</code> 搭配 array、<code>@each</code> 搭配 map、for 迴圈</li>
</ul>
</li>
</ul>
<h3 id="變數-Variables"><a href="#變數-Variables" class="headerlink" title="變數 Variables"></a>變數 Variables</h3><p>使用說明：以錢字號 <code>$</code> 來宣告變數，通常會寫在程式碼最上方，只要有引用該變數的地方，均可統一修改管理，常用於：按鈕顏色、字型字體大小等。</p>
<ul>
<li>編譯前 SCSS</li>
</ul>
<pre class="line-numbers language-sass" data-language="sass"><code class="language-sass"><span class="token variable-line"><span class="token variable">$font-stack</span><span class="token punctuation">:</span>  Helvetica, sans-serif;</span>
<span class="token variable-line"><span class="token variable">$primary-color</span><span class="token punctuation">:</span> #333;</span>

<span class="token selector">body &#123;</span>
<span class="token property-line">  <span class="token property">font</span><span class="token punctuation">:</span> 100<span class="token operator">%</span> <span class="token variable">$font-stack</span>;</span>
<span class="token property-line">  <span class="token property">color</span><span class="token punctuation">:</span> <span class="token variable">$primary-color</span>;</span>
<span class="token selector">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>編譯後 CSS</li>
</ul>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">body</span> <span class="token punctuation">&#123;</span>
  <span class="token property">font</span><span class="token punctuation">:</span> 100% Helvetica<span class="token punctuation">,</span> sans-serif<span class="token punctuation">;</span>
  <span class="token property">color</span><span class="token punctuation">:</span> #333<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="巢狀結構-Nesting"><a href="#巢狀結構-Nesting" class="headerlink" title="巢狀結構 Nesting"></a>巢狀結構 Nesting</h3><p>使用說明：需注意縮排寫法，可使用 <code>&amp;</code> 符號來引用父選擇器，常用於 CSS 元件狀態 <code>:hover</code>、<code>:focus</code>、<code>:before</code>、<code>:after</code> 等。</p>
<ul>
<li>編譯前 SCSS</li>
</ul>
<pre class="line-numbers language-sass" data-language="sass"><code class="language-sass"><span class="token selector">nav &#123;</span>
  <span class="token selector">ul &#123;</span>
<span class="token property-line">    <span class="token property">margin</span><span class="token punctuation">:</span> 0;</span>
<span class="token property-line">    <span class="token property">padding</span><span class="token punctuation">:</span> 0;</span>
<span class="token property-line">    <span class="token property">list-style</span><span class="token punctuation">:</span> none;</span>
  <span class="token selector">&#125;</span>

  <span class="token selector">li &#123; display: inline-block; &#125;</span>

  <span class="token selector">a &#123;</span>
<span class="token property-line">    <span class="token property">display</span><span class="token punctuation">:</span> block;</span>
<span class="token property-line">    <span class="token property">padding</span><span class="token punctuation">:</span> 6px 12px;</span>
<span class="token property-line">    <span class="token property">text-decoration</span><span class="token punctuation">:</span> none;</span>
<span class="token property-line">    <span class="token property">&amp;</span><span class="token punctuation">:</span><span class="token property">hover</span> &#123;</span>
<span class="token property-line">      <span class="token property">color</span><span class="token punctuation">:</span> red;</span>
    <span class="token selector">&#125;</span>
  <span class="token selector">&#125;</span>
<span class="token selector">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>編譯後 CSS</li>
</ul>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">nav ul</span> <span class="token punctuation">&#123;</span>
  <span class="token property">margin</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>
  <span class="token property">padding</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>
  <span class="token property">list-style</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token selector">nav li</span> <span class="token punctuation">&#123;</span>
  <span class="token property">display</span><span class="token punctuation">:</span> inline-block<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token selector">nav a</span> <span class="token punctuation">&#123;</span>
  <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span>
  <span class="token property">padding</span><span class="token punctuation">:</span> 6px 12px<span class="token punctuation">;</span>
  <span class="token property">text-decoration</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token selector">nav a:hover</span> <span class="token punctuation">&#123;</span>
  <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="混入-Mixins"><a href="#混入-Mixins" class="headerlink" title="混入 Mixins"></a>混入 Mixins</h3><p>使用說明：將經常被重複使用的程式碼獨立撰寫，以 <code>@mixin</code> 語法包裝起來，需要時透過 <code>@include</code> 引用，即可根據不同參數來設定相似的樣式，常用於 width、height、flex-center 等。</p>
<ul>
<li>編譯前 SCSS：<code>@mixin</code> 可傳入參數</li>
</ul>
<pre class="line-numbers language-sass" data-language="sass"><code class="language-sass"><span class="token comment">// 經常重複使用的樣式</span>
<span class="token atrule-line"><span class="token atrule">@mixin</span> transform($property) &#123;</span>
<span class="token property-line">  <span class="token property">-webkit-transform</span><span class="token punctuation">:</span> <span class="token variable">$property</span>;</span>
<span class="token property-line">  <span class="token property">-ms-transform</span><span class="token punctuation">:</span> <span class="token variable">$property</span>;</span>
<span class="token property-line">  <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token variable">$property</span>;</span>
<span class="token selector">&#125;</span>

<span class="token comment">// 需要套用樣式的程式碼</span>
<span class="token selector">.box &#123; </span>
<span class="token atrule-line">  <span class="token atrule">@include</span> transform(rotate(30deg));</span>
<span class="token selector">&#125;</span>
<span class="token selector">.avatar &#123; </span>
<span class="token atrule-line">  <span class="token atrule">@include</span> transform(rotate(90deg));</span>
<span class="token selector">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>編譯後 CSS：需注意可能出現大量重複的程式碼</li>
</ul>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.box</span> <span class="token punctuation">&#123;</span>
  <span class="token property">-webkit-transform</span><span class="token punctuation">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span>30deg<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token property">-ms-transform</span><span class="token punctuation">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span>30deg<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span>30deg<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token selector">.avatar</span> <span class="token punctuation">&#123;</span>
  <span class="token property">-webkit-transform</span><span class="token punctuation">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span>90deg<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token property">-ms-transform</span><span class="token punctuation">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span>90deg<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span>90deg<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="繼承-Extent-Inderitance"><a href="#繼承-Extent-Inderitance" class="headerlink" title="繼承 Extent/Inderitance"></a>繼承 Extent/Inderitance</h3><p>使用說明：當許多選擇器具有相同樣式時，可透過<code>%</code> 佔位符號宣告，將所有相同樣式內容合併，在以 <code>@extend</code> 來引入使用。</p>
<ul>
<li>編譯前 SCSS：需注意有被 <code>@extend</code> 的 class 才會被編譯成 CSS 程式碼，並且整合到共用樣式</li>
</ul>
<pre class="line-numbers language-sass" data-language="sass"><code class="language-sass"><span class="token comment">/* This CSS will print because %message-shared is extended. */</span>
<span class="token selector">%message-shared &#123;</span>
<span class="token property-line">  <span class="token property">border</span><span class="token punctuation">:</span> 1px solid #ccc;</span>
<span class="token property-line">  <span class="token property">padding</span><span class="token punctuation">:</span> 10px;</span>
<span class="token property-line">  <span class="token property">color</span><span class="token punctuation">:</span> #333;</span>
<span class="token selector">&#125;</span>

<span class="token comment">// This CSS won't print because %equal-heights is never extended.</span>
<span class="token selector">%equal-heights &#123;</span>
<span class="token property-line">  <span class="token property">display</span><span class="token punctuation">:</span> flex;</span>
<span class="token property-line">  <span class="token property">flex-wrap</span><span class="token punctuation">:</span> wrap;</span>
<span class="token selector">&#125;</span>

<span class="token selector">.message &#123;</span>
<span class="token atrule-line">  <span class="token atrule">@extend</span> %message-shared;</span>
<span class="token selector">&#125;</span>

<span class="token selector">.success &#123;</span>
<span class="token atrule-line">  <span class="token atrule">@extend</span> %message-shared;</span>
<span class="token property-line">  <span class="token property">border-color</span><span class="token punctuation">:</span> green;</span>
<span class="token selector">&#125;</span>

<span class="token selector">.error &#123;</span>
<span class="token atrule-line">  <span class="token atrule">@extend</span> %message-shared;</span>
<span class="token property-line">  <span class="token property">border-color</span><span class="token punctuation">:</span> red;</span>
<span class="token selector">&#125;</span>

<span class="token selector">.warning &#123;</span>
<span class="token atrule-line">  <span class="token atrule">@extend</span> %message-shared;</span>
<span class="token property-line">  <span class="token property">border-color</span><span class="token punctuation">:</span> yellow;</span>
<span class="token selector">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>編譯後 CSS：使用 <code>%message-shared</code> 佔位符號進行宣告的 class，並不會產生實體對象<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token comment">/* This CSS will print because %message-shared is extended. */</span>
<span class="token selector">.message, .success, .error, .warning</span> <span class="token punctuation">&#123;</span>
  <span class="token property">border</span><span class="token punctuation">:</span> 1px solid #ccc<span class="token punctuation">;</span>
  <span class="token property">padding</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span>
  <span class="token property">color</span><span class="token punctuation">:</span> #333<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token selector">.success</span> <span class="token punctuation">&#123;</span>
  <span class="token property">border-color</span><span class="token punctuation">:</span> green<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token selector">.error</span> <span class="token punctuation">&#123;</span>
  <span class="token property">border-color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token selector">.warning</span> <span class="token punctuation">&#123;</span>
  <span class="token property">border-color</span><span class="token punctuation">:</span> yellow<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

</li>
</ul>
<h3 id="比較：-mixin-和-extend-使用時機"><a href="#比較：-mixin-和-extend-使用時機" class="headerlink" title="比較：@mixin 和 @extend 使用時機"></a>比較：<code>@mixin</code> 和 <code>@extend</code> 使用時機</h3><p>使用 <code>@mixin</code> 的好處，是減少重複撰寫樣式的時間，卻也可能造成編譯後的 CSS 樣式大量重複，使檔案異常肥大。</p>
<p>這時可以改用有類似效果的 <code>@extend</code>，同樣能解決重用問題，搭配 placeholder 佔位選擇器，將目標對象進行合併而非載入。</p>
<p>而 <code>@mixin</code> 和 <code>@extend</code> 兩者的使用時機與差異，可從下列兩點來思考：</p>
<ul>
<li>是否需傳遞參數</li>
<li>是否需考慮編譯後 CSS 大小</li>
</ul>
<h3 id="模組-Modules"><a href="#模組-Modules" class="headerlink" title="模組 Modules"></a>模組 Modules</h3><p>使用說明：透過 <code>@import</code> 或 <code>@use</code> 語法，可將 SCSS 以模組化的形式，從其他 SCSS 檔案引入需要的樣式，需注意已存在的模組尚未全面支援 <code>@use</code>。</p>
<ul>
<li>編譯前 SCSS：要作為模組載入的 SCSS 檔案，名稱必須帶有底線，例如 <code>_base.scss</code>。</li>
</ul>
<pre class="line-numbers language-sass" data-language="sass"><code class="language-sass"><span class="token comment">// ./_base.scss</span>
<span class="token variable-line"><span class="token variable">$font-stack</span><span class="token punctuation">:</span>    Helvetica, sans-serif;</span>
<span class="token variable-line"><span class="token variable">$primary-color</span><span class="token punctuation">:</span> #333;</span>

<span class="token selector">body &#123;</span>
<span class="token property-line">  <span class="token property">font</span><span class="token punctuation">:</span> 100<span class="token operator">%</span> <span class="token variable">$font-stack</span>;</span>
<span class="token property-line">  <span class="token property">color</span><span class="token punctuation">:</span> <span class="token variable">$primary-color</span>;</span>
<span class="token selector">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>使用 <code>@import</code>：會全部導入樣式，有可能產生命名衝突的狀況：</p>
<pre class="line-numbers language-sass" data-language="sass"><code class="language-sass"><span class="token comment">// styles.scss</span>
<span class="token atrule-line"><span class="token atrule">@import</span> 'base';</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>使用<code>@use</code>：代表「參照」，只選擇需要的部分使用，並戴上模組名稱來呼叫，降低衝突的可能性：</p>
<pre class="line-numbers language-sass" data-language="sass"><code class="language-sass"><span class="token comment">// styles.scss</span>
<span class="token atrule-line"><span class="token atrule">@use</span> 'base';</span>

<span class="token selector">.inverse &#123;</span>
<span class="token property-line">  <span class="token property">background-color</span><span class="token punctuation">:</span> base.<span class="token variable">$primary-color</span>;</span>
<span class="token property-line">  <span class="token property">color</span><span class="token punctuation">:</span> white;</span>
<span class="token selector">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>編譯後 CSS</li>
</ul>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">body</span> <span class="token punctuation">&#123;</span>
  <span class="token property">font</span><span class="token punctuation">:</span> 100% Helvetica<span class="token punctuation">,</span> sans-serif<span class="token punctuation">;</span>
  <span class="token property">color</span><span class="token punctuation">:</span> #333<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token selector">.inverse</span> <span class="token punctuation">&#123;</span>
  <span class="token property">background-color</span><span class="token punctuation">:</span> #333<span class="token punctuation">;</span>
  <span class="token property">color</span><span class="token punctuation">:</span> white<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>


<p>參考資料：</p>
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly90dy5hbHBoYWNhbXAuY28vYmxvZy9jc3MtcHJlcHJvY2Vzc29yLXNhc3Mtc2Nzcw==">Sass/SCSS 基本語法介紹，搞懂CSS 預處理器<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9mcmFua2tub3cuY29tL3Nhc3MtdHV0b3JpYWwv">SASS教學 ＋SCSS：CSS 再進化，掌握語法攻略<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9pdGhlbHAuaXRob21lLmNvbS50dy9hcnRpY2xlcy8xMDI0MzIzNQ==">SASS/SCSS 簡介<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9hd2RyNzQxMDAuZ2l0aHViLmlvLzIwMjAtMDYtMDMtc2Nzcy1leHRlbmQv">Sass / SCSS 預處理器 - @entend 繼承樣式與 Placeholder 佔位符選擇器<i class="fa fa-external-link-alt"></i></span></li>
</ul>
]]></content>
      <categories>
        <category>Front-End</category>
        <category>HTML &amp; CSS</category>
      </categories>
      <tags>
        <tag>Front-End</tag>
        <tag>CSS</tag>
        <tag>SCSS</tag>
      </tags>
  </entry>
  <entry>
    <title>【學習筆記】 初探 Stripe：第三方金流串接</title>
    <url>/stripe-payment/</url>
    <content><![CDATA[<p><img src="https://i.imgur.com/W6kwKwA.png"></p>
<h2 id="A-Introduction"><a href="#A-Introduction" class="headerlink" title="A. Introduction"></a>A. Introduction</h2><p><span class="exturl" data-url="aHR0cHM6Ly9zdHJpcGUuY29tLw==">Stripe<i class="fa fa-external-link-alt"></i></span> 是一家線上付款服務提供商，協助個人或公司在網路上接受付款服務。</p>
<span id="more"></span>

<p>其特點主要如下：</p>
<ul>
<li>介面簡潔</li>
<li>支援站內付款（不需跳轉頁面，如：PayPal）</li>
<li>支援超過 30 種語言、135 種貨幣，包含加密貨幣</li>
<li>目前支援八種支付方式，如：信用卡、簽帳金融卡、銀行轉帳、數位錢包等</li>
</ul>
<h2 id="B-Online-Payments"><a href="#B-Online-Payments" class="headerlink" title="B. Online Payments"></a>B. Online Payments</h2><p>Stripe 提供一系列的收款服務：</p>
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9zdHJpcGUuY29tL2RvY3MvcGF5bWVudHMvcGF5bWVudC1saW5rcw==">Stripe Payment Links<i class="fa fa-external-link-alt"></i></span>：客戶可直接點擊產品的付款連結，填寫資料即完成支付</li>
<li><span class="exturl" data-url="aHR0cHM6Ly9zdHJpcGUuY29tL2RvY3MvcGF5bWVudHMvZWxlbWVudHM=">Stripe Elements<i class="fa fa-external-link-alt"></i></span>：能夠自行設計付款頁面的樣式，鑲嵌在網頁中</li>
<li><span class="exturl" data-url="aHR0cHM6Ly9zdHJpcGUuY29tL2RvY3MvcGF5bWVudHMvY2hlY2tvdXQ=">Stripe Checkout<i class="fa fa-external-link-alt"></i></span>：透過 Client SDK，直接應用 Stripe 預製的托管支付頁面</li>
<li><span class="exturl" data-url="aHR0cHM6Ly9zdHJpcGUuY29tL2RvY3MvY29ubmVjdA==">Stripe Connect<i class="fa fa-external-link-alt"></i></span>：提供更多功能，如：快速註冊、全球收款、以本地貨幣向全球付款（提現）等</li>
<li><span class="exturl" data-url="aHR0cHM6Ly9zdHJpcGUuY29tL2RvY3MvaW52b2ljaW5n">Stripe Invoicing<i class="fa fa-external-link-alt"></i></span>：能夠自訂 Stripe 賬單，直接向客戶收款</li>
<li><span class="exturl" data-url="aHR0cHM6Ly9zdHJpcGUuY29tL2RvY3MvYmlsbGluZy9zdWJzY3JpcHRpb25zL3VzYWdlLWJhc2Vk">Stripe Billing<i class="fa fa-external-link-alt"></i></span>：能夠自訂頻率和計費方式，進行定期重複的收款</li>
</ul>
<p>也可以直接使用 API 或是 SDKs，套用至自訂的 UI 介面，可參考以下文件：</p>
<ul>
<li>Stripe API：<span class="exturl" data-url="aHR0cHM6Ly9zdHJpcGUuY29tL2RvY3MvYXBp">https://stripe.com/docs/api<i class="fa fa-external-link-alt"></i></span></li>
<li>Stripe SDKs：<span class="exturl" data-url="aHR0cHM6Ly9zdHJpcGUuY29tL2RvY3MvanM=">https://stripe.com/docs/js<i class="fa fa-external-link-alt"></i></span></li>
</ul>
<p>下圖是官網列出不同服務的特點與差異：</p>
<p><img src="https://i.imgur.com/30MUaRt.png"></p>
<h2 id="C-Payment-Flow"><a href="#C-Payment-Flow" class="headerlink" title="C. Payment Flow"></a>C. Payment Flow</h2><ul>
<li>Client-side：將使用者的交易細節送至 Stripe 處理驗證，確認後會回傳一組 token（基於 <span class="exturl" data-url="aHR0cHM6Ly9zdHJpcGUuY29tL2d1aWRlcy9wY2ktY29tcGxpYW5jZQ==">PCI Compliance<i class="fa fa-external-link-alt"></i></span> 支付安全規範，開發者不會儲存任何用戶的信用卡資料）</li>
<li>Server-side：將這組 token 送至 Server 進行後續驗證流程</li>
</ul>
<p>可參考官網的 <strong><span class="exturl" data-url="aHR0cHM6Ly9zdHJpcGUuY29tL2RvY3MvcGF5bWVudHMvYWNjZXB0LWEtcGF5bWVudD9wbGF0Zm9ybT13ZWImdWk9ZWxlbWVudHMjd2ViLWNyZWF0ZS1pbnRlbnQ=">Payment Intent<i class="fa fa-external-link-alt"></i></span></strong> 流程圖：</p>
<p><img src="https://i.imgur.com/69oU2NC.png"></p>
<h2 id="D-Sample-Code"><a href="#D-Sample-Code" class="headerlink" title="D. Sample Code"></a>D. Sample Code</h2><p>以下是官網提供的 GitHub Repo 範例：</p>
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3N0cmlwZS1zYW1wbGVzL2FjY2VwdC1hLXBheW1lbnQ=">accept-a-payment<i class="fa fa-external-link-alt"></i></span>：Learn how to accept a payment from customers around the world with a variety of payment methods</li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3N0cmlwZS1zYW1wbGVzL2NoZWNrb3V0LXNpbmdsZS1zdWJzY3JpcHRpb24=">checkout-single-subscription<i class="fa fa-external-link-alt"></i></span>：Learn how to combine Checkout and Billing for fast subscription pages</li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3N0cmlwZS1zYW1wbGVzL2NoZWNrb3V0LW9uZS10aW1lLXBheW1lbnRz">checkout-one-time-payments<i class="fa fa-external-link-alt"></i></span>：Use Checkout to quickly collect one-time payments</li>
</ul>
<p>接著會簡單介紹 <span class="exturl" data-url="aHR0cHM6Ly9zdHJpcGUuY29tL2RvY3MvcGF5bWVudHMvcGF5bWVudC1saW5rcw==">Payment Links<i class="fa fa-external-link-alt"></i></span>、<span class="exturl" data-url="aHR0cHM6Ly9zdHJpcGUuY29tL2RvY3MvYmlsbGluZw==">Subscriptions<i class="fa fa-external-link-alt"></i></span>、<span class="exturl" data-url="aHR0cHM6Ly9zdHJpcGUuY29tL2RvY3MvcGF5bWVudHMvcXVpY2tzdGFydA==">Stripe Elements<i class="fa fa-external-link-alt"></i></span> 這三種付款服務：</p>
<h3 id="D-1-Payment-Links-付款連結"><a href="#D-1-Payment-Links-付款連結" class="headerlink" title="D-1. Payment Links 付款連結"></a>D-1. Payment Links 付款連結</h3><p>有兩種方式能夠建立商品的付款連結：</p>
<ul>
<li>直接在 Stripe 網站建立</li>
<li>透過程式碼</li>
</ul>
<p><strong>(1) Create Links by <span class="exturl" data-url="aHR0cHM6Ly9kYXNoYm9hcmQuc3RyaXBlLmNvbS9wYXltZW50LWxpbmtzL2NyZWF0ZS9zdGFuZGFyZC1wcmljaW5n">Payment links<i class="fa fa-external-link-alt"></i></span> page</strong></p>
<p>• 直接在線上建立商品付款頁面，可參考 DEMO For <span class="exturl" data-url="aHR0cHM6Ly9idXkuc3RyaXBlLmNvbS90ZXN0XzZvRTE2YjhxZzBiS2c5eWRRUQ==">1 month subscription<i class="fa fa-external-link-alt"></i></span></p>
<p><img src="https://i.imgur.com/JaEDpQ5.png"></p>
<p><strong>(2) Create a payment link with the <span class="exturl" data-url="aHR0cHM6Ly9zdHJpcGUuY29tL2RvY3MvcGF5bWVudHMvcGF5bWVudC1saW5rcy9hcGk=">Payment Links API<i class="fa fa-external-link-alt"></i></span></strong></p>
<ul>
<li>每次發送 API 時，均需帶上 Secret Key，可從 <strong><span class="exturl" data-url="aHR0cHM6Ly9kYXNoYm9hcmQuc3RyaXBlLmNvbS9hcGlrZXlz">Dashboard &gt; API keys<i class="fa fa-external-link-alt"></i></span></strong> 頁面取得</li>
<li>首先<span class="exturl" data-url="aHR0cHM6Ly9zdHJpcGUuY29tL2RvY3MvYXBpL3Byb2R1Y3RzL2NyZWF0ZQ==">新增商品項目<i class="fa fa-external-link-alt"></i></span>，response 會得到商品 <code>PRODUCT_ID</code></li>
</ul>
<pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">const</span> stripe <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'stripe'</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token string">'sk_test_51LcngPAAS0stR7a9fGwPc85JbiYhAxIkP0pS32PLpuy00joiHlGYEeO9NQEpyPSWnOATsSGU5LeL0tlFTegi5MbI00r1YKjzMX'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> product <span class="token operator">=</span> <span class="token keyword">await</span> stripe<span class="token punctuation">.</span>products<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
  name<span class="token operator">:</span> <span class="token string">'Gold Special'</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>制定商品價格、數量、支付方式、為一次性購買或是訂閱制等細節</li>
</ul>
<pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token comment">// Set your secret key. Remember to switch to your live secret key in production.</span>
<span class="token comment">// See your keys here: https://dashboard.stripe.com/apikeys</span>
<span class="token keyword">const</span> stripe <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'stripe'</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token string">'sk_test_51LcngPAAS0stR7a9fGwPc85JbiYhAxIkP0pS32PLpuy00joiHlGYEeO9NQEpyPSWnOATsSGU5LeL0tlFTegi5MbI00r1YKjzMX'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> price <span class="token operator">=</span> <span class="token keyword">await</span> stripe<span class="token punctuation">.</span>prices<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
  currency<span class="token operator">:</span> <span class="token string">'usd'</span><span class="token punctuation">,</span>
  unit_amount<span class="token operator">:</span> <span class="token number">1000</span><span class="token punctuation">,</span>
  product<span class="token operator">:</span> <span class="token string">'&#123;&#123;PRODUCT_ID&#125;&#125;'</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>傳入剛才新增的商品 <code>PRICE_ID</code>，即可建立交易連結</li>
</ul>
<pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token comment">// Set your secret key. Remember to switch to your live secret key in production.</span>
<span class="token comment">// See your keys here: https://dashboard.stripe.com/apikeys</span>
<span class="token keyword">const</span> stripe <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'stripe'</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token string">'sk_test_51LcngPAAS0stR7a9fGwPc85JbiYhAxIkP0pS32PLpuy00joiHlGYEeO9NQEpyPSWnOATsSGU5LeL0tlFTegi5MbI00r1YKjzMX'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> paymentLink <span class="token operator">=</span> <span class="token keyword">await</span> stripe<span class="token punctuation">.</span>paymentLinks<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
  line_items<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">&#123;</span>
			price<span class="token operator">:</span> <span class="token string">'&#123;&#123;PRICE_ID&#125;&#125;'</span><span class="token punctuation">,</span> 
			quantity<span class="token operator">:</span> <span class="token number">1</span>
	<span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>在客戶完成購買後，可決定是否進行導頁或顯示訊息</li>
</ul>
<pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token comment">// Set your secret key. Remember to switch to your live secret key in production.</span>
<span class="token comment">// See your keys here: https://dashboard.stripe.com/apikeys</span>
<span class="token keyword">const</span> stripe <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'stripe'</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token string">'sk_test_51LcngPAAS0stR7a9fGwPc85JbiYhAxIkP0pS32PLpuy00joiHlGYEeO9NQEpyPSWnOATsSGU5LeL0tlFTegi5MbI00r1YKjzMX'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> paymentLink <span class="token operator">=</span> <span class="token keyword">await</span> stripe<span class="token punctuation">.</span>paymentLinks<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
  line_items<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">&#123;</span>price<span class="token operator">:</span> <span class="token string">'&#123;&#123;PRICE_ID&#125;&#125;'</span><span class="token punctuation">,</span> quantity<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  after_completion<span class="token operator">:</span> <span class="token punctuation">&#123;</span>type<span class="token operator">:</span> <span class="token string">'redirect'</span><span class="token punctuation">,</span> redirect<span class="token operator">:</span> <span class="token punctuation">&#123;</span>url<span class="token operator">:</span> <span class="token string">'https://example.com'</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>Test Cards 測試信用卡號可參考：<span class="exturl" data-url="aHR0cHM6Ly9zdHJpcGUuY29tL2RvY3MvdGVzdGluZw==">https://stripe.com/docs/testing<i class="fa fa-external-link-alt"></i></span></li>
</ul>
<p><img src="https://i.imgur.com/BTuBB9q.png"></p>
<h3 id="D-2-Subscription-訂閱制"><a href="#D-2-Subscription-訂閱制" class="headerlink" title="D-2. Subscription 訂閱制"></a>D-2. <strong><strong>Subscription 訂閱制</strong></strong></h3><p>參考 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3N0cmlwZS1zYW1wbGVzL2NoZWNrb3V0LXNpbmdsZS1zdWJzY3JpcHRpb24=">https://github.com/stripe-samples/checkout-single-subscription<i class="fa fa-external-link-alt"></i></span> 範例，可實作訂閱付款：</p>
<p><img src="https://i.imgur.com/1nfGsvu.png"></p>
<p>透過調整 <code>.env</code> 檔案中的 <code>PRICE_ID</code>，可決定要連結的商品：</p>
<pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"># Stripe subscription data
<span class="token constant">DOMAIN</span><span class="token operator">=</span>http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>localhost<span class="token operator">:</span><span class="token number">4242</span>
<span class="token constant">BASIC_PRICE_ID</span><span class="token operator">=</span>price_1Ld9T3K6EvHjzoA0yj8UoJmT
<span class="token constant">PRO_PRICE_ID</span><span class="token operator">=</span>price_1LdPVvK6EvHjzoA0UOnCsDXn<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>點擊後會導頁至 Stripe 的輸入付款資訊頁：</p>
<p><img src="https://i.imgur.com/YVByX7b.png"></p>
<h3 id="D-3-使用-Stripe-Elements-鑲嵌在網頁"><a href="#D-3-使用-Stripe-Elements-鑲嵌在網頁" class="headerlink" title="D-3. 使用 Stripe Elements 鑲嵌在網頁"></a>D-3. 使用 <span class="exturl" data-url="aHR0cHM6Ly9zdHJpcGUuY29tL2RvY3MvcGF5bWVudHMvcXVpY2tzdGFydA==">Stripe Elements<i class="fa fa-external-link-alt"></i></span> 鑲嵌在網頁</h3><p>以上兩種方式，在付款時均會外開一個 Stripe 網頁。</p>
<p>根據不同需求，也可以將付款表單內嵌到自己的網頁上進行付款：</p>
<ul>
<li>首先建立一個 payment form</li>
</ul>
<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>payment-form<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>payment-element<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token comment">&lt;!-- Elements will create form elements here --></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Submit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>error-message<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token comment">&lt;!-- Display error message to your customers here --></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>透過 <code>clientSecret</code> 參數帶入客戶的相關資訊：</li>
</ul>
<pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">const</span> options <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  clientSecret<span class="token operator">:</span> <span class="token string">'&#123;&#123;CLIENT_SECRET&#125;&#125;'</span><span class="token punctuation">,</span>
  <span class="token comment">// Fully customizable with appearance API.</span>
  appearance<span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token comment">/*...*/</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token comment">// Set up Stripe.js and Elements to use in checkout form, passing the client secret obtained in step 2</span>
<span class="token keyword">const</span> elements <span class="token operator">=</span> stripe<span class="token punctuation">.</span><span class="token function">elements</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Create and mount the Payment Element</span>
<span class="token keyword">const</span> paymentElement <span class="token operator">=</span> elements<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token string">'payment'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
paymentElement<span class="token punctuation">.</span><span class="token function">mount</span><span class="token punctuation">(</span><span class="token string">'#payment-element'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>示意圖如下，客戶可選擇自行付款方式：</p>
<p><img src="https://i.imgur.com/IH5oZrx.png"></p>
<h2 id="E-Conclusion"><a href="#E-Conclusion" class="headerlink" title="E. Conclusion"></a>E. Conclusion</h2><p>過去比較常聽到綠界、Paypal 等金流服務，這次因為專案需求，第一次接觸到 Stripe 這家公司。</p>
<p>參考幾篇介紹，都形容 Stripe API 非常簡易好上手，最初在閱讀官方文件時，其實有點搞不清楚幾種付款服務的差異在哪，會想一次通盤瞭解；但跟著範例實作後，會發現其實觀念大同小異。</p>
<p>Stripe 還有提供 Dashboard 能夠進行後台管理，提供 API 或 No Code 的方式給用戶使用，即使不熟後端語言，也能夠快速上手。</p>
<h2 id="F-Reference"><a href="#F-Reference" class="headerlink" title="F. Reference"></a>F. Reference</h2><ul>
<li><strong><span class="exturl" data-url="aHR0cHM6Ly95dWFuY2hpZWgucGFnZS9wb3N0cy8yMDE4LzIwMTgtMTEtMTdfc3RyaXBlLw==">Stripe 串金流教學(上) - Yuanchieh’s Blog<i class="fa fa-external-link-alt"></i></span></strong></li>
<li><strong><span class="exturl" data-url="aHR0cHM6Ly9lYXNvbndhbmcuZ2l0Ym9vay5pby93ZWJfYWR2YW5jZS9qaW4tbGl1LWNodWFuLWppZS9zdHJpcGUtY2h1YW4tamll">Stripe 串接 - 本書簡介<i class="fa fa-external-link-alt"></i></span></strong></li>
<li><strong><span class="exturl" data-url="aHR0cHM6Ly93d3cuZ29vZ2xlLmNvbS91cmw/c2E9dCZyY3Q9aiZxPSZlc3JjPXMmc291cmNlPXdlYiZjZD0mdmVkPTJhaFVLRXdqU3VLejF4Zkw1QWhXSkc2WUtIU01LQkVFUUZub0VDQWtRQVEmdXJsPWh0dHBzOi8vYmxvZy5tYXJzZW4ubWUvMjAxOS8wNi8xNy8yMDE5L3N0cmlwZV9wYXltZW50LyZ1c2c9QU92VmF3MnFQRG9RTkdtdUdmYnhDVERxdm54MA==">[實作筆記] Stripe 串接<i class="fa fa-external-link-alt"></i></span></strong></li>
<li><strong><span class="exturl" data-url="aHR0cHM6Ly9pdGhlbHAuaXRob21lLmNvbS50dy9hcnRpY2xlcy8xMDI4MjkyNz9zYz1wdA==">Stripe 金流串起來 - iT 邦幫忙<i class="fa fa-external-link-alt"></i></span></strong></li>
<li><a href="https://angular-stripe-integration-9i7sad.stackblitz.io/"><strong>DEMO：angular-stripe-integration</strong></a></li>
</ul>
]]></content>
      <categories>
        <category>Front-End</category>
      </categories>
      <tags>
        <tag>Front-End</tag>
        <tag>Stripe</tag>
        <tag>Payment Flow</tag>
      </tags>
  </entry>
  <entry>
    <title>【學習筆記】TypeScript 基礎入門：從型別談起</title>
    <url>/typescript/</url>
    <content><![CDATA[<p>本篇為以下資源之學習筆記：</p>
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL21pY3Jvc29mdC9UeXBlU2NyaXB0">Github - microsoft/TypeScript<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly93aWxsaC5naXRib29rLmlvL3R5cGVzY3JpcHQtdHV0b3JpYWwv">TypeScript 新手指南<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj1rNUUyQVZwd3Nrbw==">Angular Tutorial for Beginners: Learn Angular &amp; TypeScript - Programming with Mosh
<i class="fa fa-external-link-alt"></i></span></li>
</ul>
<span id="more"></span>

<h2 id="什麼是-TypeScript？"><a href="#什麼是-TypeScript？" class="headerlink" title="什麼是 TypeScript？"></a>什麼是 TypeScript？</h2><p><img src="https://i.imgur.com/uowtOyV.png"></p>
<p>根據 <span class="exturl" data-url="aHR0cHM6Ly93d3cudHlwZXNjcmlwdGxhbmcub3JnLw==">TypeScript 官網<i class="fa fa-external-link-alt"></i></span> 說明：</p>
<blockquote>
<p>TypeScript extends JavaScript by adding types.</p>
</blockquote>
<blockquote>
<p>By understanding JavaScript, TypeScript saves you time catching errors and providing fixes before you run code.</p>
</blockquote>
<blockquote>
<p>Any browser, any OS, anywhere JavaScript runs. Entirely Open Source.</p>
</blockquote>
<p>將上述文字翻譯成中文：</p>
<blockquote>
<p>TypeScript 透過增加型別定義來擴展 JavaScript。</p>
</blockquote>
<blockquote>
<p>透過瞭解 JavaScript，TypeScript 可在執行程式碼之前找到錯誤並提供修復，節省開發除錯的時間。</p>
</blockquote>
<blockquote>
<p>可在任何瀏覽器、任何作業系統、任何能運行 JavaScript 的地方執行。並且是完全開源的。</p>
</blockquote>
<p>簡單來說，TypeScript 是⋯⋯</p>
<ul>
<li>一個基於 JavaScript 的超集合（SuperSet）</li>
<li>提供型別系統（Type System），能夠在開發時期宣告型別</li>
<li>支援 ECMAScript，可將 TS 檔編譯成 JS 檔給瀏覽器解讀</li>
</ul>
<p><img src="https://i.imgur.com/nTdyP5I.png"><br>（圖片來源：<span class="exturl" data-url="aHR0cHM6Ly93d3cuc25lcHBldHMuY29tL2FuZ3VsYXIvdHlwZXNjcmlwdC12cy1lczYtdnMtZXM1Lw==">Angular TypeScript Vs ES6 Vs ES5<i class="fa fa-external-link-alt"></i></span>）</p>
<h2 id="型別系統-Type-System"><a href="#型別系統-Type-System" class="headerlink" title="型別系統 Type System"></a>型別系統 Type System</h2><p>由於 JavaScript 是弱型別語言，TypeScript 的出現就是為了解決這個問題。</p>
<p>而 TypeScript 就是原生 JavsScript 的延伸，包含 ES3、ES5 與 ES6+ 語法，以及本身的擴充內容，也就是說，TypeScript 具備以下特性：</p>
<ul>
<li>Strong typing 強型別</li>
<li>Object-oriented-features 物件導向特性</li>
<li>Compile-time errors 編譯錯誤</li>
</ul>
<p>具體而言，TypeScript 和 JavsCript 的差別在哪呢？以下舉簡單的例子說明：</p>
<p>原生 JavaScript：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> sayHello <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token string">'Hello, '</span> <span class="token operator">+</span> person<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">let</span> name <span class="token operator">=</span> <span class="token string">'Heidi'</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">sayHello</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>TypeScript：</p>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">function</span> <span class="token function">sayHello</span><span class="token punctuation">(</span>person<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 傳入的參數</span>
    <span class="token keyword">return</span> <span class="token string">'Hello, '</span> <span class="token operator">+</span> person<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">let</span> name<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">'Heidi'</span><span class="token punctuation">;</span>    <span class="token comment">// 宣告的變數</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">sayHello</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>可以發現差別就在於「型別」，關於 TypeScript 如何處理型別，主要可分為這三個概念，也就是所謂的型別系統：</p>
<ul>
<li>Type annotation（型別註解）<ul>
<li>主動，大多使用在初始化階段，例如宣告變數或函式參數等</li>
</ul>
</li>
<li>Type Inference（型別推論）<ul>
<li>被動，自動推論資料型別的機制</li>
</ul>
</li>
<li>Type Assertion（型別斷言）<ul>
<li>主動，通常用於接收外部參數，需明確指定資料型別</li>
</ul>
</li>
</ul>
<h3 id="型別註解-Type-annotation"><a href="#型別註解-Type-annotation" class="headerlink" title="型別註解 Type annotation"></a>型別註解 Type annotation</h3><p>在上述範例中，TypeScript 透過 Type annotation（型別註解），在參數或變數之後加上冒號 <code>: type</code>，繼續以剛才的例子說明：</p>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">// 變數的型別註解</span>
<span class="token keyword">let</span> name<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">'Heidi'</span><span class="token punctuation">;</span>   

<span class="token comment">// 函式參數/回傳值的型別註解</span>
<span class="token keyword">function</span> <span class="token function">sayHello</span><span class="token punctuation">(</span>person<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token string">'Hello, '</span> <span class="token operator">+</span> person<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>一旦宣告型別，就不能使用其他資料型別進行賦值，否則程式就會報錯（但 TypeScript Compiler 還是會編譯成 JS 檔）。</p>
<p>像這樣藉由 Type Annotation（型別註解）執行靜態型別檢查，可有效預防運行錯誤，並統一規格、提高程式碼的可讀性，以方便多人協作。</p>
<h3 id="複習：JavaScript-型別"><a href="#複習：JavaScript-型別" class="headerlink" title="複習：JavaScript 型別"></a>複習：JavaScript 型別</h3><p>JavaScript 的型別分為兩種：原始資料型別（Primitive data types）和物件型別（Object types）。</p>
<ul>
<li>原始資料型別<ul>
<li>boolean 布林值</li>
<li>number 數值</li>
<li>string 字串</li>
<li>null 空值</li>
<li>undefined 未定義</li>
<li>Symbol（於 ES6 新定義）</li>
</ul>
</li>
<li>物件型別<ul>
<li>Object 物件</li>
<li>Array 陣列</li>
<li>Function 函式</li>
</ul>
</li>
</ul>
<p>在 TypeScript 中，除了上述這些型別，還有像是空值（Void）、任意型別（any）、Never 等特殊型別。</p>
<h3 id="空值-Void：沒有回傳值"><a href="#空值-Void：沒有回傳值" class="headerlink" title="空值 Void：沒有回傳值"></a>空值 Void：沒有回傳值</h3><p>在 JavaScript 沒有空值（Void）的概念，而在 TypeScript 中，通常用 void 表示沒有任何 return 值的 function：</p>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">function</span> <span class="token function">alertName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">&#123;</span>
    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'My name is Heidi!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// 若宣告一個 void 型別的變數，只能賦值為 null 或 undefined</span>
<span class="token keyword">let</span> unusable<span class="token operator">:</span> <span class="token keyword">void</span> <span class="token operator">=</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="補充：void-與-never-的差異"><a href="#補充：void-與-never-的差異" class="headerlink" title="補充：void 與 never 的差異"></a>補充：void 與 never 的差異</h3><ul>
<li>Void 型別<ul>
<li>沒有回傳值，函式會繼續執行到結束</li>
</ul>
</li>
</ul>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">let</span> <span class="token function-variable function">noReturn</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
   <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'hello'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// 不會有回傳值</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p><img src="https://i.imgur.com/POJa4wH.png"></p>
<ul>
<li>Never 型別<ul>
<li>應該要回傳，但因為函式中斷執行或進入無窮迴圈，永遠不會有回傳值的函式</li>
<li>常用於處理函式的錯誤</li>
</ul>
</li>
</ul>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">let</span> <span class="token function-variable function">neverEnd</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token function">forever</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
   <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">// 無窮迴圈</span>
     <span class="token comment">// code</span>
   <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><img src="https://i.imgur.com/RNQgOoe.png"></p>
<p>參考資料：<span class="exturl" data-url="aHR0cHM6Ly9pdGhlbHAuaXRob21lLmNvbS50dy9hcnRpY2xlcy8xMDIyMjkxNg==">【Day 15】TypeScript 資料型別 - 特殊型別(上)- Never<i class="fa fa-external-link-alt"></i></span></p>
<h3 id="任意型別-any：不檢查型別"><a href="#任意型別-any：不檢查型別" class="headerlink" title="任意型別 any：不檢查型別"></a>任意型別 any：不檢查型別</h3><p>其實就類似在 JavaScript 使用 var 宣告變數。一旦將變數宣告成 any 型別，或在定義時沒有賦值，不管之後有沒有賦值，都會被推斷成 any 型別，完全不會進行型別檢查：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> myFavoriteNumber<span class="token punctuation">;</span>
myFavoriteNumber <span class="token operator">=</span> <span class="token string">'seven'</span><span class="token punctuation">;</span>
myFavoriteNumber <span class="token operator">=</span> <span class="token number">7</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p><img src="https://i.imgur.com/u8oOgg5.png"></p>
<blockquote>
<p>注意：不要濫用 any 任意型別，否則將失去型別檢查保障！</p>
</blockquote>
<h3 id="陣列型別-Array"><a href="#陣列型別-Array" class="headerlink" title="陣列型別 Array"></a>陣列型別 Array</h3><p>表示陣列的方式，大致可分為以下幾種：</p>
<ul>
<li>型別 + 方括號：<code>type[]</code></li>
<li>陣列泛型（Array Generic）：<code>Array&lt;elemType&gt;</code></li>
<li>用介面表示陣列</li>
<li>類別陣列（Array-like Object）</li>
</ul>
<p>比較簡單，也較常使用的方法是以「型別 + 方括號」來表示陣列：</p>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">let</span> fibonacci<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>一旦宣告型別，陣列的項中就不允許出現其他型別，否則會報錯：</p>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">let</span> fibonacci<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'1'</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token comment">// Type 'string' is not assignable to type 'number'.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>常使用 any 來表示陣列中允許出現任意型別：</p>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">let</span> list<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'heidiliu'</span><span class="token punctuation">,</span> <span class="token number">99</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> website<span class="token operator">:</span> <span class="token string">'https://github.com/heidiliu2020'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>我們也可以使用陣列泛型（Array Generic） <code>Array&lt;elemType&gt;</code> 來表示陣列：</p>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">let</span> fibonacci<span class="token operator">:</span> <span class="token builtin">Array</span><span class="token operator">&lt;</span><span class="token builtin">number</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h3 id="列舉型別-enum"><a href="#列舉型別-enum" class="headerlink" title="列舉型別 enum"></a>列舉型別 enum</h3><p>以下方程式碼為例：</p>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">enum</span> Color <span class="token punctuation">&#123;</span>Red<span class="token punctuation">,</span> Green<span class="token punctuation">,</span> Blue<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token comment">// 0, 1, 2</span>
<span class="token keyword">let</span> c<span class="token operator">:</span> Color <span class="token operator">=</span> Color<span class="token punctuation">.</span>Green<span class="token punctuation">;</span>       <span class="token comment">// 1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>經過 TSC（TypeScript Compiler）後，會得到下方結果：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token string">"use strict"</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> Color<span class="token punctuation">;</span>
<span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">Color</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    Color<span class="token punctuation">[</span>Color<span class="token punctuation">[</span><span class="token string">"Red"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"Red"</span><span class="token punctuation">;</span>
    Color<span class="token punctuation">[</span>Color<span class="token punctuation">[</span><span class="token string">"Green"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"Green"</span><span class="token punctuation">;</span>
    Color<span class="token punctuation">[</span>Color<span class="token punctuation">[</span><span class="token string">"Blue"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"Blue"</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span>Color <span class="token operator">||</span> <span class="token punctuation">(</span>Color <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">;</span>
<span class="token keyword">let</span> c <span class="token operator">=</span> Color<span class="token punctuation">.</span>Green<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>接著以番茄鐘為例，假設 Timer 有三種狀態，分別是停止、暫停、計時，即可列舉下列複合型別：</p>
<ul>
<li>timer-status.enum.ts：進行宣告並輸出</li>
</ul>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">export</span> <span class="token keyword">enum</span> TimerStatus <span class="token punctuation">&#123;</span>
  <span class="token constant">STOP</span> <span class="token operator">=</span> <span class="token string">'STOP'</span><span class="token punctuation">,</span>
  <span class="token constant">PAUSE</span> <span class="token operator">=</span> <span class="token string">'PAUSE'</span><span class="token punctuation">,</span>
  <span class="token constant">COUNTING</span> <span class="token operator">=</span> <span class="token string">'COUNTING'</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>pomodoro.component.ts：引入使用，用法和物件類似</li>
</ul>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> TimerStatus <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'src/app/timer-status.enum'</span><span class="token punctuation">;</span>

<span class="token comment">// ...</span>

  <span class="token function">ngOnInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">displayTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>TimerStatus<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>TimerStatus<span class="token punctuation">.</span><span class="token constant">STOP</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

<span class="token comment">// &#123;STOP: "STOP", PAUSE: "PAUSE", COUNTING: "COUNTING"&#125;</span>
<span class="token comment">// STOP</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="型別推論-Type-Inference"><a href="#型別推論-Type-Inference" class="headerlink" title="型別推論 Type Inference"></a>型別推論 Type Inference</h3><p>在 TS 檔中檢視上述範例程式碼，會發現不管有無明確註記型別，TypeScript 編譯器都會依照「型別推論」的規則，自動推斷出一個資料型別。</p>
<p>又以下方程式碼為例，雖然沒有指定值的型別，卻會在編譯時報錯：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> myFavoriteNumber <span class="token operator">=</span> <span class="token string">'seven'</span><span class="token punctuation">;</span>
myFavoriteNumber <span class="token operator">=</span> <span class="token number">7</span><span class="token punctuation">;</span>

<span class="token comment">// index.ts(2,1): error TS2322: Type 'number' is not assignable to type 'string'.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>這是因為在宣告變數並賦值時，TypeScript 編譯器就已經自動從程式碼推斷出 myFavoriteNumber 是字串型別，若嘗試以非字串的資料賦值時就會報錯！</p>
<p>對 TypeScript 編譯器來說，上方程式碼其實就等同於：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> myFavoriteNumber<span class="token operator">:</span> string <span class="token operator">=</span> <span class="token string">'seven'</span><span class="token punctuation">;</span>
myFavoriteNumber <span class="token operator">=</span> <span class="token number">7</span><span class="token punctuation">;</span>

<span class="token comment">// index.ts(2,1): error TS2322: Type 'number' is not assignable to type 'string'.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>由於型別推論是 TypeScript 被動的防護機制，不管在什麼情況下都會自動推論型別，即使想故意註記一個錯誤，透過 TypeScript 的運算機制，仍會跳出錯誤訊息：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> randomNumber<span class="token operator">:</span> string <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment">/* TS2322: Type 'number' is not assignable to type 'string'. */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<h3 id="型別斷言-Type-Assertion"><a href="#型別斷言-Type-Assertion" class="headerlink" title="型別斷言 Type Assertion"></a>型別斷言 Type Assertion</h3><p>但實際在開發時，專案的資料型別也會越發複雜，不能只仰賴 TypeScript 單純的推論，這時就需要適時搭配型別斷言。</p>
<p>開發者能藉由手動指定一個值的型別，覆蓋 TypeScript 編譯器的推論，避免出現警告錯誤，這個機制就是「型別斷言」。</p>
<p>型別斷言有兩種寫法：</p>
<ul>
<li>第一種：<code>&lt;型別&gt;值 </code>（angle-bracket &lt;&gt;）</li>
</ul>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">let</span> code<span class="token operator">:</span> <span class="token builtin">any</span> <span class="token operator">=</span> <span class="token string">'Hello'</span><span class="token punctuation">;</span> 
<span class="token keyword">let</span> helloCode <span class="token operator">=</span> <span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">></span> code<span class="token punctuation">;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<ul>
<li>第二種：<code>值 as 型別</code>（as keyword）</li>
</ul>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">let</span> code<span class="token operator">:</span> <span class="token builtin">any</span> <span class="token operator">=</span> <span class="token string">'Hello'</span><span class="token punctuation">;</span> 
<span class="token keyword">let</span> helloCode <span class="token operator">=</span> code <span class="token keyword">as</span> <span class="token builtin">string</span><span class="token punctuation">;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>兩者語法效果相同，但如果是在 React 專案中，使用 JSX 語法時只能用第二種。</p>
<ul>
<li>使用範例：將聯合型別的變數指定為更加具體的型別</li>
</ul>
<p>在聯合型別的情境下，表示值可以是多種型別的其中一種。以下方程式碼為例，getLength 的參數可能是字串或數字，但因為 length 不為字串和數字的共同屬性，因此會報錯：</p>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">function</span> <span class="token function">getLength</span><span class="token punctuation">(</span>something<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>something<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> something<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> something<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// error TS2339: Property 'length' does not exist on type 'string | number'.</span>
<span class="token comment">//   Property 'length' does not exist on type 'number'.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>這時可使用型別斷言，將 something 指定為字串型別（如：<code>&lt;string&gt;something</code>），即可避免報錯：</p>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">function</span> <span class="token function">getLength</span><span class="token punctuation">(</span>something<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">></span>something<span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">></span>something<span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> something<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">getLength</span><span class="token punctuation">(</span><span class="token number">12345</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment">// 5</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">getLength</span><span class="token punctuation">(</span><span class="token string">"abc"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment">// 3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>參考資料：<span class="exturl" data-url="aHR0cHM6Ly9pdGhlbHAuaXRob21lLmNvbS50dy9hcnRpY2xlcy8xMDIxNzM4NA==">【Day 04】 TypeScript 判斷資料型別的機制 - 型別推論 x 斷言 x 註解<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
<br>

<h2 id="TypeScript-和-ES6-的差別？"><a href="#TypeScript-和-ES6-的差別？" class="headerlink" title="TypeScript 和 ES6+ 的差別？"></a>TypeScript 和 ES6+ 的差別？</h2><p>接下來，在深入探討 TypeScript 與 ES6+ 差別之前，先來稍微回顧一些常用的 ES6+（或稱 ES2015）語法吧！</p>
<h3 id="複習：那些常用的-ES6-語法"><a href="#複習：那些常用的-ES6-語法" class="headerlink" title="複習：那些常用的 ES6+ 語法"></a>複習：那些常用的 ES6+ 語法</h3><ul>
<li>let 與 const 宣告變數，以及變數作用域的不同<ul>
<li>var：function scope 函式作用域</li>
<li>let 與 const：block scope 區塊作用域</li>
</ul>
</li>
<li>解構賦值（Destructuring assignment）<ul>
<li>能夠快速建立變數並取值</li>
</ul>
</li>
</ul>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> pcBrands <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'Apple'</span><span class="token punctuation">,</span> <span class="token string">'Lenovo'</span><span class="token punctuation">,</span> <span class="token string">'Acer'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token comment">// 自動建立名為 first, second, third 的變數</span>
<span class="token comment">// 再依照陣列內元素的順序把值取出來</span>
<span class="token keyword">const</span> <span class="token punctuation">[</span>first<span class="token punctuation">,</span> second<span class="token punctuation">,</span> third<span class="token punctuation">]</span> <span class="token operator">=</span> pcBrands<span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>first<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// Apple</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>second<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// Lenovo</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>third<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// Acer</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>箭頭函式（Arrow Functions）</li>
</ul>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">foo</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"ES6"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">function</span> <span class="token function">foo2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"ES5"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// "ES6"</span>
<span class="token function">foo2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// "ES5"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>模板字串（Template Literals）<ul>
<li>ES5：使用單引號（’’）或雙引號（””）</li>
<li>ES6：使用反引號（``）</li>
</ul>
</li>
</ul>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 可用於字串拼接</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Hello, "</span> <span class="token operator">+</span> name<span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Hellooo,  </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>name<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<ul>
<li>展開語法和其餘語法（Spread Syntax/Rest Syntax）<ul>
<li>根據不同用途使用 <code>...</code> 運算子</li>
</ul>
</li>
</ul>
<h4 id="展開語法：解壓縮，常用於複製一個物件或陣列，並為該物件增加屬性、或陣列添加元素"><a href="#展開語法：解壓縮，常用於複製一個物件或陣列，並為該物件增加屬性、或陣列添加元素" class="headerlink" title="展開語法：解壓縮，常用於複製一個物件或陣列，並為該物件增加屬性、或陣列添加元素"></a>展開語法：解壓縮，常用於複製一個物件或陣列，並為該物件增加屬性、或陣列添加元素</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> PCOnSale <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'Apple'</span><span class="token punctuation">,</span> <span class="token string">'Lenovo'</span><span class="token punctuation">,</span> <span class="token string">'Acer'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> allPCs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>PCOnSale<span class="token punctuation">,</span> <span class="token string">'HP'</span><span class="token punctuation">,</span> <span class="token string">'ASUS'</span><span class="token punctuation">,</span> <span class="token string">'TOSHIBA'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>allPCs<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// ["Apple", "Lenovo", "Acer", "HP", "ASUS", "TOSHIBA"] </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="其餘語法：壓縮，把沒有被取出來的物件屬性或陣列元素都放到一個壓縮包裡"><a href="#其餘語法：壓縮，把沒有被取出來的物件屬性或陣列元素都放到一個壓縮包裡" class="headerlink" title="其餘語法：壓縮，把沒有被取出來的物件屬性或陣列元素都放到一個壓縮包裡"></a>其餘語法：壓縮，把沒有被取出來的物件屬性或陣列元素都放到一個壓縮包裡</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> PCBrands <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"Apple"</span><span class="token punctuation">,</span> <span class="token string">"Lenovo"</span><span class="token punctuation">,</span> <span class="token string">"Acer"</span><span class="token punctuation">,</span> <span class="token string">"HP"</span><span class="token punctuation">,</span> <span class="token string">"ASUS"</span><span class="token punctuation">,</span> <span class="token string">"TOSHIBA"</span><span class="token punctuation">]</span> <span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token punctuation">[</span>first<span class="token punctuation">,</span> second<span class="token punctuation">,</span> third<span class="token punctuation">,</span> <span class="token operator">...</span>other<span class="token punctuation">]</span> <span class="token operator">=</span> PCBrands<span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>other<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// ["HP", "ASUS", "TOSHIBA"] </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>Default Parameters 設定參數預設值</li>
<li>Import &amp; Export 引入與輸出<ul>
<li>引入與輸出 module，類似 require 與 module.exports 的用法</li>
</ul>
</li>
</ul>
<blockquote>
<p>可參考：<span class="exturl" data-url="aHR0cHM6Ly9pdGhlbHAuaXRob21lLmNvbS50dy9hcnRpY2xlcy8xMDIxNzA4NQ==">[Day 02] React 中一定會用到的 JavaScript 語法<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
<h3 id="所以，TypeScript-特別在哪？"><a href="#所以，TypeScript-特別在哪？" class="headerlink" title="所以，TypeScript 特別在哪？"></a>所以，TypeScript 特別在哪？</h3><p>在複習了 ES6+ 語法之後，究竟 TypeScript 除了型別系統，還提供哪些重要的酷東西呢？為什麼不寫 ES6+ 就好？</p>
<p>主要可分為三個方面：</p>
<ul>
<li>Class 類型</li>
<li>Interface 介面</li>
<li>未來的 ES2016+ 特性，例如：Annotations 註解, Decorators 裝飾器, async/await 異步/等待</li>
</ul>
<h3 id="介面-Interface：定義抽象物件的型別"><a href="#介面-Interface：定義抽象物件的型別" class="headerlink" title="介面 Interface：定義抽象物件的型別"></a>介面 Interface：定義抽象物件的型別</h3><p>Interface 被稱作介面或是接口，在物件導向程式語言中，用來定義抽象物件的型別，又被稱作是 TypeScript 的一個型別檢查工具。</p>
<blockquote>
<p>因為介面只做描述，不做動作。</p>
</blockquote>
<p>主要用於定義 Class（類別）行為，介面只會描述有哪些 Method（方法）和 Property（屬性），不包含怎麼執行，也就是說，具體行為必須由 Class 實現（implement）。</p>
<blockquote>
<p>賦值的時候，Class 需和介面定義的行為保持一致。</p>
</blockquote>
<p>舉例來說：</p>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">// 定義一個介面 Person</span>
<span class="token keyword">interface</span> <span class="token class-name">Person</span> <span class="token punctuation">&#123;</span>
    name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
    age<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
    address<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>    <span class="token comment">// 可選屬性</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// 定義一個變數 heidi，型別是 Person</span>
<span class="token keyword">let</span> heidi<span class="token operator">:</span> Person <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
    name<span class="token operator">:</span> <span class="token string">'Heidi'</span><span class="token punctuation">,</span>
    age<span class="token operator">:</span> <span class="token number">99</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>當 Class 用 implements 指定要實作的 Interface，除了可選屬性（在屬性名稱後方加上問號 <code>?</code>），必須實作介面內所有的 Method 和 Property，否則會在編譯時報錯。</p>
<h2 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h2><p>這篇是在剛接觸 Angular 框架時，寫下的學習筆記。偶爾會被問說，覺得學新框架最大的困難處在哪？其實 Angular 和 React 要說不同，也不盡然完全相差甚遠，或許實作方法不一樣，卻還是能用共通的邏輯去思考問題。</p>
<p>反而時常會卡關的地方，是在 TypeScript 型別判定上，為什麼這裡型別檢查這麼嚴格？難道我一定要給個 any 才會過嗎？直到學會如何定義 Interface 之後，後續開發就會順利不少，尤其是在打電文時更是如此，能事先統一 Request 和 Response 的格式，就比較不容易出現意外的錯誤。</p>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>Front-End</tag>
        <tag>JavaScript</tag>
        <tag>TypeScipt</tag>
      </tags>
  </entry>
  <entry>
    <title>轉職前端工程師｜Lidemy 結業心得與求職總結</title>
    <url>/about-lidemy/</url>
    <content><![CDATA[<p><img src="https://i.imgur.com/qY9Crpq.jpg"><br><span>Photo by <span class="exturl" data-url="aHR0cHM6Ly91bnNwbGFzaC5jb20vQHhhbmdyaWZmaW4/dXRtX3NvdXJjZT11bnNwbGFzaCZhbXA7dXRtX21lZGl1bT1yZWZlcnJhbCZhbXA7dXRtX2NvbnRlbnQ9Y3JlZGl0Q29weVRleHQ=">Xan Griffin<i class="fa fa-external-link-alt"></i></span> on <span class="exturl" data-url="aHR0cHM6Ly91bnNwbGFzaC5jb20vcy9waG90b3Mvd2luP3V0bV9zb3VyY2U9dW5zcGxhc2gmYW1wO3V0bV9tZWRpdW09cmVmZXJyYWwmYW1wO3V0bV9jb250ZW50PWNyZWRpdENvcHlUZXh0">Unsplash<i class="fa fa-external-link-alt"></i></span></span></p>
<blockquote>
<p>「平凡的我啊，哪有時間低頭回望？」——《排球少年 264 話》</p>
</blockquote>
<span id="more"></span>

<p>同步發布於 Medium：<span class="exturl" data-url="aHR0cHM6Ly9oZWlkaS1jb2RpbmcubWVkaXVtLmNvbS8lRTglQkQlODklRTglODElQjclRTUlODklOEQlRTclQUIlQUYlRTUlQjclQTUlRTclQTglOEIlRTUlQjglQUItbGlkZW15LSVFNyVCNSU5MCVFNiVBNSVBRCVFNSVCRiU4MyVFNSVCRSU5NyVFOCU4OCU4NyVFNiVCMSU4MiVFOCU4MSVCNyVFNyVCOCVCRCVFNyVCNSU5MC05ODA2NDRlYjRmNzQ=">轉職前端工程師｜Lidemy 結業心得與求職總結<i class="fa fa-external-link-alt"></i></span></p>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>各位安安，我是 Heidi，從年前就一直思考，應該如何總結這一年來的學習心得，結果又拖到現在，不知不覺都已經入職快兩個月了XD</p>
<p>這篇是記錄我在 Lidemy 學習半年的結業心得，也會稍微帶到多人協作和求職總結，文章大綱如下：</p>
<ul>
<li>背景與動機</li>
<li>為什麼選這個計畫？</li>
<li>為期半年的課程</li>
<li>挑戰多人協作</li>
<li>求職之旅</li>
<li>結語</li>
</ul>
<h2 id="背景與動機"><a href="#背景與動機" class="headerlink" title="背景與動機"></a>背景與動機</h2><blockquote>
<p>亂點技能樹…卻又好像環環相扣的人森。</p>
</blockquote>
<p>生農學院畢業，但其實是黑手指，路邊花草樹木一問三不知；在大學時期選修日文，透過這門語言開啟新世界的大門。畢業後前往日本打工度假一年，之後曾在一間日商公司擔任窗口，發現自己內心深處還是想嘗試在日本工作，即使我不知道自己究竟想要什麼，仍對自己的未來感到徬徨不安。</p>
<p>直到後來，偶然參加一場選考會，很順利地拿到一家餐飲集團的 offer，也預計在去年年初赴日工作，一切看似順利，卻這麼碰巧遇上疫情爆發。經過反覆掙扎，終於在鎖國前一週決定放棄簽證資格，又以此為契機，讓我重新思考未來方向。</p>
<p>然後，就沒有然後了，可以說是與程式語言毫無關係的學經歷。</p>
<p>或許也因為經歷如此平凡，對自己一直很沒有自信吧。好像有點會讀書，直到大學時才發現自己是死讀書，一路走來，總是被沉重的學歷枷鎖壓得喘不過氣，只想跳出無限循環懷疑自我的迴圈。</p>
<p>在這段迷惘的歲月，不斷與自我對話，果然還是該考公職嗎？還是準備研究所？曾經的留學夢呢？我到底，要的是什麼？這個問題的盡頭，終究只能靠自己去摸索找出答案。想轉換未來的跑道，跳脫自我厭惡的循環，那就必須嘗試「學習新技能」，這是當初浮現在腦海中的一條路。</p>
<p>而在去年三四月時，想起之前為了架設有關旅行遊記的部落格，在 <span class="exturl" data-url="aHR0cHM6Ly9oYWhvdy5pbi8=">Hahow<i class="fa fa-external-link-alt"></i></span> 購入有關動畫互動設計課程（發現不少同學都看過這堂），在學習過程中，發現自己渴望更深入探索前端領域（其實是因為中間卡關，轉而尋找更多資源），於是又陸續透過六角學院、YouTube、Udemy 等平台，開啟自學網頁程式這條路。</p>
<h2 id="為什麼選這個計畫？"><a href="#為什麼選這個計畫？" class="headerlink" title="為什麼選這個計畫？"></a>為什麼選這個計畫？</h2><p>在自學過程中，瞭解到自己是需要透過「目標與成就感」產生「動力」的人。在這片浩瀚的前端海洋，縱使有著取之不盡的資源，我卻不曉得此刻的自己需要什麼、應該要做些什麼，心底總會感到不踏實。我想成為一名前端工程師，但究竟自己是否真的喜歡前端？還是只是因為我還沒接觸到更多？</p>
<p>直到我在 Medium 平台，閱讀 Huli 寫的<span class="exturl" data-url="aHR0cHM6Ly9tZWRpdW0uY29tL2h1bGlzLWJsb2cvZnJvbnRlbmQtZW5naW5lZXItZ3VpZGUtMjk3ODIxNTEyZjRl">《零基礎的小明要如何成為前端工程師？》<i class="fa fa-external-link-alt"></i></span>時，無意間發現<span class="exturl" data-url="aHR0cHM6Ly9odWxpdHcubWVkaXVtLmNvbS9saWRlbXktbWVudG9yLXByb2dyYW0tNHRoLTM5ZjU4YTAwMDY3Yw==">《程式導師實驗計劃第四期》<i class="fa fa-external-link-alt"></i></span>正開放報名。看過 Lidemy 官網的 <span class="exturl" data-url="aHR0cHM6Ly9ib290Y2FtcC5saWRlbXkuY29tL3N5bGxhYnVzLmh0bWw=">課程大綱<i class="fa fa-external-link-alt"></i></span> 之後，瞭解到這是為期半年的前後端線上課程，課綱涵蓋程式基礎到專案開發，也能夠藉由這個機會接觸到後端，是我決定選擇 Lidemy 的原因之一。</p>
<p>或許，我能夠在這裡尋找想要的答案。我想要透過這個計畫，去瞭解自己究竟適不適合走這條路，跟著 Mentor 指引的腳步，把不足的部分逐一補足，讓自己更確實朝向目標邁進。</p>
<p>然後，還有另一個原因，是在看到 Huli 本名時，總覺得這名字有點眼熟，谷歌了一下發現以前竟然有同校 N 年過（還跑去翻了畢冊），默默把這段緣分收在心裡，等我未來轉職成功就來認親吧！擅自訂下了奇怪的目標XD</p>
<p>總之，不管過去成長背景如何，想要走上轉職這條路，我想最重要的還是「動機」吧。是什麼原因想要轉職？其實理由因人而異，但這個「理由」必須能夠驅動自己往前邁進，必須能夠先說服自己，未來在學習途中，在準備履歷作品的過程，在求職面試的時候，才不至於顯得動搖，這也就是心態建立的重要性。</p>
<p>之所以會想強調這點，是因為自己在求職階段，或者即使正式確定 offer 以後，被問到「為什麼想轉職？」這問題時，還是不免感到自我懷疑，我真的有能力轉職成前端工程師嗎？但後來我漸漸明白了，這或許就是所謂的 <span class="exturl" data-url="aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3dpa2kvJUU1JTg2JTkyJUU1JTkwJThEJUU5JUEwJTgyJUU2JTlCJUJGJUU3JTk3JTg3JUU1JTgwJTk5JUU3JUJFJUE0">冒名頂替症候群<i class="fa fa-external-link-alt"></i></span> 也說不定。不管進入哪個階段，始終會感到害怕，怕自己只不過是運氣好，怕自己其實沒有足夠的能力。所以呢？這時心態建立就非常重要，知識能力可以一點一點慢慢累積，可是心態一旦崩潰，就必須花費更多時間才能重新振作起來。</p>
<hr>
<h2 id="為期半年的課程"><a href="#為期半年的課程" class="headerlink" title="為期半年的課程"></a>為期半年的課程</h2><p>關於課程內容，其實課程大綱都寫得蠻清楚，所以這邊就不贅述，舉幾點個人認為比較需要注意的地方：</p>
<ul>
<li>心態建立的重要性<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0xpZGVteS9tZW50b3ItcHJvZ3JhbS01dGgjJUU3JUFDJUFDJUU5JTlCJUI2JUU5JTgwJUIxJUU1JUJGJTgzJUU2JTg1JThCJUU1JTlGJUI5JUU5JUE0JThB">課程第零週<i class="fa fa-external-link-alt"></i></span>就是心態培養，即使在學習過程中感到迷惘時，也會再回頭讀這幾篇文章。</li>
</ul>
</li>
<li>作筆記的重要性<ul>
<li>我習慣使用 HackMD 寫筆記，優點是使用方便、能夠同步到 GitHub 備份；缺點是不易進行管理、刪除後沒有垃圾筒還原（有次誤刪了只好寄信請後台幫忙還原）。</li>
<li>另外也很推薦 Notion，功能非常強大，能夠客製化、有系統性的整理每篇內容。</li>
<li>集結起來放到<a href="https://heidiliu2020.github.io/">部落格</a>，就是一個能展現自己的作品，也能幫助自己快速複習重點。如果從頭來過，我還是會寫筆記，但要注意不要花太多時間整理，進度落後反而本末倒置。</li>
</ul>
</li>
<li>跟上課程進度的重要性 &gt;&gt;&gt; 完全理解內容<ul>
<li>約在第八週的串接 API、第九週的後端基礎、第十七週的 Express 時，進度慢慢落後了，或許是因為接觸全新的知識，又想要「完全理解」，其實不必執著一開始就聽懂，有時候藉由實作過程來理解，也是很棒的學習方式。</li>
<li>卡關時就跳吧！找到適合自己學習的步調很重要，但跟上課程進度也同樣重要，一旦落後了就很難再跟上，因為知識只會越來越複雜，有些東西以後你就會懂了（是真的）。</li>
</ul>
</li>
<li>找到能讓你與眾不同的地方<ul>
<li>雖然大多數人光是想要跟上課程進度就很吃力了，我自己也沒能達成，但我想這點還是非常重要，畢竟面試官在收到同樣課程出身的履歷時，會傾向選擇哪種類型的人才？過往經歷也好，對程式的熱情也好，該思考如何讓自己變得更突出。</li>
<li>因此除了課程內容，能夠再結合自己的興趣、專長去實作一個 Side Project 是更好不過的選擇，就算沒有時間準備，至少要把課程作業的完整度提高，學會使用某種語言刻出 Todo List 和 Blog 以後，其實基本技術能力也差不多具備了。</li>
<li>試著將作品的圖形、資料作出變化，有設計能力，就把畫面刻得更精緻；對後端感興趣，就更深入去瞭解 MySQL 語法、結合資料庫和伺服器，面試時更能夠拿出來展示發揮。</li>
</ul>
</li>
<li>社群的影響力與重要性<ul>
<li>「一個人可以走得快，但一群人可以走得遠。」把握社群的力量，以前的我其實不太敢發問，到了課程後期，才漸漸地鼓起勇氣找人解惑，真的太慢頓悟，浪費不少時間在自己撞牆摸索。</li>
<li>善用谷哥大神的搜尋力量，像是 Stackoverflow 這類的技術論壇，類似的問題別人說不定也曾發生過。也因此技術方面的問題，通常建議使用英文作為關鍵字，才能找到更多搜尋結果，畢竟 debug 時跳出的錯誤訊息也都是英文XD 有時找不到解答，往往是下錯關鍵字的緣故。</li>
<li>當卡關太久就是該尋求幫助的時候了，不管是老師、助教還是同學，都是能夠尋求幫助的對象。</li>
</ul>
</li>
<li>學習系統的重要性<ul>
<li>不知不覺進度報告也累積了二十多萬字，我很喜歡像這樣把學習過程視覺化，能夠知道自己堅持了幾天，進度到哪週，累積多少學習心得，也能不時回顧自己當初記錄的種種，但也要注意不要花太多時間在這上面。</li>
<li>除了進度報告，學習系統也是繳交作業的平台，在這裡能參考同學們的心得和作業，因為總會有跑在前頭的強者同學，無形中也成為一股推進力。如果當週作業想不出解法，也能藉由範例來學習。有時把問題寫下來，會有熱心的同學來為自己解惑XD</li>
<li>\許願希望未來的學習系統/：課程進度能支援跳關、能夠以滾輪方式顯示過往動態、能夠有書籤功能來收藏喜歡的心得。</li>
</ul>
</li>
</ul>
<p><img src="https://i.imgur.com/I92IOSl.png"></p>
<hr>
<h2 id="挑戰多人協作"><a href="#挑戰多人協作" class="headerlink" title="挑戰多人協作"></a>挑戰多人協作</h2><p>很喜歡這期新增的 <span class="exturl" data-url="aHR0cHM6Ly9saWRlbXkuY29tL3AvcGQxMDE=">[PD101] 淺談產品開發與工作流程<i class="fa fa-external-link-alt"></i></span> 課程，能補充工作流程與產品開發相關知識，讓未曾進入這個業界的我們，增加對未來工作環境的想像。</p>
<p>到了課程中後期（十一月左右），差不多要來準備多人專案，在 Slack 頻道上剛好看到有同學在徵人，當下想著應該把握這個機會，於是組成了四人協作團隊！</p>
<p>協作時間規劃大致如下：</p>
<ul>
<li><strong>十二月初～初期討論</strong>：大約花一周的時間，和組員們討論協作專案方向，再依照主題制定需求，並撰寫 User Flow、Wireframe、User Story，使用 Jira 來管理任務，嘗試敏捷開發。</li>
<li><strong>十二月中～開始動工</strong>：在這一個月的時間，基本上是透過 Slack 和組員密切討論，每三到五天就會透過 Google Meet 視訊，以同步分配的工作進度，像是切版進展如何、遇到哪些問題、確認是否刪減需求等等。</li>
<li><strong>一月初～重構與部署</strong>：連作夢都會夢到自己在寫扣，然後在夢中思索怎樣改寫會更好，真的不誇張，從沒想過自己能夠進入這樣的狀態（？）那是一種很難形容的感覺，雖然那陣子腦袋不斷運轉，晚上也幾乎睡不太好，日子卻過得異常充實。</li>
<li><strong>一月中～完成專案初版</strong>：因為和組員們都希望能早點完成專案初版，接著就開始準備履歷求職啦！</li>
</ul>
<p>其實個人感覺遇到的最大困難是在初期討論，因為所有人都是第一次合作開發，許多地方必須靠自己去摸索。過程中需要磨合並整理彼此的想法，尋求 Huli 和助教、同學們的幫助，也因此在最後完成了專案初版的當下，那股成就感是前所未有的。記得要把這些感受好好記錄下來，之後在面試展示作品 DEMO 的時候，就可以著重於協作過程中感受最深刻的是什麼。</p>
<p>因為完成的作品還有不少能夠優化的地方，一開始也忍不住擔心這些地方會不會反而變成扣分點，其實倒也未必。既然知道可能會被點出哪些點，就針對那些問題提出未來能夠改善的方向（即使不一定真的有時間去修改），至少在面試當下，反而能成為表達邏輯的一個施力點！</p>
<p>多人協作想要達成的目標是什麼？是開發一個完整的產品？還是累積合作經驗？既然最終目的是為了求職，那麼答案想必是後者，不然直接去創業就好了吧XD</p>
<p>最後附上<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2hlaWRpbGl1MjAyMC9zd2VldGJyZWF0aA==">專案 GitHub 連結<i class="fa fa-external-link-alt"></i></span>，主題是「Sweet Breath 甜の呼吸」，採用前端技術 React Hooks，搭配後端技術 Express、Sequelize 進行開發。雖然很可惜只來得及完成 P1 功能，沒能挑戰金流或第三方登入串接，但藉由這段協作經驗，還是讓我深刻體會到，能夠實際寫出想要的功能是多麼爽快和充實XD</p>
<p>因此，還是很推薦找組員一起挑戰協作，能夠在工作前先累積合作經驗。感謝很罩的組員們，不管是在處理 Promise 資料卡關時，還是架設後端資料庫時，真的受到很大的幫助和鼓勵，也讓自己更有信心去面對往後的求職！</p>
<hr>
<h2 id="求職之旅"><a href="#求職之旅" class="headerlink" title="求職之旅"></a>求職之旅</h2><p>這期開設的 [INT101] 求職入門，包括準備流程、面試順序、常考技術問題，以及如何做自我檢討等等，讓非本科轉職的我們能夠在短時間內抓住準備方向，也提到了正確的求職心態，就是「永遠不可能有準備好的一天」。</p>
<p>還有去年底在 Line 開設的面試衝刺群，連續十五天要在晚上 11 點前回答指定題目，提供強迫自己訓練口說的環境，同時也能透過同學的回答，學習不同風格的答題技巧。</p>
<p>現在回想起來，直到開始進行協作專案、加入面試群，到後來頻繁尋求老師的建議、同學分享交流心得，這段期間，才真正有和同學們「一起」在同一個計劃學習的感覺。</p>
<p>在多人協作告一段落之後，就馬上開始準備投履歷和面試，約在一月中左右投遞，主要是透過 104、Cakeresume、Yourator 等平台投遞履歷，數據結果如下：</p>
<ul>
<li>投遞履歷：71 間</li>
<li>安排面試：14 間</li>
<li>offer：4 間</li>
</ul>
<p>在接到第四家 offer 後，瞭解到這差不多就是自己的極限了，薪資落在 35k~42k 之間。或許曾天真的想過，說不定有機會在第一份工作就進到當初設定的目標公司，但在瞭解與旁人的差距以後，也慢慢認清現實，於是在年前決定要去哪間，結束這段求職旅程。</p>
<p>想起在 Yourator 博覽會的某攤位，有遇到一位人資主管，稍微瀏覽過我的履歷後，便很直白的告訴我：「<em>現在的你沒辦法在公司存活，但我很期待半年後看到你的成長，這份履歷我就先收下了。</em>」當下的我是既失落又興奮，是啊，「現在」的我還遠遠不足以勝任，也沒什麼，就是繼續努力而已，未來還是有挑戰的機會。</p>
<p>其實在剛確定進入現任公司時，心情是有些徬徨的，畢竟公司目前主要使用的前端框架是 Angular，明明過往在課程中學習的是 React，先不論自己是否能夠快速上手新技術，會不會連好不容易熟悉的 React 都逐漸遺忘了呢？總之就是對未來充滿各種迷惘。</p>
<p>但是在經過一個半月的磨合，自己也慢慢釋懷當初的決定，主管和同事們人都很好，很願意分享技術，還有我很多能夠學習的地方。即使現在的我仍在慢慢摸熟 Angular 和 TypeScript，最近終於有點實質產出，能夠修改一些簡單的 Bug 了，可喜可賀！之後再來好好整理一篇上工心得！</p>
<h2 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h2><p>不管想做什麼，少一點猶豫害怕，多一點勇敢果決。如果我能早一點開始學程式，早一點跟完課程，早一點完成協作專案，早一點開始求職……或許我能夠有更多選擇也不一定。但更重要的「開始」，現在的我終於邁開步伐，與過去的懊悔告別，正式踏入全新的領域。</p>
<p>失敗了其實也不會怎麼樣，這點在 Huli 的隨意談其實也有提過，不過是認清自己不適合，或是目前還沒有足夠能力罷了。也許在更遙遠的未來，這些新技能會派上用場也說不定，更重要的，是直到我真正放棄的那一刻為止，就還不算失敗，我只是比較慢抵達而已。</p>
<p>如果問到未來的目標，回想起自己在報名信中是這樣寫的：</p>
<blockquote>
<p>最終目標是「轉職成為軟體工程師」，並且實現「在日本生活」這個夢想，現階段想把這兩個目標結合在一起，讓自己產生更大動力去達成。</p>
</blockquote>
<p>直到現在，這個目標還是沒有改變。想要好好累積經驗，想要相信自己真的有能力勝任這份工作，別忘了，這還只是個開始，而我終於站在這條起跑線上，要繼續朝向下一個目標邁進。</p>
<p>感謝家人、親友們的支持，讓我能夠全心投入學習程式語言。<br>感謝 Huli、助教、同學們的陪伴與鼓勵，讓我知道在這條轉職路上自己並不孤單，隨時能夠尋求他人協助。<br>最後也感謝不曾放棄的自己，讓我能夠與自己和平相處，找到未來想要前進的方向。</p>
]]></content>
      <categories>
        <category>lidemy</category>
      </categories>
      <tags>
        <tag>lidemy</tag>
      </tags>
  </entry>
  <entry>
    <title>[week 14] 網站部署 - 設定 AWS EC2 遠端主機 +  Ubuntu LAMP 環境 + phpMyAdmin</title>
    <url>/backend-aws-ubuntu/</url>
    <content><![CDATA[<p>在練習這週的網站部署時，主要參考下列幾篇筆記：</p>
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9tdHIwNC1ub3RlLmNvZGVyYnJpZGdlLmlvLzIwMjAvMDkvMTUvLSVFNyVCNCU4MCVFOSU4QyU4NC0lMDgtJUU5JTgzJUE4JUU1JUIxJUFDLWF3cy1lYzItJUU5JTlCJUIyJUU3JUFCJUFGJUU0JUI4JUJCJUU2JUE5JTlGLS8=">[ 紀錄 ] 部屬 AWS EC2 雲端主機 + LAMP Server + phpMyAdmin<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9uaWNvbGFrYWNoYS5jb2RlcmJyaWRnZS5pby8yMDIwLzA5LzE2L2xhdW5jaC13ZWJzaXRlLw==">AWS EC2 佈署網站：卡關記錄 &amp; 心得<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0xpZGVteS9tZW50b3ItcHJvZ3JhbS0ybmQteXVjaHVuMzMvaXNzdWVzLzE1">部署 AWS EC2 遠端主機 + Ubuntu LAMP 環境 + phpmyadmin<i class="fa fa-external-link-alt"></i></span><span id="more"></span>
</li>
</ul>
<hr>
<h2 id="部署流程"><a href="#部署流程" class="headerlink" title="部署流程"></a>部署流程</h2><p>網站部署大致可分為下列幾個步驟：</p>
<ol>
<li>設定 AWS EC2 主機<ul>
<li>註冊 AWS 會員</li>
<li>架設遠端主機 EC2 </li>
<li>選擇 Ubuntu Server 並完成設定</li>
<li>儲存私鑰後運行主機</li>
<li>以 CLI 輸入指令連線主機</li>
</ul>
</li>
<li>更新 Ubuntu Server</li>
<li>設定 LAMP Server<ul>
<li>安裝 Tasksel</li>
<li>以 Tasksel 套件來安裝 lamp-server</li>
</ul>
</li>
<li>設定 phpMyAdmin<ul>
<li>安裝 phpmyadmin</li>
<li>設定使用者密碼</li>
<li>修改 MySQL 登入設定</li>
<li>設定 MySQL 的 root password</li>
</ul>
</li>
<li>設定域名</li>
<li>部署寫好的程式到 Server<ul>
<li>利用 git clone 上傳檔案</li>
<li>設定 FileZilla 上傳檔案</li>
</ul>
</li>
</ol>
<hr>
<h2 id="設定-AWS-EC2-主機"><a href="#設定-AWS-EC2-主機" class="headerlink" title="設定 AWS EC2 主機"></a>設定 AWS EC2 主機</h2><p><img src="https://i.imgur.com/BY8vzW5.png"></p>
<ol>
<li>註冊 AWS 會員</li>
<li>進入 AWS 管理控制台，右上方的選單可以選擇架設主機的地區（離所在地越近主機速度越快，但相對之下價格也會比較貴）</li>
</ol>
<p><img src="https://i.imgur.com/dKkK0oF.png"></p>
<ol start="3">
<li>啟動虛擬機器 - 使用 EC2</li>
</ol>
<p><img src="https://i.imgur.com/PPo4YVf.png"></p>
<ol start="4">
<li>選擇主機 Image 方案：找到「Ubuntu Server 18.04 LTS (HVM), SSD Volume Type」並點選 Select</li>
</ol>
<blockquote>
<p>Ubuntu 是基於 Debian 的 Linux 發行版，是個免費開源的作業系統。Ubuntu Server 版是為執行伺服端的應用程式而設計的伺服器版本。</p>
</blockquote>
<p><img src="https://i.imgur.com/wFjYN6H.png"></p>
<ol start="5">
<li>選擇主機等級：選有綠色標籤的免費方案，按右下角的 Next，一直到 Step6</li>
</ol>
<p><img src="https://i.imgur.com/p7ylYvJ.png"></p>
<ol start="6">
<li>設定防火牆：也就是允許哪些 IP 連線。點選「Add Rule」新增欄位，共需新增兩個，分別是「HTTP 跟 HTTPS」，後面的資料會自動帶入（例如 port 80 和 port 443）</li>
</ol>
<p><img src="https://i.imgur.com/2rEWA1g.png"></p>
<ol start="7">
<li>接著點選「Review and Launch」，進入下一步</li>
<li>確認設定都沒問題後，點選 Launch</li>
<li>再來是選擇私鑰，第一格選擇「Create a new key pair」，第二格輸入私鑰名稱，填好後點選右下角儲存私鑰檔案</li>
</ol>
<p><img src="https://i.imgur.com/P7bVck5.png"></p>
<ol start="10">
<li>下載後點選「Launch Instances」啟動設置</li>
<li>確認 Server 有在運行，並記下 IPv4 Public IP（公有 IPv4 地址）</li>
</ol>
<p><img src="https://i.imgur.com/3vlSClN.png"></p>
<ol start="12">
<li>接著點選上方的「連線」，會進入以下頁面</li>
</ol>
<p><img src="https://i.imgur.com/nPl6WqE.png"></p>
<ol start="13">
<li>依照說明，在 CLI 輸入下列指令來連線</li>
</ol>
<pre class="line-numbers language-none"><code class="language-none">$ chmod 400 &lt;私鑰檔案路徑&gt;

$ ssh -i &quot;&lt;私鑰檔案路徑&gt;&quot; ubuntu@ec2-&lt; IPv4 位置&gt;.us-east-2.compute.amazonaws.com<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<hr>
<h2 id="實用指令"><a href="#實用指令" class="headerlink" title="實用指令"></a>實用指令</h2><h3 id="更新-Ubuntu-Server"><a href="#更新-Ubuntu-Server" class="headerlink" title="更新 Ubuntu Server"></a>更新 Ubuntu Server</h3><p>安裝好 Ubuntu Server 後，需要把更新系統版本到最新，避免遇到安全性漏洞以及程式的 BUG。</p>
<p>CLI 指令如下，其中 apt 是用來管理 ubuntu 軟體的程式（可想像成 <code>npm install</code>）：</p>
<pre class="line-numbers language-none"><code class="language-none">$ sudo apt update &amp;&amp; sudo apt upgrade &amp;&amp; sudo apt dist-upgrade<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h3 id="top：查看主機即時資訊"><a href="#top：查看主機即時資訊" class="headerlink" title="top：查看主機即時資訊"></a><code>top</code>：查看主機即時資訊</h3><p>會進去下方介面，可查看有哪些 process 在運行、或占用多少 Memory等等。點選 Q 鍵可離開。</p>
<p><img src="https://i.imgur.com/zgZtaUB.png"></p>
<h3 id="exit：結束連線狀態"><a href="#exit：結束連線狀態" class="headerlink" title="exit：結束連線狀態"></a><code>exit</code>：結束連線狀態</h3><p>輸入 <code>exit</code> 後就會直接登出，回到本地端。</p>
<p>這個指令雖然很基本，自己一開始卻沒有想到，反而還會重開 bash 或等它自動斷線XD<br>此外，bash 可以同時開啟多個視窗，所以是可以分別對本機和遠端主機下指令的。</p>
<hr>
<h2 id="設定-LAMP-Server"><a href="#設定-LAMP-Server" class="headerlink" title="設定 LAMP Server"></a>設定 LAMP Server</h2><h3 id="什麼是-LAMP？"><a href="#什麼是-LAMP？" class="headerlink" title="什麼是 LAMP？"></a>什麼是 LAMP？</h3><p>LAMP 是 Linux 系統上的開源架站組合，縮寫分別代表：</p>
<ul>
<li>L：Linux 作業系統</li>
<li>A：Apache 網頁伺服器</li>
<li>M：MySQL 資料庫</li>
<li>P：PHP 程式語言</li>
</ul>
<h3 id="LAMP-設定步驟"><a href="#LAMP-設定步驟" class="headerlink" title="LAMP 設定步驟"></a>LAMP 設定步驟</h3><ol>
<li>安裝 Tasksel 套件：使用 Tasksel 能快速配置 LAMP 環境</li>
</ol>
<pre class="line-numbers language-none"><code class="language-none">$ sudo apt install tasksel<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<blockquote>
<p>跳出訊息「安裝會佔用 XX 空間，是否繼續安裝？(Y/n)」，輸入 Y。</p>
</blockquote>
<ol start="2">
<li>使用 Tasksel 下載 lamp-server</li>
</ol>
<pre class="line-numbers language-none"><code class="language-none">$ sudo tasksel install lamp-server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>會進入紫色的下載畫面：</p>
<p><img src="https://i.imgur.com/S5t6yOa.png"></p>
<ol start="3">
<li>接著確認伺服器是否有成功運行，在瀏覽器輸入剛剛記下伺服器的 IPv4 IP 位置，若看到下方預設網頁就代表安裝成功！</li>
</ol>
<p><img src="https://i.imgur.com/ednoBoi.png"></p>
<ul>
<li>也可利用 <code>telnet &lt;IP 位置&gt; &lt;port&gt;</code> 指令，檢視這個埠是否可使用，出現 Connected 就代表成功：</li>
</ul>
<p><img src="https://i.imgur.com/GRUQNVb.png"></p>
<hr>
<h2 id="設定-phpmyadmin"><a href="#設定-phpmyadmin" class="headerlink" title="設定 phpmyadmin"></a>設定 phpmyadmin</h2><p>phpMyAdmin 是以 PHP 為基礎的資料庫管理工具，讓使用者能夠以 Web 介面管理 MySQL 資料庫。</p>
<h3 id="phpmyadmin-設定步驟"><a href="#phpmyadmin-設定步驟" class="headerlink" title="phpmyadmin 設定步驟"></a>phpmyadmin 設定步驟</h3><ol>
<li>安裝 phpmyadmin</li>
</ol>
<pre class="line-numbers language-none"><code class="language-none">$ sudo apt install phpmyadmin<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<blockquote>
<p>跳出訊息「安裝會佔用 XX 空間，是否繼續安裝？(Y/n)」，輸入 Y。</p>
</blockquote>
<ol start="2">
<li>進入紫色畫面，選擇連接的網頁伺服器。用空白鍵選 apache2，再按 Enter 確定</li>
</ol>
<p><img src="https://i.imgur.com/arKzEgG.png"></p>
<ol start="3">
<li>是否設定 dbconfig-common？選 <code>&lt;Yes&gt;</code></li>
</ol>
<blockquote>
<p>此處將會建立一個帳號來管理 phpMyAdmin 運行時用到的資料表，使用者名稱預設為 phpmyadmin，接著要設定這個使用者密碼。</p>
</blockquote>
<p><img src="https://i.imgur.com/bXr9daY.png"></p>
<ol start="4">
<li>設定使用者密碼，輸入完成後按向下鍵選 <code>&lt;OK&gt;</code></li>
</ol>
<p><img src="https://i.imgur.com/LwCsRoT.png"></p>
<ol start="5">
<li>再確認一次密碼，輸入完選 <code>&lt;OK&gt;</code>，即完成設置</li>
</ol>
<h3 id="修改-MySQL-登入設定"><a href="#修改-MySQL-登入設定" class="headerlink" title="修改 MySQL 登入設定"></a>修改 MySQL 登入設定</h3><p>設置完 phpMyAdmin 之後，接著要設定 MySQL 的 root 使用者，建立超級使用者（Superuser）以便在 phpMyAdmin 中進行管理。</p>
<p>也就是說，使用者必須登入後，才能夠實際對資料庫進行增刪改查等動作，並且也可透過 phpMyAdmin 圖形化介面直接操作資料庫。</p>
<p>由於 MySQL 預設使用 auth_socket 的驗證 plugin，使用者可以透過 sudo 直接登入 root 帳號。但這樣就無法透過 phpMyAdmin 登入圖形化介面，因為 phpMyAdmin 預設需要密碼登入。</p>
<p><img src="https://i.imgur.com/b7jTMwy.png"></p>
<p>我們可按照下列步驟來設定 root 密碼：</p>
<ol>
<li>修改 MySQL 登入設定，改成使用密碼登入</li>
</ol>
<pre class="line-numbers language-none"><code class="language-none">$ sudo mysql -u root mysql<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ol start="2">
<li>輸入 mysql 指令，啟用設定密碼</li>
</ol>
<ul>
<li>讓 root 帳號啟用設定密碼的插件</li>
</ul>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">UPDATE</span> <span class="token keyword">user</span> <span class="token keyword">SET</span> plugin<span class="token operator">=</span><span class="token string">'mysql_native_password'</span> <span class="token keyword">WHERE</span> <span class="token keyword">User</span><span class="token operator">=</span><span class="token string">'root'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ul>
<li>輸入指令重新載入特權表</li>
</ul>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">mysql<span class="token operator">></span> FLUSH <span class="token keyword">PRIVILEGES</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ul>
<li>退出 mysql 指令</li>
</ul>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">exit</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p><img src="https://i.imgur.com/TDNKk10.png"></p>
<ol start="3">
<li>設定 MySQL 的 root password</li>
</ol>
<pre class="line-numbers language-none"><code class="language-none">$ sudo mysql_secure_installation<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ol start="4">
<li>是否設定密碼？輸入 <code>$ y</code>，開啟 VALIDATE PASSWORD 插件</li>
<li>選擇密碼強度，除非需要非常注重安全性，這裡可輸入 0</li>
</ol>
<blockquote>
<p>選 1 以上要中英文大小寫 + 符號混用 + 一定長度，複雜性較高。</p>
</blockquote>
<p><img src="https://i.imgur.com/8dkOixk.png"></p>
<ol start="6">
<li>設置密碼，需注意這裡輸入密碼不會顯示，確定設置這個密碼嗎？輸入 <code>y</code></li>
</ol>
<p><img src="https://i.imgur.com/7DXZilL.png"></p>
<ol start="7">
<li>以下詢問皆輸入 <code>y</code></li>
</ol>
<ul>
<li>Remove anonymous users?</li>
<li>Disallow root login remotely?</li>
<li>Remove test database and access to it?</li>
<li>Reload privilege tables now?</li>
</ul>
<ol start="8">
<li>最後出現 All Done! 代表設置完成</li>
</ol>
<p><img src="https://i.imgur.com/QpHqCtN.png"></p>
<ol start="9">
<li>接著在瀏覽器輸入 <code>&lt;IPv4 地址&gt;/phpmyadmin</code>，會看到 phpmyadmin 的登入畫面，輸入帳密確認是否能夠登入</li>
</ol>
<ul>
<li>帳號：root</li>
<li>密碼：<code>&lt;步驟 6 設定的 root 密碼&gt;</code></li>
</ul>
<h3 id="修正-MySQL-錯誤"><a href="#修正-MySQL-錯誤" class="headerlink" title="修正 MySQL 錯誤"></a>修正 MySQL 錯誤</h3><p>順利以 root 帳密登入 phpmyadmin 後，會發現有個問題，當我們想查看任一個資料庫的資料表，或是想要執行匯入匯出功能時，會跳出下列錯誤訊息：</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">Warning <span class="token operator">in</span> <span class="token punctuation">.</span><span class="token operator">/</span>libraries<span class="token operator">/</span>plugin_interface<span class="token punctuation">.</span>lib<span class="token punctuation">.</span>php<span class="token comment">#551</span>
 <span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span>: Parameter must be an array <span class="token operator">or</span> an object that implements Countable<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p><img src="https://i.imgur.com/wqqSslF.png"></p>
<p>原因是在 php 7.2 版本後，<code>count()</code> 在沒有添加參數的情形下，會噴出 Warning 警告訊息。這部分需要我們手動解決。其中有兩個部分需利用 vim 編輯器修改：</p>
<blockquote>
<p>vim 指令：編輯完成後，按 esc 再輸入 <code>:wq</code> 即可儲存後退出 vim 編輯器。</p>
</blockquote>
<ol>
<li>修改 Warning in ./libraries/plugin_interface.lib.php#551：</li>
</ol>
<pre class="line-numbers language-none"><code class="language-none">$ sudo vim &#x2F;usr&#x2F;share&#x2F;phpmyadmin&#x2F;libraries&#x2F;plugin_interface.lib.php<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>將第 551 行的 <code>count($options) &gt; 0</code> 去掉，修改後如下：</p>
<blockquote>
<p>小技巧：可使用 PgDn 按鍵快速往下，不用一行一行往下滑XD</p>
</blockquote>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$options</span> <span class="token operator">!=</span> <span class="token constant">null</span> <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// …</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<ol start="2">
<li>修改 Warning in ./libraries/sql.lib.php#613：</li>
</ol>
<pre class="line-numbers language-none"><code class="language-none">$ sudo vim &#x2F;usr&#x2F;share&#x2F;phpmyadmin&#x2F;libraries&#x2F;sql.lib.php<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>將第 613 行修改成換成下列判斷式：</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token operator">||</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token variable">$analyzed_sql_results</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'select_expr'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>完成以上步驟後，就可以正常操作 phpmyadmin 了！</p>
<p>參考資料：</p>
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9pdGhlbHAuaXRob21lLmNvbS50dy9hcnRpY2xlcy8xMDIxNjgxNQ==">Day 03 : 環境架設 part II – MySQL &amp; phpMyAdmin<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9tYWdpY2xlbi5vcmcvdWJ1bnR1LXNlcnZlci0xOC0wNC8=">如何安裝Ubuntu Server 18.04來架設伺服器？<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9tYWdpY2xlbi5vcmcvbGFtcC8=">安裝 LAMP Server + phpMyAdmin 在 Linux 系統上輕鬆架設網站<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9tYWdpY2xlbi5vcmcvdWJ1bnR1LXNlcnZlci1teXNxbC1waHAv">使用Ubuntu Server架設MySQL伺服器，並於PHP程式中存取MySQL資料庫<i class="fa fa-external-link-alt"></i></span></li>
</ul>
<hr>
<h3 id="修改-MySQL-帳號設定"><a href="#修改-MySQL-帳號設定" class="headerlink" title="修改 MySQL 帳號設定"></a>修改 MySQL 帳號設定</h3><p>此外，若想要使用 phpmyadmin 以外的圖形化界面操作資料庫（例如：<span class="exturl" data-url="aHR0cHM6Ly93d3cuc2VxdWVscHJvLmNvbS8=">Sequel Pro<i class="fa fa-external-link-alt"></i></span>），可能會有無法連線的問題，因為預設只能從本機登入 MySQL，因此我們需要修改一些設定，步驟如下：</p>
<ol>
<li><p>到 phpmyadmin 使用者帳號的介面，點選 root 帳號的「編輯權限」後，會進入編輯權限介面：</p>
</li>
<li><p>點選上方的「登入資訊」，在修改登入的主機名稱，改成任意主機，符號會變成 <code>&amp;</code></p>
</li>
</ol>
<p><img src="https://i.imgur.com/Kd6FQxB.png"></p>
<ol start="3">
<li>回到帳號介面，會發現多了一組 root 帳號如下，這樣就完成設定了！可使用 phpmyadmin 以外的軟體來連到遠端組機</li>
</ol>
<p><img src="https://i.imgur.com/EzcFjgw.png"></p>
<hr>
<h2 id="設定域名"><a href="#設定域名" class="headerlink" title="設定域名"></a>設定域名</h2><p><img src="https://i.imgur.com/hBbMxyF.png"></p>
<ol>
<li>先在 <span class="exturl" data-url="aHR0cHM6Ly93d3cuZ2FuZGkubmV0L3poLUhhbnQ=">gandi.net<i class="fa fa-external-link-alt"></i></span> 註冊帳號</li>
<li>到電子信箱收驗證信</li>
<li>進入域名頁面，輸入想要的網域名稱後，再按購買</li>
</ol>
<p><img src="https://i.imgur.com/jBsFzWE.png"></p>
<ol start="4">
<li>會跳轉到註冊網域名稱的頁面，下面會有搜尋結果能夠選擇加入購物車</li>
</ol>
<p><img src="https://i.imgur.com/5rjovGd.png"></p>
<ol start="5">
<li>填寫購買資訊，同意相關合約</li>
</ol>
<p><img src="https://i.imgur.com/YDjIGND.png"></p>
<ol start="6">
<li>再結帳前可在步驟 2 最下方填入優惠代碼</li>
<li>購買完成！要記得收取確認信</li>
</ol>
<p><img src="https://i.imgur.com/YJtThnL.png"></p>
<ol start="8">
<li>到域名頁面，點選剛剛註冊好的域名</li>
</ol>
<p><img src="https://i.imgur.com/T0SX6D6.png"></p>
<ol start="9">
<li>點選區域檔記錄，將 A 的值修改成 AWS 主機的 IPv4 地址</li>
</ol>
<p><img src="https://i.imgur.com/NgRKfZN.png"></p>
<ol start="10">
<li>在瀏覽器輸入 <code>&lt;你的域名&gt;</code>，如果有出現和先前一樣的 Apache2 Ubuntu 預設頁面，就代表部署成功！</li>
</ol>
<hr>
<h2 id="部署寫好的程式到-Server"><a href="#部署寫好的程式到-Server" class="headerlink" title="部署寫好的程式到 Server"></a>部署寫好的程式到 Server</h2><ol>
<li>首先確定有連線到 Server，也就是前面提到的這段指令：</li>
</ol>
<pre class="line-numbers language-none"><code class="language-none">$ chmod 400 &lt;私鑰檔案路徑&gt;

$ ssh -i &quot;&lt;私鑰檔案路徑&gt;&quot; ubuntu@ec2-&lt; IPv4 位置&gt;.us-east-2.compute.amazonaws.com<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<ol start="2">
<li>輸入 <code>cd ..</code> 兩次，回到根目錄底下</li>
<li>輸入 <code>ls</code> 找到 var 資料夾</li>
</ol>
<p><img src="https://i.imgur.com/mErapfq.png"></p>
<ol start="4">
<li>輸入 <code>cd var/www/html</code>，會進到預設的 apache 首頁所在目錄，也就是我們剛才連到的域名頁面</li>
<li>這時若想在該目錄新增檔案，會發現權限不夠</li>
</ol>
<p><img src="https://i.imgur.com/XQh7p9v.png"></p>
<ol start="6">
<li>這時可以輸入 <code>cd ..</code> 回到 <code>/var/www</code> 目錄，再輸入 <code>ls -al</code> 可知目前只有 root 帳號有編輯權限：</li>
</ol>
<p><img src="https://i.imgur.com/MJ6kZw7.png"></p>
<ol start="7">
<li>因此我們要透過 <code>chown</code> 指令來修改 ubuntu 帳號的檔案權限：</li>
</ol>
<blockquote>
<ul>
<li><code>chown（change owner）</code>：改變檔案擁有者 = 定義誰擁有文件。</li>
<li><code>chmod（change mode）</code>：改變檔案的權限 = 定義誰可以做什麽。</li>
</ul>
</blockquote>
<pre class="line-numbers language-none"><code class="language-none">$ sudo chown ubuntu &#x2F;var&#x2F;www&#x2F;html<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ol start="8">
<li>修改完成後即可在 <code>var/www/html</code> 目錄新增檔案！這時再以 <code>la -al</code> 檢視，會發現變成 ubuntu 擁有權限：</li>
</ol>
<p><img src="https://i.imgur.com/uG4D3Ee.png"></p>
<h3 id="利用-git-clone-上傳專案"><a href="#利用-git-clone-上傳專案" class="headerlink" title="利用 git clone 上傳專案"></a>利用 git clone 上傳專案</h3><p>以上傳 GitHub repository 為例：</p>
<ol>
<li>在 CLI 輸入 <code>git clone &lt;GitHub 專案網址&gt;</code></li>
<li>到瀏覽器輸入 <code>域名/對應路徑/檔案名稱</code>，確認是否有成功把檔案放上去</li>
</ol>
<h3 id="FileZilla-設定"><a href="#FileZilla-設定" class="headerlink" title="FileZilla 設定"></a>FileZilla 設定</h3><p>除了使用 CLI 操作，我們還可以透過設定 FileZilla，以 key-pairs 登入 AWS EC2 來存取檔案，如此一來即可直接在圖形化界面進行操作。</p>
<p>設定步驟如下：</p>
<ol>
<li>在 FileZilla 新增站台</li>
</ol>
<ul>
<li>選擇 SFTP 協定</li>
<li>主機輸入 AWS 的 IP 位置</li>
<li>登入型式選擇「金鑰檔案」，也就是設定主機時的那個 <code>.pem</code> 檔案</li>
</ul>
<p><img src="https://i.imgur.com/CSlkeAp.png"></p>
<ol start="2">
<li>設定完成後點選連線，會進入 <code>/home/ubuntu</code> 目錄</li>
<li>回到根目錄，進到 <code>var/www/html</code>，會看到 apache 的預設首頁 index.html 檔</li>
</ol>
<p><img src="https://i.imgur.com/MqTnOwv.png"></p>
<ol start="4">
<li>接著就可以放上寫好的程式</li>
<li>在瀏覽器輸入 <code>&lt;網域名稱/路徑&gt;</code>，確認是否有部署成功</li>
</ol>
<h3 id="修改-conn-php"><a href="#修改-conn-php" class="headerlink" title="修改 conn.php"></a>修改 <code>conn.php</code></h3><p>如果是部署動態網站，需要連線到遠端資料庫，那就需要修改 <code>conn.php</code> 連線資料庫需要的資料，也就是修改成剛剛設定的 root 帳密：</p>
<pre class="line-numbers language-none"><code class="language-none">$server_name &#x3D; &#39;localhost&#39;;
$username &#x3D; &#39;root&#39;;
$password &#x3D; &#39;&lt;root 密碼&gt;&#39;;
$db_name &#x3D; &#39;&lt;資料庫名稱&gt;&#39;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<hr>
<h2 id="部署心得"><a href="#部署心得" class="headerlink" title="部署心得"></a>部署心得</h2><p>終於來到一直很期待的網站部署，想起之前隨意聊就有提過，完成十四週能夠架一個自己的網站，擁有屬於自己的網域，可以帥氣的和朋友分享自己做出的網站了！和助教索取折扣碼的當下，竟然莫名有點感動QQ</p>
<p>發現自己終於走到課程的一半，雖然後面還有一段路要走，但也在過程中體會到，自己很喜歡在寫程式這件事中獲得的成就感。好像有點扯遠了，回到這禮拜的部署心得XD</p>
<p>主要是參考幾位同學的筆記，還有一些網路上的資料，跟著步驟一步步進行部署前的設定。其實筆記中步驟都已經整理得很清楚，自己只是跟隨前人的腳步去操作，也因此少繞了很多遠路，很佩服從零開始摸索的學長姐們，感謝萬分。</p>
<p>但過程中也有遇到一些不懂的部分，還是想要去理解每個步驟的意義是什麼，就花了點時間去查找資料，例如：</p>
<ul>
<li>為什麼選擇用 Ubuntu Server？</li>
</ul>
<p>Ubuntu Server 是為執行伺服端的應用程式而設計的伺服器版本。簡言之，就是專門用來架設伺服器。</p>
<ul>
<li>為什麼要安裝 Tasksel 套件？</li>
</ul>
<p>能夠使用 Tasksel 安裝 LAMP，快速配置 LAMP 環境。</p>
<ul>
<li>什麼是 LAMP Server？</li>
</ul>
<p>是 Linux 系統上的開源架站組合，縮寫代表：Linux + Apache + Mysql + PHP。</p>
<ul>
<li>還有在 phpmyadmin 設定 dbconfig-common 時，會建立一個帳號來管理 phpMyAdmin 運行時用到的資料表，使用者名稱預設為 phpmyadmin。</li>
<li>這和之後設定 MySQL 的 root（超級使用者）其實對象不同，一開始有困惑說為什麼要設定兩次密碼，root 這組帳號可用來登入 phpMyAdmin，能夠在圖形化界面管理資料庫。</li>
</ul>
<h3 id="待解決問題"><a href="#待解決問題" class="headerlink" title="待解決問題"></a>待解決問題</h3><p>上傳 Markdown 檔案時，發現中文部分會有亂碼問題，有查到幾個解決方法，但覺得好像在這花有點多時間，決定之後再參來考方法三來解決：</p>
<ol>
<li>安裝 apache-mod-markdown 套件</li>
</ol>
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvMzI1OTczMTYvc2VydmluZy1tYXJrZG93bi1mcm9tLWFwYWNoZS0yLTQtNy1vbi11YnVudHU=">Serving markdown from Apache 2.4.7 on Ubuntu<i class="fa fa-external-link-alt"></i></span>：安裝完套件後在第二步卡住，不是很明白要怎麼建立模組？</li>
</ul>
<ol start="2">
<li>把 markdown 檔案轉成 html 檔</li>
</ol>
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cuaXRyZWFkMDEuY29tL2NvbnRlbnQvMTU0Njc4MzkzNy5odG1s">markdown在ubuntu上的使用<i class="fa fa-external-link-alt"></i></span></li>
</ul>
<ol start="3">
<li>安裝 hexo 這個框架，能夠支援 Markdown 語法，感覺這比較符合需求</li>
</ol>
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9scnNjeS5naXRodWIuaW8vMjAxNy8xMS8xMC9VYnVudHUtR2l0aHViLWlvLWNvbmZpZy1IZXhvLw==">Ubuntu 16.04下从零起步搭建配置github.io博客——Hexo<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9ibGFja21hcGxlLm1lL2hleG8tdHV0b3JpYWwv">Hexo+GitHub，新手也可以快速建立部落格<i class="fa fa-external-link-alt"></i></span></li>
</ul>
]]></content>
      <categories>
        <category>Back-End</category>
      </categories>
      <tags>
        <tag>Back-End</tag>
        <tag>Database</tag>
        <tag>Server</tag>
      </tags>
  </entry>
  <entry>
    <title>[week 17] 後端中階 - Express 中不可或缺的拼圖：淺談 Middleware</title>
    <url>/express-middleware/</url>
    <content><![CDATA[<blockquote>
<p>本篇為 <span class="exturl" data-url="aHR0cHM6Ly9saWRlbXkuY29tL3AvYmUyMDEtZXhwcmVzcy1zZXF1ZWxpemU=">[BE201] 後端中階：Express 與 Sequelize<i class="fa fa-external-link-alt"></i></span> 這門課程的學習筆記。如有錯誤歡迎指正！</p>
</blockquote>
<pre class="line-numbers language-none"><code class="language-none">學習目標：

 P1 學習如何使用 Express 及其相關套件
 P1 我理解為什麼會需要框架<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<span id="more"></span>
<hr>
<h2 id="Middleware-中間介"><a href="#Middleware-中間介" class="headerlink" title="Middleware 中間介"></a>Middleware 中間介</h2><p>在上一篇筆記 <span class="exturl" data-url="aHR0cHM6Ly9oYWNrbWQuaW8vQEhlaWRpLUxpdS9ub3RlLWJlMjAxLWV4cHJlc3Mtbm9kZQ==">後端中階 - Node.js + Express 框架：建立一個靜態網頁<i class="fa fa-external-link-alt"></i></span>，我們學到如何透過 Node.js 搭配 Express 框架，來快速建立一個靜態網頁。並瞭解到什麼是 MVC 架構，以及如何串接 MySQL 資料庫。</p>
<p>而 Express 的核心，其實就是由 Routing（路由系統）和 Middleware（中間介）兩個部分所組成。</p>
<p>也就是說，Express 會根據定義不同路由來執行接收到的 request，過程中會透過一連串的 middleware 處理，執行到最後產生 response。</p>
<p><img src="https://i.imgur.com/uvrlRi6.png"></p>
<p>接下來我們會針對 Middleware 的部分做介紹。</p>
<h3 id="什麼是-Middleware？"><a href="#什麼是-Middleware？" class="headerlink" title="什麼是 Middleware？"></a>什麼是 Middleware？</h3><p>在 Express 開發框架中，middleware 扮演資料庫與應用程式之間的溝通橋樑，透過不同類別的 middleware，依照需求對資料進行不同處裡，讓資料傳遞更加便利。</p>
<p>例如先前範例中的 <code>app.get(&#39;/todos&#39;, todoController.getAll)</code>，其實就可以看做是一個 middleware。</p>
<p>我們可透過 middleware function 傳入三個參數，然後輸出想要的資料：</p>
<ul>
<li>第一個參數是 request</li>
<li>第二個參數是 response</li>
<li>再透過第三個參數 next 把控制權轉移到下一個 middleware</li>
</ul>
<p>舉個簡單的例子，在之前實作 todolist 的 index.js 中加入 <code>app.use()</code>，代表整個程式都能使用這個 middleware：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> db <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./db'</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> port <span class="token operator">=</span> <span class="token number">5002</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> todoController <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./controllers/todo'</span><span class="token punctuation">)</span>

app<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">'view engine'</span><span class="token punctuation">,</span> <span class="token string">'ejs'</span><span class="token punctuation">)</span>

<span class="token comment">// app.use(): 代表整個程式都能使用這個 middleware</span>
app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Time: '</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>

app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/todos'</span><span class="token punctuation">,</span> todoController<span class="token punctuation">.</span>getAll<span class="token punctuation">)</span>
app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/todos/:id'</span><span class="token punctuation">,</span> todoController<span class="token punctuation">.</span>get<span class="token punctuation">)</span>

app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span>port<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  db<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Example app listening at http://localhost:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>port<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>重整瀏覽器頁面時，會發現畫面什麼東西都沒有：</p>
<p><img src="https://i.imgur.com/N6etIbh.png"></p>
<p>但是在 CLI 介面會印出執行結果，每重整一次畫面就會執行 log 一次：</p>
<p><img src="https://i.imgur.com/J3r3CtM.png"></p>
<p>之所以沒有得到 response，是因為沒有加入第三個參數，也就是呼叫 next 把控制權轉移到下一個 middleware。可以把程式碼修改如下：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Time: '</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">// 呼叫 next 把控制權轉移到下一個 middleware</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>重整頁面後，就能看到經渲染過的畫面，同時 CLI 介面上也會印出接收 request 的時間：</p>
<p><img src="https://i.imgur.com/9vEZvbU.png"></p>
<p>這其實就是一個簡單的 middleware 應用。那這個機制實際上在 Express 有哪些用處呢？比如說，在 Express 程式中，並沒有內建解析透過 post method 的 request body、管理 session 機制等功能，就必須透過 middleware 來實現。</p>
<p>此外，middleware 處理是有順序性的。以一個簡單的權限管理機制為範例，例如網址列上必須有 <code>admin</code> 才能顯示頁面：</p>
<h4 id="方法一：最直覺的作法"><a href="#方法一：最直覺的作法" class="headerlink" title="方法一：最直覺的作法"></a>方法一：最直覺的作法</h4><p>這個方法是透過 Express 內建的 <code>.query</code> 語法，來拿到網址列上的參數。</p>
<p>直接在兩個 Controllers 都加上 checkPermission() 進行權限驗證：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> todoModel <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'../models/todo'</span><span class="token punctuation">)</span>

<span class="token keyword">function</span> <span class="token function">checkPermission</span><span class="token punctuation">(</span><span class="token parameter">req</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// 利用 .query 能夠拿到網址列上的參數</span>
  <span class="token keyword">return</span> req<span class="token punctuation">.</span>query<span class="token punctuation">.</span>admin <span class="token operator">===</span> <span class="token string">'1'</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">const</span> todoController <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  <span class="token function-variable function">getAll</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// 如果驗證失敗就結束 request</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">checkPermission</span><span class="token punctuation">(</span>req<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    todoModel<span class="token punctuation">.</span><span class="token function">getAll</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> results</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token keyword">return</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>
      res<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token string">'todos'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>
        todos<span class="token operator">:</span> results
      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>

  <span class="token function-variable function">get</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// 如果驗證失敗就結束 request</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">checkPermission</span><span class="token punctuation">(</span>req<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> id <span class="token operator">=</span> req<span class="token punctuation">.</span>params<span class="token punctuation">.</span>id
    todoModel<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> results</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token keyword">return</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>
      res<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token string">'todo'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>
        todo<span class="token operator">:</span> results<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> todoController<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>回到瀏覽器，會發現必須網址列加上 <code>?admin=1</code> 參數才能讀取畫面：</p>
<p><img src="https://i.imgur.com/rJV2764.png"></p>
<p>這樣就完成簡單的權限驗證機制，但這其實不是一個好做法，一旦 function 變多就會不易管理。這種情況就是 middleware 登場的時候了！</p>
<h4 id="方法二：透過-middleware-機制"><a href="#方法二：透過-middleware-機制" class="headerlink" title="方法二：透過 middleware 機制"></a>方法二：透過 middleware 機制</h4><p>在 index.js 加上 app.use()，並傳入 next 參數，若網址列通過驗證就會把控制權傳下去：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// 如果網址列通過驗證，就把控制權傳下去</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>req<span class="token punctuation">.</span>query<span class="token punctuation">.</span>admin <span class="token operator">===</span> <span class="token string">'1'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// 不通過的話就顯示 Error</span>
    res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">'Error'</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>執行結果如下：</p>
<p><img src="https://i.imgur.com/WkQUoAq.png"></p>
<p>這其實就是 middleware 的作用，相較於方法一，我們能透過 middleware 來簡化程式碼。</p>
<p>此外，我們也能改寫上述程式碼，獨立出 checkPermission() 這個 function 來進行驗證：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">checkPermission</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>req<span class="token punctuation">.</span>query<span class="token punctuation">.</span>admin <span class="token operator">===</span> <span class="token string">'1'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
    res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">'Error'</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>checkPermission<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>這種寫法的好處，在於我們可以針對不同路由進行處理。例如加在 <code>/todos</code> 時，就只有這個路由會被影響：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/todos'</span><span class="token punctuation">,</span> checkPermission<span class="token punctuation">,</span> todoController<span class="token punctuation">.</span>getAll<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>在 <code>/todos</code> 這個路由，必須加上 <code>?admin=1</code>  才能顯示畫面：</p>
<p><img src="https://i.imgur.com/38VqxUf.png"></p>
<p>但是 <code>/todos/:id</code> 這個路由不會受到影響，因為沒有加上 checkPermission() 這個 middleware：</p>
<p><img src="https://i.imgur.com/wqOkqgg.png"></p>
<p>在上一篇筆記的 todolist 範例中，之所以沒有寫到 next 來轉移控制權，是因為處理完就回傳 response 資料，既然不會用到 next 這個參數，就可省略宣告。</p>
<h2 id="body-parser：用來解析-HTTP-Request"><a href="#body-parser：用來解析-HTTP-Request" class="headerlink" title="body-parser：用來解析 HTTP Request"></a>body-parser：用來解析 HTTP Request</h2><p>接著要來介紹 body-parser 這個很常使用到的 middleware，使用方法可參考 GitHub 上 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2V4cHJlc3Nqcy9ib2R5LXBhcnNlciNyZWFkbWU=">expressjs/body-parser<i class="fa fa-external-link-alt"></i></span> 的範例。</p>
<p>body-parser 是一個用來解析解析 HTTP Request 的中間介。前面有提到說，我透過 Express 內建的語法，我們只能拿到 query string，因此只適用於 GET method，但若是 POST method 就必須透過 middleware 才能拿到 request body。</p>
<h3 id="安裝-body-parser"><a href="#安裝-body-parser" class="headerlink" title="安裝 body-parser"></a>安裝 body-parser</h3><pre class="line-numbers language-none"><code class="language-none">$ npm install body-parser<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p><img src="https://i.imgur.com/4q8sKI0.png"></p>
<h3 id="body-parser-語法"><a href="#body-parser-語法" class="headerlink" title="body-parser 語法"></a>body-parser 語法</h3><p>body-parser 根據不同語法，能夠處理下列幾種格式資料：</p>
<ul>
<li>bodyParser.urlencoded()<ul>
<li>處理 UTF-8 編碼的資料，常見的表單（form）提交</li>
<li>例如：application/x-www-form-urlencoded</li>
</ul>
</li>
<li>bodyParser.json()<ul>
<li>處理 JSON 格式的資料</li>
<li>例如：application/json</li>
</ul>
</li>
<li>bodyParser.text()<ul>
<li>處理 type 為 text 的資料</li>
<li>例如：text/html, text/css</li>
</ul>
</li>
<li>bodyParser.raw()<ul>
<li>處理 type 為 application 的資料</li>
<li>例如：application/pdf, application/zip</li>
</ul>
</li>
</ul>
<p>程式碼範例如下：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>bodyParser<span class="token punctuation">.</span><span class="token function">urlencoded</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> extended<span class="token operator">:</span> <span class="token boolean">false</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>bodyParser<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h3 id="實作新增-todo-功能"><a href="#實作新增-todo-功能" class="headerlink" title="實作新增 todo 功能"></a>實作新增 todo 功能</h3><p>同樣以之前的 todolist 範例，繼續實作新增 todo 功能：</p>
<ol>
<li>在 index.js 引入 <code>body-parser</code> 套件，就可以使用 bodyParser() 處理 Request。接著在根目錄新增一個處理 addTodo 的路由：</li>
</ol>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 記得要引入 body-parser 才能使用</span>
<span class="token keyword">const</span> bodyParser <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'body-parser'</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> db <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./db'</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> port <span class="token operator">=</span> <span class="token number">5002</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> todoController <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./controllers/todo'</span><span class="token punctuation">)</span>

app<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">'view engine'</span><span class="token punctuation">,</span> <span class="token string">'ejs'</span><span class="token punctuation">)</span>
<span class="token comment">// 處理 UTF-8 編碼的資料</span>
app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>bodyParser<span class="token punctuation">.</span><span class="token function">urlencoded</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> extended<span class="token operator">:</span> <span class="token boolean">false</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment">// 處理 json 資料</span>
app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>bodyParser<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/todos'</span><span class="token punctuation">,</span> todoController<span class="token punctuation">.</span>getAll<span class="token punctuation">)</span>
app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/todos/:id'</span><span class="token punctuation">,</span> todoController<span class="token punctuation">.</span>get<span class="token punctuation">)</span>
<span class="token comment">// 在根目錄新增一個 addTodo 路由</span>
app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span> todoController<span class="token punctuation">.</span>addTodo<span class="token punctuation">)</span>

app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span>port<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  db<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Example app listening at http://localhost:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>port<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ol start="2">
<li>在 Controllers 新增一個處理 addTodo 的 Controller，須注意這裡只負責 render 渲染頁面，而不是真的處理新增 todo 動作：</li>
</ol>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> todoModel <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'../models/todo'</span><span class="token punctuation">)</span>

<span class="token keyword">const</span> todoController <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  <span class="token function-variable function">getAll</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    todoModel<span class="token punctuation">.</span><span class="token function">getAll</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> results</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token keyword">return</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>
      res<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token string">'todos'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>
        todos<span class="token operator">:</span> results
      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>

  <span class="token function-variable function">get</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">const</span> id <span class="token operator">=</span> req<span class="token punctuation">.</span>params<span class="token punctuation">.</span>id
    todoModel<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> results</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token keyword">return</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>
      res<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token string">'todo'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>
        todo<span class="token operator">:</span> results<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>

  <span class="token comment">// 這裡只負責 render 頁面，並不是真的處理新增 todo</span>
  <span class="token function-variable function">addTodo</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    res<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token string">'addTodo'</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> todoController<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ol start="3">
<li>接著要實作 addTodo 的 view 部分，也就是新增一個 addTodo.ejs 檔：</li>
</ol>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>h1<span class="token operator">></span>Add Todo<span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span>

<span class="token operator">&lt;</span>form method<span class="token operator">=</span><span class="token string">"POST"</span><span class="token string">" action="</span><span class="token operator">/</span>todos"<span class="token operator">></span>
  Content<span class="token operator">:</span> <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"text"</span> name<span class="token operator">=</span><span class="token string">"content"</span> <span class="token operator">/</span><span class="token operator">></span>
  <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"submit"</span> <span class="token operator">/</span><span class="token operator">></span>
<span class="token operator">&lt;</span><span class="token operator">/</span>form<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>執行後可在瀏覽器確認是否有畫面：</p>
<p><img src="https://i.imgur.com/scuiz9Q.png"></p>
<p>這時如果點選提交，會跳轉到錯誤頁面，這是因為還沒有處理路由：</p>
<p><img src="https://i.imgur.com/9xs6k0Y.png"></p>
<ol start="4">
<li>回到 index.js 新增一個處理 newTodo 的路由：</li>
</ol>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 新增一個處理 newTodo 的路由</span>
app<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'/todos'</span><span class="token punctuation">,</span> todoController<span class="token punctuation">.</span>newTodo<span class="token punctuation">)</span>
app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/todos'</span><span class="token punctuation">,</span> todoController<span class="token punctuation">.</span>getAll<span class="token punctuation">)</span>
app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/todos/:id'</span><span class="token punctuation">,</span> todoController<span class="token punctuation">.</span>get<span class="token punctuation">)</span>
<span class="token comment">// 新增一個處裡 addTodo 的路由</span>
app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span> todoController<span class="token punctuation">.</span>addTodo<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ol start="5">
<li>接著同樣新增一個處理 newTodo 的 Controller，確認是否有成功拿到表單資料：</li>
</ol>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function-variable function">newTodo</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// 透過 body-parser 解析 resquest body 來拿取 content</span>
  <span class="token keyword">const</span> content <span class="token operator">=</span> req<span class="token punctuation">.</span>body<span class="token punctuation">.</span>content
  <span class="token comment">// 先輸出確認是否有拿到資料</span>
  res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>在瀏覽器提交表單，確認有拿到資料：</p>
<p><img src="https://i.imgur.com/EQIScXT.png"></p>
<p>之所以能夠拿到表單提交的資料，是透過 body-parser 這個中間介解析 resquest body，才能拿取 content，否則程式會因為無法解析而出現錯誤。</p>
<ol start="6">
<li>接著繼續修改 newTodo Controller，把資料交給 Model 處理：</li>
</ol>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function-variable function">newTodo</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// 透過 body-parser 解析 resquest body 來拿取 content</span>
  <span class="token keyword">const</span> content <span class="token operator">=</span> req<span class="token punctuation">.</span>body<span class="token punctuation">.</span>content
  todoModel<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>content<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token keyword">return</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 重新導回 todos 頁面</span>
    res<span class="token punctuation">.</span><span class="token function">redirect</span><span class="token punctuation">(</span><span class="token string">'/todos'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ol start="7">
<li>再來是處理 todoModel.add() 的部分，也就是在 Model 新增一個 add 功能：</li>
</ol>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 新增 todoModel.add()</span>
<span class="token function-variable function">add</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">content<span class="token punctuation">,</span> cb</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  db<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>
    <span class="token string">'INSERT INTO todos(content) VALUES(?)'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>content<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> results</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">cb</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">cb</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>回到瀏覽器確認是否能夠新增 todo：</p>
<p><img src="https://i.imgur.com/Y9fPgmN.png"></p>
<p>這樣就完成一個簡單的 Back-end 專案了！並且有 MVC 架構，也就是 View 顯示畫面，Model 處理資料，Controller 藉由不同路由接收 requset，會執行相對應的 method；還有透過 body-parser 這個 middleware 處理 POST 表單提交的資料。</p>
<h2 id="express-session：負責管理-session"><a href="#express-session：負責管理-session" class="headerlink" title="express-session：負責管理 session"></a>express-session：負責管理 session</h2><p>再來介紹 Express 框架中，用來管理 session 的中間介：express-session，使用方法可參考 GitHub 的 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2V4cHJlc3Nqcy9zZXNzaW9u">expressjs/session<i class="fa fa-external-link-alt"></i></span> 頁面。</p>
<h3 id="安裝-express-session"><a href="#安裝-express-session" class="headerlink" title="安裝 express-session"></a>安裝 express-session</h3><pre class="line-numbers language-none"><code class="language-none">$ npm install express-session<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p><img src="https://i.imgur.com/jWw5ZYd.png"></p>
<h3 id="實作簡易登入功能"><a href="#實作簡易登入功能" class="headerlink" title="實作簡易登入功能"></a>實作簡易登入功能</h3><p>接著延續前面的 todolist 範例，實作一個簡單的登入功能。</p>
<ol>
<li>在 index.js引入 express-session 套件：</li>
</ol>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 引入 express-session</span>
<span class="token keyword">const</span> session <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express-session'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<ol start="2">
<li>接著設定 app 載入模組 express-session：</li>
</ol>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 在 app.js 中設定載入模組 express-session</span>
app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token function">session</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
  secret<span class="token operator">:</span> <span class="token string">'keyboard cat'</span><span class="token punctuation">,</span>
  resave<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
  saveUninitialized<span class="token operator">:</span> <span class="token boolean">true</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ol start="3">
<li>實作 login、提交表單、logout 的路由，須注意是 req.session，request 才有 session：</li>
</ol>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 實作 login 路由</span>
app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/login'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  res<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token string">'login'</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
<span class="token comment">// login 提交表單的路由</span>
app<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'/login'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>req<span class="token punctuation">.</span>body<span class="token punctuation">.</span>password <span class="token operator">===</span> <span class="token string">'abc'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// 注意是 request 才有 session</span>
    req<span class="token punctuation">.</span>session<span class="token punctuation">.</span>isLogin <span class="token operator">=</span> <span class="token boolean">true</span>
    <span class="token comment">// 成功就導回首頁；失敗則導回上一頁</span>
    res<span class="token punctuation">.</span><span class="token function">redirect</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
    res<span class="token punctuation">.</span><span class="token function">redirect</span><span class="token punctuation">(</span><span class="token string">'/login'</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
<span class="token comment">// 實作 logout 路由</span>
app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/logout'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  req<span class="token punctuation">.</span>session<span class="token punctuation">.</span>isLogin <span class="token operator">=</span> <span class="token boolean">false</span>
  res<span class="token punctuation">.</span><span class="token function">redirect</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ol start="4">
<li>設定 Controller 部分，在 addTo 首頁加上 isLogin 參數，用來判別是否登入：</li>
</ol>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function-variable function">addTodo</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  res<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token string">'addTodo'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>
    isLogin<span class="token operator">:</span> req<span class="token punctuation">.</span>session<span class="token punctuation">.</span>isLogin
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ol start="5">
<li>設定 view 部分，在 addTodo.ejs 頁面顯示是否登入，增加連結導向 login 頁面或 logout：</li>
</ol>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>h1<span class="token operator">></span>Add Todo<span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span>

<span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token keyword">if</span><span class="token punctuation">(</span>isLogin<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token operator">%</span><span class="token operator">></span>
  已經登入  <span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"/logout"</span><span class="token operator">></span>登出<span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span>
<span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span> <span class="token operator">%</span><span class="token operator">></span>
  請先登入  <span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"/login"</span><span class="token operator">></span>登入<span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span>
<span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token punctuation">&#125;</span> <span class="token operator">%</span><span class="token operator">></span>

<span class="token operator">&lt;</span>form method<span class="token operator">=</span><span class="token string">"POST"</span><span class="token string">" action="</span><span class="token operator">/</span>todos"<span class="token operator">></span>
  Content<span class="token operator">:</span> <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"text"</span> name<span class="token operator">=</span><span class="token string">"content"</span> <span class="token operator">/</span><span class="token operator">></span>
  <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"submit"</span> <span class="token operator">/</span><span class="token operator">></span>
<span class="token operator">&lt;</span><span class="token operator">/</span>form<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ol start="6">
<li>新增 login.ejs 頁面，能夠輸入密碼提交表單：</li>
</ol>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>h1<span class="token operator">></span>Login<span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span>

<span class="token operator">&lt;</span>form method<span class="token operator">=</span><span class="token string">"POST"</span> action<span class="token operator">=</span><span class="token string">"/login"</span><span class="token operator">></span>
  Password<span class="token operator">:</span> <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"password"</span> name<span class="token operator">=</span><span class="token string">"password"</span> <span class="token operator">/</span><span class="token operator">></span>
  <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"submit"</span> <span class="token operator">/</span><span class="token operator">></span>
<span class="token operator">&lt;</span><span class="token operator">/</span>form<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>執行結果：</p>
<p><img src="https://i.imgur.com/3RZUKgn.png"></p>
<p>這樣就透過 express-session 中間介提供的功能，完成簡單的登入登出功能。</p>
<p>但這種寫法其實會遇到一個問題，也就是每個 render 的頁面都要加上 isLogin 判斷登入狀態，我們再來要介紹的中間介就可以解決這個問題。</p>
<h2 id="connect-flash：顯示錯誤訊息"><a href="#connect-flash：顯示錯誤訊息" class="headerlink" title="connect-flash：顯示錯誤訊息"></a>connect-flash：顯示錯誤訊息</h2><p>藉由 connect-flash 提供的 flash message 功能，我們就能在頁面顯示錯誤訊息等等，其實這背後的機制就是透過 session，能夠和 express-session 搭配使用。</p>
<p>使用方法可參考 GitHub 的 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2phcmVkaGFuc29uL2Nvbm5lY3QtZmxhc2g=">jaredhanson/connect-flash<i class="fa fa-external-link-alt"></i></span> 頁面。</p>
<h3 id="安裝-connect-flash"><a href="#安裝-connect-flash" class="headerlink" title="安裝 connect-flash"></a>安裝 connect-flash</h3><pre class="line-numbers language-none"><code class="language-none">$ npm install connect-flash<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="實作錯誤顯示功能"><a href="#實作錯誤顯示功能" class="headerlink" title="實作錯誤顯示功能"></a>實作錯誤顯示功能</h3><ol>
<li>在 index.js引入 connect-flash 套件：</li>
</ol>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 引入 connect-flash</span>
<span class="token keyword">const</span> flash <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'connect-flash'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<ol start="2">
<li>設定 app 載入 flash 模組：</li>
</ol>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token function">flash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ol start="3">
<li>在 login 路由使用 flash()，傳入的兩個參數分別代表 key: value：</li>
</ol>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/login'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  res<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token string">'login'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// 從 flash() 中拿取 errorMessage 這個 key 的 value</span>
    errorMessage<span class="token operator">:</span> req<span class="token punctuation">.</span><span class="token function">flash</span><span class="token punctuation">(</span><span class="token string">'errorMessage'</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
app<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'/login'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>req<span class="token punctuation">.</span>body<span class="token punctuation">.</span>password <span class="token operator">===</span> <span class="token string">'abc'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    req<span class="token punctuation">.</span>session<span class="token punctuation">.</span>isLogin <span class="token operator">=</span> <span class="token boolean">true</span>
    res<span class="token punctuation">.</span><span class="token function">redirect</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// falsh() 要傳入兩個參數，代表 key: value</span>
    req<span class="token punctuation">.</span><span class="token function">flash</span><span class="token punctuation">(</span><span class="token string">'errorMessage'</span><span class="token punctuation">,</span> <span class="token string">'Please input the correct password.'</span><span class="token punctuation">)</span>
    res<span class="token punctuation">.</span><span class="token function">redirect</span><span class="token punctuation">(</span><span class="token string">'/login'</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ol start="4">
<li>設定 login.ejs，當登入失敗就會在畫面顯示 errorMessage：</li>
</ol>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>h1<span class="token operator">></span>Login<span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span>

<span class="token operator">&lt;</span>h2<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">%=</span> errorMessage <span class="token operator">%</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">></span>

<span class="token operator">&lt;</span>form method<span class="token operator">=</span><span class="token string">"POST"</span> action<span class="token operator">=</span><span class="token string">"/login"</span><span class="token operator">></span>
  Password<span class="token operator">:</span> <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"password"</span> name<span class="token operator">=</span><span class="token string">"password"</span> <span class="token operator">/</span><span class="token operator">></span>
  <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"submit"</span> <span class="token operator">/</span><span class="token operator">></span>
<span class="token operator">&lt;</span><span class="token operator">/</span>form<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>執行結果如下，當提交錯誤時會顯示 errorMessage，重整頁面後就會消失，這就是 flash 的功用：</p>
<p><img src="https://i.imgur.com/OepYfsy.png"></p>
<p>但這種寫法其實還是不夠簡潔，如果要判斷輸出錯誤都還是要向 isLogin 那樣加上 errorMessage。</p>
<h3 id="重構程式碼：透過-res-locals-傳值給-view"><a href="#重構程式碼：透過-res-locals-傳值給-view" class="headerlink" title="重構程式碼：透過 res.locals 傳值給 view"></a>重構程式碼：透過 res.locals 傳值給 view</h3><p>其實在 express 中有個捷徑，我們可以自己新增 middleware。也就是把東西存放在 <code>res.locals</code> ，view 就可以直接從 locals 存取使用，可想像成全域變數的感覺：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 透過 locals 傳值給 view: session 功能和 errorMessage</span>
app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  res<span class="token punctuation">.</span>locals<span class="token punctuation">.</span>isLogin <span class="token operator">=</span> req<span class="token punctuation">.</span>session<span class="token punctuation">.</span>isLogin
  res<span class="token punctuation">.</span>locals<span class="token punctuation">.</span>errorMessage <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">flash</span><span class="token punctuation">(</span><span class="token string">'errorMessage'</span><span class="token punctuation">)</span>
  <span class="token comment">// 記得加上 next() 把控制權轉移到下一個中間介</span>
  <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>

<span class="token comment">// 就不需在路由加上 errorMessage</span>
app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/login'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  res<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token string">'login'</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>addTodo 的 Controller 也可以改回原本的：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function-variable function">addTodo</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  res<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token string">'addTodo'</span>）
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>修改完成之後，同樣能夠執行程式，透過範例整理兩個重點：</p>
<ul>
<li>透過 req.flash() 可實作出 errorMessage</li>
<li>透過 res.locals 可傳值給 view 使用，通常會用在驗證功能或是顯示 errorMessage</li>
</ul>
<hr>
<h2 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h2><p>透過上述範例，我們能夠得知在使用 Express 框架實作網頁時，大致上會依照下方流程進行：</p>
<ol>
<li>思考產品全貌：網頁外觀、需要哪些功能等等</li>
<li>規劃資料庫結構</li>
<li>載入需要的模組，設定 app 路由部分</li>
<li>依照 MVC 架構撰寫程式碼：<ul>
<li>設定 Controller：針對不同路由進行控制</li>
<li>設定 Model：如何處理資料</li>
<li>設定 View：如何呈現畫面</li>
</ul>
</li>
</ol>
<p>在接下來的課程，我們會綜合之前所學的知識，來實作簡單的會員註冊系統以及留言版功能。</p>
<p>參考資料：</p>
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9tZWRpdW0uY29tL3BpZXJjZXNoaWgvJUU3JUFEJTg2JUU4JUE4JTk4LSVFNCVCRCU5NSVFOCVBQyU4Mi1taWRkbGV3YXJlLSVFNSVBNiU4MiVFNCVCRCU5NSVFNSVCOSVBQiVFNSU4QSVBOSVFNiU4OCU5MSVFNSU4MCU5MSVFNSVCQiVCQSVFNyVBQiU4Qi1leHByZXNzLSVFNyU5QSU4NCVFNiU4NyU4OSVFNyU5NCVBOCVFNyVBOCU4QiVFNSVCQyU4Ri0xOTA4MmIxZDhlMDY=">「筆記」- 何謂 Middleware？如何幫助我們建立 Express 的應用程式<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9zZWdtZW50ZmF1bHQuY29tL2EvMTE5MDAwMDAwNDQwNzAwOA==">bodyParser中间件的研究<i class="fa fa-external-link-alt"></i></span></li>
</ul>
]]></content>
      <categories>
        <category>Back-End</category>
        <category>Express</category>
      </categories>
      <tags>
        <tag>Back-End</tag>
        <tag>Express</tag>
        <tag>Middleware</tag>
      </tags>
  </entry>
  <entry>
    <title>[week 17] 後端中階 - 使用 Node.js + Express 框架建立一個靜態網頁</title>
    <url>/express/</url>
    <content><![CDATA[<blockquote>
<p>本篇為 <span class="exturl" data-url="aHR0cHM6Ly9saWRlbXkuY29tL3AvYmUyMDEtZXhwcmVzcy1zZXF1ZWxpemU=">[BE201] 後端中階：Express 與 Sequelize<i class="fa fa-external-link-alt"></i></span> 這門課程的學習筆記。如有錯誤歡迎指正！</p>
</blockquote>
<pre class="line-numbers language-none"><code class="language-none">學習目標：

 P1 學習如何使用 Express 及其相關套件
 P1 我理解為什麼會需要框架<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<span id="more"></span>
<hr>
<h2 id="要學框架，先從不用框架開始"><a href="#要學框架，先從不用框架開始" class="headerlink" title="要學框架，先從不用框架開始"></a>要學框架，先從不用框架開始</h2><p>在講解什麼是 Express 框架以前，先來談談什麼是 Server，其實 Server 也是一種程式，而 <span class="exturl" data-url="aHR0cHM6Ly9ub2RlanMub3JnL2VuLw==">Node.js<i class="fa fa-external-link-alt"></i></span> 本身就有提供內建 Library，讓我們能透過引入 modeule 來使用 Server 的功能。 </p>
<h3 id="範例：以-Node-js-實作一個-Server"><a href="#範例：以-Node-js-實作一個-Server" class="headerlink" title="範例：以 Node.js 實作一個 Server"></a>範例：以 Node.js 實作一個 Server</h3><p>建立一個 js 檔，並引入 Node.js 內建 http 相關 module，再以 createServer() 建立 server：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// node.js 內建 http 相關 module</span>
<span class="token keyword">const</span> http <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'http'</span><span class="token punctuation">)</span>
<span class="token comment">// createServer() 要傳入的參數是 function</span>
<span class="token keyword">const</span> server <span class="token operator">=</span> http<span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span>handler<span class="token punctuation">)</span>

<span class="token comment">// 兩個參數分別是 request 和 response，這裡使用命名慣例寫法</span>
<span class="token keyword">function</span> <span class="token function">handler</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>url<span class="token punctuation">)</span>  <span class="token comment">// 印出 req 網址</span>
  res<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">'Hello World!'</span><span class="token punctuation">)</span>   <span class="token comment">// 指定 respone 回傳內容</span>
  res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment">// 結束這個 response</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// 常見為 80 port，測試時使用 5001 port 就不易發生衝突</span>
server<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">5001</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>接著在 CLI 介面執行 js 檔，會發現什麼事也沒發生，但其實我們已經成功運行一個 server，否則程式會直接執行結束：</p>
<p><img src="https://i.imgur.com/2Bv9WKj.png"></p>
<ol start="3">
<li>可以在瀏覽器輸入 <code>http://localhost:5001/</code>，連到本地端的 5001 port，就會看到回傳內容 <code>Hello World!</code>：</li>
</ol>
<p><img src="https://i.imgur.com/ZY79LWh.png"></p>
<p>或者我們也可以根據不同 url，來回傳不同內容：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> http <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'http'</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> server <span class="token operator">=</span> http<span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span>handler<span class="token punctuation">)</span>

<span class="token keyword">function</span> <span class="token function">handler</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>url<span class="token punctuation">)</span>  <span class="token comment">// 印出 req 網址</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>req<span class="token punctuation">.</span>url <span class="token operator">===</span> <span class="token string">'/hello'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// 參數分別是 request 的 status code 和內容格式，告訴瀏覽器如何解析網頁</span>
    res<span class="token punctuation">.</span><span class="token function">writeHead</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 200: 請求成功</span>
      <span class="token string">'Content-Type'</span><span class="token operator">:</span> <span class="token string">'text/html'</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
    res<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">'&lt;h1>hello!&lt;/h1>'</span><span class="token punctuation">)</span>    <span class="token comment">// 也可以加上 HTML 標籤</span>
  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>req<span class="token punctuation">.</span>url <span class="token operator">===</span> <span class="token string">'/bye'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    res<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">'bye!'</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
    res<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">'Invalid url'</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>
  res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment">// 結束這個 response</span>
<span class="token punctuation">&#125;</span>

server<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">5001</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>在瀏覽器運行結果如下，瀏覽器會根據內容格式（Content-Type）解析網頁：</p>
<p><img src="https://i.imgur.com/LbCRc8S.png"></p>
<p>而當我們切換網址時，CLI 介面也會印出 url 文字，其中 <code>/favicon.ico</code> 代表瀏覽器標籤的 logo：</p>
<p><img src="https://i.imgur.com/t5Gx1JF.png"></p>
<p>我們也可以利用 <code>res.writeHead()</code> 來導向其他網址，如下方範例。這時如果輸入 <code>http://localhost:5001/bye</code>，就會重新導向至 google 首頁：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> http <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'http'</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> server <span class="token operator">=</span> http<span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span>handler<span class="token punctuation">)</span>

<span class="token keyword">function</span> <span class="token function">handler</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>url<span class="token punctuation">)</span>  <span class="token comment">// 印出 req 網址</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>req<span class="token punctuation">.</span>url <span class="token operator">===</span> <span class="token string">'/hello'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    res<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">'&lt;h1>hello!&lt;/h1>'</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>req<span class="token punctuation">.</span>url <span class="token operator">===</span> <span class="token string">'/bye'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    res<span class="token punctuation">.</span><span class="token function">writeHead</span><span class="token punctuation">(</span><span class="token number">301</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>              <span class="token comment">// 301: 重新導向</span>
      <span class="token string">'Location'</span><span class="token operator">:</span> <span class="token string">'https://www.google.com.tw/'</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
    res<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">'bye!'</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
    res<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">'Invalid url'</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>
  res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment">// 結束這個 response</span>
<span class="token punctuation">&#125;</span>

server<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">5001</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>根據上述範例，我們能夠利用 Node.js 提供的模組，來實作出一個簡易的 http server。</p>
<p>其實這不是本單元要討論的重點，只是藉由範例來瞭解，Node.js 的底層就是利用 <code>http.createServer()</code> 來執行，即使不透過 Library 也能夠時做出 server。</p>
<p>瞭解到背後運作的原理後，接下來要介紹另一套 Library，其實就是把上面實作的功能包裝在一起，讓我們能更方便取得資料。</p>
<h2 id="初探-Express"><a href="#初探-Express" class="headerlink" title="初探 Express"></a>初探 Express</h2><p>什麼是 Express？根據<a href="(https://expressjs.com/)">官網</a>介紹：</p>
<blockquote>
<p>Express: Fast, unopinionated, minimalist web framework for Node.js</p>
</blockquote>
<p>簡言之，Express 是 Node.js 環境下提供的一個輕量後端框架，自由度極高，透過豐富的 HTTP 工具，能幫助快速開發後端應用程式。</p>
<p>跟其他有完整 MVC 架構的框架相比，Express 其實鬆散（或者說自由）很多，許多地方並沒有強制規範，都只是按照前人的方法或者是慣例來實踐，十個人可能會有十種不同的寫法。</p>
<h3 id="安裝-Express"><a href="#安裝-Express" class="headerlink" title="安裝 Express"></a>安裝 Express</h3><blockquote>
<p>詳細步驟可參考<span class="exturl" data-url="aHR0cHM6Ly9leHByZXNzanMuY29tL3poLXR3L3N0YXJ0ZXIvaW5zdGFsbGluZy5odG1s">官方文件<i class="fa fa-external-link-alt"></i></span>。</p>
</blockquote>
<h4 id="Step1-初始化-npm，過程都按確定，最後會在資料夾中建立一個-package-json-檔"><a href="#Step1-初始化-npm，過程都按確定，最後會在資料夾中建立一個-package-json-檔" class="headerlink" title="Step1. 初始化 npm，過程都按確定，最後會在資料夾中建立一個 package.json 檔"></a>Step1. 初始化 npm，過程都按確定，最後會在資料夾中建立一個 package.json 檔</h4><pre class="line-numbers language-none"><code class="language-none">$ npm init<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p><img src="https://i.imgur.com/Ya0XugX.png"></p>
<h4 id="Step2-安裝-Express"><a href="#Step2-安裝-Express" class="headerlink" title="Step2. 安裝 Express"></a>Step2. 安裝 Express</h4><p>在最新的 npm 版本，可以省略 <code>--save</code>，安裝完成還是會自動存到 package.json：</p>
<pre class="line-numbers language-none"><code class="language-none">$ npm install express --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p><img src="https://i.imgur.com/qOagjRg.png"></p>
<h4 id="Step3-實作範例：Hello-world"><a href="#Step3-實作範例：Hello-world" class="headerlink" title="Step3. 實作範例：Hello world"></a>Step3. 實作範例：Hello world</h4><p>接著可以跟著<span class="exturl" data-url="aHR0cHM6Ly9leHByZXNzanMuY29tL2VuL3N0YXJ0ZXIvaGVsbG8td29ybGQuaHRtbA==">官方文件<i class="fa fa-external-link-alt"></i></span>來實作一個簡單範例，開啟 index.js 檔並輸入下列程式碼：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 引入 library</span>
<span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// express 引入的是一個 function</span>
<span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 建立一個不易產生衝突的 port 用來測試</span>
<span class="token keyword">const</span> port <span class="token operator">=</span> <span class="token number">5001</span><span class="token punctuation">;</span>

<span class="token comment">// 如何處理不同的 request，參數分別為 url 和要執行的 function</span>
app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'hello world!'</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>

app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/bye'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'bye!'</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>

<span class="token comment">// 運行這個 port，參數分別為 port 和要執行的 function</span>
app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span>port<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Example app listening at http://localhost:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>port<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>在 CLI 介面執行 index.js，出現下方文字代表有成功運行程式：</p>
<p><img src="https://i.imgur.com/VG4okLU.png"></p>
<p>這時在瀏覽器輸入 <code>http://localhost:5001/</code>，就會看到回傳內容：</p>
<p><img src="https://i.imgur.com/NYQmfRF.png"></p>
<p>如果發現修改後，網頁還是會導回先前設定的網址，可透過開發者工具來清除快取（cache），重整頁面就能看到結果：</p>
<p><img src="https://i.imgur.com/6T6umyx.png"></p>
<p>和最一開始的範例做比較的話，其實可以發現到，寫法和使用 Node.js 實作 Server 非常類似。</p>
<p>但是藉由 Express 提供的<span class="exturl" data-url="aHR0cHM6Ly9leHByZXNzanMuY29tL3poLXR3L2d1aWRlL3JvdXRpbmcuaHRtbA==">路由（Routing）<i class="fa fa-external-link-alt"></i></span>系統，會將許多語法包裝好，在執行上也會方便許多。除了 <code>app.get()</code>，還有像是 <code>app.post()</code> 和 <code>app.delete()</code> 等針對不同 method 來進行操作，這部分我們後面會再詳細介紹。</p>
<h3 id="Express-vs-Apache-PHP"><a href="#Express-vs-Apache-PHP" class="headerlink" title="Express vs Apache + PHP"></a>Express vs Apache + PHP</h3><p>在看完上面的範例後，我們可以試著比較 Express 和以前所學的 <span class="exturl" data-url="aHR0cHM6Ly9oYWNrbWQuaW8vQEhlaWRpLUxpdS9ub3RlLWJlMTAxLXBocC1hbmQtbXlzcWw=">Apache + PHP<i class="fa fa-external-link-alt"></i></span>，兩者的運作模式有何差別：</p>
<h4 id="Apache-PHP"><a href="#Apache-PHP" class="headerlink" title="Apache + PHP"></a>Apache + PHP</h4><ul>
<li>瀏覽器會發 request 給 Apache Server，再交給 PHP 處理，處理完成後再傳 response 回去</li>
<li><span class="exturl" data-url="aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3poLXR3LyVFNiU5NiU4NyVFNCVCQiVCNiVFNyVCMyVCQiVFNyVCQiU5Rg==">檔案系統<i class="fa fa-external-link-alt"></i></span>：預設路徑長什麼樣子，在該資料夾底下就會有對應的 php 檔</li>
</ul>
<p><img src="https://i.imgur.com/EYfvLe0.png"></p>
<h4 id="Express"><a href="#Express" class="headerlink" title="Express"></a>Express</h4><ul>
<li>瀏覽器發 request 給 Express Server，經過處理後會根據 url 回傳 response</li>
<li>和前者的最大差別，就是沒有 PHP 處理器，Express 本身就是一個 Server，透過路由系統決定什麼路徑回傳什麼資料，而不會侷限在檔案系統</li>
</ul>
<p><img src="https://i.imgur.com/zXWH67g.png"></p>
<h2 id="MVC-基本架構"><a href="#MVC-基本架構" class="headerlink" title="MVC 基本架構"></a>MVC 基本架構</h2><p>在課程當中，我們會使用後端框架 Express 和 ORM 工具 Sequelize 來打造 MVC 架構的網站，以下先來談談什麼是 MVC 架構。</p>
<p>MVC（Model–view–controller）：是一種應用程式架構，透過將程式碼拆成分成模型（Model）、視圖（View）和控制器（Controller）三個部分，並透過路由系統，建立整個應用程式的設計模式。</p>
<p>在 MVC 架構中，request 流程大致如下：</p>
<ol>
<li>發出的 request 會由 Controller 來處理</li>
<li>接著 Controller 會和 Model 拿取 data</li>
<li>Controller 再把拿到的資料給 View，由 View 提供的 template</li>
<li>最後 Controller 再結合 data 和 template，回傳 response</li>
</ol>
<p><img src="https://i.imgur.com/aYBYHlx.png"></p>
<p>簡單來說：</p>
<ul>
<li>Model 負責處理資料部分（data），例如在 MySQL 資料庫裡建立 tables，以及所有讀取、寫入資料等</li>
<li>View 負責處理畫面的部分（template），也就是我們看到的網頁內容</li>
<li>Controller 在過程中扮演 Model 和 View 中間的協調者，當不同路由（route）接收到 request 時，會呼叫 Controller 執行相對應的 Method。例如跟 Model 拿取資料，結合 View 提供的模版之後，再回傳 response</li>
</ul>
<p>這和我們之前使用 PHP 寫的網頁相比，在分工上是明確許多的。接下來我們要利用 Nodes.js 來實作一個簡單的 MVC 架構。</p>
<h2 id="在-Node-js-上實作-MVC-架構"><a href="#在-Node-js-上實作-MVC-架構" class="headerlink" title="在 Node.js 上實作 MVC 架構"></a>在 Node.js 上實作 MVC 架構</h2><h3 id="透過-Express-提供的-template-engines-來實作-View"><a href="#透過-Express-提供的-template-engines-來實作-View" class="headerlink" title="透過 Express 提供的 template engines 來實作 View"></a>透過 Express 提供的 <span class="exturl" data-url="aHR0cHM6Ly9leHByZXNzanMuY29tL2VuL2d1aWRlL3VzaW5nLXRlbXBsYXRlLWVuZ2luZXMuaHRtbA==">template engines<i class="fa fa-external-link-alt"></i></span> 來實作 View</h3><ol>
<li>選擇安裝一種 template engines（樣板處理器）使用，這裡以 EJS 做為範例，架構類似於之前學過的 PHP：</li>
</ol>
<pre class="line-numbers language-none"><code class="language-none">$ npm install ejs<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p><img src="https://i.imgur.com/DixdfOM.png"></p>
<ul>
<li>EJS 語法是透過 <code>&lt;%  %&gt;</code> 符號，和 PHP 語法其實很類似，語法又可分為三種：</li>
</ul>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span><span class="token operator">%</span> JavaScript 程式碼 <span class="token operator">%</span><span class="token operator">></span>

<span class="token operator">&lt;</span><span class="token operator">%</span><span class="token operator">-</span>  <span class="token operator">%</span><span class="token operator">></span> 會經過解析然後印出來，用於引入 <span class="token constant">HTML</span> 內容

<span class="token operator">&lt;</span><span class="token operator">%=</span>  <span class="token operator">%</span><span class="token operator">></span> 會直接印出原始碼，用於輸出資料，避免被解析成語法，可視為一種 <span class="token constant">XSS</span> 防禦

<span class="token comment">// 可和 PHP 寫法做比較</span>
<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token constant">PHP</span> echo   <span class="token operator">?</span><span class="token operator">></span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ol start="2">
<li>接著回到剛才的 index.js 檔，加上 <code>app.set()</code> 設定要使用的 view engine：</li>
</ol>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 設定 view engine</span>
app<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">'view engine'</span><span class="token punctuation">,</span> <span class="token string">'ejs'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<ol start="3">
<li><p>預設目錄會是 <code>/views</code>，因此需要新建一個資料夾 views，並在資料夾中建立一個 hello.ejs 檔</p>
</li>
<li><p>記得在 VS Code 等編譯器中安裝 ejs 插件，才能夠解析 ejs 檔：<br><img src="https://i.imgur.com/PVJjWAG.png"></p>
</li>
<li><p>在 hello.ejs 檔中輸入簡單的程式碼進行測試，例如：<code>&lt;h1&gt;hello&lt;/h1&gt;</code></p>
</li>
<li><p>接著調整 index.js 程式碼，告訴 express 去 render views 目錄底下叫做 hello 的檔案：</p>
</li>
</ol>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> port <span class="token operator">=</span> <span class="token number">5001</span><span class="token punctuation">;</span>

<span class="token comment">// 設定 view engine</span>
app<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">'view engine'</span><span class="token punctuation">,</span> <span class="token string">'ejs'</span><span class="token punctuation">)</span>

app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'index'</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>

app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/hello'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
<span class="token comment">// 叫 express 去 render views 底下叫做 hello 的檔案，副檔名可省略</span>
  res<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token string">'hello'</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>

app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span>port<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Example app listening at http://localhost:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>port<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ol start="7">
<li>輸入 node index.js 指令運行，在瀏覽器可以看到結果：</li>
</ol>
<p><img src="https://i.imgur.com/G32u0NI.png"></p>
<ol start="8">
<li>如果想要修改 views 中的 template，也就是 ejs 檔的內容，只要重整瀏覽器畫面即可，不需再重新運行 Node.js：</li>
</ol>
<p><img src="https://i.imgur.com/dKhAwTu.png"></p>
<h3 id="實作簡易的-todo-list-API"><a href="#實作簡易的-todo-list-API" class="headerlink" title="實作簡易的 todo list API"></a>實作簡易的 todo list API</h3><ol>
<li>首先在 index.js 建立 todos，並設定 app.get() 傳入資料：</li>
</ol>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> port <span class="token operator">=</span> <span class="token number">5001</span><span class="token punctuation">;</span>

<span class="token comment">// 設定 view engine</span>
app<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">'view engine'</span><span class="token punctuation">,</span> <span class="token string">'ejs'</span><span class="token punctuation">)</span>

<span class="token comment">// 建立 todos data</span>
<span class="token keyword">const</span> todos <span class="token operator">=</span> <span class="token punctuation">[</span>
  <span class="token string">'first todo'</span><span class="token punctuation">,</span> <span class="token string">'second todo'</span><span class="token punctuation">,</span> <span class="token string">'third todo'</span>
<span class="token punctuation">]</span>

app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/todos'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// 第二個參數可傳入資料</span>
  res<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token string">'todos'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>
    todos     <span class="token comment">// todos: todos 一樣的話可省略寫法</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>

app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/hello'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  res<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token string">'hello'</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>

app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span>port<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Example app listening at http://localhost:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>port<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ol start="2">
<li>接著編輯 todos.ejs 檔的內容，也就是 todos 的 view 部分。要輸出內容的語法是 <code>&lt;%= code %&gt;</code>，而不是用 console.log()，或是 PHP 的 echo：</li>
</ol>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>h1<span class="token operator">></span>Todos<span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span>

<span class="token operator">&lt;</span>ul<span class="token operator">></span>
<span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> todos<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token operator">%</span><span class="token operator">></span>
  <span class="token operator">&lt;</span>li<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">%=</span> todos<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">%</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>    <span class="token comment">// 加上等於代表後面的東西要輸出</span>
<span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token punctuation">&#125;</span> <span class="token operator">%</span><span class="token operator">></span>
<span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ol start="3">
<li>在瀏覽器運行，這樣能根據之前設立的 data 輸出 todos：</li>
</ol>
<p><img src="https://i.imgur.com/zGLAWIT.png"></p>
<ol start="4">
<li>接著回到 index.js 檔，用同樣的方式，根據不同 id 來拿取對應的 todo：</li>
</ol>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 加上 :id 代表不確定的參數</span>
app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/todos/:id'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// params: 可拿到網址列上指定的參數</span>
  <span class="token keyword">const</span> id <span class="token operator">=</span> req<span class="token punctuation">.</span>params<span class="token punctuation">.</span>id
  <span class="token keyword">const</span> todo <span class="token operator">=</span> todos<span class="token punctuation">[</span>id<span class="token punctuation">]</span>
  res<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token string">'todo'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>
    todo
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ol start="5">
<li>建立 todo.ejs 檔，也就是 todo 的 view 部分：</li>
</ol>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>h1<span class="token operator">></span>Todo<span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span>

<span class="token operator">&lt;</span>h2<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">%=</span> todo <span class="token operator">%</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<ol start="6">
<li>透過網址列上的 id，能夠讀取相對應的 todo：</li>
</ol>
<p><img src="https://i.imgur.com/crYUBSj.png"></p>
<p>這樣就透過 Express 結合 view template engine 完成了簡單的範例，也可以再增加 header 或 footer 等來豐富內容。</p>
<h3 id="重構專案：實作-Model-amp-Controller"><a href="#重構專案：實作-Model-amp-Controller" class="headerlink" title="重構專案：實作 Model &amp; Controller"></a>重構專案：實作 Model &amp; Controller</h3><p>接下來要試著重構程式碼，也就是實作 MVC 架構中的 Model 和 Controller 部分。</p>
<h4 id="Model：用來管理-todos-的資料"><a href="#Model：用來管理-todos-的資料" class="headerlink" title="Model：用來管理 todos 的資料"></a>Model：用來管理 todos 的資料</h4><ol>
<li>回到 express 目錄，新增一個 models 資料夾，並在裡面建立 todo.js 檔</li>
<li>在 todo.js 檔案，建立 todoModel，提供存取資料的方法（function），例如 get 或 add 等 method：</li>
</ol>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> todos <span class="token operator">=</span> <span class="token punctuation">[</span>
  <span class="token string">'first todo'</span><span class="token punctuation">,</span> <span class="token string">'second todo'</span><span class="token punctuation">,</span> <span class="token string">'third todo'</span>
<span class="token punctuation">]</span>

<span class="token comment">// 建立一個 todoModel 物件，裡面放存取資料的方法（function）</span>
<span class="token keyword">const</span> todoModel <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  <span class="token function-variable function">getAll</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> todos
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>

  <span class="token function-variable function">get</span><span class="token operator">:</span> <span class="token parameter">id</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> todos<span class="token punctuation">[</span>id<span class="token punctuation">]</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> todoModel<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="Controller：控制器"><a href="#Controller：控制器" class="headerlink" title="Controller：控制器"></a>Controller：控制器</h4><ol>
<li>同樣在 express 目錄，新增一個 controllers 資料夾，並在裡面建立 todo.js 檔</li>
<li>接著重構程式碼：</li>
</ol>
<ul>
<li>從 model 引入資料</li>
<li>建立物件，並透過方法（function）來存取資料，這裡會和一開始中 index.js 的 app.get() 寫法類似</li>
<li>再交由 view engine 進行 render</li>
</ul>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 先從 model 引入 todos 資料</span>
<span class="token keyword">const</span> todoModel <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">/</span>models<span class="token operator">/</span>todo<span class="token punctuation">)</span>

<span class="token comment">// 建立一個 todoController 物件，透過方法來存取 model 的資料</span>
<span class="token keyword">const</span> todoController <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// 傳入參數 req, res</span>
  <span class="token function-variable function">getAll</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">const</span> todos <span class="token operator">=</span> todoModel<span class="token punctuation">.</span><span class="token function">getAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    res<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token string">'todos'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>
      todos
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>

  <span class="token function-variable function">get</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">const</span> id <span class="token operator">=</span> req<span class="token punctuation">.</span>params<span class="token punctuation">.</span>id
    <span class="token keyword">const</span> todo <span class="token operator">=</span> todoModel<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span>
    res<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token string">'todo'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>
      todo
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> todoController<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ol start="3">
<li>回到根目錄的 index.js 檔，修改路由，透過引入 controller 的 todo.js，程式碼就可以更簡潔：</li>
</ol>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> port <span class="token operator">=</span> <span class="token number">5001</span><span class="token punctuation">;</span>

<span class="token comment">// 引入 controller</span>
<span class="token keyword">const</span> todoController <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./controllers/todo'</span><span class="token punctuation">)</span>

app<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">'view engine'</span><span class="token punctuation">,</span> <span class="token string">'ejs'</span><span class="token punctuation">)</span>

<span class="token keyword">const</span> todos <span class="token operator">=</span> <span class="token punctuation">[</span>
  <span class="token string">'first todo'</span><span class="token punctuation">,</span> <span class="token string">'second todo'</span><span class="token punctuation">,</span> <span class="token string">'third todo'</span>
<span class="token punctuation">]</span>

<span class="token comment">// 可直接使用 controller 的方法拿取資料和進行 render</span>
app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/todos'</span><span class="token punctuation">,</span> todoController<span class="token punctuation">.</span>getAll<span class="token punctuation">)</span>

app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/todos/:id'</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>這樣就完成了有 MCV 架構的程式：</p>
<ul>
<li>express 目錄的 index.js：提供路由</li>
<li>views 目錄的 todo.ejs 和 todos.ejs：提供模版</li>
<li>models 目錄的 todo.js：提供資料</li>
<li>controllers 目錄的 todo.js：結合 model 和 view，根據路由回傳 Response</li>
</ul>
<p>假如是大型專案，可以更進一步簡化程式碼，例如把 index.js 中的 app 部分再獨立到專門管理路由的檔案，這部分我們之後會再介紹到。</p>
<h2 id="串接-Node-js-與-MySQL"><a href="#串接-Node-js-與-MySQL" class="headerlink" title="串接 Node.js 與 MySQL"></a>串接 Node.js 與 MySQL</h2><p>在瞭解到基本的 Express 架構之後，再來我們要試著把  todo 資料存在資料庫。這是因為在實際專案中，後端會把資料存放在資料庫，因此我們要來學習如何透過 Node.js 和 MySQL 溝通。</p>
<blockquote>
<p>注意不是用 Express 和 MySQL 溝通！我們要操作的是 Nodes.js，Express 提供的是框架！</p>
</blockquote>
<h3 id="Step1-安裝-MySQL"><a href="#Step1-安裝-MySQL" class="headerlink" title="Step1. 安裝 MySQL"></a>Step1. 安裝 MySQL</h3><p>在使用 Node.js 操作 MySQL 資料庫時，必須先安裝 MySQL 模組。搜尋 node.js mysql 會找到 GitHub 有個叫做 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL215c3FsanMvbXlzcWw=">mysqljs 的 Library<i class="fa fa-external-link-alt"></i></span>，執行安裝指令：</p>
<pre class="line-numbers language-none"><code class="language-none">$ npm install mysql<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p><img src="https://i.imgur.com/tR8kezb.png"></p>
<p>引入 MySQL 模組後，接著就可以進行資料庫的連線和其他操作了。</p>
<h3 id="Step2-新增-app-資料庫-amp-todos-資料表"><a href="#Step2-新增-app-資料庫-amp-todos-資料表" class="headerlink" title="Step2. 新增 app 資料庫 &amp;  todos 資料表"></a>Step2. 新增 app 資料庫 &amp;  todos 資料表</h3><p>之前在<span class="exturl" data-url="aHR0cHM6Ly9oYWNrbWQuaW8vQEhlaWRpLUxpdS9ub3RlLWJlMTAxLXBocC1hbmQtbXlzcWw=">第九週學到如何使用 MySQL 資料庫<i class="fa fa-external-link-alt"></i></span>，這一次我們同樣可以透過 phpmyadmin 這個 GUI 介面來進行資料庫 CURD，步驟如下：</p>
<ol>
<li>開啟 XAMPP 連線 MySQL，其實這樣就已經啟動資料庫了，但如果要使用 phpmyadmin 介面操作，就必須同時運行 Apache Server 才能使用：</li>
</ol>
<p><img src="https://i.imgur.com/kCpCApB.png"></p>
<ol start="2">
<li>接著建立一個 app database，並在裡面新增一個 todos table</li>
</ol>
<p><img src="https://i.imgur.com/Flh0kkx.png"></p>
<ol start="3">
<li>在 todos table 新增幾筆資料</li>
</ol>
<p><img src="https://i.imgur.com/Bd9TEJB.png"></p>
<h3 id="Step3-串接-MySQL-資料庫"><a href="#Step3-串接-MySQL-資料庫" class="headerlink" title="Step3. 串接 MySQL 資料庫"></a>Step3. 串接 MySQL 資料庫</h3><p>確認本地端已經安裝資料庫並正常啟動，接著就可以新增一個 db.js 檔來進行連線，程式碼可<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL215c3FsanMvbXlzcWwjaW50cm9kdWN0aW9u">參考範例<i class="fa fa-external-link-alt"></i></span>：</p>
<blockquote>
<p>要等待回傳一定是使用 callback，好處就是從同步變成非同步。</p>
</blockquote>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 引入 mysql 模組</span>
<span class="token keyword">var</span> mysql <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'mysql'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 建立連線</span>
<span class="token keyword">var</span> connection <span class="token operator">=</span> mysql<span class="token punctuation">.</span><span class="token function">createConnection</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
  host<span class="token operator">:</span> <span class="token string">'localhost'</span><span class="token punctuation">,</span>
  user<span class="token operator">:</span> <span class="token string">'root'</span><span class="token punctuation">,</span>
  password<span class="token operator">:</span> <span class="token string">'root'</span><span class="token punctuation">,</span>
  database<span class="token operator">:</span> <span class="token string">'app'</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

connection<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 使用 callback 來接收訊息: 連線成功就印出 todos 所有欄位</span>
connection<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token string">'SELECT * from todos'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">error<span class="token punctuation">,</span> results<span class="token punctuation">,</span> fields</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token keyword">throw</span> error<span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>results<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

connection<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>接著在 CLI 介面執行 <code>node db.js</code>，如果有輸出資料就代表連線成功！</p>
<p><img src="https://i.imgur.com/UKf0NJ7.png"></p>
<p>其中 RowDataPacket 是一種自訂的資料格式，如果把 <code>console.log(results);</code> 改成：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>results<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>content<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>就會達到拿到第一個 todo 的內容：</p>
<p><img src="https://i.imgur.com/M9sO5ZS.png"></p>
<h3 id="補充：權限不足問題"><a href="#補充：權限不足問題" class="headerlink" title="補充：權限不足問題"></a>補充：權限不足問題</h3><p>其實自己當初在嘗試連線資料庫時，有出現權限錯誤的訊息：</p>
<pre class="line-numbers language-none"><code class="language-none">Error: ER_ACCESS_DENIED_ERROR: Access denied for user &#39;root&#39;@&#39;localhost&#39; (using passwo
rd: YES)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>後來是在使用者帳號頁面發現，root 這組帳號當初設定不用密碼就可以登入了，真是烏龍一場XD</p>
<p><img src="https://i.imgur.com/KGhvnqv.png"></p>
<h3 id="Step4-重構程式碼"><a href="#Step4-重構程式碼" class="headerlink" title="Step4. 重構程式碼"></a>Step4. 重構程式碼</h3><ol>
<li>將 db.js 簡化，獨立成串聯資料庫時需要的資料，方便其他部分要連線時引入：</li>
</ol>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> mysql <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'mysql'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> connection <span class="token operator">=</span> mysql<span class="token punctuation">.</span><span class="token function">createConnection</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
  host<span class="token operator">:</span> <span class="token string">'localhost'</span><span class="token punctuation">,</span>
  user<span class="token operator">:</span> <span class="token string">'root'</span><span class="token punctuation">,</span>
  password<span class="token operator">:</span> <span class="token string">'root'</span><span class="token punctuation">,</span>
  database<span class="token operator">:</span> <span class="token string">'app'</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> connection<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ol start="2">
<li>接著在 index.js 引入 db，也就是 mysql 模組以及連線資料，加上 <code>db.connect()</code> 指令來連線：</li>
</ol>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 引入 db 資料庫: mysql 模組 &amp; 連線資料</span>
<span class="token keyword">const</span> db <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./db'</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> port <span class="token operator">=</span> <span class="token number">5001</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> todoController <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./controllers/todo'</span><span class="token punctuation">)</span>

app<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">'view engine'</span><span class="token punctuation">,</span> <span class="token string">'ejs'</span><span class="token punctuation">)</span>

app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/todos'</span><span class="token punctuation">,</span> todoController<span class="token punctuation">.</span>getAll<span class="token punctuation">)</span>
app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/todos/:id'</span><span class="token punctuation">,</span> todoController<span class="token punctuation">.</span>get<span class="token punctuation">)</span>

app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span>port<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// 連線資料庫</span>
  db<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Example app listening at http://localhost:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>port<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ol start="3">
<li>再來是修改 Models，MVC 架構的好處就是能像這樣明確分工：</li>
</ol>
<blockquote>
<p>在使用 SQL 指令時須注意，字串拼接可能會有 SQL injection 的風險，可透過 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL215c3FsanMvbXlzcWwjcHJlcGFyaW5nLXF1ZXJpZXM=">Preparing Queries<i class="fa fa-external-link-alt"></i></span> 來避免，方法和 Prepared Statements 其實很類似。</p>
</blockquote>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 引入 db，也就是 connection</span>
<span class="token keyword">const</span> db <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'../db'</span><span class="token punctuation">)</span>

<span class="token keyword">const</span> todoModel <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// 這裡要用 callback 來拿取資料</span>
  <span class="token function-variable function">getAll</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">cb</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    db<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>
      <span class="token string">'SELECT * FROM todos'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> results</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">cb</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token comment">// cb: 第一個參數為是否有錯誤，沒有的話就是 null，第二個才是結果</span>
      <span class="token function">cb</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> results<span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>

  <span class="token function-variable function">get</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">id<span class="token punctuation">,</span> cb</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    db<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>
      <span class="token string">'SELECT * FROM todos WHERE id = ?'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> results</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">cb</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">cb</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> results<span class="token punctuation">)</span>
      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> todoModel<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ol start="4">
<li>因為 Models 從同步改成非同步操作，也要修改 Controllers 的部分：</li>
</ol>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 先從 model 引入 todos 資料</span>
<span class="token keyword">const</span> todoModel <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'../models/todo'</span><span class="token punctuation">)</span>

<span class="token keyword">const</span> todoController <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  <span class="token function-variable function">getAll</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// 改成 callback 非同步操作</span>
    todoModel<span class="token punctuation">.</span><span class="token function">getAll</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> results</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
      <span class="token comment">// 如果有 err 就印出錯誤訊息</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token keyword">return</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token comment">// 不然就把 todos 傳給 view</span>
      res<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token string">'todos'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>
        todos<span class="token operator">:</span> results
      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>

  <span class="token function-variable function">get</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">const</span> id <span class="token operator">=</span> req<span class="token punctuation">.</span>params<span class="token punctuation">.</span>id
    todoModel<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> results</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token keyword">return</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>
      res<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token string">'todos'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">// 注意回傳的結果 array，必須取 results[0] 才會是一個 todo</span>
        todos<span class="token operator">:</span> results<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> todoController<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ol start="5">
<li>再來是修改 Views 部分，Todos 部分有兩種寫法：</li>
</ol>
<ul>
<li>第一種：分開寫</li>
</ul>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>h1<span class="token operator">></span>Todos<span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span>

<span class="token operator">&lt;</span>ul<span class="token operator">></span>
<span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> todos<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token operator">%</span><span class="token operator">></span>
  <span class="token operator">&lt;</span>li<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">%=</span> todos<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>id <span class="token operator">%</span><span class="token operator">></span><span class="token operator">:</span> <span class="token operator">&lt;</span><span class="token operator">%=</span> todos<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>content <span class="token operator">%</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>
<span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token punctuation">&#125;</span> <span class="token operator">%</span><span class="token operator">></span>
<span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>第二種：寫在一起，用字串拼接方式</li>
</ul>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>h1<span class="token operator">></span>Todos<span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span>

<span class="token operator">&lt;</span>ul<span class="token operator">></span>
<span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> todos<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token operator">%</span><span class="token operator">></span>
  <span class="token operator">&lt;</span>li<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">%=</span> todos<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>id <span class="token operator">+</span> <span class="token string">': '</span> <span class="token operator">+</span> todos<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>content <span class="token operator">%</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>
<span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token punctuation">&#125;</span> <span class="token operator">%</span><span class="token operator">></span>
<span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>執行 <code>node index.js</code> 之後，回到瀏覽器確認程式是否有成功運行：</p>
<blockquote>
<p>這裡 port 之所以變成 5002，是因為前面在嘗試修改連線時，不知在哪個環節佔用了 5001，因此先改成另一個沒有使用的 port</p>
</blockquote>
<p><img src="https://i.imgur.com/aSpv3e4.png"></p>
<p>接著是 Todo，會發現輸出結果是 Object。這是因為 <code>&lt;%= %&gt;</code> 語法會直接印出字串，當我們想要把一個 Object 轉成字串時，就會發生下列情形：</p>
<p><img src="https://i.imgur.com/WMopGth.png"></p>
<p>只要將 Todo 部分修改成輸出 <code>todo.content</code>：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>h1<span class="token operator">></span>Todo<span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span>

<span class="token operator">&lt;</span>h2<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">%=</span> todo<span class="token punctuation">.</span>content <span class="token operator">%</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>結果就會是相對應的 todo：</p>
<p><img src="https://i.imgur.com/02Wnbnb.png"></p>
<p>如果對資料庫操作 CURD，重整頁面也會動態更新：</p>
<p><img src="https://i.imgur.com/NZ0Hzj3.png"></p>
<p>學到目前為止，透過上面這些範例，我們其實已經能寫出一些簡單的網頁程式了，並且有 MVC 架構，能夠簡化程式碼且便於維護。</p>
<hr>
<h2 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h2><p>其實官網上的教學都已經蠻清楚了，但還是想跟著課程影片一步一步操作，一方面透過實作，發現可能會遇到哪些問題，一方面也能加深印象，讓自己更快去熟悉 Express 這套新工具。</p>
<p>也透過實作來複習之前講解過的 MVC 框架，透過將程式碼分成 Model、View 和 Controller 三個部分，再搭配不同 Route 分別進行處理，不但能夠簡化程式碼，也能透過分工便於後續維護。</p>
<p>參考資料：</p>
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9jeXRoaWx5YS5naXRodWIuaW8vMjAxNC8xMS8yMy9ub2RlanMtZXhwcmVzcy1taWNyb2Jsb2cv">使用 Node.js + Express 建構一個簡單的微博網站<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9uaWNvbGFrYWNoYS5jb2RlcmJyaWRnZS5pby8yMDIwLzEwLzI1L2V4cHJlc3MtbXZjLXByYWN0aWNlLTEv">用 Express &amp; Sequelize 打造 MVC 餐廳網站（上）<i class="fa fa-external-link-alt"></i></span></li>
</ul>
]]></content>
      <categories>
        <category>Back-End</category>
        <category>Express</category>
      </categories>
      <tags>
        <tag>Back-End</tag>
        <tag>Express</tag>
        <tag>Node.js</tag>
      </tags>
  </entry>
  <entry>
    <title>[week 4] 網路基礎概論 - HTTP 協定、TCP/IP</title>
    <url>/http-protocol/</url>
    <content><![CDATA[<blockquote>
<p>本篇為 <span class="exturl" data-url="aHR0cHM6Ly9saWRlbXkuY29tL3AvbmV0MTAxLWpz">[NET101] 網路基礎概論（搭配 JS 實作練習）<i class="fa fa-external-link-alt"></i></span> 這門課程的學習筆記。如有錯誤歡迎指正。</p>
</blockquote>
<pre class="line-numbers language-none"><code class="language-none">學習目標：

 知道網路背後大概的運作模式
 知道什麼是 Request 跟 Response
 知道什麼是 DNS 以及運作原理
 知道 HTTP 與 HTTPS 的差異
 知道 localhost 跟 127.0.0.1 是什麼
 知道 GET 與 POST 的差別
 知道常用的 HTTP Header
 知道什麼是 API
 會使用 node.js 寫出串接 API 的程式
 知道 HTTP method 有哪些
 知道基本的 HTTP statud code，像是 200、301、400、404、500<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<span id="more"></span>

<h2 id="HTTP-是什麼？"><a href="#HTTP-是什麼？" class="headerlink" title="HTTP 是什麼？"></a>HTTP 是什麼？</h2><p>全名是 HyperText Transfer Protocol，中文翻作「 超文本傳輸協定」。</p>
<p>HTTP 是一套網路傳輸協定，為<span class="exturl" data-url="aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3poLXR3LyVFOCVCNiU4NSVFNiU5NiU4NyVFNiU5QyVBQyVFNCVCQyVBMCVFOCVCRSU5MyVFNSU4RCU4RiVFOCVBRSVBRQ==">全球資訊網的資料通訊的基礎<i class="fa fa-external-link-alt"></i></span>。也就是說，網頁前端和後端在溝通時，就是透過 HTTP 協定進行。</p>
<h3 id="為什麼我們需要-Protocol（協定）？"><a href="#為什麼我們需要-Protocol（協定）？" class="headerlink" title="為什麼我們需要 Protocol（協定）？"></a>為什麼我們需要 Protocol（協定）？</h3><p>簡言之，協定就是一個「標準」。協定是為了讓彼此溝通而建立的規範，制定標準以統一格式，如此能夠進行規模化。</p>
<h2 id="Client-amp-Server"><a href="#Client-amp-Server" class="headerlink" title="Client &amp; Server"></a>Client &amp; Server</h2><p>而透過協議溝通的兩端，通常可分為客戶端（Client）和伺服器端（Server）。</p>
<p><img src="https://i.imgur.com/EYmEfr8.png"></p>
<h3 id="我們如何看到網頁的畫面？"><a href="#我們如何看到網頁的畫面？" class="headerlink" title="我們如何看到網頁的畫面？"></a>我們如何看到網頁的畫面？</h3><p>網頁上的資訊，其實就是由許多 request 跟 response 構成。且兩者內容均分成 header 與 body，分別帶著不同資訊：</p>
<ul>
<li>header：額外資訊</li>
<li>body：主要內容</li>
</ul>
<p>我們可透過瀏覽器的開發者工具、或是 <span class="exturl" data-url="aHR0cHM6Ly93d3cuaXRyZWFkMDEuY29tL2NvbnRlbnQvMTU0NzM3NzA4Ny5odG1s">HTTP 抓包工具 Charles<i class="fa fa-external-link-alt"></i></span> 來查看詳細資訊，過程大致如下：</p>
<ol>
<li>瀏覽器（Client）產生 HTTP「request」傳給 Server</li>
<li>Server 經過處理後，回傳一個「response」</li>
<li>再由瀏覽器進行解析（html、css、js 等），將程式碼渲染成我們所熟悉的網頁介面</li>
</ol>
<p><img src="https://i.imgur.com/4pi9zu5.png" alt="瀏覽器"></p>
<h2 id="DNS-域名系統"><a href="#DNS-域名系統" class="headerlink" title="DNS 域名系統"></a>DNS 域名系統</h2><p>全名是 Domain Name System，負責將域名轉換成 IP 位置。</p>
<ul>
<li>域名（Domain）：即常用的網址。google.com 就是一個域名，類似景點名稱。</li>
<li>IP 位置：每個主機都有個 IP 位置，是網路溝通的地址。由四個數字組成，範圍是 0 ~ 255。</li>
</ul>
<blockquote>
<p>補充：localhost 跟 127.0.0.1 是什麼？</p>
<ul>
<li><code>localhost</code>：是一個域名，對應的的 IP 位址是 127.0.0.1</li>
<li><code>127.0.0.1</code> 是回送地址，指本地機，一般用來測試使用</li>
</ul>
</blockquote>
<h3 id="以查詢地址為例"><a href="#以查詢地址為例" class="headerlink" title="以查詢地址為例"></a>以查詢地址為例</h3><ol>
<li>如果今天想要抵達 台北 101（域名）</li>
<li>查詢 Google 地址在哪（DNS）</li>
<li>回覆正確地址：台北市信義區信義路五段 7 號（IP）</li>
</ol>
<blockquote>
<p><span class="exturl" data-url="aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3dpa2kvR29vZ2xlX1B1YmxpY19ETlM=">Google 提供免費的 DNS 伺服器<i class="fa fa-external-link-alt"></i></span> 8.8.8.8 和 8.8.4.4，如此可透過搜尋引擎來蒐集大數據。</p>
</blockquote>
<h3 id="以-GitHub-網站為例"><a href="#以-GitHub-網站為例" class="headerlink" title="以 GitHub 網站為例"></a>以 GitHub 網站為例</h3><p>就是透過 DNS 把 Request URL（github.com） 轉換成實際 IP 位置（13.250.177.223）。</p>
<p><img src="https://i.imgur.com/LsnJjwB.png" alt="DNS"></p>
<h3 id="nslookup-指令"><a href="#nslookup-指令" class="headerlink" title="nslookup 指令"></a><code>nslookup</code> 指令</h3><p>在終端機輸入 <code>nslookup &#39;網址&#39;</code>：可查詢 DNS 伺服器。有可能出現多個結果，代表對應到多個 server。</p>
<p><img src="https://i.imgur.com/wTIOWZF.png" alt="nslookup"></p>
<h2 id="瀏覽器只是一個程式"><a href="#瀏覽器只是一個程式" class="headerlink" title="瀏覽器只是一個程式"></a>瀏覽器只是一個程式</h2><p>即使我們沒有瀏覽器，也能夠過其他方式發送 request 跟取得 response。</p>
<h3 id="實做一個-Client-端發送-request"><a href="#實做一個-Client-端發送-request" class="headerlink" title="實做一個 Client 端發送 request"></a>實做一個 Client 端發送 request</h3><p>利用 Node.js 的一套 library：<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3JlcXVlc3QvcmVxdWVzdA==">request - Simplified HTTP client<i class="fa fa-external-link-alt"></i></span>，來模擬瀏覽器發送 request 的過程，步驟如下：</p>
<ol>
<li>安裝套件：<code>npm install request</code></li>
<li>使用方法：複製官網提供的範本，貼到 index.js 裡</li>
</ol>
<pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">const</span> request <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'request'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">request</span><span class="token punctuation">(</span><span class="token string">'http://www.google.com'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">error<span class="token punctuation">,</span> response<span class="token punctuation">,</span> body</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">'error:'</span><span class="token punctuation">,</span> error<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Print the error if one occurred</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'statusCode:'</span><span class="token punctuation">,</span> response <span class="token operator">&amp;&amp;</span> response<span class="token punctuation">.</span>statusCode<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Print the response status code if a response was received</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'body:'</span><span class="token punctuation">,</span> body<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Print the HTML for the Google homepage.</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ol start="3">
<li>修改成要發送 request 的域名</li>
</ol>
<pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">const</span> request <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'request'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">request</span><span class="token punctuation">(</span><span class="token string">'https://github.com/Lidemy/mentor-program-4th-heidiliu2020'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">error<span class="token punctuation">,</span> response<span class="token punctuation">,</span> body</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">'error:'</span><span class="token punctuation">,</span> error<span class="token punctuation">)</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'statusCode:'</span><span class="token punctuation">,</span> response <span class="token operator">&amp;&amp;</span> response<span class="token punctuation">.</span>statusCode<span class="token punctuation">)</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'body:'</span><span class="token punctuation">,</span> body<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ol start="4">
<li>執行 <code>node index.js</code> 可拿到 response</li>
</ol>
<p><img src="https://i.imgur.com/795sNFV.png" alt="執行 request"></p>
<ol start="5">
<li>或是利用 <code>node index.js &gt; github.html</code> 導入程式碼，一樣能打開網頁</li>
</ol>
<hr>
<h2 id="HTTP-Request-Method-請求方法"><a href="#HTTP-Request-Method-請求方法" class="headerlink" title="HTTP Request Method 請求方法"></a>HTTP Request Method 請求方法</h2><p>什麼是 <code>HTTP Method</code>？在 HTTP 1.1 協定中，定義了八種方法，來以不同方式操作指定的資源。詳細可參考 <span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvemgtVFcvZG9jcy9XZWIvSFRUUC9NZXRob2Rz">HTTP 請求方法- HTTP | MDN<i class="fa fa-external-link-alt"></i></span>：</p>
<ul>
<li>GET：只應用於取得資料</li>
<li>HEAD：只獲取回應的 header，但沒有 body。較少使用，通常應用在只想知道 response 資訊時</li>
<li>POST：用於提交指定資源的實體。通常會改變伺服器的狀態</li>
<li>PUT：取代原本的整個 request。和 PATCH 類似</li>
<li>PATCH：修改部分 request</li>
<li>DELETE：刪除資源</li>
<li>OPTIONS：會回傳 server 支援哪些方法</li>
<li>TRACE</li>
<li>CONNECT</li>
</ul>
<p>這是為了讓 Server 能夠清楚辨別 request 的目的。</p>
<h3 id="CRUD-原則"><a href="#CRUD-原則" class="headerlink" title="CRUD 原則"></a>CRUD 原則</h3><p>常用的幾個動作分別為：GET / POST / PUT / DELETE，正好對應到資料庫基本操作 <span class="exturl" data-url="aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3dpa2kvJUU1JUEyJTlFJUU1JTg4JUFBJUU2JTlGJUE1JUU2JTk0JUI5">CRUD 增刪查改<i class="fa fa-external-link-alt"></i></span>：</p>
<ul>
<li>Create：新增（POST）</li>
<li>Delete：刪除（DELETE）</li>
<li>Read：讀取（GET）</li>
<li>Update：更新（PUT）</li>
</ul>
<h3 id="RESTful"><a href="#RESTful" class="headerlink" title="RESTful"></a>RESTful</h3><ul>
<li>REST：全名是 Representational State Transfer，中文為「表現層狀態轉換」，是一種設計風格，以語意化且更為嚴謹的方式描述 API</li>
<li>RESTful：形容以此規範設計的 API</li>
</ul>
<p>一般的 API 可能會長這樣：</p>
<pre class="line-numbers language-none"><code class="language-none">新增使用者：POST + &#x2F;new_user
刪除使用者：POST + &#x2F;delete_user
查詢使用者：GET + &#x2F;user_data&#x2F;:id
更改使用者：POST + &#x2F;update_user<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>若以 RESTful API 風格開發：</p>
<pre class="line-numbers language-none"><code class="language-none">新增使用者：POST + &#x2F;users
刪除使用者：DELETE + &#x2F;users&#x2F;:id
查詢使用者：GET + &#x2F;users&#x2F;:id
更改使用者：PATCH + &#x2F;users&#x2F;:id<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>由此可見 RESTful 的寫法較一致，且語意化更好理解。透過把「動作」藏在 HTTP method 裡面，而有唯一的 URL（<code>/users</code>）表示資源位置，藉此統一 API 接口。</p>
<blockquote>
<p>如果用 HTML 來比喻，寫網頁時我們可以全部使用 div 標籤，但為了幫助理解，通常會使用 li、section、article 等具有語意的標籤，即可從結構看出內容的作用。</p>
</blockquote>
<p>參考資料：<span class="exturl" data-url="aHR0cHM6Ly9tZWRpdW0uY29tL2l0c2Vtcy1mcm9udGVuZC9hcGktJUU2JTk4JUFGJUU0JUJCJTgwJUU5JUJBJUJDLXJlc3RmdWwtYXBpLSVFNSU4RiU4OCVFNiU5OCVBRiVFNCVCQiU4MCVFOSVCQSVCQy1hMDAxYTg1YWI2Mzg=">API 是什麼? RESTful API 又是什麼? - Medium<i class="fa fa-external-link-alt"></i></span></p>
<h3 id="GET-amp-POST-請求的區別"><a href="#GET-amp-POST-請求的區別" class="headerlink" title="GET &amp; POST 請求的區別"></a>GET &amp; POST 請求的區別</h3><p>當中又以 <code>GET</code> 和 <code>POST</code> 兩種，為最常使用的 HTTP 請求方法。兩者最直觀的區別是「資料傳遞方式」與「安全性」。</p>
<h4 id="GET：向指定的資源要求資料，類似於查詢操作。"><a href="#GET：向指定的資源要求資料，類似於查詢操作。" class="headerlink" title="GET：向指定的資源要求資料，類似於查詢操作。"></a><code>GET</code>：向指定的資源要求資料，類似於查詢操作。</h4><ul>
<li>資料傳遞方式：將引數由 URL 帶至 Server 端</li>
<li>安全性：較 POST 不安全，因為傳遞的引數會在 URL 上顯示</li>
<li>例如：讀取連結或圖片</li>
</ul>
<p><img src="https://i.imgur.com/C2MUvS4.png" alt="GET"></p>
<h4 id="POST：將要處理的資料提交給指定的資源，類似於更新操作。"><a href="#POST：將要處理的資料提交給指定的資源，類似於更新操作。" class="headerlink" title="POST：將要處理的資料提交給指定的資源，類似於更新操作。"></a><code>POST</code>：將要處理的資料提交給指定的資源，類似於更新操作。</h4><ul>
<li>資料傳遞方式：將引數放在 request body 中傳遞</li>
<li>安全性：較 GET 安全，適合用於隱密性較高的資料</li>
<li>例如：會員登入系統（如下圖所示）</li>
</ul>
<p><img src="https://i.imgur.com/K7UVu6f.png" alt="POST"></p>
<p>在最下方夾帶 request 資訊：</p>
<p><img src="https://i.imgur.com/7dixXCe.png" alt="request body"></p>
<h3 id="HTTP-Status-Code-狀態碼"><a href="#HTTP-Status-Code-狀態碼" class="headerlink" title="HTTP Status Code 狀態碼"></a>HTTP Status Code 狀態碼</h3><p>是 HTTP 用「3 位數字代碼」來表示回應狀態，通常以開頭的數字來進行區分。詳細可參考 <span class="exturl" data-url="aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3dpa2kvSFRUUCVFNyU4QSVCNiVFNiU4MCU4MSVFNyVBMCU4MQ==">HTTP 狀態碼- 維基百科<i class="fa fa-external-link-alt"></i></span>：</p>
<h4 id="1xx：訊息（較少見）"><a href="#1xx：訊息（較少見）" class="headerlink" title="1xx：訊息（較少見）"></a>1xx：訊息（較少見）</h4><h4 id="2xx：Success-成功"><a href="#2xx：Success-成功" class="headerlink" title="2xx：Success 成功"></a>2xx：Success 成功</h4><ul>
<li><code>200 OK</code>：代表成功</li>
<li><code>204 No Content</code>：伺服器成功處理了請求，沒有返回任何內容（例如發出 DELETE XXX 訊息，回傳 204 代表刪除成功）</li>
</ul>
<h4 id="3xx：Redirect-重新導向"><a href="#3xx：Redirect-重新導向" class="headerlink" title="3xx：Redirect 重新導向"></a>3xx：Redirect 重新導向</h4><ul>
<li><code>301 Moved Permanently</code>：資源「永久」移到新位置</li>
<li><code>302 Found</code>：資源「暫時」移到其他位置</li>
</ul>
<h4 id="4xx：User-error-客戶端錯誤"><a href="#4xx：User-error-客戶端錯誤" class="headerlink" title="4xx：User error 客戶端錯誤"></a>4xx：User error 客戶端錯誤</h4><ul>
<li><code>400 Bad Request</code>：請求語法錯誤、資源太大、請求訊息無效等</li>
<li><code>404 Not Found</code>：找不到資源</li>
</ul>
<h4 id="5xx：Server-error-伺服器端錯誤"><a href="#5xx：Server-error-伺服器端錯誤" class="headerlink" title="5xx：Server error 伺服器端錯誤"></a>5xx：Server error 伺服器端錯誤</h4><ul>
<li><code>500 Internal Server Error</code>：伺服器出錯。例如搶票時伺服器當機</li>
<li><code>503 Service Unavailable</code>：由於臨時的伺服器維護或者過載，伺服器當前無法處理請求</li>
</ul>
<p>參考資料：</p>
<ol>
<li><span class="exturl" data-url="aHR0cHM6Ly95YWtpbWhzdS5jb20vcHJvamVjdC9wcm9qZWN0X3c0X05ldHdvcmtfaHR0cC5odG1s">[第四週] 網路基礎 - HTTP、Request、Response - Yakim<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9pdGhlbHAuaXRob21lLmNvbS50dy9hcnRpY2xlcy8xMDE5MjA5NQ==">[Day 09] 表單中的 GET 與 POST<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cuaXRyZWFkMDEuY29tL2NvbnRlbnQvMTU0MzU3MTA0Ni5odG1s">GET 和 POST 請求的區別（面試和原理都得知道）<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9tZWRpdW0uY29tL0B0b3Rvcm9MaXUvaHR0cC1wb3N0LSVFNSU5MiU4Qy1nZXQtJUU1JUI3JUFFJUU3JTk1JUIwLTkyODgyOWQyOTkxNA==">http Post 和 Get 差異<i class="fa fa-external-link-alt"></i></span></li>
</ol>
<h3 id="實作一個簡易-HTTP-Server-端"><a href="#實作一個簡易-HTTP-Server-端" class="headerlink" title="實作一個簡易 HTTP Server 端"></a>實作一個簡易 HTTP Server 端</h3><p>前面我們已經實作一個 Client 端，也就是利用 request 這個 library 來顯示出來。接下來我們要利用 Node.js 內建 <code>library：http</code> 來實作 Server 端：</p>
<ol>
<li>建立一個檔案 <code>server.js</code>，並輸入下列程式碼：</li>
</ol>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> http <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"http"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 引用 library: http</span>

<span class="token keyword">let</span> server <span class="token operator">=</span> http<span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span>handleRequest<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">handleRequest</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>
  res<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

server<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 監聽 5000 這個 port</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ol start="2">
<li><p>執行 <code>node server.js</code>：不會跑出任何東西。因為沒有 <code>console.log</code> 任何東西，所以是正常的。此時程式會一直執行到按 <code>Crtl + C</code> 才會退出，符合 server 端必須不斷運行來接收資訊。</p>
</li>
<li><p>在瀏覽器輸入網址 <code>localhost:5000</code> 會跑出下列畫面：</p>
</li>
</ol>
<p><img src="https://i.imgur.com/PUPfab0.png" alt="localhost:5000"></p>
<ol start="4">
<li>若修改程式碼如下，即可根據「不同網址」給出「不同回應」：</li>
</ol>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> http <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"http"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 引用 library: http</span>

<span class="token keyword">let</span> server <span class="token operator">=</span> http<span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span>handleRequest<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">handleRequest</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>req<span class="token punctuation">.</span>url <span class="token operator">===</span> <span class="token string">"/"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// 若網址為根目錄</span>
    res<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"welcome!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>req<span class="token punctuation">.</span>url <span class="token operator">===</span> <span class="token string">"/hello"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// 若網址為 /hello</span>
    res<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span>req<span class="token punctuation">.</span>url <span class="token operator">===</span> <span class="token string">"redirect"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

server<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 監聽 5000 這個 port</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>輸入網址 <code>localhost:5000</code>：回應 welcome</li>
</ul>
<p><img src="https://i.imgur.com/p1PKLHk.png" alt="welcome"></p>
<ul>
<li>輸入網址 <code>localhost:5000/hello</code>：回應 hello</li>
</ul>
<p><img src="https://i.imgur.com/Ay4ut32.png" alt="hello"></p>
<ol start="5">
<li>再增加 <code>redirect</code> 部分和 <code>res.writeHead(404)</code>，就完成一個較完整的 Server 端：</li>
</ol>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> http <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"http"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 引用 library: http</span>

<span class="token keyword">let</span> server <span class="token operator">=</span> http<span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span>handleRequest<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">handleRequest</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>req<span class="token punctuation">.</span>url <span class="token operator">===</span> <span class="token string">"/"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    res<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"welcome!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>req<span class="token punctuation">.</span>url <span class="token operator">===</span> <span class="token string">"/hello"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    res<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span>req<span class="token punctuation">.</span>url <span class="token operator">===</span> <span class="token string">"/redirect"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    res<span class="token punctuation">.</span><span class="token function">writeHead</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>
      lidemy<span class="token operator">:</span> <span class="token string">"good"</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  res<span class="token punctuation">.</span><span class="token function">writeHead</span><span class="token punctuation">(</span><span class="token number">404</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

server<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 監聽 5000 這個 port</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>若輸入不存在的網址，就會出現狀態 <code>404 Not Found</code>：</li>
</ul>
<p><img src="https://i.imgur.com/Dy8kyCR.png" alt="404"></p>
<ul>
<li>若輸入 <code>localhost:5000/redirect</code>，會在 Response Headers 會出現 <code>&#39;lidemy&#39;: &#39;good&#39;</code>：</li>
</ul>
<p><img src="https://i.imgur.com/KufqrXq.png" alt="&#39;lidemy&#39;: &#39;good&#39;"></p>
<ol start="6">
<li>在之前的狀態碼有提到，若要轉址必須改成 <code>302 Found</code>：</li>
</ol>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">if</span> <span class="token punctuation">(</span>req<span class="token punctuation">.</span>url <span class="token operator">===</span> <span class="token string">"/redirect"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  res<span class="token punctuation">.</span><span class="token function">writeHead</span><span class="token punctuation">(</span><span class="token number">302</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>
    Location<span class="token operator">:</span> <span class="token string">"/hello"</span><span class="token punctuation">,</span> <span class="token comment">// 指定要轉到哪裡</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ol start="7">
<li>輸入網址 <code>&#39;localhost:5000/redirect</code>，瀏覽器就會轉址到新位置：</li>
</ol>
<p><img src="https://i.imgur.com/WX6bq3s.png" alt="302"></p>
<ul>
<li>若將程式碼改成 <code>&#39;Location&#39;: &#39;https://google.com&#39;</code>：輸入網址 <code>localhost:5000/redirect</code> 就會直接連到 <code>google.com</code></li>
</ul>
<hr>
<h2 id="淺談-TCP-IP"><a href="#淺談-TCP-IP" class="headerlink" title="淺談 TCP/IP"></a>淺談 TCP/IP</h2><h3 id="網路的層級"><a href="#網路的層級" class="headerlink" title="網路的層級"></a>網路的層級</h3><p>先前提到「從電腦發出 request 到 server」，在溝通訊息這段過程，其實需要經過非常多道手續。因此就有組織將網路標準化，將網路連接過程分成數個階層（layer），每個階層都有特別的獨立的功能。</p>
<p>分層的好處，是只要處理該層級的事情就好，因為每個階層的程式碼可以獨立撰寫，功能也不會相互干擾。</p>
<p>而著名的分層模型主要有兩種：</p>
<h3 id="OSI-七層協定"><a href="#OSI-七層協定" class="headerlink" title="OSI 七層協定"></a>OSI 七層協定</h3><p>由於協定非常嚴謹，較偏向理論。</p>
<p><img src="https://i.imgur.com/wLsG4hH.png" alt="OSI"></p>
<h3 id="TCP-IP-四層模型"><a href="#TCP-IP-四層模型" class="headerlink" title="TCP/IP 四層模型"></a>TCP/IP 四層模型</h3><p>TCP/IP 是由 OSI 七層協定簡化而來，為目前網路通訊的基礎架構。以下為兩者之間的比較圖與常見的通訊協定：</p>
<p><img src="https://i.imgur.com/GFDpM8z.png" alt="OSI TCP/IP"></p>
<p>參考資料：<span class="exturl" data-url="aHR0cDovL2xpbnV4LnZiaXJkLm9yZy9saW51eF9zZXJ2ZXIvMDExMG5ldHdvcmtfYmFzaWMucGhwI3doYXRpc25ldHdvcmtfdGNwaXA=">2.4 TCP/IP 的傳輸層相關封包與資料 - 鳥哥的 Linux 私房菜<i class="fa fa-external-link-alt"></i></span></p>
<hr>
<h2 id="網路層-IP-地址"><a href="#網路層-IP-地址" class="headerlink" title="網路層 - IP 地址"></a>網路層 - IP 地址</h2><p>IP 的全名是 Internet Protocol，中文是「網際網路協定」。</p>
<p>可分為 IPv4、IPv6 這兩種協議，兩者最主要差異在於「IP 地址的不同」：</p>
<ul>
<li>IPv4：由四個數字組成，範圍是 0~255</li>
<li>IPv6：用來取代 IPv4，主要是為了解決 IP 地址不夠用的問題，可容納更多 IP 地址</li>
</ul>
<h3 id="各種-IP"><a href="#各種-IP" class="headerlink" title="各種 IP"></a>各種 IP</h3><p>我們常聽到的 IP 地址，代表在網路上的地址。在網際網路上，每台電腦之間，是透過 IP 位址來通訊。當中又分為下列幾種類型：</p>
<ul>
<li>固定 IP：不會改變的 IP</li>
</ul>
<p>理想情況下，是每一台電腦都有一個 IP 位址。固定的 IP 位址，適合架設網站，也因為不會變動，確保使用者能夠連上伺服器。例如：伺服主機、網路設備多使用固定 IP。</p>
<ul>
<li>浮動 IP：每次連上網路時的 IP 位置都會不一樣</li>
</ul>
<p>一般用戶大多是浮動 IP。浮動 IP 解決了「IP 不夠用」這個問題，因為每次連線的 IP 位址皆不同，也不會輕易被駭客攻擊。</p>
<ul>
<li>虛擬 IP：僅能使用於內部網路，外網連不上該位置</li>
</ul>
<p>只有在內網才能互相連接，外網找不到該地址，所以內網 IP 位址是可以重複的。但對外網而言，一定會有一個「固定 or 浮動」的 IP 位址。例如：公司使用內網溝通，藉由鎖 IP 位址，可提高安全性。</p>
<blockquote>
<p>通常以 <code>192.168</code> 或 <code>10.0</code> 開頭的，都是虛擬 IP。</p>
</blockquote>
<p><img src="https://i.imgur.com/TFcsKyY.png" alt="虛擬 IP"></p>
<p>參考資料：<span class="exturl" data-url="aHR0cHM6Ly9pdGhlbHAuaXRob21lLmNvbS50dy9xdWVzdGlvbnMvMTAwMDA3OTY=">浮動 IP 與 固定 IP 有何不同?? 各有何優缺點??<i class="fa fa-external-link-alt"></i></span></p>
<hr>
<h2 id="Port-連接埠（端口）"><a href="#Port-連接埠（端口）" class="headerlink" title="Port 連接埠（端口）"></a>Port 連接埠（端口）</h2><p>在應用層當中，每台電腦主機 IP 位置（localhost），可能對應到不同應用程式。例如：HTTP、FTP、信件收發等服務。</p>
<p>而 Port 扮演網路通訊的端點，用來區分不同功能。如此即可辨認出，該連線要對應到哪個應用程式。</p>
<ul>
<li>例如實作 server 端提過的 <code>server.listen(5000)</code>：代表監聽 <code>5000</code> 這個 Port，輸入網址 <code>localhost:5000</code> 即可連到這個服務</li>
</ul>
<p>如果沒有輸入 Port，會有一些預設或常用值：</p>
<ul>
<li>HTTP 80：說明用於網頁瀏覽</li>
<li>HTTPS 443</li>
<li>FTP 21</li>
<li>「測試」常用：3000、4000、8080、8000 等冷門 Port</li>
</ul>
<p>參考資料：<span class="exturl" data-url="aHR0cHM6Ly9kb3RibG9ncy5jb20udHcvYm94NTA2OC8yMDExLzAxLzE5LzIwOTAx">[網路管理]常用 port 說明<i class="fa fa-external-link-alt"></i></span></p>
<hr>
<h2 id="傳輸層-TCP-amp-UDP"><a href="#傳輸層-TCP-amp-UDP" class="headerlink" title="傳輸層 - TCP &amp; UDP"></a>傳輸層 - TCP &amp; UDP</h2><p>傳輸層（Transport Layer）協定提供不同主機之間的資料傳輸及控制。根據不同需求，又分為「可靠的 TCP」和「速度較快的 UDP」兩種協定：</p>
<h3 id="TCP"><a href="#TCP" class="headerlink" title="TCP"></a>TCP</h3><ul>
<li>全名：Transmission Control Protocol 傳輸控制協定</li>
<li>是一種可靠的資料傳輸，因此大部分的網路協定都是建立在 TCP 上面</li>
<li>透過「三次握手」確認建立一個連接：</li>
</ul>
<p><img src="https://i.imgur.com/PHSLrDe.png"></p>
<pre class="line-numbers language-none"><code class="language-none">若以「傳紙條概念」比喻三次握手：
小明：安安，在嗎？
小美：在阿，你好。
小明：收到，太好了！<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="UDP"><a href="#UDP" class="headerlink" title="UDP"></a>UDP</h3><ul>
<li>全名：User Datagram Protocol 用戶資料包協定</li>
<li>流量是不受規範的，需要快速、重複傳送資料的情況會使用 UDP，相對而言也較不穩定</li>
<li>例如：視訊功能</li>
</ul>
<p>參考資料：</p>
<ol>
<li><span class="exturl" data-url="aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3dpa2kvJUU0JUJDJUEwJUU4JUJFJTkzJUU2JThFJUE3JUU1JTg4JUI2JUU1JThEJThGJUU4JUFFJUFF">TCP 協議 - Wikipedia<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9pdGhlbHAuaXRob21lLmNvbS50dy9hcnRpY2xlcy8xMDAwMDAyMQ==">什麼是 OSI 的 7 層架構？和常聽到的 Layer 7 有關？<i class="fa fa-external-link-alt"></i></span></li>
</ol>
<h2 id="小結-從傳紙條概念看-TCP-IP"><a href="#小結-從傳紙條概念看-TCP-IP" class="headerlink" title="小結 - 從傳紙條概念看 TCP/IP"></a>小結 - 從傳紙條概念看 TCP/IP</h2><p>參考 <span class="exturl" data-url="aHR0cHM6Ly9tZWRpdW0uY29tL0BodWxpdHcvbGVhcm5pbmctdGNwLWlwLWh0dHAtdmlhLXNlbmRpbmctbGV0dGVyLTVkMzI5OTIwMzY2MA==">Huli - 從傳紙條輕鬆學習基本網路概念<i class="fa fa-external-link-alt"></i></span>，我們能夠透過傳紙條的例子，來試著理解網路通訊概念：</p>
<ul>
<li>應用層（HTTP / FTP）：傳輸的資料內容</li>
<li>傳輸層（TCP / UDP）：傳輸方式</li>
<li>網路層（IP）：傳輸地址</li>
<li>實體層（網路電纜）：實體傳輸</li>
</ul>
<p><img src="https://i.imgur.com/oJPxLiH.png" alt="傳紙條概念"></p>
<hr>
<h2 id="淺談-API"><a href="#淺談-API" class="headerlink" title="淺談 API"></a>淺談 API</h2><blockquote>
<p>可參考 <span class="exturl" data-url="aHR0cHM6Ly9tZWRpdW0uY29tL0BodWxpdHcvcmFtZW4tYW5kLWFwaS02MjM4NDM3ZGM1NDQ=">Huli - 從拉麵店的販賣機理解什麼是 API<i class="fa fa-external-link-alt"></i></span>，或是這部影片：<span class="exturl" data-url="aHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj16dkthZGQ5Q2ZsYyZmZWF0dXJlPWVtYl9sb2dv">什麼是 API？<i class="fa fa-external-link-alt"></i></span>來瞭解。</p>
</blockquote>
<p>全名是 Application Programming ==Interface==，中文是「應用程式==介面==」。簡言之，就是方便溝通、交換資料的管道。</p>
<p>API 是應用程式、裝置之間資料的交換，但不一定要透過網路才能有 API，例如：</p>
<ul>
<li>軟硬體廠商的 API：USB 與 電腦交換資料</li>
<li>作業系統裡的 API：讀取、傳輸及寫入等等電腦上的操作</li>
</ul>
<h3 id="而對於網頁來說就是-Web-API"><a href="#而對於網頁來說就是-Web-API" class="headerlink" title="而對於網頁來說就是 Web API"></a>而對於網頁來說就是 Web API</h3><ul>
<li>Web API：是基於 http 協定下運作的 API，代表透過網路進行資料交換</li>
</ul>
<p>以下為實際的運用例子：</p>
<ul>
<li>會員登入系統：社群連結註冊登入（例如：設置 FB 或 Google 登入按鈕）</li>
<li>社群嵌入：分享、留言版、按讚按鈕、影音（例如：<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXJzLmZhY2Vib29rLmNvbS9kb2NzL2dyYXBoLWFwaT9sb2NhbGU9emhfVFc=">Facebook Graphic<i class="fa fa-external-link-alt"></i></span>）</li>
<li>資料嵌入：<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIueWFob28uY29tL3dlYXRoZXIvP2d1Y2NvdW50ZXI9MSZndWNlX3JlZmVycmVyPWFIUjBjSE02THk5NVlXdHBiV2h6ZFM1amIyMHZjSEp2YW1WamRDOXdjbTlxWldOMFgzYzBYMDVsZEhkdmNtdGZRVkJKTG1oMGJXdyZndWNlX3JlZmVycmVyX3NpZz1BUUFBQUJiS3FvVGZJZWNOdHVnTXBvS0tmNUw1M1h3SUpBX2wxelByckpVbVBEMlloMU4tcmNYYmFKaGJuUFFBS1ctVWJuVF9OSmhRWF80aXNZMzc0T1R2YnRSMXE5MURkR2xZT0s0cVNReVFxcjJia3I1WE1QUXVvOGJRVDg3NFJJQ1Y2SUYyc0hzcjJ5cDg0VVhNVjQ1NDlSMWFYRmpITnQ5bGlmSUkzWWRUdmJBWQ==">Yahoo 氣象<i class="fa fa-external-link-alt"></i></span>、<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXJzLmdvb2dsZS5jb20vbWFwcy9kb2N1bWVudGF0aW9uL3RpbWV6b25lL3N0YXJ0P2hsPXpoLXR3">Google 地圖<i class="fa fa-external-link-alt"></i></span>、<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIudHdpdHRlci5jb20vZW4vZG9jcy90d2VldHMvdGltZWxpbmVzL292ZXJ2aWV3">Tweet timelines<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9wb2tlYXBpLmNvLw==">PokéAPI<i class="fa fa-external-link-alt"></i></span>：拿到寶可夢的資訊</li>
<li><span class="exturl" data-url="aHR0cHM6Ly9waWNzdW0ucGhvdG9zLw==">假圖 API<i class="fa fa-external-link-alt"></i></span>：隨機產生出圖片</li>
</ul>
<p>透過 API 能夠達到省時、便利、營利等優點，因此我們也可以說，API 是一個「能讓生產者與消費者雙方溝通的介面」。</p>
<h2 id="實際串接-API"><a href="#實際串接-API" class="headerlink" title="實際串接 API"></a>實際串接 API</h2><h3 id="串接的前置作業"><a href="#串接的前置作業" class="headerlink" title="串接的前置作業"></a>串接的前置作業</h3><ol>
<li>準備 Client 端（發出端）：使用 node.js <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3JlcXVlc3QvcmVxdWVzdA==">library request<i class="fa fa-external-link-alt"></i></span> 實作一個 Client 端</li>
<li>提供 API 的網站（接收端）：<span class="exturl" data-url="aHR0cHM6Ly9yZXFyZXMuaW4v">Regres<i class="fa fa-external-link-alt"></i></span> 是一個提供 API 測試的網站</li>
<li>能夠發出 request 的工具：終端機</li>
</ol>
<h3 id="實戰演練"><a href="#實戰演練" class="headerlink" title="實戰演練"></a>實戰演練</h3><h3 id="Step1-實作一個-Client-端"><a href="#Step1-實作一個-Client-端" class="headerlink" title="Step1. 實作一個 Client 端"></a>Step1. 實作一個 Client 端</h3><p>與先前「實做一個 Client 端發送 request」操作方式相同，是利用 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3JlcXVlc3QvcmVxdWVzdA==">library request<i class="fa fa-external-link-alt"></i></span> 來模擬瀏覽器發送 request 的過程。</p>
<ul>
<li>新增 index.js 並貼上官網提供的<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3JlcXVlc3QvcmVxdWVzdCNzdXBlci1zaW1wbGUtdG8tdXNl">範本<i class="fa fa-external-link-alt"></i></span>：</li>
</ul>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> request <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"request"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">request</span><span class="token punctuation">(</span><span class="token string">"http://www.google.com"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">error<span class="token punctuation">,</span> response<span class="token punctuation">,</span> body</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"error:"</span><span class="token punctuation">,</span> error<span class="token punctuation">)</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"statusCode:"</span><span class="token punctuation">,</span> response <span class="token operator">&amp;&amp;</span> response<span class="token punctuation">.</span>statusCode<span class="token punctuation">)</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"head:"</span><span class="token punctuation">,</span> response<span class="token punctuation">.</span>headers<span class="token punctuation">)</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"body:"</span><span class="token punctuation">,</span> body<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="Step2-串接-Regres-API"><a href="#Step2-串接-Regres-API" class="headerlink" title="Step2. 串接 Regres API"></a>Step2. 串接 <span class="exturl" data-url="aHR0cHM6Ly9yZXFyZXMuaW4vYXBpL3VzZXJz">Regres<i class="fa fa-external-link-alt"></i></span> API</h3><p>將範本中的 google 網址改成 <code>https://reqres.in/api/users</code></p>
<h3 id="Step3-用-node-js-運行"><a href="#Step3-用-node-js-運行" class="headerlink" title="Step3. 用 node.js 運行"></a>Step3. 用 node.js 運行</h3><p>在終端機輸入 <code>node index.js</code>，即可獲得 Regres API 所提供的資訊：</p>
<p><img src="https://i.imgur.com/DWirKxl.png" alt="運行"></p>
<p>這樣其實就完成了簡單的 API 串接！透過丟一個 request 到網站，我們能夠獲取想要的資訊。</p>
<h2 id="學會查看官方文件"><a href="#學會查看官方文件" class="headerlink" title="學會查看官方文件"></a>學會查看官方文件</h2><p>而透過 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3JlcXVlc3QvcmVxdWVzdCNmb3Jtcw==">request 文件<i class="fa fa-external-link-alt"></i></span>，我們能找到不同的 <code>request.METHOD()</code>，瞭解如何使用各種方法：</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js">request<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Defaults to method<span class="token operator">:</span> <span class="token string">"GET"</span><span class="token punctuation">.</span>
request<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Defaults to method<span class="token operator">:</span> <span class="token string">"POST"</span><span class="token punctuation">.</span>
request<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Defaults to method<span class="token operator">:</span> <span class="token string">"PUT"</span><span class="token punctuation">.</span>
request<span class="token punctuation">.</span><span class="token function">patch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Defaults to method<span class="token operator">:</span> <span class="token string">"PATCH"</span><span class="token punctuation">.</span>
request<span class="token punctuation">.</span><span class="token function">del</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> request<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Defaults to method<span class="token operator">:</span> <span class="token string">"DELETE"</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="情境一：查詢不同使用者資料"><a href="#情境一：查詢不同使用者資料" class="headerlink" title="情境一：查詢不同使用者資料"></a>情境一：查詢不同使用者資料</h3><ul>
<li>Method：GET（預設方法）</li>
<li>url ：<code>https://reqres.in/api/users/&lt;userID&gt;</code></li>
<li>透過 <span class="exturl" data-url="aHR0cHM6Ly9yZXFyZXMuaW4v">Reqres 官網<i class="fa fa-external-link-alt"></i></span>可知，更改 「Request 網址結尾」可獲得不同使用者資訊，以 <code>/api/users/2</code> 為例：</li>
</ul>
<p>方法一：直接將網址改成 <code>https://reqres.in/api/users/2</code></p>
<p><img src="https://i.imgur.com/JiCCL5b.png" alt="id 2"></p>
<p>方法二：使用 node.js 內建 library <code>process</code></p>
<p>這個方法是利用 <code>process.argv</code> 達成帶入參數，我們可以先用 <code>console.log</code> 來查看 <code>process.argv</code> 是什麼：</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> process <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"process"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>process<span class="token punctuation">.</span>argv<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p><img src="https://i.imgur.com/HrpOUWq.png" alt="array"></p>
<p>會發現 <code>process.argv</code> 其實是一個陣列，利用 <code>process.argv[2]</code> 就可以拿到我們需要的參數：</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> request <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"request"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> process <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"process"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">request</span><span class="token punctuation">(</span>
  <span class="token string">"https://reqres.in/api/users/"</span> <span class="token operator">+</span> process<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">error<span class="token punctuation">,</span> response<span class="token punctuation">,</span> body</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"body:"</span><span class="token punctuation">,</span> body<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>輸入 <code>node index.js 2</code>，就可獲得 <code>id: 2</code> 的使用者資料：</p>
<p><img src="https://i.imgur.com/dRHS9rO.png" alt="node index.js 2"></p>
<h3 id="情境二：新增使用者資料"><a href="#情境二：新增使用者資料" class="headerlink" title="情境二：新增使用者資料"></a>情境二：新增使用者資料</h3><ul>
<li>method：POST</li>
<li>url ：<code>https://reqres.in/api/users/</code></li>
<li>到 request library 的 Github 頁面，<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3JlcXVlc3QvcmVxdWVzdCNmb3Jtcw==">點選 forms<i class="fa fa-external-link-alt"></i></span>，填入相關程式碼來新增資料至 reqres</li>
</ul>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> request <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"request"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

request<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span>
  <span class="token punctuation">&#123;</span>
    url<span class="token operator">:</span> <span class="token string">"https://reqres.in/api/users"</span><span class="token punctuation">,</span>
    form<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
      name<span class="token operator">:</span> <span class="token string">"Heidi"</span><span class="token punctuation">,</span>
      job<span class="token operator">:</span> <span class="token string">"web engineer"</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">error<span class="token punctuation">,</span> response<span class="token punctuation">,</span> body</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">const</span> json <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 轉成 JS 物件</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>json<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>成功新增使用者資料：</p>
<blockquote>
<p>註：這裡的操作只是測試用，並不會真的新增資料到網站。</p>
</blockquote>
<p><img src="https://i.imgur.com/SOHZu0h.png" alt="新增使用者資料"></p>
<h3 id="情境三：刪除使用者資料"><a href="#情境三：刪除使用者資料" class="headerlink" title="情境三：刪除使用者資料"></a>情境三：刪除使用者資料</h3><ul>
<li>method：DELETE</li>
<li>url ：<code>https://reqres.in/api/users/&lt;userID&gt;</code></li>
</ul>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> request <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"request"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
request<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>
  <span class="token punctuation">&#123;</span>
    url<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">https://reqres.in/api/users/2</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token comment">// 將使用者 id 帶入</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">error<span class="token punctuation">,</span> response<span class="token punctuation">,</span> body</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// console.log(JSON.parse(body));</span>
    <span class="token comment">// 因為是刪除，所以不會回傳東西，因此轉印狀態碼</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"status code:"</span><span class="token punctuation">,</span> response<span class="token punctuation">.</span>statusCode<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>回傳 <code>204</code>，代表成功刪除使用者資料：</p>
<p><img src="https://i.imgur.com/JHOyAUo.png" alt="delete"></p>
<h3 id="情境四：修改使用者資料"><a href="#情境四：修改使用者資料" class="headerlink" title="情境四：修改使用者資料"></a>情境四：修改使用者資料</h3><ul>
<li>method ：PATCH</li>
<li>url ：<code>https://reqres.in/api/users/&lt;userID&gt;</code></li>
</ul>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> request <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"request"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
request<span class="token punctuation">.</span><span class="token function">patch</span><span class="token punctuation">(</span>
  <span class="token punctuation">&#123;</span>
    url<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">https://reqres.in/api/users/2</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>
    form<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
      <span class="token comment">// 傳入要修改的資料</span>
      name<span class="token operator">:</span> <span class="token string">"hello"</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">error<span class="token punctuation">,</span> response<span class="token punctuation">,</span> body</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>成功修改使用者資料：</p>
<p><img src="https://i.imgur.com/HXbVmTk.png" alt="patch"></p>
<h3 id="綜合應用"><a href="#綜合應用" class="headerlink" title="綜合應用"></a>綜合應用</h3><p>Base URL: <span class="exturl" data-url="aHR0cHM6Ly9saWRlbXktYm9vay1zdG9yZS5oZXJva3VhcHAuY29tLw==">https://lidemy-book-store.herokuapp.com<i class="fa fa-external-link-alt"></i></span></p>
<table>
<thead>
<tr>
<th>說明</th>
<th>Method</th>
<th>path</th>
<th>參數</th>
<th>範例</th>
</tr>
</thead>
<tbody><tr>
<td>獲取所有書籍</td>
<td>GET</td>
<td>/restaurants</td>
<td>_limit:限制回傳資料數量</td>
<td>/restaurant?_limit=6</td>
</tr>
<tr>
<td>獲取單一書籍</td>
<td>GET</td>
<td>/restaurants/:id</td>
<td>無</td>
<td>/restaurant/12</td>
</tr>
<tr>
<td>刪除書籍</td>
<td>DELETE</td>
<td>/restaurants/:id</td>
<td>無</td>
<td>無</td>
</tr>
<tr>
<td>新增書籍</td>
<td>POST</td>
<td>/restaurants</td>
<td>name: 書籍名稱</td>
<td>無</td>
</tr>
<tr>
<td>更改書籍</td>
<td>PATCH</td>
<td>/restaurants/:id</td>
<td>name: 書籍名稱</td>
<td>無</td>
</tr>
</tbody></table>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> request <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"request"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token constant">API_ENDPOINT</span> <span class="token operator">=</span> <span class="token string">"https://lidemy-book-store.herokuapp.com"</span><span class="token punctuation">;</span>

<span class="token function">request</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token constant">API_ENDPOINT</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">/books?_limit=10</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">error<span class="token punctuation">,</span> response<span class="token punctuation">,</span> body</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// 判斷 status code 是否為 2 開頭：偵測回傳是否成功</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>response<span class="token punctuation">.</span>statusCode <span class="token operator">>=</span> <span class="token number">200</span> <span class="token operator">&amp;&amp;</span> response<span class="token punctuation">.</span>statusCode <span class="token operator">&lt;</span> <span class="token number">300</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">let</span> books <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>
    <span class="token comment">// try catch：偵測處理資料這個動作是否出現錯誤</span>
    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
      books <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token comment">// 列出前十筆資料</span>
      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> books<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>books<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>id<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>books<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token comment">// 若 response 不是一個合法的 JSON 字串，會回傳錯誤</span>
      <span class="token keyword">return</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="補充：如何在請求帶入資料"><a href="#補充：如何在請求帶入資料" class="headerlink" title="補充：如何在請求帶入資料"></a>補充：如何在請求帶入資料</h3><p>在發出 request 時，我們其實能透過兩種方式來帶入資料：</p>
<ol>
<li>Request header：把資料放入 header<ul>
<li>通常會放層級較高、具有機密性的資料，例如身分驗證</li>
</ul>
</li>
<li>Query-string parameter：把資訊放在網址列結尾<ul>
<li>由結尾的問號開始，是 KEY / Value 的組合</li>
</ul>
</li>
</ol>
<p>實際例子可參考<span class="exturl" data-url="aHR0cHM6Ly9kZXYudHdpdGNoLnR2L2RvY3MvdjU=">Twitch API v5<i class="fa fa-external-link-alt"></i></span> 文件，同樣支援這兩種方法：</p>
<ol>
<li>Request header (<code>Client-ID: XXXXX</code>)</li>
<li>Query-string parameter<br>(<code>https://api.twitch.tv/kraken/users/44322889?client_id=XXXXX</code>)</li>
</ol>
<p>因此在串接之前，必須先確認該 API 支援哪種方式來發出請求。</p>
<hr>
<h2 id="資料格式-XML-amp-JSON"><a href="#資料格式-XML-amp-JSON" class="headerlink" title="資料格式 XML &amp; JSON"></a>資料格式 XML &amp; JSON</h2><p>在 API 實戰中的 response 資料其實就是「JSON 格式字串」。在談到如何整理資訊之前，先來介紹常用的資料格式：</p>
<h3 id="XML"><a href="#XML" class="headerlink" title="XML"></a>XML</h3><ul>
<li>全名為 Extensible Markup Language，中文為「可延伸標記式語言」</li>
<li>和 HTML 非常類似，均屬於 Markup Language（標記語言），內容用<code>前後標籤</code>包起來。<ul>
<li>例如：<code>&lt;firstName&gt;John&lt;/firstName&gt;</code></li>
</ul>
</li>
<li>缺點是檔案較大、不易閱讀，因此現代開發較少使用</li>
</ul>
<h3 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h3><ul>
<li>全名為 JavaScript Object Notation，中文為「JavaScript 物件表示法」</li>
<li>為現代最普遍、常用的資料格式</li>
<li>格式容易理解，且相容性高，許多程式均支援讀取或修改</li>
<li>資料格式看似 JavaScript 物件，但需注意以下幾點：<ol>
<li>回傳值的型態是「字串」</li>
<li><code>key</code> 值要用雙引號 <code>&quot;key&quot;</code> 包起來</li>
<li>支援許多資料格式：<code>[array]</code>、<code>&#123;object&#125;</code> 等；但 <code>value 值</code> 不能放 function</li>
<li>整個 JSON 格式字串不能使用註解</li>
</ol>
</li>
<li>相關函式<ol>
<li><code>JSON.prase(&lt;JSON&gt;)</code>：將 JSON 格式字串轉成物件</li>
<li><code>JSON.stringify(&lt;object&gt;)</code>：將物件轉成 JSON 格式字串</li>
</ol>
</li>
</ul>
<p>參考資料：</p>
<ol>
<li><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLnd1LWJveS5jb20vMjAxMS8wNC8lRTQlQkQlQTAlRTQlQjglOEQlRTUlOEYlQUYlRTQlQjglOEQlRTclOUYlQTUlRTclOUElODQtanNvbi0lRTUlOUYlQkElRTYlOUMlQUMlRTQlQkIlOEIlRTclQjQlQjkv">你不可不知的 JSON 基本介紹<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9qc29uZWRpdG9yb25saW5lLm9yZy8=">JSON Editor online<i class="fa fa-external-link-alt"></i></span>：可將得到的資料轉成 JSON 格式</li>
</ol>
<h3 id="實際來處理-JSON-格式字串"><a href="#實際來處理-JSON-格式字串" class="headerlink" title="實際來處理 JSON 格式字串"></a>實際來處理 JSON 格式字串</h3><p>同樣以串接 Reqres API 為例。得到 response 就是「JSON 格式的字串」，但這種資料並不易閱讀，也無法直接使用。</p>
<p>因此使用內建函式 <code>JSON.parse()</code> 做處理，就會轉成「JS 物件」：</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> request <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"request"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">request</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">https://reqres.in/api/users/2</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">error<span class="token punctuation">,</span> response<span class="token punctuation">,</span> body</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"原始格式，JSON 格式的字串----------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"轉成 JS 物件--------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><img src="https://i.imgur.com/rxiOXN2.png" alt="json"></p>
<p>如此就可以「物件」方式來取出想要的資料：</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> request <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"request"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">request</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">https://reqres.in/api/users/2</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">error<span class="token punctuation">,</span> response<span class="token punctuation">,</span> body</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">const</span> json <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// JSON 物件</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>json<span class="token punctuation">.</span>data<span class="token punctuation">.</span>first_name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 印出 Janet</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>反之，若想把「JS 物件」轉成「JSON 格式字串」，可以用： <code>JSON.stringify(&lt;object&gt;)</code></p>
<hr>
<h2 id="必學指令-curl"><a href="#必學指令-curl" class="headerlink" title="必學指令 curl"></a>必學指令 <code>curl</code></h2><blockquote>
<p>在 <span class="exturl" data-url="aHR0cHM6Ly9jdXJsLmhheHguc2Uv">curl 官網<i class="fa fa-external-link-alt"></i></span>下載，安裝方法可參考 <span class="exturl" data-url="aHR0cHM6Ly9pdGhlbHAuaXRob21lLmNvbS50dy9hcnRpY2xlcy8xMDE4NTkyMw==">Day14 - cURL 工具<i class="fa fa-external-link-alt"></i></span>，即可在終端機使用。</p>
</blockquote>
<p>curl 做法非常簡單，只要在終端機輸入指令就可支援發 HTTP request 、下載及上傳檔案的功能，基本格式為：</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js">curl <span class="token punctuation">[</span>options<span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token constant">URL</span><span class="token operator">...</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h3 id="預設是-GET-方法"><a href="#預設是-GET-方法" class="headerlink" title="預設是 GET 方法"></a>預設是 <code>GET</code> 方法</h3><p>以使用 curl 能夠發 request 　到 google 首頁為例：</p>
<ul>
<li>輸入 <code>crul &#39;http://www.google.com&#39;</code>：即可下載該網頁程式碼</li>
<li>或輸入 <code>crul &#39;網址&#39; &gt; google.html</code>：可將回傳值導向其他檔案</li>
</ul>
<p><img src="https://i.imgur.com/RbyGVvV.png"></p>
<p>參考資料：</p>
<ol>
<li><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLjUxY3RvLmNvbS9kb2lpZG8vMTU2NDYzMQ==">linux 指令 curl 指令详解<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLnRlY2hicmlkZ2UuY2MvMjAxOS8wMi8wMS9saW51eC1jdXJsLWNvbW1hbmQtdHV0b3JpYWwv">Linux Curl Command 指令與基本操作入門教學<i class="fa fa-external-link-alt"></i></span></li>
</ol>
<hr>
]]></content>
      <categories>
        <category>Front-End</category>
        <category>Internet</category>
      </categories>
      <tags>
        <tag>Front-End</tag>
        <tag>HTTP</tag>
        <tag>Protocol</tag>
      </tags>
  </entry>
  <entry>
    <title>[week 16] JavaScript 進階 - 什麼是閉包？探討 Closure &amp; Scope Chain</title>
    <url>/javascript-closure/</url>
    <content><![CDATA[<blockquote>
<p>本篇為 <span class="exturl" data-url="aHR0cHM6Ly9saWRlbXkuY29tL3AvanMyMDEtamF2YXNjcmlwdA==">[JS201] 進階 JavaScript：那些你一直搞不懂的地方<i class="fa fa-external-link-alt"></i></span> 這門課程的學習筆記。如有錯誤歡迎指正！</p>
</blockquote>
<span id="more"></span>

<p>在上一篇筆記 <span class="exturl" data-url="aHR0cHM6Ly9oYWNrbWQuaW8vQEhlaWRpLUxpdS9ub3RlLWpzMjAxLXNjb3BlLWhvaXN0aW5n">[week 16] JavaScript 進階 - 初探 Hoisting &amp; Execution Context<i class="fa fa-external-link-alt"></i></span> 中，我們談到 Hoisting（提升）、Execution Context（執行環境）等相關概念。</p>
<p>瞭解到每一個 function 會有一個對應的執行環境，裡面負責存放該環境需要用到的各種資料，由這些參數組成 Variable Object（變數物件）。</p>
<p>包括之前談過的 VO，每個執行環境會有下列三個屬性：</p>
<ul>
<li>作用域鏈（Scope Chain）</li>
<li>變數物件（Variable Object）</li>
<li>‘this’ 變數（‘this’ Variable）</li>
</ul>
<p>而當中的作用域鏈（Scope Chain）其實就和本篇所要探討的 Closure（閉包）有關，因此下面會先從 Scope（作用域）開始講起。</p>
<pre class="line-numbers language-none"><code class="language-none">學習目標：

 P1 你知道什麼是作用域（Scope）
 P1 你知道 Closure（閉包）是什麼
 P1 你能夠舉出一個運用 Closure 的例子<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<hr>
<h2 id="Scope-作用域"><a href="#Scope-作用域" class="headerlink" title="Scope 作用域"></a>Scope 作用域</h2><p>什麼是 Scope（作用域）？簡言之，就是「一個變數的生存範圍」，一旦出了這個範圍，就會無法存取到這個變數。</p>
<p>舉個簡單的例子，如果在 test() 中以 var 宣告變數 a，在 function 作用域之外會無法存取該變數：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
  <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">10</span>
<span class="token punctuation">&#125;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>
<span class="token comment">// Uncaught ReferenceError: a is not defined</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>在 ES6 以前，唯一產生作用域的方法就是宣告 function，每一個 function 都有自己的作用域，在作用域外就存取不到這個 function 內部所定義的變數。</p>
<p>在 ES6 出現以後，作用域的概念有些改變，也就是引入 let 跟 const 的宣告，可用大括號 <code>&#123;...&#125;</code> 來定義 block（區塊）作用域。</p>
<p>因此 JavaScript 的作用域其實可分為三個層級：</p>
<ul>
<li>Global Level Scope：全域作用域</li>
<li>Function Level Scope：函式作用域</li>
<li>Block Level Scope（ES6）：區塊作用域</li>
</ul>
<p>也就是說，變數作用域的範圍，其實就取決於這個變數的宣告方式，以及在哪進行宣告。</p>
<p>而根據變數是在哪宣告，又可分為全域變數和區域變數：</p>
<ul>
<li>全域變數（Global Variable）<ul>
<li>在 function 外宣告的變數</li>
<li>任何地方皆能存取到</li>
</ul>
</li>
<li>區域變數（Local Variable）<ul>
<li>在 function 內宣告的變數</li>
<li>只在該作用域內有效，也就是 function 本身及其內部</li>
</ul>
</li>
</ul>
<h3 id="Function-Scope-可能發生的問題"><a href="#Function-Scope-可能發生的問題" class="headerlink" title="Function Scope 可能發生的問題"></a>Function Scope 可能發生的問題</h3><p>接著要來談談 function 作用域中可能遇到的狀況，這可能會導致結果和想像的不同。</p>
<h4 id="狀況一：變數的值被覆蓋"><a href="#狀況一：變數的值被覆蓋" class="headerlink" title="狀況一：變數的值被覆蓋"></a>狀況一：變數的值被覆蓋</h4><p>若 var 變數不是宣告在 function 作用域內，而是在迴圈或是判斷式，這個變數可能就會覆蓋到外面的全域函數，造成變數汙染。</p>
<p>在下面的程式碼中，if 判斷式裡面的變數 str，會覆蓋外面的變數 str，因此結果是印出 Local：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">'Global'</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">'Local'</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Local</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="狀況二：迴圈變數可能會向外覆蓋全域變數"><a href="#狀況二：迴圈變數可能會向外覆蓋全域變數" class="headerlink" title="狀況二：迴圈變數可能會向外覆蓋全域變數"></a>狀況二：迴圈變數可能會向外覆蓋全域變數</h4><p>當 for 迴圈中的變數 i 循環結束時，會蓋過外面的全域變數 i，因此 function 外面的 i 會被重新賦值為 3：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">'cat'</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> str<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// 向外覆蓋全域變數</span>
<span class="token punctuation">&#125;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// c</span>
<span class="token comment">// a</span>
<span class="token comment">// t</span>
<span class="token comment">// 3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="E6-以後的作用域：Block-Scope"><a href="#E6-以後的作用域：Block-Scope" class="headerlink" title="E6 以後的作用域：Block Scope"></a>E6 以後的作用域：Block Scope</h3><p>接著再回到 ES6，新增了區塊作用域（block scope）的概念，也就是以 let 和 const 來宣告變數。</p>
<p>在第三週的 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2hlaWRpbGl1MjAyMC90aGlzLWlzLWNvZGVkaWFyeS9ibG9iL21hc3Rlci93ZWVrM19FUzYlMjBucG0lMjBKZXN0Lm1kI2VzNi0lRTYlOTYlQjAlRTglQUElOUUlRTYlQjMlOTU=">ES6 部份<i class="fa fa-external-link-alt"></i></span>我們也曾提到，以 let、const 或 var 方式來宣告變數，最大的差別在於變數的作用域範圍不同：</p>
<ul>
<li>var：作用於整個函數範圍中（function scope）</li>
<li>let 與 const：均為區塊作用域（block scope），如此可避免污染到大括號 <code>&#123;...&#125;</code> 外的變數</li>
</ul>
<p>而 let 和 const 最大的區別，在於該變數是否能被重新賦值：</p>
<ul>
<li>const（constant）：常數宣告後就不能再重新賦值，並且在宣告時就必須賦值</li>
<li>let：可重新賦值，也可先進行宣告但不賦值</li>
</ul>
<p>以下面程式碼為例，說明以 var 和 let 宣告變數會有什麼差別：</p>
<h4 id="用-var-在-for-迴圈宣告變數-i"><a href="#用-var-在-for-迴圈宣告變數-i" class="headerlink" title="用 var 在 for 迴圈宣告變數 i"></a>用 var 在 for 迴圈宣告變數 i</h4><p>先以 var 來宣告變數 i，for 迴圈結束後，外面的 log 結果是 3：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'i:'</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'final value'</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment">// i: 0</span>
<span class="token comment">// i: 1</span>
<span class="token comment">// i: 2</span>
<span class="token comment">// final value 3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="用-let-在-for-迴圈宣告變數-i"><a href="#用-let-在-for-迴圈宣告變數-i" class="headerlink" title="用 let 在 for 迴圈宣告變數 i"></a>用 let 在 for 迴圈宣告變數 i</h4><p>若改用 let 在 for 迴圈宣告變數，則會出現錯誤 <code>i is not defined</code>：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'i:'</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// </span>
  <span class="token punctuation">&#125;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'final value'</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// ReferenceError: i is not defined</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>這是因為以 let 進行宣告，變數 i 的作用域就僅限於 for 迴圈這個 block 區塊，所以大括號外面就無法存取到變數 i。</p>
<h3 id="作用域會往外層找"><a href="#作用域會往外層找" class="headerlink" title="作用域會往外層找"></a>作用域會往外層找</h3><p>記住這個重點：「作用與會往外層找」。也就是說，在 function 外面會存取不到裡面，但內層可以存取到外層的東西。</p>
<p>舉下面幾個程式碼作為範例。</p>
<h4 id="範例一：從-function-外往內存取變數"><a href="#範例一：從-function-外往內存取變數" class="headerlink" title="範例一：從 function 外往內存取變數"></a>範例一：從 function 外往內存取變數</h4><p>結果會出現錯誤 <code>a is not defined</code>：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// ReferenceError: a is not defined`</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>這是因為在 function 外面沒辦法存取內部的變數 a，所以會出現錯誤。</p>
<h4 id="範例二：存取-function-以及-global-變數"><a href="#範例二：存取-function-以及-global-變數" class="headerlink" title="範例二：存取 function 以及 global 變數"></a>範例二：存取 function 以及 global 變數</h4><p>若分別宣告全域變數和區域變數，log 結果不會互相干擾：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">20</span>          <span class="token comment">// global variable</span>
<span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>       <span class="token comment">// function variable </span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 10</span>
<span class="token punctuation">&#125;</span>

<span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// 20</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="範例三：直接在-function-內部賦值"><a href="#範例三：直接在-function-內部賦值" class="headerlink" title="範例三：直接在 function 內部賦值"></a>範例三：直接在 function 內部賦值</h4><p>結果全域和區域的兩個 a，其 log 結果會相同：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>          <span class="token comment">// global variable</span>
<span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 10，function -> global</span>
<span class="token punctuation">&#125;</span>

<span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// 10</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>原因在於，即使 function 內沒有宣告變數，仍會「往外」找到已經被宣告的全域變數 <code>var a</code>，然後再回到內部賦值 <code>a = 10</code>。</p>
<p>變數會先在自己的作用域找，若找不到會繼續再往外找，一層一層直到找到為止。而這一連串的行為，就稱作 Scope Chain（作用域鏈），詳細內容稍後會再進行說明。</p>
<h4 id="範例四：function-內外都沒有宣告變數"><a href="#範例四：function-內外都沒有宣告變數" class="headerlink" title="範例四：function 內外都沒有宣告變數"></a>範例四：function 內外都沒有宣告變數</h4><p>結果仍會和上述範例相同！</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 10，test -> global</span>
<span class="token punctuation">&#125;</span>

<span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// 10</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>這是因為，在 function 中如果 a 找不到值，就會往外層找，如果全域也找不到，就會自動宣告全域變數 <code>var a</code>。</p>
<p>這會和前一個例子寫法產生相同結果，但這種情況其實會產生一些 bug，也就是和預期行為不同，甚至可能產生衝突。</p>
<h2 id="Scope-Chain-作用域鏈"><a href="#Scope-Chain-作用域鏈" class="headerlink" title="Scope Chain 作用域鏈"></a>Scope Chain 作用域鏈</h2><p>在說明之前，先來看以下範例：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">100</span>
  <span class="token keyword">function</span> <span class="token function">inner</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token comment">// 100</span>
  <span class="token punctuation">&#125;</span>
  <span class="token function">inner</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>
<span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>在 inner() 中，a 並非該函式中的變數，而這種不在該 function 作用域中，也不是作為參數傳進來的變數，就被稱為 Free Variable（自由變數）。</p>
<p>對 inner() 來說，a 是一個自由變數。因為在 inner() 的作用域中找不到 a，就會往外層 test() 找，如果還是找不到會再往外直到找到為止。</p>
<p>這其實就構成一個 Scope Chain（作用域鏈）：inner function scope -&gt; test function scope -&gt; global scope，如果直到全域作用域還是找不到，就會拋出錯誤。</p>
<p>還記得我們在開頭提到，每個執行環境物件會有下列三個屬性：</p>
<ul>
<li>作用域鏈（Scope Chain）</li>
<li>變數物件（Variable Object）</li>
<li>‘this’ 變數（‘this’ Variable）</li>
</ul>
<p>而 Scope Chain 這個屬性，其實就是負責記錄「包含自己的 VO + 所有上層執行環境的 VO」的集合。藉由該屬性，函式內部就可以存取到外部的變數。　</p>
<p>聽起來有點抽像，我們舉個簡單的例子：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">one</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token function">two</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">function</span> <span class="token function">two</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
    <span class="token function">three</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">function</span> <span class="token function">three</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">var</span> c <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a <span class="token operator">+</span> b <span class="token operator">+</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 6</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token function">one</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>從 Global Context 呼叫 one()，one() 再呼叫 two()，接著再呼叫 three()，最後在 function three 執行 console.log()。下圖在建立階段的堆疊示意圖：</p>
<p><img src="https://i.imgur.com/RtkT8LP.png"></p>
<p>當 JavaScript 要執行 <code>console.log(a + b + c)</code> 這行程式，會不斷往 Scope Chain 去尋找。</p>
<p>就像前面所說的，一開始會先在自己的 VO 找，找不到在換下一個，一直到 global 為止，如果找不到就會拋出錯誤。過程如下圖：</p>
<p><img src="https://i.imgur.com/9ROutJb.png"></p>
<p>（圖片來源：<span class="exturl" data-url="aHR0cHM6Ly9hbmR5eW91LmdpdGh1Yi5pby8yMDE1LzA0LzIwL3VuZGVyc3RhbmQtY2xvc3VyZXMtYW5kLXNjb3BlLWNoYWluLw==">https://andyyou.github.io/2015/04/20/understand-closures-and-scope-chain/<i class="fa fa-external-link-alt"></i></span> ）</p>
<h3 id="ECMAScript-中的作用域"><a href="#ECMAScript-中的作用域" class="headerlink" title="ECMAScript 中的作用域"></a>ECMAScript 中的作用域</h3><p>每個執行環境都有一個 Scope Chain。也就是說，一旦進入該執行環境，就會建立 Scope Chain 並進行初始化。</p>
<p>以 global 執行環境來說，初始化後會把 VO 放進 Scope Chain 內，可表示為：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">scopeChain <span class="token operator">=</span> <span class="token punctuation">[</span>globalEC<span class="token punctuation">.</span><span class="token constant">VO</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>此外，每個函式都有一個 [[Scope]] 屬性，當 global 執行環境遇到函式時，會將它初始化為 global 執行環境的 Scope Chain：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span><span class="token punctuation">.</span><span class="token punctuation">[</span><span class="token punctuation">[</span>Scope<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> globalEC<span class="token punctuation">.</span>scopeChain<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>當函式被呼叫時，會建立 local 執行環境，也會建立 VO，在函式中會稱作 Activation Object（AO），並且除了 AO 之外，外面傳進來的參數也會被加到該 local 執行環境的 Scope Chain：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span><span class="token punctuation">.</span>scopeChain <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token keyword">function</span><span class="token punctuation">.</span><span class="token constant">AO</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">.</span><span class="token punctuation">[</span><span class="token punctuation">[</span>Scope<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h3 id="模擬-JS-實際流程"><a href="#模擬-JS-實際流程" class="headerlink" title="模擬 JS 實際流程"></a>模擬 JS 實際流程</h3><p>舉個簡單的範例：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
  <span class="token keyword">function</span> <span class="token function">inner</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">var</span> c <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>   
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token function">inner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="第一步：進入-Global-執行環境"><a href="#第一步：進入-Global-執行環境" class="headerlink" title="第一步：進入 Global 執行環境"></a>第一步：進入 Global 執行環境</h4><p>首先進入 Global EC，並初始化 VO 以及 scope chain。前面提到 scope chain = activation object + [[Scope]]，但因為這不是一個 function，所以沒有[[Scope]] 和 AO，會直接以 VO 來用：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">global <span class="token constant">EC</span> <span class="token punctuation">&#123;</span>
  <span class="token constant">VO</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    a<span class="token operator">:</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span>
    <span class="token function-variable function">test</span><span class="token operator">:</span> <span class="token keyword">function</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  scopeChain<span class="token operator">:</span> <span class="token punctuation">[</span>globalEC<span class="token punctuation">.</span><span class="token constant">VO</span><span class="token punctuation">]</span>
<span class="token punctuation">&#125;</span>

test<span class="token punctuation">.</span><span class="token punctuation">[</span><span class="token punctuation">[</span>Scope<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> globalEC<span class="token punctuation">.</span>scopeChain<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>此外也需設置 function 的 [[Scope]]，所以 test() 的[[Scope]] 就會是 globalEC.scopeChain，也就是 globalEC.VO。</p>
<h4 id="第二步：建立-test-執行環境"><a href="#第二步：建立-test-執行環境" class="headerlink" title="第二步：建立 test 執行環境"></a>第二步：建立 test 執行環境</h4><p>執行完 <code>var a = 1</code> 後，將 global EC 的 VO 初始為 1。</p>
<p>接著準備進入 test()，在進入之前會先建立 test EC 並初始化 AO 以及 scope chain ：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">testEC<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
  <span class="token constant">AO</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    b<span class="token operator">:</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span>
    <span class="token function-variable function">inner</span><span class="token operator">:</span> <span class="token keyword">function</span>
  <span class="token punctuation">&#125;</span>
    scopeChain<span class="token operator">:</span> <span class="token punctuation">[</span>testEC<span class="token punctuation">.</span><span class="token constant">AO</span><span class="token punctuation">,</span> test<span class="token punctuation">[</span><span class="token punctuation">[</span>Scope<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span>
    <span class="token operator">=></span> <span class="token punctuation">[</span>testEC<span class="token punctuation">.</span><span class="token constant">AO</span><span class="token punctuation">,</span> globalEC<span class="token punctuation">.</span><span class="token constant">VO</span><span class="token punctuation">]</span>
<span class="token punctuation">&#125;</span>

inner<span class="token punctuation">.</span><span class="token punctuation">[</span><span class="token punctuation">[</span>Scope<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> testEC<span class="token punctuation">.</span>scopeChain
<span class="token operator">=</span> <span class="token punctuation">[</span>testEC<span class="token punctuation">.</span><span class="token constant">AO</span><span class="token punctuation">,</span> test<span class="token punctuation">[</span><span class="token punctuation">[</span>Scope<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span>

<span class="token operator">===</span><span class="token operator">===</span>

global <span class="token constant">EC</span> <span class="token punctuation">&#123;</span>
  <span class="token constant">VO</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    a<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
    <span class="token function-variable function">test</span><span class="token operator">:</span> <span class="token keyword">function</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  scopeChain<span class="token operator">:</span> <span class="token punctuation">[</span>globalEC<span class="token punctuation">.</span><span class="token constant">VO</span><span class="token punctuation">]</span>
<span class="token punctuation">&#125;</span>

test<span class="token punctuation">.</span><span class="token punctuation">[</span><span class="token punctuation">[</span>Scope<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> globalEC<span class="token punctuation">.</span>scopeChain
<span class="token operator">=</span> <span class="token punctuation">[</span>globalEC<span class="token punctuation">.</span><span class="token constant">VO</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>同裡，需設置 function inner() 的 [[Scope]]，可表示為 testEC.scopeChain，又等同於 [testEC.AO, test[[Scope]]]。</p>
<h4 id="第三步：建立-inner-執行環境"><a href="#第三步：建立-inner-執行環境" class="headerlink" title="第三步：建立 inner 執行環境"></a>第三步：建立 inner 執行環境</h4><p>執行完 <code>var b = 2</code> 後，將 test EC 的 AO 初始為 2。</p>
<p>接著進入 inner() 時同樣會建立 inner EC 跟 AO 建立，然後執行完 <code>var c = 3</code> 後，將 inner EC 的 AO 初始為 3：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">innerEC<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
  <span class="token constant">AO</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    c<span class="token operator">:</span> <span class="token number">3</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  scopeChain<span class="token operator">:</span> <span class="token punctuation">[</span>innerEC<span class="token punctuation">.</span><span class="token constant">AO</span><span class="token punctuation">,</span> inner<span class="token punctuation">[</span><span class="token punctuation">[</span>Scope<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span>
    <span class="token operator">=></span> <span class="token punctuation">[</span>inner<span class="token punctuation">.</span><span class="token constant">AO</span><span class="token punctuation">,</span> testEC<span class="token punctuation">.</span>scopeChain<span class="token punctuation">]</span>
    <span class="token operator">=></span> <span class="token punctuation">[</span>inner<span class="token punctuation">.</span><span class="token constant">AO</span><span class="token punctuation">,</span> testEC<span class="token punctuation">.</span><span class="token constant">AO</span><span class="token punctuation">,</span> globalEC<span class="token punctuation">.</span><span class="token constant">VO</span><span class="token punctuation">]</span>
<span class="token punctuation">&#125;</span>

testEC<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
  <span class="token constant">AO</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    b<span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>
    <span class="token function-variable function">inner</span><span class="token operator">:</span> <span class="token keyword">function</span>
  <span class="token punctuation">&#125;</span>
    scopeChain<span class="token operator">:</span> <span class="token punctuation">[</span>testEC<span class="token punctuation">.</span><span class="token constant">AO</span><span class="token punctuation">,</span> test<span class="token punctuation">[</span><span class="token punctuation">[</span>Scope<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span>
    <span class="token operator">=></span> <span class="token punctuation">[</span>testEC<span class="token punctuation">.</span><span class="token constant">AO</span><span class="token punctuation">,</span> globalEC<span class="token punctuation">.</span><span class="token constant">VO</span><span class="token punctuation">]</span>
<span class="token punctuation">&#125;</span>

inner<span class="token punctuation">.</span><span class="token punctuation">[</span><span class="token punctuation">[</span>Scope<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> testEC<span class="token punctuation">.</span>scopeChain
<span class="token operator">=</span> <span class="token punctuation">[</span>testEC<span class="token punctuation">.</span><span class="token constant">AO</span><span class="token punctuation">,</span> test<span class="token punctuation">[</span><span class="token punctuation">[</span>Scope<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span>

<span class="token operator">===</span><span class="token operator">===</span>

global <span class="token constant">EC</span> <span class="token punctuation">&#123;</span>
  <span class="token constant">VO</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    a<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
    <span class="token function-variable function">test</span><span class="token operator">:</span> <span class="token keyword">function</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  scopeChain<span class="token operator">:</span> <span class="token punctuation">[</span>globalEC<span class="token punctuation">.</span><span class="token constant">VO</span><span class="token punctuation">]</span>
<span class="token punctuation">&#125;</span>

test<span class="token punctuation">.</span><span class="token punctuation">[</span><span class="token punctuation">[</span>Scope<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> globalEC<span class="token punctuation">.</span>scopeChain
<span class="token operator">=</span> <span class="token punctuation">[</span>globalEC<span class="token punctuation">.</span><span class="token constant">VO</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="第四部：執行程式碼"><a href="#第四部：執行程式碼" class="headerlink" title="第四部：執行程式碼"></a>第四部：執行程式碼</h4><ul>
<li>執行到 <code>console.log(c)</code><ul>
<li>在 <code>innerEC.AO</code> 裡面找到 c = 3</li>
</ul>
</li>
<li>執行到 <code>console.log(b)</code><ul>
<li>在 <code>innerEC.AO</code> 裡找不到</li>
<li>沿著 scopeChain 往上找到 <code>testEC.AO</code> 裡面 b = 2</li>
</ul>
</li>
<li>執行到 <code>console.log(a)</code><ul>
<li>在 <code>innerEC.AO</code> 裡找不到</li>
<li>沿著 scopeChain 往上找到 <code>globalEC.AO</code> 裡面 a = 3</li>
</ul>
</li>
</ul>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
  <span class="token keyword">function</span> <span class="token function">inner</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">var</span> c <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 3</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 2</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 1</span>
  <span class="token punctuation">&#125;</span>
  <span class="token function">inner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>如同前面所說，其實 Scope Chain 就是 VO/AO 的組合，是負責記錄「包含自己的 VO + 所有上層執行環境的 VO」的集合。</p>
<p>藉由編譯完成時的 EC 模型，我們可瞭解程式在執行時，是如何在 AO 或 VO 裡面找到宣告過的變數，若在該作用域找不到，就會沿著 scopeChain 不斷會往上一層找。</p>
<p>這其實能夠解釋之前提過的 Hoisting（提升），還有接下來要探討的 Closure（提升）是如何發生。</p>
<h3 id="Lexical-Scope-vs-Dynamic-Scope"><a href="#Lexical-Scope-vs-Dynamic-Scope" class="headerlink" title="Lexical Scope vs Dynamic Scope"></a>Lexical Scope vs Dynamic Scope</h3><p>有了基本概念後，再來看下列範例，其中 a 的 log 值會是多少呢？</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">100</span>
<span class="token keyword">function</span> <span class="token function">echo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token comment">// 100 or 200?</span>
<span class="token punctuation">&#125;</span>
  
<span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">200</span>
  <span class="token function">echo</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>
  
<span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>結果會是 100，echo() 裡面的 a 就是 global 的 a，和 test() 裡面的 a 一點關係都沒有。</p>
<p>這和程式語言是如何決定「作用域」這件事有關，可分為靜態作用域和動態作用域：</p>
<ul>
<li>Static Scope 靜態作用域<ul>
<li>又可稱為 Lexical Scope 語法作用域、語彙範疇</li>
<li>變數的作用域在語法解析時，就已經確定作用域，且不會改變</li>
</ul>
</li>
<li>Dynamic Scope 動態作用域<ul>
<li>變數的作用域在函式調用時才決定</li>
<li>若是採用動態作用域的程式語言，那最後 log 出來的值就會是 200 而不是 100</li>
</ul>
</li>
</ul>
<p>而 JavaScript 採用的是靜態作用域，在分析程式碼的結構就可以知道作用域的長相。但需特別注意的是，JavaScript 中的 <code>this</code>，其原理和動態作用域非常類似，this 的值會在程式執行時才被動態決定。</p>
<p>建立一些有關作用域的觀念後，再來我們要來談談本篇核心：Closure（閉包）。</p>
<hr>
<h2 id="Closure-閉包"><a href="#Closure-閉包" class="headerlink" title="Closure 閉包"></a>Closure 閉包</h2><p>在 JavaScript 中，Closure（閉包）和作用域的關係密不可分，透過 Scope Chain 的機制，我們能夠進一步理解 Closure 產生的原因。</p>
<p>可先來看看下方這個例子：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
  <span class="token keyword">function</span> <span class="token function">inner</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    a<span class="token operator">++</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">return</span> inner <span class="token comment">// 不加括號，只 return 這個 function</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">var</span> func <span class="token operator">=</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 11 => 等同於 inner()</span>
<span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 12 => 等同於 inner()</span>
<span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 13 => 等同於 inner()</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>透過在 function 中回傳另一個 function 的寫法，就可以把 a 這個變數鎖在這個 function 裡面，隨時能夠拿出來使用。</p>
<p>一般而言，當 function 被執行完之後，資源就會被釋放掉，但是通過這種寫法，我們就可以把 function 內部變數的值給保存起來。</p>
<p>再根據 <span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvemgtVFcvZG9jcy9XZWIvSmF2YVNjcmlwdC9DbG9zdXJlcw==">MDN<i class="fa fa-external-link-alt"></i></span> 說明，其實閉包就是一個特殊的物件，具有下列兩個含義：</p>
<ul>
<li>它是一個 function</li>
<li>它產生了一個 context 執行環境，負責記錄上層 VO</li>
</ul>
<p>再舉個有關 Closure 的例子：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">factory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">var</span> brand <span class="token operator">=</span> <span class="token string">"BMW"</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token function">car</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"This is a "</span> <span class="token operator">+</span> brand <span class="token operator">+</span> <span class="token string">" car"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">var</span> carMaker <span class="token operator">=</span> <span class="token function">factory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">carMaker</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//  "This is a BMW car</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>上述程式碼建立的 EC 模型：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// Global Context</span>
global<span class="token punctuation">.</span><span class="token constant">VO</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  factory<span class="token operator">:</span> pointer to <span class="token function">factory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  carMaker<span class="token operator">:</span> 是 global<span class="token punctuation">.</span><span class="token constant">VO</span><span class="token punctuation">.</span>factory 的回傳值
  scopeChain<span class="token operator">:</span> <span class="token punctuation">[</span>global<span class="token punctuation">.</span><span class="token constant">VO</span><span class="token punctuation">]</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// Factory 執行環境</span>
factory<span class="token punctuation">.</span><span class="token constant">VO</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  car<span class="token operator">:</span> pointer to <span class="token function">car</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  brand<span class="token operator">:</span> <span class="token string">'BMW'</span><span class="token punctuation">,</span>
  scopeChain<span class="token operator">:</span> <span class="token punctuation">[</span>factory<span class="token punctuation">.</span><span class="token constant">VO</span><span class="token punctuation">,</span> global<span class="token punctuation">.</span><span class="token constant">VO</span><span class="token punctuation">]</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// car 執行環境</span>
car<span class="token punctuation">.</span><span class="token constant">VO</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  scopeChain <span class="token operator">=</span> <span class="token punctuation">[</span>car<span class="token punctuation">.</span><span class="token constant">VO</span><span class="token punctuation">,</span> factory<span class="token punctuation">.</span><span class="token constant">VO</span><span class="token punctuation">,</span> global<span class="token punctuation">.</span><span class="token constant">VO</span><span class="token punctuation">]</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>以 JS 運作過程來說， function factory 執行結束後就會從 Call Stack 移除，但是因為 VO 還會被 car VO 參考，所以不會將其移除。</p>
<p>這其實就是前面所提到的 Scope Chain 與 Closure 之間的關係。</p>
<h3 id="操作-Closure-可能遇到的作用域陷阱"><a href="#操作-Closure-可能遇到的作用域陷阱" class="headerlink" title="操作 Closure 可能遇到的作用域陷阱"></a>操作 Closure 可能遇到的作用域陷阱</h3><p>由以下範例，可發現執行 <code>arr[0]()</code> 時，結果會是 5：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 5</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>當執行 <code>arr[0]()</code> 時，其實會長這樣：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>因為 function EC 中沒有宣告變數 i，因此會往上一層作用域找，找到 global EC 的 i，又因為 for 迴圈執行結束，此時的 i = 5，所以會印出 5。</p>
<p>可使用下列方法改寫上述程式碼：</p>
<h4 id="1-使用閉包：在-function-中-return-function"><a href="#1-使用閉包：在-function-中-return-function" class="headerlink" title="1. 使用閉包：在 function 中 return function"></a>1. 使用閉包：在 function 中 return function</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">logN</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">function</span> <span class="token function">logN</span><span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="2-IIFE：立即呼叫函式"><a href="#2-IIFE：立即呼叫函式" class="headerlink" title="2. IIFE：立即呼叫函式"></a>2. IIFE：立即呼叫函式</h4><ul>
<li>IIFE：Immediately Invoked Function Expression，是一個在宣告的當下就會馬上被執行的函數。語法如下：</li>
</ul>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'hello'</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment">// hello</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>因此範例程式碼可修改成，這樣就不用再另外宣告 function，但缺點是可讀性較差：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>
arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="3-使用-let-宣告：限定變數的作用域"><a href="#3-使用-let-宣告：限定變數的作用域" class="headerlink" title="3. 使用 let 宣告：限定變數的作用域"></a>3. 使用 let 宣告：限定變數的作用域</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>執行 <code>arr[0]()</code> 時可以表示成：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">&#123;</span>
  <span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="Closure-實際應用"><a href="#Closure-實際應用" class="headerlink" title="Closure 實際應用"></a>Closure 實際應用</h2><p>那我們通常會在什麼情況下使用 Closure 呢？像是在計算量很大的時候，或是需要隱藏一些內部資訊。方法如下：</p>
<h3 id="1-封裝"><a href="#1-封裝" class="headerlink" title="1. 封裝"></a>1. 封裝</h3><p>可將一些不想外露的細節封裝在執行環境中，只露出想要 public 部分。</p>
<p>以下方與金源有關的程式碼為例：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> money <span class="token operator">=</span> <span class="token number">99</span>
<span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token parameter">num</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  money <span class="token operator">+=</span> num
<span class="token punctuation">&#125;</span>
<span class="token keyword">function</span> <span class="token function">deduct</span><span class="token punctuation">(</span><span class="token parameter">num</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">>=</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    money <span class="token operator">-=</span> <span class="token number">10</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
<span class="token function">deduct</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>money<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>在這種情況之下，任何人都能夠變動 global 中變數 money 的值。</p>
<p>如果改成使用閉包，就能夠把變數給隱藏起來，無法從外部更改 function 內部資料：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">createWallet</span><span class="token punctuation">(</span><span class="token parameter">initMoney</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">var</span> money <span class="token operator">=</span> initMoney<span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>
    <span class="token function-variable function">add</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">num</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      money <span class="token operator">+=</span> num<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token function-variable function">deduct</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">num</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">>=</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        money <span class="token operator">-=</span> <span class="token number">10</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
        money <span class="token operator">-=</span> num
      <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token function">getMoney</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">return</span> money<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">var</span> myWallet <span class="token operator">=</span> <span class="token function">createWallet</span><span class="token punctuation">(</span><span class="token number">99</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
myWallet<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
myWallet<span class="token punctuation">.</span><span class="token function">deduct</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>myWallet<span class="token punctuation">.</span><span class="token function">getMoney</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 90</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="2-Callbacks-回呼"><a href="#2-Callbacks-回呼" class="headerlink" title="2. Callbacks 回呼"></a>2. Callbacks 回呼</h3><p>callback funtcion 就是一種常見的閉包。先前提到像 JavaScript 就是採用單執行緒與 Event Loop 機制，一次只能處理一件事情。</p>
<p>但以 callback 能讓我們能夠延遲函式的調用，實現非同步操作。例如呼叫一個 AJAX 的 XMLHttpRequest，通常就會使用 callback 來處理伺服器的回應，因此等待時其他程式還是能照常運作。</p>
<h2 id="何時不該使用-Clousre？"><a href="#何時不該使用-Clousre？" class="headerlink" title="何時不該使用 Clousre？"></a>何時不該使用 Clousre？</h2><p>雖然 Closure 提供非常便利的功能，但因為系統效能的因素，還是必須謹慎使用：</p>
<h3 id="1-過多的作用域"><a href="#1-過多的作用域" class="headerlink" title="1. 過多的作用域"></a>1. 過多的作用域</h3><p>需注意每當需要取得一個變數時，Scope Chain 會一層一層檢索，直到找到該物件或值，因此越多層會導致需時越長，例如多個巢狀 function。</p>
<h3 id="2-記憶體回收"><a href="#2-記憶體回收" class="headerlink" title="2. 記憶體回收"></a>2. 記憶體回收</h3><p>記憶體回收（Garbage Collection）機制，簡單來說，就是當物件不再被參考時，就會被記憶體回收處理。</p>
<p>但如果是在不正確使用閉包的情況下，就可能導致記憶體洩漏（Memory Leak），造成程式未能釋放已經不再使用的記憶體，並產生效能問題。</p>
<p>以下方的程式碼為例：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">leakyFn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  leak <span class="token operator">=</span> <span class="token number">100</span>
<span class="token punctuation">&#125;</span>
<span class="token function">leakyFn</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>leak<span class="token punctuation">)</span>  <span class="token comment">// 100</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>若在非 strict 模式下執行，JavaScript 會自動宣告一個全域變數 <code>var leak</code>，因此就算函數執行完畢，leak 還是會繼續存留在 全域環境中，因此也就不會被回收掉。</p>
<hr>
<h2 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h2><p>在學到 Closure（閉包）時，發現到花了很多時間在瞭解有關 Scope（作用域）的概念。也是在這一單元瞭解到，原來之前在課程學到的非同步操作，當中的 callback 其實就和閉包有關，有關 callback 的觀念真的非常重要！</p>
<p>此外也瞭解到，閉包在框架中很常會使用到，透過閉包的方式，就能夠避免汙染全域變數或是記憶體洩漏等問題。</p>
<p>一開始之所以沒辦法很快理解，或許就是沒有把這些觀念融會貫通，都是一個環節接著另一個環節，和 Scope Chain 一樣，會需要往上一層去找出需要的拼圖。</p>
<p>參考資料：</p>
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmh1bGkudHcvMjAxOC8xMi8wOC9qYXZhc2NyaXB0LWNsb3N1cmUv">所有的函式都是閉包：談 JS 中的作用域與 Closure<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9hbmR5eW91LmdpdGh1Yi5pby8yMDE1LzA0LzIwL3VuZGVyc3RhbmQtY2xvc3VyZXMtYW5kLXNjb3BlLWNoYWluLw==">參透Javascript閉包與Scope Chain<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9odWdoLXByb2dyYW0tbGVhcm5pbmctZGlhcnktanMubWVkaXVtLmNvbS8lRTUlODklOEQlRTclQUIlQUYlRTQlQjglQUQlRTklOUElOEUtanMlRTQlQkIlQTQlRTQlQkElQkElRTYlOTAlOUUlRTQlQjglOEQlRTYlODclODIlRTclOUElODQlRTUlOUMlQjAlRTYlOTYlQjktY2xvc3VyZS0lRTklOTYlODklRTUlOEMlODUtY2JiOWM2YTQxODVj">前端中階：JS令人搞不懂的地方-Closure(閉包)<i class="fa fa-external-link-alt"></i></span></li>
</ul>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>Closure</tag>
      </tags>
  </entry>
  <entry>
    <title>[week 16] JavaScript 進階 - 初探 Hoisting &amp; Execution Context</title>
    <url>/javascript-hoisting/</url>
    <content><![CDATA[<blockquote>
<p>本篇為 <span class="exturl" data-url="aHR0cHM6Ly9saWRlbXkuY29tL3AvanMyMDEtamF2YXNjcmlwdA==">[JS201] 進階 JavaScript：那些你一直搞不懂的地方<i class="fa fa-external-link-alt"></i></span> 這門課程的學習筆記。如有錯誤歡迎指正！</p>
</blockquote>
<pre class="line-numbers language-none"><code class="language-none">學習目標：

  你知道 Hoisting（提升）是什麼
  你知道 Hoisting 的原理為何
  你知道 Hoisting 只會提升宣告而非賦值
  你知道 function 宣告、function 的參數以及一般變數宣告同時出現時的提升優先順序
  你知道 let 跟 const 其實也有 Hoisting，只是表現形式不太相同<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<span id="more"></span>

<hr>
<h2 id="什麼是-Hoisting？"><a href="#什麼是-Hoisting？" class="headerlink" title="什麼是 Hoisting？"></a>什麼是 Hoisting？</h2><p>如果我們試圖在 JavaScript 中，對一個尚未宣告的變數取值，會出現 <code>a is not defined</code> 的錯誤訊息：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>
<span class="token comment">// ReferenceError: a is not defined</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>但如果在下面加上一行 <code>var a = 10</code>，也就是宣告變數 a，神奇的事就發生了：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
<span class="token comment">// undefined</span>

<span class="token operator">===</span> 經過 Hoisting <span class="token operator">===</span>

<span class="token keyword">var</span> a<span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
<span class="token comment">// undefined</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>我們知道，在 JavaScript 中程式是一行一行執行的。但是在上方程式碼的情況下，console.log() 的變數 a 卻能夠先被宣告，然後輸出 undefined，可以想成下方的程式碼。</p>
<p>這種現象就叫做 Hoisting（提升），會發生在變數宣告。也就是說，當我們宣告一個變數時，宣告本身會被提升至程式碼最上面，而賦值則留在原處，因此也就不會出現 <code>a is not defined</code> 的錯誤。</p>
<p>或是以我們熟悉的宣告 function 為例，就算在宣告以前就先呼叫它，還是能夠順利執行：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">// 123</span>

<span class="token operator">===</span> 經過 Hoisting <span class="token operator">===</span>

<span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 123</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>因為整段 function 會被提升到上面，所以不管在哪呼叫 function 都能夠執行。</p>
<p>這在有些程式語言其實是做不到的，但在 JavaScript 進行宣告能夠做到提升，也使程式碼撰寫更加方便。</p>
<h3 id="只有宣告會提升，賦值不會提升"><a href="#只有宣告會提升，賦值不會提升" class="headerlink" title="只有宣告會提升，賦值不會提升"></a>只有宣告會提升，賦值不會提升</h3><p>但需注意的是，只有「宣告」會被提升到最上方，但「賦值」不會。</p>
<p>若宣告一個變數，並賦值為 function 時，以下方程式碼為例：</p>
<ol>
<li>若把呼叫改寫在 function 後面，能夠順利執行：</li>
</ol>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token function-variable function">test</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 123</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ol start="2">
<li>若把呼叫改寫在 function 前面，則會出現「test 不是 function」的錯誤：</li>
</ol>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">var</span> <span class="token function-variable function">test</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">// TypeError: test is not a function</span>

<span class="token operator">===</span> 經過 Hoisting <span class="token operator">===</span>

<span class="token keyword">var</span> test<span class="token punctuation">;</span>
<span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function-variable function">test</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>之所以會出現錯誤，是因為即使經過提升先宣告變數 <code>var = test</code>，卻無法先賦值。因此呼叫的 <code>test()</code> 其實是 undefined 而非 function，所以執行就會顯示錯誤。</p>
<h2 id="Hoisting-的順序"><a href="#Hoisting-的順序" class="headerlink" title="Hoisting 的順序"></a>Hoisting 的順序</h2><h3 id="情境一：同時宣告函式與變數"><a href="#情境一：同時宣告函式與變數" class="headerlink" title="情境一：同時宣告函式與變數"></a>情境一：同時宣告函式與變數</h3><p>那如果同時宣告一個 function 和變數呢？</p>
<p>以下列程式碼為例：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// [Function: a]</span>
<span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token string">'global'</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token string">'local'</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>會發現答案既不是 global 也非 local，而是輸出 function。</p>
<p>這是因為除了宣告變數以外，function 的宣告也會提升，而且「<strong>function 的提升會優先於變數的提升</strong>」。</p>
<h3 id="情境二：重複的函式"><a href="#情境二：重複的函式" class="headerlink" title="情境二：重複的函式"></a>情境二：重複的函式</h3><p>如果有兩個相同的 function，則會依照順序，提升比較後面宣告的 function：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">function</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
  <span class="token keyword">function</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 2</span>

<span class="token operator">===</span> 經過 Hoisting <span class="token operator">===</span>

<span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">/* 會優先提升後面的函式
  function a() &#123;
    console.log(1);
  &#125;;
  */</span> 
  <span class="token keyword">function</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="情境三：傳入參數到-function"><a href="#情境三：傳入參數到-function" class="headerlink" title="情境三：傳入參數到 function"></a>情境三：傳入參數到 function</h3><p>在探討參數之前，先來複習參數和引數的區別：</p>
<ul>
<li>參數（Parameter）：是方法的宣告</li>
<li>引數（Argument）：用於呼叫函式</li>
</ul>
<blockquote>
<p>可參考：<span class="exturl" data-url="aHR0cHM6Ly9ub3RmYWxzZS5uZXQvNi9hcmctdnMtcGFyYW0=">引數(Argument) vs. 參數(Parameter) - NotFalse 技術客<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
<p>因此，當我們傳入參數到 function 時，其實指的就是引數（argument），而 argument 的宣告會優先於被提升的變數宣告。</p>
<p>以下方傳入參數的程式碼為例：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token parameter">a</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>
  <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">456</span>
<span class="token punctuation">&#125;</span>

<span class="token function">test</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span>
<span class="token comment">// 123</span>

<span class="token operator">===</span> 經過 Hoisting <span class="token operator">===</span>

<span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token parameter">a</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">var</span> a<span class="token punctuation">;</span>      <span class="token comment">// 宣告變數就沒用了QQ</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
  a <span class="token operator">=</span> <span class="token number">456</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token function">test</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span>    <span class="token comment">// argument 的宣告優先度較高</span>
<span class="token comment">// 123</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>那如果同時宣告 function 和 argument 呢？宣告 function 會優先於 argument 的宣告：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token parameter">a</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">function</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token function">test</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// [Function a]</span>

<span class="token operator">===</span> 經過 Hoisting <span class="token operator">===</span>

<span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token parameter">a</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">function</span> <span class="token function">a</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 函式的宣告優先度較高</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token function">test</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 參數寫多少都沒用QQ</span>
<span class="token comment">// [Function a]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="情境四：宣告變數並賦值"><a href="#情境四：宣告變數並賦值" class="headerlink" title="情境四：宣告變數並賦值"></a>情境四：宣告變數並賦值</h3><p>但如果是在函式內「宣告變數並賦值」的話，結果就不相同了：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token parameter">a</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token string">'hello'</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
  
  <span class="token keyword">function</span> <span class="token function">a</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token function">test</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span>

<span class="token operator">===</span> 經過 Hoisting <span class="token operator">===</span>

<span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token parameter">a</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">function</span> <span class="token function">a</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     <span class="token comment">// 函式宣告提升</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// [Function: a] </span>
  
  <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token string">'hello'</span><span class="token punctuation">;</span>    <span class="token comment">// 賦值</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// hello</span>
<span class="token punctuation">&#125;</span>

<span class="token function">test</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 參數還是沒用QQ</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>綜合上述幾個例子，可整理出有關 Hoisting 的幾個重點：</p>
<ul>
<li>Hoisting 的優先順序為：</li>
</ul>
<ol>
<li>函式宣告（function）</li>
<li>傳進函式的參數（argument）</li>
<li>變數宣告（variable）</li>
</ol>
<ul>
<li>只有宣告會提升，賦值不會提升</li>
</ul>
<h3 id="小試身手"><a href="#小試身手" class="headerlink" title="小試身手"></a>小試身手</h3><p>最後再來進行這個小測驗，判斷 log 值依序是什麼：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'1.'</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">7</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'2.'</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>
  a<span class="token operator">++</span><span class="token punctuation">;</span>
  <span class="token keyword">var</span> a<span class="token punctuation">;</span>
  <span class="token function">inner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'4.'</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">function</span> <span class="token function">inner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'3.'</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>
    a <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">;</span>
    b <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'5.'</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>
a <span class="token operator">=</span> <span class="token number">70</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'6.'</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'7.'</span><span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>思考方式：</p>
<ul>
<li><code>console.log(&#39;1.&#39;, a)</code></li>
</ul>
<p>先看執行函式 test()，因為函式內有宣告變數，所以會提升，得到 a = undefined。</p>
<ul>
<li><code>console.log(&#39;2.&#39;, a);</code></li>
</ul>
<p>在函式 test()，賦值 a = 7。</p>
<ul>
<li><code>console.log(&#39;3.&#39;, a);</code></li>
</ul>
<p>進入函式 inner()，函式內沒有宣告 a，所以會往上層 test() 宣告過 <code>var a = 7</code>，經過 a++ 得到 a = 8。</p>
<p>又因為外層沒有宣告過 b ，在呼叫函式 inner() 的同時，會宣告一個全域變數 b 並賦值為 200。</p>
<ul>
<li><code>console.log(&#39;4.&#39;, a);</code></li>
</ul>
<p>前面呼叫 inner() 時，重新賦值變數 a 為 30，因此這時外層的 a = 30。</p>
<ul>
<li><code>console.log(&#39;5.&#39;, a);</code></li>
</ul>
<p>看全域變數的 <code>var a = 1</code>，因此 a = 1。</p>
<ul>
<li><code>console.log(&#39;6.&#39;, a);</code></li>
</ul>
<p>經過賦值 a = 70。</p>
<ul>
<li><code>console.log(&#39;7.&#39;, a);</code></li>
</ul>
<p>前面提到在函式中，宣告了一個全域變數 b 並賦值為 200，因此 b = 200</p>
<hr>
<h2 id="所以為什麼需要-Hoisting？"><a href="#所以為什麼需要-Hoisting？" class="headerlink" title="所以為什麼需要 Hoisting？"></a>所以為什麼需要 Hoisting？</h2><p>至於我們為什麼會需要 Hoisting 呢？這個問題其實可以倒過來思考：「假如沒有 Hoisting 會怎麼樣？」</p>
<ul>
<li>一定要先宣告變數才能使用</li>
</ul>
<p>養成宣告的好習慣！這樣就不會汙染變數了，感覺還不賴？</p>
<ul>
<li>一定要先宣告函示才能使用</li>
</ul>
<p>這點其實會造成很大的不便，因為這樣在每個檔案都必須把 function 宣告放在最上面，才能保證底下的程式碼都可以呼叫這些 function。</p>
<ul>
<li>無法達成 function 互相呼叫</li>
</ul>
<p>什麼意思？舉個下面的例子：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">loop</span><span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token function">logEvenOrOdd</span><span class="token punctuation">(</span><span class="token operator">--</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">function</span> <span class="token function">logEvenOrOdd</span><span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> n <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">?</span> <span class="token string">'Odd'</span> <span class="token operator">:</span> <span class="token string">'Even'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">loop</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token function">loop</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>因為有 Hoisting，我們才能在 loop() 函式中呼叫 logEvenOrOdd()，然後也在 logEvenOrOdd() 函式中呼叫 loop()。</p>
<p>如果沒有 Hoisting，那以上的程式碼就不可能達成，因為這牽涉到順序問題，不可能同時做到 A 在 B 上面而 B 又在 A 上面。</p>
<p>為了解決上述問題，所以我們需要 Hoisting。</p>
<p>延伸閱讀：</p>
<ul>
<li><span class="exturl" data-url="aHR0cDovL2RtaXRyeXNvc2huaWtvdi5jb20vbm90ZXMvbm90ZS00LXR3by13b3Jkcy1hYm91dC1ob2lzdGluZy8=">Note 4. Two words about “hoisting”.<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vbGl1aGU2ODgvcC81ODkxMjczLmh0bWw=">JavaScript系列文章：变量提升和函数提升<i class="fa fa-external-link-alt"></i></span></li>
</ul>
<hr>
<h2 id="Hoisting-的運作原理"><a href="#Hoisting-的運作原理" class="headerlink" title="Hoisting 的運作原理"></a>Hoisting 的運作原理</h2><p>在瞭解什麼是 Hoisting，還有我們為什麼需要 Hoisting 之後，接著就來探討：「Hoisting 究竟是如何運作的？」</p>
<p>這部分可參考 JavaScript 所遵循的標準 <span class="exturl" data-url="aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3dpa2kvRUNNQVNjcmlwdA==">ECMAScript<i class="fa fa-external-link-alt"></i></span> 規格書，因為後期版本規格眾多，這裡以 <span class="exturl" data-url="aHR0cHM6Ly93d3ctYXJjaGl2ZS5tb3ppbGxhLm9yZy9qcy9sYW5ndWFnZS9FMjYyLTMucGRm">ES3 規格書<i class="fa fa-external-link-alt"></i></span>當作範例。</p>
<p>其實在 ES3 的規則中，並出現沒有 Hoisting 這個詞，與此現象有關的段落出現在第十章：Execution Contexts（執行環境，以下部分內容簡稱 EC）。</p>
<h3 id="什麼是-Execution-Context？"><a href="#什麼是-Execution-Context？" class="headerlink" title="什麼是 Execution Context？"></a>什麼是 Execution Context？</h3><p>在 JavaScript 中，可執行的 JS 程式碼可分成三種型別：</p>
<ol>
<li>Global Code：全域性的，不在任何函式裡面的程式碼</li>
<li>Function Code：在自定義函式中的程式碼</li>
<li>Eval Code：使用 eval() 函式動態執行的程式碼，但因為有兼容性與安全問題，JavaScript 並不推薦使用，這裡先不討論</li>
</ol>
<p>當 JavaScript 開始執行時，根據執行的程式碼型別，程式碼必須被執行在這三種環境之一，也就是 Execution Context（執行環境）。</p>
<p>以下要來探討的是全域執行環境和函式執行環境：</p>
<ul>
<li>全域執行環境（Global Execution Context）<ul>
<li>當執行 JavaScript 時，會先建立的第一層執行環境</li>
<li>位在最外圍的執行環境，且只會有一個</li>
<li>其他執行環境都可存取全域的資料</li>
</ul>
</li>
<li>函式執行環境（Function Execution Context）<ul>
<li>又稱為區域性執行環境（Local Execution Context）</li>
<li>每個 function 都有自己的執行環境</li>
<li>裡面儲存該 function 的相關資料，例如變數和函式定義</li>
<li>每當呼叫一個 function 時，都會建立一個新的 local EC，並且被放到執行堆疊（Call Stack）最上面</li>
</ul>
</li>
</ul>
<p><img src="https://i.imgur.com/BeuXQfQ.png"><br>（參考來源：<span class="exturl" data-url="aHR0cHM6Ly9tZWRpdW0uY29tLyVFOSVBRCU5NCVFOSVBQyVCQyVFOCU5NyU4RiVFNSU5QyVBOCVFNyVBOCU4QiVFNSVCQyU4RiVFNyVCNCVCMCVFNyVBRiU4MCVFOCVBMyVBMS8lRTYlQjclQkElRTglQUIlODctamF2YXNjcmlwdC0lRTUlOUYlQjclRTglQTElOEMlRTclOTIlQjAlRTUlQTIlODMtMjk3NmIzZWFmMjQ4JUVGJUJDJTg5">https://medium.com/%E9%AD%94%E9%AC%BC%E8%97%8F%E5%9C%A8%E7%A8%8B%E5%BC%8F%E7%B4%B0%E7%AF%80%E8%A3%A1/%E6%B7%BA%E8%AB%87-javascript-%E5%9F%B7%E8%A1%8C%E7%92%B0%E5%A2%83-2976b3eaf248）<i class="fa fa-external-link-alt"></i></span></p>
<h3 id="呼叫-amp-執行堆疊（Call-Stack）"><a href="#呼叫-amp-執行堆疊（Call-Stack）" class="headerlink" title="呼叫 &amp; 執行堆疊（Call Stack）"></a>呼叫 &amp; 執行堆疊（Call Stack）</h3><p>因為 JavaScript 是<span class="exturl" data-url="aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3dpa2kvJUU3JUJBJUJGJUU3JUE4JThC">單執行緒<i class="fa fa-external-link-alt"></i></span>的程式語言，用白話文解釋就是「JavaScript 一次只能做一件事情」，因此 JS 中等待執行的任務會被放入 Call Stack。</p>
<p>JavaScript 在調用一個執行環境時，其實會經過兩個階段：</p>
<ol>
<li>建立階段：呼叫堆疊（Call Stack）</li>
</ol>
<p>前面有提到，當開始執行 JavaScript 時，會先進入 Global EC。直到我們呼叫一個 function 時，才會建立一個新的執行環境繼續往 Global EC 的上層依序堆疊。</p>
<p>這些過程都發生在開始執行內部程式碼之前，也就是建立階段。對 JS 引擎來說，屬於執行前的編譯階段，而 hoisting 就是在此階段進行處理。</p>
<ol start="2">
<li>執行階段：執行堆疊（Execution Stack）</li>
</ol>
<p>接著 JavaScript 會優先處理執行堆疊中最上面的執行環境。一旦執行完該 function 後，該執行環境就會從最上面被移除（pop off），同時儲存在該 function 中的資訊也會被銷毀，然後再回到之前的執行環境，直到回到 Global EC 為止。</p>
<p>可參考下方的執行環境流程示意圖：</p>
<p><img src="https://i.imgur.com/gEIWBNG.png"><br>（參考來源：<span class="exturl" data-url="aHR0cHM6Ly9kZXYudG8vYWhtZWR0YWhpci93aGF0LWlzLXRoZS1leGVjdXRpb24tY29udGV4dC1leGVjdXRpb24tc3RhY2stc2NvcGUtY2hhaW4taW4tanMtMjZuYyVFRiVCQyU4OQ==">https://dev.to/ahmedtahir/what-is-the-execution-context-execution-stack-scope-chain-in-js-26nc）<i class="fa fa-external-link-alt"></i></span></p>
<p>最後整理關於執行環境的幾個重點：</p>
<ul>
<li>JavavaScript 是單執行緒的語言</li>
<li>且為同步執行：一次一個指令，而且有一定的順序</li>
<li>Global Context 只會有一個</li>
<li>Function Context 則沒有限制</li>
<li>就算是自己呼叫自己，只要有呼叫 function 就會建立執行環境</li>
</ul>
<hr>
<h2 id="Execution-Context-Object-執行環境物件"><a href="#Execution-Context-Object-執行環境物件" class="headerlink" title="Execution Context Object 執行環境物件"></a>Execution Context Object 執行環境物件</h2><p>前面也曾提到，執行環境負責存放該環境需要用到的各種資料，我們可以把執行環境想像成一個物件，又被稱作執行環境物件（Execution Context Object）。</p>
<p>而每個執行環境物件會有下列三個屬性：</p>
<ul>
<li>作用域鏈（Scope Chain）</li>
<li>變數物件（Variable Object）</li>
<li>‘this’ 變數（’this’ Variable）</li>
</ul>
<p>若以 Object 型態表示會如下：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">executionContextObject <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  scopeChain<span class="token operator">:</span> <span class="token punctuation">&#123;</span> 
    <span class="token comment">// 變數物件 + 所有父代執行環境物件的變數物件</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  variableObject<span class="token operator">:</span> <span class="token punctuation">&#123;</span> 
    <span class="token comment">// 函式的參數、內部的變數和函式</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token keyword">this</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">//</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="Variable-Object-變數物件（VO）"><a href="#Variable-Object-變數物件（VO）" class="headerlink" title="Variable Object 變數物件（VO）"></a>Variable Object 變數物件（VO）</h2><p>以下是 ECMA <span class="exturl" data-url="aHR0cHM6Ly93d3cuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9hcmNoaXZlL2VjbWFzY3JpcHQvMTk5OS9UQzM5V0cvOTkwMjIwLWVzMl9mdW5jLnBkZg==">10.1.3 Variable Instantiation<i class="fa fa-external-link-alt"></i></span> 對於 Variable Object 的解釋：</p>
<blockquote>
<p>Every execution context has associated with it a variable object. Variables and functions declared in the source text are added as properties of the variable object. For function, anonymous, and implementation-supplied code, parameters are added as properties of the variable object.</p>
</blockquote>
<p>意思是說，每一個執行環境都會有一個相對應的變數物件（Variable Object），這個物件負責記錄執行環境中定義的變數和函式。</p>
<p>而執行 function 所創造的執行環境中，則會把參數（parameters）也加進去變數物件中，也就是活化成執行物件（Activation Object），這部分我們後面章節會再提到。</p>
<p>那麼，Variable Object 實際上是如何運作的呢？我們可從 JavaScript 執行流程談起。</p>
<p>從呼叫 function 到執行程式碼，這段過程中其實發生很多事情，流程大致如下：</p>
<ol>
<li>尋找呼叫 function </li>
<li>在執行 function 之前先建立執行環境</li>
<li>進入建立階段</li>
</ol>
<ul>
<li>初始化 Scope Chain</li>
<li>建立 Variable Object</li>
<li>判斷決定 this 的值</li>
</ul>
<ol start="4">
<li>執行階段</li>
</ol>
<ul>
<li>一行一行執行程式碼，賦值 </li>
</ul>
<p>其中，在建立 Variable Object 時，則會進行下列三件事：</p>
<ul>
<li>建立 Argument Object：檢查執行環境的參數，初始化參數的名稱與值，若沒有值就初始為undefined</li>
<li>掃描 Function 宣告：為每一個 function 建立一個新屬性，其值指向該 function 在記憶體中的位置。如果已經有同名的就取代之</li>
<li>掃描變數宣告：為每一個變數宣告建立一個新屬性，並將該屬性的值初始為 undefined。如果已經有同名的就略過</li>
</ul>
<p>以下舉簡單的範例進行說明。</p>
<h3 id="範例：宣告變數-var-a-123"><a href="#範例：宣告變數-var-a-123" class="headerlink" title="範例：宣告變數 var a = 123"></a>範例：宣告變數 <code>var a = 123</code></h3><p>這句會分成兩部分：</p>
<ol>
<li><code>var a</code>：如果 VO 裡沒有屬性 a，就會新增 a 並初始化成 undefined</li>
<li><code>a = 10</code>：在 VO 裡找到叫做 a 的屬性，並設定為 10</li>
</ol>
<p>VO 模型：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token constant">VO</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
  a<span class="token operator">:</span> <span class="token number">123</span><span class="token punctuation">,</span>   <span class="token comment">// 把變數放進 VO，初始化成 123</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>至於 VO 是如何找到屬性 a，則是會透過透 Scope chain 不斷往上層找，如果每一層都找不到就會出現錯誤訊息。這過程中涉及的部分較廣，因此我們先不進行討論。</p>
</blockquote>
<h3 id="範例：在-function-傳入一個參數-123"><a href="#範例：在-function-傳入一個參數-123" class="headerlink" title="範例：在 function 傳入一個參數 123"></a>範例：在 function 傳入一個參數 123</h3><p>程式碼如下：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token function">test</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 123, undefined</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ol>
<li>把參數放到 VO，並初始化成 123</li>
<li>若參數沒有值，就會被初始化成 undefined</li>
</ol>
<p>VO 模型如下：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token constant">VO</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
  a<span class="token operator">:</span> <span class="token number">123</span><span class="token punctuation">,</span>   <span class="token comment">// 把參數放進 VO，初始化成 123</span>
  b<span class="token operator">:</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span>   <span class="token comment">// 把變數放進 VO，初始化成 undefined</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="範例：-在-function-中宣告一個-function"><a href="#範例：-在-function-中宣告一個-function" class="headerlink" title="範例： 在 function 中宣告一個 function"></a>範例： 在 function 中宣告一個 function</h3><p>程式碼如下：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
  <span class="token keyword">function</span> <span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">var</span> c <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token function">test</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ol>
<li>宣告 function 一樣會在 VO 裡面新增一個屬性</li>
<li>但如果 VO 裡面已經有同名的屬性，就會取代之。因此 function b 會取代傳入的參數 b</li>
</ol>
<p>VO 模型如下：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token constant">VO</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    a<span class="token operator">:</span> <span class="token number">123</span><span class="token punctuation">,</span>   <span class="token comment">// 把參數放進 VO，初始化成 123</span>
    <span class="token function-variable function">b</span><span class="token operator">:</span> <span class="token keyword">function</span> b<span class="token punctuation">,</span> <span class="token comment">// 把 funcion b 放進 VO</span>
    c<span class="token operator">:</span> <span class="token keyword">undefined</span> <span class="token comment">// 把變數放進 VO，初始化成 undefined</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>對於宣告變數，則會在 VO 裡面新增一個屬性並且把值設為 undefined，如上述範例中的 <code>var c</code> 但如果 VO 已經有這個屬性時，值不會被改變。</p>
<h3 id="小結"><a href="#小結" class="headerlink" title="小結"></a>小結</h3><p>由上方幾個範例可知，當我們進入一個 EC，但還沒開始執行 function 以前，會先建立 Variable Object，並按照順序進行以下三件事：</p>
<ol>
<li>把參數放到 VO 裡面並設定傳進來的值，沒有值的設成 undefined</li>
<li>把 function 宣告放到 VO 裡，如果已經有同名的就取代之</li>
<li>把變數宣告放到 VO 裡，如果已經有同名的則忽略</li>
</ol>
<h3 id="最後再來個牛刀小試"><a href="#最後再來個牛刀小試" class="headerlink" title="最後再來個牛刀小試"></a>最後再來個牛刀小試</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token parameter">v</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// 10</span>
  <span class="token keyword">var</span> v <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// 3</span>
<span class="token punctuation">&#125;</span>
<span class="token function">test</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>思考方式：</p>
<ol>
<li>在執行 function 前，因為 test() 有傳參數進去，所以把 v 放到 VO 並設定為 10</li>
<li>接著開始執行 functon 內容程式碼，第二行印出 10</li>
<li>執行到第三行，把變數 v 的值換成 3</li>
<li>執行到第四行，印出 3</li>
</ol>
<hr>
<h2 id="TDZ：Temporal-Dend-Zone-暫時死區"><a href="#TDZ：Temporal-Dend-Zone-暫時死區" class="headerlink" title="TDZ：Temporal Dend Zone 暫時死區"></a>TDZ：Temporal Dend Zone 暫時死區</h2><p>接著再回到 let 和 const，其實以 let 和 const 宣告變數同樣會有 Hoisting 的情形，只是執行方式不太相同。</p>
<p>先以下列程式碼為例，和文章最一開始的 <code>var a</code> 不同，結果出現 <code>a is not defined</code> 的錯誤：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ReferenceError: a is not defined</span>
<span class="token keyword">let</span> a<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>這樣是不是代表 let 和 const 沒有變數提升呢？否則宣告經過提升後應該不會出現 Error 才對？</p>
<p>事實上，let 與 const 確實有 Hoisting，與 var 的差別在於提升之後，var 宣告的變數會被初始化為 undefined；而 let 與 const 的宣告則不會被初始化為 undefined，如果在「賦值之前」就存取它，會拋出錯誤訊息。</p>
<p>簡單來說，如果是在「提升之後」以及「賦值之前」這段期間存取變數就會拋出錯誤，而這段期間就稱作 TDZ（Temporal Dend Zone），中文為「暫行性死去」或「暫時死區」，是為了解釋 let 與 const 的 Hoisting 行為所提出的一個名詞。</p>
<p>再來看以下範例：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// ReferenceError: Cannot access 'a' before initialization</span>

<span class="token operator">===</span> 經過 Hoisting <span class="token operator">===</span>

<span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">let</span> a<span class="token punctuation">;</span>           <span class="token comment">// 宣告變數 a 經過提升之後</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 在賦值之前不能存取 a</span>
  a <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>同理可證，假如 let 沒有 Hoisting，結果應該會印出 10 才會，因為 log 那一行會存取全域變數的 <code>var a = 10</code>，但是卻印出 <code>錯誤：無法在初始化之前存取變數 a</code>。這是因為 let 的確有提升，只是沒有初始為 undefined。</p>
<p>總結上述例子：</p>
<ul>
<li>let 與 const 宣告確實也有 Hoisting 行為，但沒有像 var 宣告初始化為 undefined</li>
<li>如果在提升之後，賦值之前這段期間，存取該值會發生錯誤</li>
<li>這段期間稱為 Temporal Dend Zone（暫時死區）</li>
</ul>
<hr>
<h2 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h2><p>從理解什麼是 Hoisting（提升），瞭解我們為什麼需要提升，再延伸到運作原理。過程中建立的 Execution Contexts（執行環境）、與之對應的 Variable Object（變數物件）等等，其實涉及到有關 JavaScript 的知識範圍非常廣。</p>
<p>除了課堂影片提到的內容，自己也上網查了許多有關執行環境、執行堆疊的資料，雖然花費不少時間，卻也藉由瞭解 JavaScript 的編譯與執行過程，從建立到執行階段，加深對整個架構的理解。</p>
<p>參考資料：</p>
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLnRlY2hicmlkZ2UuY2MvMjAxOC8xMS8xMC9qYXZhc2NyaXB0LWhvaXN0aW5nLw==">我知道你懂 hoisting，可是你了解到多深？<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9uaWNvbGFrYWNoYS5jb2RlcmJyaWRnZS5pby8yMDIwLzA5LzI5L2phdmFzY3JpcHQtc2NvcGUtaG9pc3Rpbmcv">JavaScript: Scope &amp; Hoisting<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9hbmR5eW91LmdpdGh1Yi5pby8yMDE1LzA0LzE4L3doYXQtaXMtdGhlLWV4ZWN1dGlvbi1jb250ZXh0LWluLWphdmFzY3JpcHQv">理解 Javascript 執行環境<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9jb2RlcnR3LmNvbS8lRTUlODklOEQlRTclQUIlQUYlRTklOTYlOEIlRTclOTklQkMvMjY3MzQyLw==">javascript執行環境及作用域詳解<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9tZWRpdW0uY29tLyVFOSVBRCU5NCVFOSVBQyVCQyVFOCU5NyU4RiVFNSU5QyVBOCVFNyVBOCU4QiVFNSVCQyU4RiVFNyVCNCVCMCVFNyVBRiU4MCVFOCVBMyVBMS8lRTYlQjclQkElRTglQUIlODctamF2YXNjcmlwdC0lRTUlOUYlQjclRTglQTElOEMlRTclOTIlQjAlRTUlQTIlODMtMjk3NmIzZWFmMjQ4">秒懂！JavaSript 執行環境與堆疊<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9zaGF3bmxpbjAyMDEuZ2l0aHViLmlvL0phdmFTY3JpcHQvSmF2YVNjcmlwdC1WYXJpYWJsZS1PYmplY3QtYW5kLUFjdGl2YXRpb24tT2JqZWN0Lw==">JavaScript 深入淺出 Variable Object &amp; Activation Object<i class="fa fa-external-link-alt"></i></span></li>
</ul>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>Hoisting</tag>
      </tags>
  </entry>
  <entry>
    <title>[week 16] JavaScript 進階 - 物件導向 &amp; Prototype</title>
    <url>/javascript-oop-prototype/</url>
    <content><![CDATA[<blockquote>
<p>本篇為 <span class="exturl" data-url="aHR0cHM6Ly9saWRlbXkuY29tL3AvanMyMDEtamF2YXNjcmlwdA==">[JS201] 進階 JavaScript：那些你一直搞不懂的地方<i class="fa fa-external-link-alt"></i></span> 這門課程的學習筆記。如有錯誤歡迎指正！</p>
</blockquote>
<pre class="line-numbers language-none"><code class="language-none">學習目標：

 P1 你知道 Prototype 在 JavaScript 裡是什麼
 P1 你知道大部分情況下 this 的值是什麼
 P2 你知道物件導向的基本概念（類別、實體、繼承、封裝）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<span id="more"></span>
<hr>
<h2 id="什麼是物件導向？"><a href="#什麼是物件導向？" class="headerlink" title="什麼是物件導向？"></a>什麼是物件導向？</h2><p>其實我們在上一篇 <span class="exturl" data-url="aHR0cHM6Ly9oYWNrbWQuaW8vQEhlaWRpLUxpdS9ub3RlLWpzMjAxLWNsb3N1cmU=">Closure &amp; Scope Chain 筆記<i class="fa fa-external-link-alt"></i></span>中，就有稍微提到物件導向的相關觀念：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">createWallet</span><span class="token punctuation">(</span><span class="token parameter">initMoney</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">var</span> money <span class="token operator">=</span> initMoney<span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>
    <span class="token function-variable function">add</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">num</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      money <span class="token operator">+=</span> num<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token function-variable function">deduct</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">num</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">>=</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        money <span class="token operator">-=</span> <span class="token number">10</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
        money <span class="token operator">-=</span> num
      <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token function">getMoney</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">return</span> money<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">var</span> myWallet <span class="token operator">=</span> <span class="token function">createWallet</span><span class="token punctuation">(</span><span class="token number">99</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
myWallet<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
myWallet<span class="token punctuation">.</span><span class="token function">deduct</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>myWallet<span class="token punctuation">.</span><span class="token function">getMoney</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 90</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>在物件導向的世界，我們以呼叫 function 的方式進行操作，會比較像是在使用物件的形式。例如 myWallet.add() 這句的意思，就像是對 myWallet 這個物件做一些操作。</p>
<p>像這樣透過塑造物件，就可以不需一直 Call function，也會使程式更模組化一些，並且能夠隱藏內部資訊。</p>
<h3 id="建立物件實體（Object-instance）"><a href="#建立物件實體（Object-instance）" class="headerlink" title="建立物件實體（Object instance）"></a>建立物件實體（Object instance）</h3><p>根據 <span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvemgtVFcvZG9jcy9MZWFybi9KYXZhU2NyaXB0L09iamVjdHMvT2JqZWN0LW9yaWVudGVkX0pT">MDN<i class="fa fa-external-link-alt"></i></span> 說明，其實物件導向（Object-oriented）的基本概念就是：「採用物件（Objects）來模塑真實的實物世界」。</p>
<p>也就是說，我們可以在程式中透過 Objects（物件）來塑造其模型，而物件能夠存放其相關資料與程式碼，並且能使用方式（Method）來進行存取。</p>
<p>舉個簡單的例子，以一隻狗來說，可能會有許多基本資訊，像是毛色、身高、名字、性別等，透過這些抽象概念或特質，我們能夠建立一個「Dog」範本，作為代表狗的物件類別（class）。</p>
<p>接著我們可以從這個類別建立物件實體（Object instance），也就是該透過執行類別的「建構子函式（Constructor Function）」建立物件，而這段過程就稱為實體化（Instantiation）。</p>
<pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F; 透過類別中的建構子將物件實體化
class -&gt; Constructor -&gt; Object instance<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h3 id="Constructor-Function-amp-new"><a href="#Constructor-Function-amp-new" class="headerlink" title="Constructor Function &amp; new"></a>Constructor Function &amp; new</h3><p>前面我們提到，JavaScript 是使用類別（class）中的建構子函式（Constructor Function）來定義物件與功能。</p>
<p>但實際上，JavaScript 程式本身並沒有 class 可以使用，是到了 ES6 以後才出現。簡單來說，class 其實是 ES6 提供的語法糖，底層機制仍然是 JavaScript 的原型（prototype）。</p>
<p>接著同樣以建立 Dog 物件類別為例：</p>
<ul>
<li>class 後面要接名稱，表示要「建立 Dog 這個 class」，第一個字必須為大寫</li>
<li>接著透過 <code>new</code> 指令來實體化，建立出物件實體（Object instance）</li>
<li>class 中的 <code>constructor</code> 用來定義物件，也就是在建立時會呼叫 <code>constructor</code> 來執行內部的程式碼，目的是初始化 instance</li>
<li>透過 instance 傳入參數，再由 <code>constructor</code> 接收，可設定 Dog 的屬性 <code>name</code></li>
</ul>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token punctuation">&#123;</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token string">'dog A'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token string">'dog B'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Dog &#123;name: "dog A"&#125;</span>
<span class="token comment">// dog A</span>
<span class="token comment">// Dog &#123;name: "dog B"&#125;</span>
<span class="token comment">// dog B</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>constructor 也可用透過呼叫 function 來定義物件的方法<ul>
<li>在 constructor 中，有設定就會有取得。例如：setName 會被稱為 setter，getName 則是 getter</li>
<li>透過這種形式，就不需直接操作 class 內部的值</li>
</ul>
</li>
<li>this 在 class 的用途：誰呼叫它就指向呼叫它的<ul>
<li>例如 <code>a.sayHello();</code>：代表 a 透過 sayHello 呼叫 this，所以這個 this 是 a</li>
</ul>
</li>
</ul>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token punctuation">&#123;</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// setter</span>
    <span class="token function">setName</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token comment">// getter</span>
    <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'hello'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token string">'dog A'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>name<span class="token punctuation">)</span>    <span class="token comment">// dog A</span>
a<span class="token punctuation">.</span><span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// hello</span>

<span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token string">'dog B'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span>name<span class="token punctuation">)</span>    <span class="token comment">// dog B</span>
b<span class="token punctuation">.</span><span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// hello</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>此外，藉由 new 指令建立出 a 和 b 兩個物件，這兩個物件是完全獨立的物件，且都事先具備 Dog 這個 class 的所有屬性。</p>
<p>這其實和物件導向的三大特性有關，這部分我們後面會再提到：</p>
<ul>
<li>封裝（Encapsulation）</li>
<li>繼承（Inheritance）</li>
<li>多型（Polymorphism）</li>
</ul>
<h2 id="Prototype-Chain-原型鍊"><a href="#Prototype-Chain-原型鍊" class="headerlink" title="Prototype Chain 原型鍊"></a>Prototype Chain 原型鍊</h2><p>在建立物件實體（Object instance）之後，接著需透過原型（Prototype）機制來相互繼承功能。</p>
<p>前面有提到，class 其實是 ES6 提供的語法糖，底層機制仍然是 JavaScript 的原型（prototype）。因此，即使是在不使用 class 的情況下，我們一樣可以透過 function 和 prototype 來做到 class（類別）的功能。</p>
<h3 id="ES5-寫法"><a href="#ES5-寫法" class="headerlink" title="ES5 寫法"></a>ES5 寫法</h3><p>若將前面的範例改成 ES5 寫法，也就是替換掉 constructor 和 new，如下方程式碼：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Dog</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">var</span> myName <span class="token operator">=</span> name<span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>
    <span class="token function-variable function">getName</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">return</span> myName
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token function-variable function">sayHello</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'say hello!'</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token function">Dog</span><span class="token punctuation">(</span><span class="token string">'dog A'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// say hello!</span>
a<span class="token punctuation">.</span><span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token function">Dog</span><span class="token punctuation">(</span><span class="token string">'dog B'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// say hello!</span>
b<span class="token punctuation">.</span><span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>sayHello <span class="token operator">===</span> b<span class="token punctuation">.</span>sayHello<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>會發現 a.sayHello 和 b.sayHello 兩個同樣的 function 卻不是一樣的東西，代表程式在背後其實儲存了兩次。原因在於 class 中是不同的 instance，造成 this 指向不同。</p>
<p>但這其實會產生一個問題，如果今天有一萬隻狗，就會儲存一萬次 function，明明都是在處理同樣的事情，應該改成使用同一個 function 去跑不同的 instance 即可。</p>
<h3 id="以-prototype-連結-function"><a href="#以-prototype-連結-function" class="headerlink" title="以 .prototype 連結 function"></a>以 <code>.prototype</code> 連結 function</h3><p>在 JavaScript 機制中，有個 <code>.prototype</code> 語法能夠連結 function，如下方程式碼：</p>
<ul>
<li>使用 <code>Dog.prototype.sayHello</code> 將建構 function 新增一個 sayHello 的屬性</li>
<li>new 出來的物件皆可存取 sayHello 這個屬性</li>
</ul>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Dog</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 等於 constructor</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token class-name">Dog</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">getName</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token class-name">Dog</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">sayHello</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'say hello!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token string">'dog A'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token string">'dog B'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>sayHello <span class="token operator">===</span> b<span class="token punctuation">.</span>sayHello<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>兩個 function 就會是相同的，因為 a 和 b 都是 prototype 上面的 function。如此一來，我們就可以使用同一個 function 去跑不同的 instance，透過這個方式實作 JavaScript 的物件導向。</p>
<h3 id="proto-amp-prototype"><a href="#proto-amp-prototype" class="headerlink" title="__proto__ &amp; prototype"></a><code>__proto__</code> &amp; <code>prototype</code></h3><p>所以 prototype 是什麼？在 <span class="exturl" data-url="aHR0cHM6Ly93d3cuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi82LjAvI3NlYy10ZXJtcy1hbmQtZGVmaW5pdGlvbnMtcHJvdG90eXBl">ECMA5.1<i class="fa fa-external-link-alt"></i></span> 標準中，定義原型（prototype）是為其他對象提供共享屬性的對象：</p>
<blockquote>
<p>object that provides shared properties for other objects</p>
</blockquote>
<p>也就是說，原型（prototype）的本質，就是能夠分享自己的屬性給其他物件使用，而所有的物件都有原型（prototype）屬性。</p>
<p>接著舉一個簡單的物件為例：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span> name<span class="token operator">:</span> <span class="token string">"Dog"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>可以看到 obj 物件的原型物件，具有的 <code>__proto__</code>、<code>constructor</code> 等特性，這些都是由原型物件分享給 obj 物件使用的特性：</p>
<p><img src="https://i.imgur.com/jwWgnE9.png"></p>
<p>接著來說明 <code>prototype</code> 和 <code>__proto__</code> 之間的差異：</p>
<h4 id="prototype（顯性原型）"><a href="#prototype（顯性原型）" class="headerlink" title="prototype（顯性原型）"></a><code>prototype</code>（顯性原型）</h4><ul>
<li>用來實現基於原型的繼承與屬性的共享</li>
<li>例如：用來指定屬性或 function<h4 id="proto-（隱性原型）"><a href="#proto-（隱性原型）" class="headerlink" title="__proto__（隱性原型）"></a><code>__proto__</code>（隱性原型）</h4></li>
<li>構成原型鏈，同樣用於實現基於原型的繼承</li>
<li>例如：繼承資料</li>
<li>由 new 指令建立的物件，<code>__proto__</code> 屬性會指向該原型物件的 <code>prototype</code></li>
<li>也就是說，當我們想找 obj 物件中的 X 屬性時，如果在 obj 中找不到，就會繼續沿著 <code>__proto__</code> 往下一層查找</li>
</ul>
<p>參考資料：<span class="exturl" data-url="aHR0cHM6Ly93d3cuemhpaHUuY29tL3F1ZXN0aW9uLzM0MTgzNzQ2">js中__proto__和prototype的區別和關係？<i class="fa fa-external-link-alt"></i></span></p>
<p>接著繼續沿用剛才的 Dog 範例：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Dog</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 等於 constructor</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token class-name">Dog</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">getName</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token class-name">Dog</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">sayHello</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'say hello!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token string">'dog A'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token string">'dog B'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>__proto__<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span>__proto__<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Dog &#123; getName: [Function], sayHello: [Function] &#125;</span>
<span class="token comment">// Dog &#123; getName: [Function], sayHello: [Function] &#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>會發現 <code>a.__proto__</code> 和 <code>b.__proto__</code> 其實就代表 Dog.prototype，會得到相同結果：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>__proto__ <span class="token operator">===</span> <span class="token class-name">Dog</span><span class="token punctuation">.</span>prototype<span class="token punctuation">)</span>
<span class="token comment">// true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>也映證我們前面所說，class 底層其實還是 prototype（原型）這件事，只是寫法不同。</p>
<p>而當我們執行 <code>a.sayHello()</code> 的時候，程式會沿著原型鏈尋找 sayHello 屬性，參考過程如下：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">a<span class="token punctuation">.</span><span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token number">1.</span> a　有沒有 sayHello
<span class="token number">2.</span> a<span class="token punctuation">.</span>__proto__　有沒有 sayHello
<span class="token number">3.</span> a<span class="token punctuation">.</span>__proto__<span class="token punctuation">.</span>__proto__　有沒有 sayHello
<span class="token number">4.</span> a<span class="token punctuation">.</span>__proto__<span class="token punctuation">.</span>__proto__<span class="token punctuation">.</span>__proto__　有沒有 sayHello
<span class="token number">5.</span> 找到最後剩下 <span class="token keyword">null</span>，也就是最頂層

a<span class="token punctuation">.</span>__proto__ <span class="token operator">=</span> <span class="token class-name">Dog</span><span class="token punctuation">.</span>prototype
a<span class="token punctuation">.</span>__proto__<span class="token punctuation">.</span>__proto__ <span class="token operator">=</span> <span class="token class-name">Dog</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>__proto__ <span class="token operator">=</span> <span class="token class-name">Object</span><span class="token punctuation">.</span>prototype
a<span class="token punctuation">.</span>__proto__<span class="token punctuation">.</span>__proto__<span class="token punctuation">.</span>__proto__ <span class="token operator">=</span> <span class="token keyword">null</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>像這樣透過 <code>__proto__</code> 不斷串起來的鏈，就稱作原型鏈（Prototype Chain），其實概念類似於之前提過的 Scope Chain。透過這條原型鏈，就可以引用或繼承自己物件沒有的屬性。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// Prototype Chain</span>
a <span class="token operator">--</span><span class="token operator">></span> <span class="token class-name">Dog</span><span class="token punctuation">.</span>prototype <span class="token operator">--</span><span class="token operator">></span> <span class="token class-name">Object</span><span class="token punctuation">.</span>prototype <span class="token operator">--</span><span class="token operator">></span> <span class="token keyword">null</span>
<span class="token comment">// 等同於</span>
a <span class="token operator">-</span><span class="token operator">></span> a<span class="token punctuation">.</span>__proto__ <span class="token operator">--</span><span class="token operator">></span> a<span class="token punctuation">.</span>__proto__<span class="token punctuation">.</span>__proto__ <span class="token operator">--</span><span class="token operator">></span> a<span class="token punctuation">.</span>__proto__<span class="token punctuation">.</span>__proto__<span class="token punctuation">.</span>__proto__<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="hasOwnProperty-NaN"><a href="#hasOwnProperty-NaN" class="headerlink" title="hasOwnProperty()"></a>hasOwnProperty()</h3><ul>
<li>用來判斷某個物件是否含有指定的自身屬性</li>
<li>以 Dog 例子來說，可用 <code>a.hasOwnProperty(&#39;sayHello&#39;)</code> 來判斷 sayHello 是存在於 instance 還是該原型鏈中</li>
</ul>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>__proto__<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span><span class="token string">'sayHello'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// true</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span><span class="token string">'sayHello'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="instanceof"><a href="#instanceof" class="headerlink" title="instanceof"></a>instanceof</h3><ul>
<li>用來判斷 A 物件是否為 B 的實例，比較的是原型（prototype）：</li>
</ul>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a <span class="token keyword">instanceof</span> <span class="token class-name">Dog</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// true</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h4 id="比較：instanceof-vs-typeof"><a href="#比較：instanceof-vs-typeof" class="headerlink" title="比較：instanceof vs typeof"></a>比較：instanceof vs typeof</h4><ul>
<li>typeof：用來判斷參數是什麼型別，回傳值是 data type</li>
</ul>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token number">123</span><span class="token punctuation">)</span>  <span class="token comment">// number</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h2 id="new-扮演的角色"><a href="#new-扮演的角色" class="headerlink" title="new 扮演的角色"></a>new 扮演的角色</h2><p>在理解 new 在背後做了什麼是之前，先來看這個例子：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>
<span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>會發現 this 其實是非常大的值，裡面包含許多東西：</p>
<p><img src="https://i.imgur.com/kqTUu5D.png"></p>
<h3 id="call-：另一種呼叫-function-的方式"><a href="#call-：另一種呼叫-function-的方式" class="headerlink" title=".call()：另一種呼叫 function 的方式"></a><code>.call()</code>：另一種呼叫 function 的方式</h3><p>此外，function 還有一種呼叫方式叫做 <code>.call()</code>，如果我們 call 來呼叫 test，並在括號內帶入值，將會改變 function 結果：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>

<span class="token function">test</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">'123'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// [String: '123']</span>
<span class="token function">test</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// &#123;&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>也就是說，若使用 <code>.call()</code> 呼叫 function，會將傳入的東西設定為 this 的值。</p>
<p>接著我們可以透過「<code>.call()</code> 第一個參數代表 this 指向」這個概念，試著自己建立一個 new 的模型：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Dog</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token class-name">Dog</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">getName</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token class-name">Dog</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">sayHello</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'hello'</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// 使用 new 方法</span>
<span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token string">'dog a'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 透過 function 實作 new 方法</span>
<span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token function">newDog</span><span class="token punctuation">(</span><span class="token string">'dog b'</span><span class="token punctuation">)</span>

<span class="token keyword">function</span> <span class="token function">newDog</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>                 <span class="token comment">// 先建立一個空物件 obj</span>
  <span class="token function">Dog</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment">// 呼叫 constructor，this 會指向這個物件</span>
  obj<span class="token punctuation">.</span>__proto__ <span class="token operator">=</span> <span class="token class-name">Dog</span><span class="token punctuation">.</span>prototype<span class="token punctuation">;</span>  <span class="token comment">// 建立物件的原型鏈</span>
  <span class="token keyword">return</span> obj<span class="token punctuation">;</span>                   <span class="token comment">// 回傳完成的物件 obj</span>
<span class="token punctuation">&#125;</span>

a<span class="token punctuation">.</span><span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// hello dog a</span>
b<span class="token punctuation">.</span><span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// hello dog b</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>透過 function 實作 new 方法，上述的程式碼步驟如下：</p>
<ol>
<li>先建立一個空物件 obj</li>
<li>呼叫 constructor，然後把 Dog 利用 <code>.call()</code> 帶入空物件，並設定參數：<code>Dog.call(obj, name)</code>，第一個參數代表 this 指向 obj，第二個參數代表要帶入的值</li>
<li>接著設定方法：建立物件的原型鏈，針對 obj 的 <code>.__proto__</code> 等同於 Dog 的 <code>.prototype</code> 即可完成關聯</li>
<li>回傳完成的物件 obj</li>
</ol>
<hr>
<h2 id="物件導向的繼承：Inheritance"><a href="#物件導向的繼承：Inheritance" class="headerlink" title="物件導向的繼承：Inheritance"></a>物件導向的繼承：Inheritance</h2><p>當其他類別需要用到共同屬性時，不需再重新建立 class 的各種屬性，可以利用繼承的方法，來直接存取父層的屬性。</p>
<p>例如狗本身有名字有動作，有自己的屬性與方法。而黑狗也屬於一種狗，黑狗也有同樣的屬性與方法，只是會有些微差異，這種情況我們可以透過繼承，也就是讓黑狗 class 直接使用狗 class，就不需再另外建立。</p>
<p>如下方的範例：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token punctuation">&#123;</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">// 繼承 Dog class</span>
<span class="token keyword">class</span> <span class="token class-name">BlackDog</span> <span class="token keyword">extends</span> <span class="token class-name">Dog</span> <span class="token punctuation">&#123;</span>
  <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'test'</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">const</span> black <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BlackDog</span><span class="token punctuation">(</span><span class="token string">'hello'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
black<span class="token punctuation">.</span><span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// hello</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="修改子層-class-的-constructor"><a href="#修改子層-class-的-constructor" class="headerlink" title="修改子層 class 的 constructor"></a>修改子層 class 的 constructor</h3><p>如果想要在子層的 class 更改 constructor 屬性時，必須先呼叫 <code>super()</code>，並把父層 class constructor 需要的參數傳進去。否則就只會初始化子層的 constructor，不會有繼承的作用。</p>
<p>透過 <code>super()</code> 來呼叫父層 class 的 constructor，才能連同父層的 constructor 一併初始化，並接收初始化的值：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token punctuation">&#123;</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Hello, '</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">class</span> <span class="token class-name">BlackDog</span> <span class="token keyword">extends</span> <span class="token class-name">Dog</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 繼承</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// 繼承後在 constructor 一定要使用 super 接收資料</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 當 BlackDog 被建立時，就打招呼</span>
  <span class="token punctuation">&#125;</span>
  <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'test!'</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token string">'dog a'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
a<span class="token punctuation">.</span><span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Hello, dog a.</span>

<span class="token keyword">const</span> black <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BlackDog</span><span class="token punctuation">(</span><span class="token string">'I am black dog'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token comment">// Hello, I am black dog</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>透過子層繼承父層類別可延伸多種型態，也就是同樣的方法名稱會有多種行為，使用上也增加彈性，這其實就是物件導向的特性之一：多型（Polymorphism）。</p>
<hr>
<h2 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h2><p>在學習 JavsScript 之前，一直以為物件導向和 this 是能夠畫上等號的（三個的那種）。直到實際學到物件導向以後，才瞭解到物件導向中有許多觀念，其實和在之前學到的 Hoisting、Closure 有很大的關聯。此外，物件導向其實應用在許多現代的程式語言，以物件導向的方式進行開發。</p>
<p>物件導向程式的寫法，基本上可分為三部分：</p>
<ol>
<li>定義物件類別（class）。例如：<code>class Dog</code></li>
<li>定義物件類別中的屬性與方法。例如：可使用 <code>dog.name</code> 存取屬性，使用 <code>dog.sayHello()</code> 存取方法</li>
<li>定義物件之間的行為，也就是主程式</li>
</ol>
<p>之所以需要物件導向，最重要的目的就是把資料（屬性）與函式（方法）結合在一起，定義出物件模型，這麼做有幾個優點：</p>
<ul>
<li>便於重複使用程式碼</li>
<li>能夠隱藏程式內部資訊</li>
<li>透過模組化來簡化主程式邏輯</li>
</ul>
<p>而這些概念，其實也就是先前談到有關物件導向的三大特性，並且三者具有次序性，沒有封裝就不可能有繼承、沒有繼承就不可能有多型：</p>
<ul>
<li>封裝（Encapsulation）：<ul>
<li>藉由把程式包成類別，能夠隱藏物件內容</li>
<li>避免程式間互相干擾，也利於後續維護</li>
</ul>
</li>
<li>繼承（Inheritance）：<ul>
<li>子層能夠繼承使用父層的屬性和方法，並且加以微調</li>
<li>能夠重複使用程式碼</li>
</ul>
</li>
<li>多型（Polymorphism）：<ul>
<li>父層可透過子層衍伸成多種型態，接著子層可藉由覆寫父層的方法來達到多型</li>
<li>可增加程式架構的彈性與維護性</li>
</ul>
</li>
</ul>
<p>藉由瞭解什麼是物件導向，為什麼需要物件導向以後，對整體架構似乎又更加清楚一些。過程中也查了許多資料，在碰到新的名詞時總會感到慌張，像是 constructor（建構子）、prototype（原型）、instance（實例）等等，其實只要能夠先瞭解定義是什麼，就不難繼續理解整體架構。</p>
<p>最後，在找相關資料的時候，有在這篇<span class="exturl" data-url="aHR0cHM6Ly9pZ291aXN0LmdpdGh1Yi5pby9wb3N0LzIwMjAvMDcvb28tNS1wb2x5bW9ycGhpc20v">網誌<i class="fa fa-external-link-alt"></i></span>中，看到使用泡麵的例子來比喻物件導向，因為還蠻喜歡的也記錄在這裡：</p>
<ol>
<li>由泡麵工廠製作麵和醬包，並包裝在一起，我們可以直接買來享用</li>
<li>我們可以在泡麵中自己加料，或是不用泡的改用炒的</li>
<li>同樣都是泡麵，卻能夠實作出不同的口味</li>
</ol>
<p>參考資料：</p>
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmh1bGkudHcvMjAxNy8wOC8yNy90aGUtamF2YXNjcmlwdHMtcHJvdG90eXBlLWNoYWluLw==">該來理解 JavaScript 的原型鍊了<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9odWdoLXByb2dyYW0tbGVhcm5pbmctZGlhcnktanMubWVkaXVtLmNvbS8lRTUlODklOEQlRTclQUIlQUYlRTQlQjglQUQlRTklOUElOEUtanMlRTQlQkIlQTQlRTQlQkElQkElRTYlOTAlOUUlRTQlQjglOEQlRTYlODclODIlRTclOUElODQlRTUlOUMlQjAlRTYlOTYlQjktJUU3JTg5JUE5JUU0JUJCJUI2JUU1JUIwJThFJUU1JTkwJTkxLWNkZWEwZTMyNjZlZQ==">[week 16] JavaScript 進階 - 淺談物件導向 &amp; this<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9uaWNvbGFrYWNoYS5jb2RlcmJyaWRnZS5pby8yMDIwLzEwLzAxL29vcC1wcm90b3R5cGUtdGhpcy8=">JavaScript: Object-oriented JavaScript, Prototype Chain &amp; This<i class="fa fa-external-link-alt"></i></span></li>
</ul>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>OOP</tag>
      </tags>
  </entry>
  <entry>
    <title>[week 16] JavaScript 進階 - 作業練習</title>
    <url>/js201-hw/</url>
    <content><![CDATA[<ul>
<li>hw1：Event Loop</li>
<li>hw2：Event Loop + Scope</li>
<li>hw3：Hoisting</li>
<li>hw4：What is this?<span id="more"></span>

</li>
</ul>
<h2 id="hw1：Event-Loop"><a href="#hw1：Event-Loop" class="headerlink" title="hw1：Event Loop"></a>hw1：Event Loop</h2><p>在 JavaScript 裡面，一個很重要的概念就是 Event Loop，是 JavaScript 底層在執行程式碼時的運作方式。請你說明以下程式碼會輸出什麼，以及盡可能詳細地解釋原因。</p>
<pre class="line-numbers language-none"><code class="language-none">console.log(1)
setTimeout(() &#x3D;&gt; &#123;
  console.log(2)
&#125;, 0)
console.log(3)
setTimeout(() &#x3D;&gt; &#123;
  console.log(4)
&#125;, 0)
console.log(5)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="輸出結果"><a href="#輸出結果" class="headerlink" title="輸出結果"></a>輸出結果</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token number">1</span>
<span class="token number">3</span>
<span class="token number">5</span>
<span class="token number">2</span>
<span class="token number">4</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="執行流程"><a href="#執行流程" class="headerlink" title="執行流程"></a>執行流程</h3><ol>
<li>將 <code>console.log(1)</code> 放入 Call Stack 並直接執行，印出 1，執行結束後移除</li>
<li>將 <code>setTimeout(() =&gt; &#123; console.log(2) &#125;, 0)</code> 放入 Call Stack，透過 Web API，在瀏覽器設定計時器為 0，直到倒數結束，將 <code>() =&gt; &#123; console.log(2) &#125;</code> 放到 Callback Queue 等待執行，setTimeout 執行結束後從 Call Stack 移除</li>
<li>將 <code>console.log(3)</code> 放入 Call Stack 並直接執行，印出 3，執行結束後移除</li>
<li>將 <code>setTimeout(() =&gt; &#123; console.log(4) &#125;, 0)</code> 放入 Call Stack，透過 Web API，在瀏覽器設定計時器為 0，直到倒數結束，將 <code>() =&gt; &#123; console.log(4) &#125;</code> 放到 Callback Queue 等待執行，setTimeout 執行結束後從 Call Stack 移除</li>
<li>將 <code>console.log(5)</code> 放入 Call Stack 並直接執行，印出 5，執行結束後移除</li>
<li>當 Event Loop 偵測到 call stack 為空時，依序將 Callback Queue 的任務丟到 Call Stack 執行</li>
<li>執行 <code>() =&gt; &#123; console.log(2) &#125;</code>，再執行 <code>console.log(2)</code>，印出 2，執行結束後移除</li>
<li>接著執行 <code>() =&gt; &#123; console.log(4) &#125;</code>，再執行 <code>console.log(4)</code>，印出 4，執行結束後移除</li>
</ol>
<hr>
<h2 id="hw2：Event-Loop-Scope"><a href="#hw2：Event-Loop-Scope" class="headerlink" title="hw2：Event Loop + Scope"></a>hw2：Event Loop + Scope</h2><p>請說明以下程式碼會輸出什麼，以及盡可能詳細地解釋原因。</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'i: '</span> <span class="token operator">+</span> i<span class="token punctuation">)</span>
  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> i <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="輸出結果-1"><a href="#輸出結果-1" class="headerlink" title="輸出結果"></a>輸出結果</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js">i<span class="token operator">:</span> <span class="token number">0</span>
i<span class="token operator">:</span> <span class="token number">1</span>
i<span class="token operator">:</span> <span class="token number">2</span>
i<span class="token operator">:</span> <span class="token number">3</span>
i<span class="token operator">:</span> <span class="token number">4</span>
<span class="token number">5</span>
<span class="token number">5</span>
<span class="token number">5</span>
<span class="token number">5</span>
<span class="token number">5</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="執行流程-1"><a href="#執行流程-1" class="headerlink" title="執行流程"></a>執行流程</h3><ol>
<li>將 for 迴圈放入 Call Stack 並開始執行，宣告變數 i = 0，判斷 i 是否小於 5，是，進入第一圈迴圈</li>
<li>將 <code>console.log(&#39;i: &#39; + 0)</code> 放入 Call Stack 並直接執行，印出 i: 0</li>
<li>將 <code>setTimeout(() =&gt; &#123; console.log(0) &#125;, 0 * 1000)</code> 放入 Call Stack，透過 Web API，在瀏覽器設定計時器為 0 ms，直到倒數結束，將 <code>() =&gt; &#123; console.log(0) &#125;</code> 放到 Callback Queue 等待執行，setTimeout 執行結束後從 Call Stack 移除</li>
<li>第一圈迴圈結束，將 i + 1</li>
<li>i = 1，判斷 i 是否小於 5，是，進入第二圈迴圈</li>
<li>將 <code>console.log(&#39;i: &#39; + 1)</code> 放入 Call Stack 並直接執行，印出 i: 1</li>
<li>將 <code>setTimeout(() =&gt; &#123; console.log(i) &#125;, 1 * 1000)</code> 放入 Call Stack，透過 Web API，在瀏覽器設定計時器為 1000 ms ，直到倒數結束，將 <code>() =&gt; &#123; console.log(i) &#125;</code> 放到 Callback Queue 等待執行，setTimeout 執行結束後從 Call Stack 移除</li>
<li>第二圈迴圈結束，將 i + 1</li>
<li>i = 2，判斷 i 是否小於 5，是，進入第二圈迴圈</li>
<li>將 <code>console.log(&#39;i: &#39; + 2)</code> 放入 Call Stack 並直接執行，印出 i: 2</li>
<li>將 <code>setTimeout(() =&gt; &#123; console.log(i) &#125;, 2 * 1000)</code> 放入 Call Stack，透過 Web API，在瀏覽器設定計時器為 2000 ms ，直到倒數結束，將 <code>() =&gt; &#123; console.log(i) &#125;</code> 放到 Callback Queue 等待執行，setTimeout 執行結束後從 Call Stack 移除</li>
<li>第二圈迴圈結束，將 i + 1</li>
<li>i = 3，判斷 i 是否小於 5，是，進入第三圈迴圈</li>
<li>將 <code>console.log(&#39;i: &#39; + 3)</code> 放入 Call Stack 並直接執行，印出 i: 3</li>
<li>將 <code>setTimeout(() =&gt; &#123; console.log(i) &#125;, 3 * 1000)</code> 放入 Call Stack，透過 Web API，在瀏覽器設定計時器為 3000 ms ，直到倒數結束，將 <code>() =&gt; &#123; console.log(i) &#125;</code> 放到 Callback Queue 等待執行，setTimeout 執行結束後從 Call Stack 移除</li>
<li>第三圈迴圈結束，將 i + 1</li>
<li>i = 4，判斷 i 是否小於 5，是，進入第四圈迴圈</li>
<li>將 <code>console.log(&#39;i: &#39; + 4)</code> 放入 Call Stack 並直接執行，印出 i: 4</li>
<li>將 <code>setTimeout(() =&gt; &#123; console.log(i) &#125;, 4 * 1000)</code> 放入 Call Stack，透過 Web API，在瀏覽器設定計時器為 4000 ms ，直到倒數結束，將 <code>() =&gt; &#123; console.log(i) &#125;</code> 放到 Callback Queue 等待執行，setTimeout 執行結束後從 Call Stack 移除</li>
<li>第四圈迴圈結束，將 i + 1</li>
<li>i = 5，判斷 i 是否小於 5，否，跳出迴圈，執行結束後從 Call Stack 移除</li>
<li>當 Event Loop 偵測到 call stack 為空時，依序將 Callback Queue 的任務丟到 Call Stack 執行</li>
<li>執行第一個 <code>() =&gt; &#123; console.log(i) &#125;</code>，再執行 <code>console.log(i)</code>，在 function 的 EC 中找不到 i，往上一層 EC 找，找到 i = 5，印出 5，執行結束從 Call Stack 移除</li>
<li>執行第二個 <code>() =&gt; &#123; console.log(i) &#125;</code>，再執行 <code>console.log(i)</code>，在 function 的 EC 中找不到 i，往上一層 EC 找，找到 i = 5，印出 5，執行結束從 Call Stack 移除</li>
<li>執行第三個 <code>() =&gt; &#123; console.log(i) &#125;</code>，再執行 <code>console.log(i)</code>，在 function 的 EC 中找不到 i，往上一層 EC 找，找到 i = 5，印出 5，執行結束從 Call Stack 移除</li>
<li>執行第四個 <code>() =&gt; &#123; console.log(i) &#125;</code>，再執行 <code>console.log(i)</code>，在 function 的 EC 中找不到 i，往上一層 EC 找，找到 i = 5，印出 5，執行結束從 Call Stack 移除</li>
<li>執行第五個 <code>() =&gt; &#123; console.log(i) &#125;</code>，再執行 <code>console.log(i)</code>，在 function 的 EC 中找不到 i，往上一層 EC 找，找到 i = 5，印出 5，執行結束從 Call Stack 移除</li>
</ol>
<hr>
<h2 id="hw3：Hoisting"><a href="#hw3：Hoisting" class="headerlink" title="hw3：Hoisting"></a>hw3：Hoisting</h2><p>請說明以下程式碼會輸出什麼，以及盡可能詳細地解釋原因。</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">1</span>
<span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>    <span class="token comment">// undefined</span>
  <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">5</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>    <span class="token comment">// 5</span>
  a<span class="token operator">++</span>　
  <span class="token keyword">var</span> a
  <span class="token function">fn2</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>     <span class="token comment">// 6</span>
  <span class="token keyword">function</span> <span class="token function">fn2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>     <span class="token comment">// 20 </span>
    a <span class="token operator">=</span> <span class="token number">20</span>
    b <span class="token operator">=</span> <span class="token number">100</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>     <span class="token comment">// 1</span>
a <span class="token operator">=</span> <span class="token number">10</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>     <span class="token comment">// 10</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>     <span class="token comment">// 100</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="輸出結果-2"><a href="#輸出結果-2" class="headerlink" title="輸出結果"></a>輸出結果</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">undefined</span>
<span class="token number">5</span>
<span class="token number">6</span>
<span class="token number">20</span>
<span class="token number">1</span>
<span class="token number">10</span>
<span class="token number">100</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="執行流程-2"><a href="#執行流程-2" class="headerlink" title="執行流程"></a>執行流程</h3><ol>
<li>開始執行程式，建立 global EC 並初始化 VO</li>
</ol>
<pre class="line-numbers language-js" data-language="js"><code class="language-js">global <span class="token constant">EC</span>
  <span class="token constant">VO</span> <span class="token punctuation">&#123;</span>
    <span class="token function-variable function">fn</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">,</span>
    a<span class="token operator">:</span> <span class="token keyword">undefined</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ol start="2">
<li>執行第一行程式碼，宣告變數 a 並賦值為 1</li>
</ol>
<pre class="line-numbers language-js" data-language="js"><code class="language-js">global <span class="token constant">EC</span> <span class="token punctuation">&#123;</span>
  <span class="token constant">VO</span> <span class="token punctuation">&#123;</span>
    <span class="token function-variable function">fn</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">,</span>
    a<span class="token operator">:</span> <span class="token number">1</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ol start="3">
<li>呼叫 fn()，建立 fn EC 並初始化 AO，變數宣告會提升 <code>var = a</code></li>
</ol>
<pre class="line-numbers language-js" data-language="js"><code class="language-js">fn <span class="token constant">EC</span> <span class="token punctuation">&#123;</span>
  <span class="token constant">AO</span> <span class="token punctuation">&#123;</span>
    <span class="token function-variable function">fn2</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">,</span>
    a<span class="token operator">:</span> <span class="token keyword">undefined</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ol start="4">
<li>進入 function fn 並執行 console.log(a)，找到 fn AO 中 a = undefined，印出 undefined</li>
<li>執行 var a = 5，查看 fn EC 是否有 a，找到 a，將 a 賦值為 5</li>
</ol>
<pre class="line-numbers language-js" data-language="js"><code class="language-js">fn <span class="token constant">EC</span> <span class="token punctuation">&#123;</span>
  <span class="token constant">AO</span> <span class="token punctuation">&#123;</span>
    <span class="token function-variable function">fn2</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">,</span>
    a<span class="token operator">:</span> <span class="token number">5</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ol start="6">
<li>執行 console.log(a)，找到 fn AO 中 a = 5，印出 5</li>
<li>執行 a++，查看 fn EC 是否有 a，將 a 賦值為 6</li>
</ol>
<pre class="line-numbers language-js" data-language="js"><code class="language-js">fn <span class="token constant">EC</span> <span class="token punctuation">&#123;</span>
  <span class="token constant">AO</span> <span class="token punctuation">&#123;</span>
    <span class="token function-variable function">fn2</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">,</span>
    a<span class="token operator">:</span> <span class="token number">6</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ol start="8">
<li>已經宣告過變數 a，忽略 <code>var a</code> </li>
<li>呼叫 fn2()，建立 fn EC 並初始化 AO</li>
</ol>
<pre class="line-numbers language-js" data-language="js"><code class="language-js">fn2 <span class="token constant">EC</span> <span class="token punctuation">&#123;</span>
  <span class="token constant">AO</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// 沒有進行任何宣告</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ol start="10">
<li>進入 function fn2 並執行 console.log(a)，查看 fn2  AO 沒有找到 a；往上一層 fn AO 找，找到 a = 6，印出 6</li>
<li>執行 a = 20，在 fn2 AO 沒有找到 a；往上一層 fn AO 找，找到 a，並賦值 a 為 20</li>
</ol>
<pre class="line-numbers language-js" data-language="js"><code class="language-js">fn <span class="token constant">EC</span> <span class="token punctuation">&#123;</span>
  <span class="token constant">AO</span> <span class="token punctuation">&#123;</span>
    <span class="token function-variable function">fn2</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">,</span>
    a<span class="token operator">:</span> <span class="token number">20</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ol start="12">
<li>執行 b = 100，在 fn2 AO 沒有找到 b；往上一層 fn AO 找，沒有找到 b；再往上一層 global VO 找，沒有找到 b。因為是在非嚴格模式執行程式碼，會在 global VO 宣告變數 b 並賦值為 100</li>
</ol>
<pre class="line-numbers language-js" data-language="js"><code class="language-js">global <span class="token constant">EC</span>
  <span class="token constant">VO</span> <span class="token punctuation">&#123;</span>
    <span class="token function-variable function">fn</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">,</span>
    a<span class="token operator">:</span> <span class="token number">1</span>
    b<span class="token operator">:</span> <span class="token number">100</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ol start="13">
<li>function fn2 執行結束，移除 fn2 EC，回到 fn EC 執行其餘程式碼</li>
<li>執行 console.log(a)，找到 fn AO 中 a = 20，印出 20</li>
<li>function fn 執行結束，移除 fn EC，回到 global EC 執行其餘程式碼</li>
<li>執行 console.log(a)，找到 global VO 中 a = 1，印出 1</li>
<li>執行 a = 10，查看 global EC 是否有 a，找到 a，將 a 賦值為 10</li>
</ol>
<pre class="line-numbers language-js" data-language="js"><code class="language-js">global <span class="token constant">EC</span>
  <span class="token constant">VO</span> <span class="token punctuation">&#123;</span>
    <span class="token function-variable function">fn</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">,</span>
    a<span class="token operator">:</span> <span class="token number">10</span>
    b<span class="token operator">:</span> <span class="token number">100</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ol start="18">
<li>執行 console.log(a)，找到 global VO 中 a = 10，印出 10</li>
<li>執行 console.log(b)，找到 global VO 中 b = 100，印出 100</li>
</ol>
<hr>
<h2 id="hw4：What-is-this"><a href="#hw4：What-is-this" class="headerlink" title="hw4：What is this?"></a>hw4：What is this?</h2><p>請說明以下程式碼會輸出什麼，以及盡可能詳細地解釋原因。</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  value<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
  <span class="token function-variable function">hello</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  inner<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    value<span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>
    <span class="token function-variable function">hello</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
  
<span class="token keyword">const</span> obj2 <span class="token operator">=</span> obj<span class="token punctuation">.</span>inner
<span class="token keyword">const</span> hello <span class="token operator">=</span> obj<span class="token punctuation">.</span>inner<span class="token punctuation">.</span>hello
obj<span class="token punctuation">.</span>inner<span class="token punctuation">.</span><span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment">// 2</span>
obj2<span class="token punctuation">.</span><span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment">// 2</span>
<span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token comment">// undefined</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="輸出結果-3"><a href="#輸出結果-3" class="headerlink" title="輸出結果"></a>輸出結果</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token number">2</span>
<span class="token number">2</span>
<span class="token keyword">undefined</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<h3 id="執行流程-3"><a href="#執行流程-3" class="headerlink" title="執行流程"></a>執行流程</h3><ol>
<li><code>obj.inner.hello()</code></li>
</ol>
<p>可看成 <code>.call()</code> 的形式：<code>obj.inner.hello.call(obj.inner)</code>，this 會是傳入的參數，也就是 <code>obj.inner</code>，因此 <code>obj.inner.value</code> 得到的結果是 2。</p>
<ol start="2">
<li><code>obj2.hello()</code></li>
</ol>
<p>和上一題相同，可看成 <code>.call()</code> 的形式：<code>obj2.hello.call(obj2)</code>，this 就會是 <code>obj2</code>，又因 <code>obj2 = obj.inner</code>，因此結果同樣會是 2。</p>
<ol start="3">
<li><code>hello()</code></li>
</ol>
<p>在不需要的地方呼叫 this 時，this 會被指定為全域物件。依照執行環境不同，其值也會改變，例如在瀏覽器執行會是 Window，在 node.js 執行則是會是 Global。<br>若是在<code>&#39;use strict&#39;;</code>（嚴格模式）下執行，this 的值會是 undefined。</p>
<h2 id="這週學了一大堆以前搞不懂的東西，你有變得更懂了嗎？請寫下你的心得。"><a href="#這週學了一大堆以前搞不懂的東西，你有變得更懂了嗎？請寫下你的心得。" class="headerlink" title="這週學了一大堆以前搞不懂的東西，你有變得更懂了嗎？請寫下你的心得。"></a>這週學了一大堆以前搞不懂的東西，你有變得更懂了嗎？請寫下你的心得。</h2><h3 id="這週的學習筆記"><a href="#這週的學習筆記" class="headerlink" title="這週的學習筆記"></a>這週的學習筆記</h3><ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9oYWNrbWQuaW8vQEhlaWRpLUxpdS9ub3RlLWpzMjAxLWRhdGEtdHlwZQ==">[week 16] JavaScript 進階 - 關於變數與資料型態<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9oYWNrbWQuaW8vQEhlaWRpLUxpdS9ub3RlLWpzMjAxLWhvaXN0aW5n">[week 16] JavaScript 進階 - 初探 Hoisting &amp; Execution Context<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9oYWNrbWQuaW8vQEhlaWRpLUxpdS9ub3RlLWphdmFzY3JpcHQtY2FsbGJhY2s=">[week 16] 淺談 JavaScript：同步與非同步 &amp; Callback Function &amp; Event Loop<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9oYWNrbWQuaW8vQEhlaWRpLUxpdS9ub3RlLWpzMjAxLWNsb3N1cmU=">[week 16] JavaScript 進階 - 什麼是閉包？探討 Closure &amp; Scope Chain<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9oYWNrbWQuaW8vQEhlaWRpLUxpdS9ub3RlLWpzMjAxLW9vcC1wcm90b3R5cGU=">[week 16] JavaScript 進階 - 物件導向 &amp; Prototype<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9oYWNrbWQuaW8vQEhlaWRpLUxpdS9ub3RlLWpzMjAxLXRoaXM=">[week 16] JavaScript 進階 - What is this？<i class="fa fa-external-link-alt"></i></span></li>
</ul>
<h3 id="學習心得"><a href="#學習心得" class="headerlink" title="學習心得"></a>學習心得</h3><p>這一週的知識量其實蠻大的，從複習 JavaScript 的變數與資料型態，等號賦值與記憶體位置等等，在第二週的課程也有提到相關概念，到了第十六週則是要去瞭解程式背後是如何運作的。</p>
<h4 id="Hoisting-amp-Execution-Contexts-amp-Variable-Object"><a href="#Hoisting-amp-Execution-Contexts-amp-Variable-Object" class="headerlink" title="Hoisting &amp; Execution Contexts &amp; Variable Object"></a>Hoisting &amp; Execution Contexts &amp; Variable Object</h4><p>從理解什麼是 Hoisting（提升），瞭解我們為什麼需要提升，再延伸到運作原理。過程中建立的 Execution Contexts（執行環境）、與之對應的 Variable Object（變數物件）等等，其實涉及到有關 JavaScript 的範圍非常廣。</p>
<p>除了課堂影片提到的內容，自己也上網查了許多有關執行環境、執行堆疊的資料，雖然花費不少時間，卻也藉由瞭解 JavaScript 的編譯與執行過程，從建立到執行階段，加深對整個架構的理解。</p>
<h4 id="Event-Loop"><a href="#Event-Loop" class="headerlink" title="Event Loop"></a>Event Loop</h4><p>在閱讀完 <span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmh1bGkudHcvMjAxOS8xMC8wNC9qYXZhc2NyaXB0LWFzeW5jLXN5bmMtYW5kLWNhbGxiYWNrLw==">JavaScript 中的同步與非同步（上）：先成為 callback 大師吧！<i class="fa fa-external-link-alt"></i></span> 這篇文章，原本對 callback 概念薄弱的自己，對同步與非同步又有了新的一層認識。</p>
<p>尤其是才剛接著學完有關 Hoisting 的運作原理，在瞭解什麼是執行環境以後，再回來看 Event Loop 似乎也更能夠理解當中的執行流程。</p>
<p>也想到再次看到 Node.js 是 JavaScript 的 runtime（執行環境）這句話時，會想到 Execution Context 的中文也被翻成執行環境，但其實兩者指的對象不同。前者指的是「執行時系統」（run-time system）；後者指的是 JavaScript 在執行時會建立的環境，又可分為全域與函式執行環境。翻成中文的壞處就是容易撞名混淆，還是讓自己盡量去理解原文的意思。</p>
<h4 id="Closure-amp-Scope"><a href="#Closure-amp-Scope" class="headerlink" title="Closure &amp; Scope"></a>Closure &amp; Scope</h4><p>在學到 Closure（閉包）時，發現其實花了很多時間在瞭解有關 Scope（作用域）的概念。也是在這一單元瞭解到，原來之前在課程中學到的非同步操作，當中的 callback 其實就和閉包有關，有關 callback 的觀念真的非常重要，也難怪這些觀念會不斷在課程中被提到。</p>
<p>此外也瞭解到，閉包在框架中很常會使用到，透過閉包的方式，就能夠避免汙染全域變數或是記憶體洩漏等問題。</p>
<p>一開始之所以沒辦法很快理解，或許就是沒有把這些觀念融會貫通，都是一個環節接著另一個環節，就和 Scope Chain 一樣，會需要往上一層去找出需要的拼圖。</p>
<h4 id="物件導向-amp-prototype"><a href="#物件導向-amp-prototype" class="headerlink" title="物件導向 &amp; prototype"></a>物件導向 &amp; prototype</h4><p>其實在學習 JavsScript 之前，一直以為物件導向和 this 是能夠畫上等號的（三個的那種）。直到實際學到物件導向以後，才瞭解到物件導向中有許多觀念，其實和在之前學到的 Hoisting、Closure 有很大的關聯。此外，物件導向其實應用在許多現代的程式語言，以物件導向的方式進行開發。</p>
<p>物件導向程式的寫法，基本上可分為三部分：</p>
<ol>
<li>定義物件類別（class）。例如：<code>class Dog</code></li>
<li>定義物件類別中的屬性與方法。例如：可使用 <code>dog.name</code> 存取屬性，使用 <code>dog.sayHello()</code> 存取方法</li>
<li>定義物件之間的行為，也就是主程式</li>
</ol>
<p>之所以需要物件導向，最重要的目的就是把資料（屬性）與函式（方法）結合在一起，定義出物件模型，這麼做有幾個優點：</p>
<ul>
<li>便於重複使用程式碼</li>
<li>能夠隱藏程式內部資訊</li>
<li>透過模組化來簡化主程式邏輯</li>
</ul>
<p>而這些概念，其實也就是先前談到有關物件導向的三大特性，並且三者具有次序性，沒有封裝就不可能有繼承、沒有繼承就不可能有多型：</p>
<ul>
<li>封裝（Encapsulation）：<ul>
<li>藉由把程式包成類別，能夠隱藏物件內容</li>
<li>避免程式間互相干擾，也利於後續維護</li>
</ul>
</li>
<li>繼承（Inheritance）：<ul>
<li>子層能夠繼承使用父層的屬性和方法，並且加以微調</li>
<li>能夠重複使用程式碼</li>
</ul>
</li>
<li>多型（Polymorphism）：<ul>
<li>父層可透過子層衍伸成多種型態，接著子層可藉由覆寫父層的方法來達到多型</li>
<li>可增加程式架構的彈性與維護性</li>
</ul>
</li>
</ul>
<p>藉由瞭解什麼是物件導向，為什麼需要物件導向以後，對整體架構似乎又更加清楚一些。過程中也查了許多資料，在碰到新的名詞時總會感到慌張，像是 constructor（建構子）、prototype（原型）、instance（實例）等等，其實只要能夠先瞭解定義是什麼，就不難繼續理解整體架構。</p>
<p>最後，在找相關資料的時候，有在這篇<span class="exturl" data-url="aHR0cHM6Ly9pZ291aXN0LmdpdGh1Yi5pby9wb3N0LzIwMjAvMDcvb28tNS1wb2x5bW9ycGhpc20v">網誌<i class="fa fa-external-link-alt"></i></span>中，看到使用泡麵的例子來比喻物件導向，因為還蠻喜歡的也記錄在這裡：</p>
<ol>
<li>由泡麵工廠製作麵和醬包，並包裝在一起，我們可以直接買來享用</li>
<li>我們可以在泡麵中自己加料，或是不用泡的改用炒的</li>
<li>同樣都是泡麵，卻能夠實作出不同的口味</li>
</ol>
<h4 id="What-is-this？"><a href="#What-is-this？" class="headerlink" title="What is this？"></a>What is this？</h4><p>瞭解到物件導向的相關概念後，接著要理解 this 是什麼就沒那麼困難了。或許是因為在實際學 JacaScript 以前，就預設 this 是很難是高手在用的東西，透過慢慢理解物件導向與 this 的關聯，以及如何判斷 this 的值，似乎也感覺到自己的進化，對於未知的恐懼總是需要克服的。</p>
<p>關於 this 的重點，就是記得 this 的值和程式碼在哪無關，而是和怎麼呼叫有關係。</p>
<p>總結前面提到的觀念，其實 this 大致可分成四種綁定方式：</p>
<ul>
<li>默認綁定</li>
</ul>
<p>在和物件導向無關的情況下，this 會被指定為全域物件。又依照執行環境不同，其值會是 global 或 window，而在嚴格模式下會是 undefined：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// Window </span>
<span class="token punctuation">&#125;</span>
<span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>隱式綁定</li>
</ul>
<p>若在 function 中， this 有被某物件指定為屬性並呼叫，this 就是呼叫 function 的物件。以下方範例來說 this 就是 obj：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  a<span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">,</span>
  test<span class="token operator">:</span> func
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

obj<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 4</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>顯示綁定</li>
</ul>
<p>若是透過 <code>.call()</code>、<code>.apply()</code> 或 <code>.bind()</code> 方式指定 this，this 就會是傳入的參數：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  a<span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span>
  <span class="token function-variable function">test</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

obj<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>
obj<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>

<span class="token comment">// 第一種寫法：直接呼叫 function</span>
obj<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 第二種寫法：先宣告，再呼叫</span>
<span class="token keyword">const</span> bindTest <span class="token operator">=</span> obj<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">bindTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  

<span class="token comment">// 均印出: &#123; a: 10, test: [Function: test] &#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>new 綁定</li>
</ul>
<p>透過建構函式 new 出一個 instance，this 就會是 instance 物件本身：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token punctuation">&#123;</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">// Dog &#123;name: "dog A"&#125;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// dog A</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token string">'dog A'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>例外：箭頭函式中的 this 是看程式碼定義在哪，和怎麼呼叫沒關係。</li>
</ul>
<h4 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h4><p>終於學到傳說中的物件導向，以及面對 JavaScript 中的大魔王 this。還記得在開始程式導師計畫之前，有在 Udemy 買過 JavaScript: Understanding the Weird Parts（中譯：JavaScript 全攻略：克服 JS 的奇怪部分）這堂課，但其實那時候也沒看多少，現在想想當初連基礎都還沒打穩，難怪會不知道自己在聽什麼XD。上網查過資料會發現蠻多類似的標題，不外乎是「你所不知道的 JS」、「其實 JS 跟你想的不一樣」等等，所以 JavaScript 到底是怪在哪？！在學完 JavaScript 基礎之後，還只是理解這個程式語言的皮毛而已。</p>
<p>把這一週的筆記整理完，寫作業的時候也感覺踏實多了，總算是釐清  Event Loop、Hoisting、Closure、物件導向和 this 等相關概念。或許是因為看到新名詞時總會感到害怕，會忍不住去查定義，查為什麼要這樣用，不這樣用又會有什麼影響等等，好像要先完全掌握這些名詞的意義以後，才能在繼續再下一步前進。</p>
<p>但實際上，在嘗試理解的過程中，有很重要的一點，就是「實作」。與其查了一堆定義和文字一翻兩瞪眼，倒不如跟著課程範例操作，實際在程式跑過一遍，知道會有怎樣的結果以後，才能理解文字的意義，然後再去試著自己變化程式碼，看看結果有沒有和自己想的一樣，到最後就差不多能夠自己寫出簡單的範例來了。</p>
<p>硬是要把提升、閉包、物件導向或是一些方法定義背起來，其實也記不久，看過就忘了，想想這其實也是自己的壞習慣，在還沒理解之前會想著乾脆先記起來，但隨著要學習的東西越深越廣，再用這種方法實在不是長久之計，直接來個範例吧！是最近有關學習的體悟，之後也要謹記這件事情。</p>
<p>總之，終於把 JavaScript 進階的相關觀念都 Run 過一遍，大致瞭解背後是如何運作，也把過去一些錯誤的觀念改正，或是終於瞭解為什麼以前想賦值給某個變數時，沒有辦法改動值等等。不過理解觀念是一回事，重要的還是如何實際應用，之後實作時也要來試著運用物件導向的概念去寫程式。</p>
<p>再來要繼續往下一週邁進了，繼續努力！</p>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>【中場心得】半年過去了，我仍在學習程式的路上（下篇）</title>
    <url>/lidemy-learning-2/</url>
    <content><![CDATA[<p><img src="https://i.imgur.com/oEOkZDK.jpg"><br>（<span>Photo by <span class="exturl" data-url="aHR0cHM6Ly91bnNwbGFzaC5jb20vQGpsdWVia2U/dXRtX3NvdXJjZT11bnNwbGFzaCZhbXA7dXRtX21lZGl1bT1yZWZlcnJhbCZhbXA7dXRtX2NvbnRlbnQ9Y3JlZGl0Q29weVRleHQ=">Justin Luebke<i class="fa fa-external-link-alt"></i></span> on <span class="exturl" data-url="aHR0cHM6Ly91bnNwbGFzaC5jb20vcy9waG90b3Mvcm9hZD91dG1fc291cmNlPXVuc3BsYXNoJmFtcDt1dG1fbWVkaXVtPXJlZmVycmFsJmFtcDt1dG1fY29udGVudD1jcmVkaXRDb3B5VGV4dA==">Unsplash<i class="fa fa-external-link-alt"></i></span></span>）</p>
<span id="more"></span>
<blockquote>
<p>“Do not, for one repulse, give up the purpose that you resolved to effect.” — William Shakespeare.</p>
</blockquote>
<p><span class="exturl" data-url="aHR0cHM6Ly9oZWlkaS1jb2RpbmcubWVkaXVtLmNvbS8lRTQlQjglQUQlRTUlQTAlQjQlRTUlQkYlODMlRTUlQkUlOTctJUU1JThEJThBJUU1JUI5JUI0JUU5JTgxJThFJUU1JThFJUJCJUU0JUJBJTg2LSVFNiU4OCU5MSVFNCVCQiU4RCVFNSU5QyVBOCVFNSVBRCVCOCVFNyVCRiU5MiVFNyVBOCU4QiVFNSVCQyU4RiVFNyU5QSU4NCVFOCVCNyVBRiVFNCVCOCU4QS0lRTQlQjglOEIlRTclQUYlODctN2ZjODE3MjQ1ZTY=">Medium 連結<i class="fa fa-external-link-alt"></i></span></p>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>幾天前分享的<span class="exturl" data-url="aHR0cHM6Ly9oYWNrbWQuaW8vQEhlaWRpLUxpdS9hYm91dC1sZWFyaW5nLXBhcnQx">上篇心得<i class="fa fa-external-link-alt"></i></span>有稍微提到，前半段會偏向描寫過去的個人經驗，是有關於在開始學習程式之前的自己。</p>
<p>接下來這篇文章，則是要來談談自己在學習過程中內心的轉變，是什麼因素帶來這樣的影響；以及在參加<span class="exturl" data-url="aHR0cHM6Ly9ib290Y2FtcC5saWRlbXkuY29tLw==">第四期程式導師計畫<i class="fa fa-external-link-alt"></i></span>以前，曾經透過哪些管道自學程式語言；還有在學習過程中，遇到了哪些困難與挫折，而自己又是如何調整心態去面對的。</p>
<p>文章大綱如下，共分為上下兩篇，本篇為後半部分：</p>
<ul>
<li>萬事必有起因</li>
<li>關於那些沒能選擇的過去</li>
<li>如夢似幻的那一年</li>
<li>值得不值得</li>
<li>失而復得的熱情</li>
<li>恐懼的背後什麼都沒有</li>
<li>找到適合自己的學習方式</li>
<li>慢慢變成理想中的樣子</li>
</ul>
<p>那麼，以下是關於開始學習程式之後的一些心路歷程。</p>
<hr>
<h2 id="失而復得的熱情"><a href="#失而復得的熱情" class="headerlink" title="失而復得的熱情"></a>失而復得的熱情</h2><p>在上篇心得中，曾談到自己在求學期間開始學習日文這件事。即使這門語言不是自己的主科，只不過是一門選修課，卻還是習慣每天接觸它，變成像吃飯一樣的日常，意識到這件事情的我，人生也因此產生了一些變化。</p>
<p>或許自己也不是那麼一無是處，還是能夠對某件事情產生熱情。好比說，因為有了喜歡的事物，透過這層媒介，我開始看起了從沒想過會接觸的舞台劇，會去聽喜歡的聲優所主持的廣播節目，刷日文推特追蹤最新消息也成了每日習慣，甚至還會利用空閒時間去做一些日文翻譯。</p>
<p>其實這些是過去的自己從沒想過會做的事情，以前頂多當作興趣，偶爾會看看動畫和日劇，依賴於中文字幕；但到了後來，卻變成能夠主動去吸收知識，遇到不懂的單字就去查，記起來就能變成自己的，不知不覺間，即使沒有字幕也能大概理解意思，只因為自己喜歡日文。</p>
<p>因為喜歡，就會願意花時間去學習，而那些曾付出的時間並不會欺騙自己；因為喜歡，就不會先去想結果會是如何，而是選擇先做再說；因為喜歡，所以能夠不被外在因素影響，只專注在自己喜歡的事物上。</p>
<p>像這樣透過一點一滴的累積，我能夠實際感受到，自己懂的東西也越來越多，只要願意付出時間學習，是能夠讓自己慢慢變得更強大的。在不知不覺之中，我體會到什麼叫做「學習正回饋」，這段過程對我來說非常重要。</p>
<p>簡單來說，就是透過喜歡這份動力，來持續學習這件事：</p>
<pre class="line-numbers language-none"><code class="language-none">喜歡某件事 → 產生學習動力 → 全力學習 → 得到正向回饋 → 持續循環<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>說了這麼多，但怎麼都在講學日文？那學程式呢？</p>
<p>很推薦 Huli 寫的這篇：<span class="exturl" data-url="aHR0cHM6Ly9tZWRpdW0uY29tL2h1bGlzLWJsb2cvcHJvY3Jhc3RpbmF0aW9uLWJhMTI3NTRhZGE0OQ==">致跟我一樣的拖延症患者：動力是需要刻意創造的<i class="fa fa-external-link-alt"></i></span>。覺得當中有句話說得非常好：</p>
<h3 id="「動力是消耗品，需要補充、需要加值」"><a href="#「動力是消耗品，需要補充、需要加值」" class="headerlink" title="「動力是消耗品，需要補充、需要加值」"></a>「動力是消耗品，需要補充、需要加值」</h3><p>自己在閱讀過程也不斷被戳中。總會在心裡想著今年一定要完成XXX事情，買了課程想學也好、讀完幾本小說也好、要瘦下幾公斤也好，卻每隔一段時間後才驚覺，那份熱情只在開頭燃燒幾天就消退了。明日復明日，明日何其多。</p>
<p>沒辦法補充學習動力的自己，也就因此逐漸脫離正軌，變得想逃避學習這件事；沒辦法從學習中獲得成就感的自己，也因此更恐懼學習新事物，到後來甚至變成一種習慣，從此陷入無窮迴圈。</p>
<p>正因為有學日文這個例子，讓我相信，動力是能夠被創造的，在學習任何事情時，或許也同樣能夠遵循這個道理。回想在過去學習的路上，曾幾何時也遺忘了這件事。或許是害怕無法達成理想中的自己，而被數不盡的藉口以及拖延症給束縛住；又或許是因為太過在意身旁的人們，隨之萌生的不甘心與懊悔，反而掩蓋住學習過程中獲得的快樂。</p>
<blockquote>
<p>如果我不知道自己喜不喜歡，那又該怎麼辦呢？</p>
</blockquote>
<p>這個問題，就好像是聽到有人問說：「你喜歡吃某某食物嗎？」如果我剛好沒吃過，就會理所當然回答：「這我不知道欸！可能要吃吃看才會知道？」</p>
<p>要嘗試接觸新事物也是同樣道理，與其猶豫再三，思考沒有解答的問題，不如直接嘗試看看吧！對於不知道自己是否會「變得喜歡」的事情，就算把問題拋給旁人，即使對方會通靈也沒有辦法肯定你會不會真的喜歡。</p>
<p>如果在實際嘗試之後，發現結果好像和之前想像中的不太一樣，那也沒有關係，因為這還只是在摸索階段，還不需付出太大的成本，只是藉此更加瞭解了自己而已，畢竟自我探索的過程是一輩子的事：</p>
<pre class="line-numbers language-none"><code class="language-none">1. 不知道會不會喜歡 → 直接嘗試看看 → 產生學習動力 → 得到正向回饋 → 持續循環
2. 不知道會不會喜歡 → 直接嘗試看看 → 和想像中的不太一樣 → 尋找下一個可能<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>怎麼說著說著，好像變得有點心靈雞湯的感覺XD 可能是因為剛好前幾天才跟友人聊到類似的話題，覺得深有所感，彷彿看到半年前的自己一樣，即使現在的自己也還同樣身處在摸索階段，在對方的眼中，自己就好像已經找到未來方向似的確定。</p>
<p>而面對朋友拋出的這些問題：「我不知道自己會喜歡什麼、又適合什麼工作…」，對於感情問題，我一率建議直接分…咳、是直接嘗試看看再說，既然不確定答案為何，反之也代表充滿無限的可能性。</p>
<p>再回到為什麼我會開始學習程式這個問題。在思考未來方向的某一天，我想到自己在幾年前，曾在 <span class="exturl" data-url="aHR0cHM6Ly9oYWhvdy5pbi8=">Hahow<i class="fa fa-external-link-alt"></i></span> 買過有關動畫互動設計的課程，回想起當初因為想要記錄在日本的生活，而想要打造屬於自己的網頁的故事。</p>
<p>然後就在不知不覺中，學出一點心得（雖然課程還沒有看完），因為覺得有些課程內容，對於初學的自己來說不是很好理解，就也開始尋找其他網路上的學習資源，邊學邊看許多有關這個領域的文章，像是瞭解前端與後端的差別、和自己一樣<span class="exturl" data-url="aHR0cHM6Ly9tZWRpdW0uY29tL2h1bGlzLWJsb2cvZnJvbnRlbmQtZW5naW5lZXItZ3VpZGUtMjk3ODIxNTEyZjRl">零基礎的小明系列<i class="fa fa-external-link-alt"></i></span>、和一些給非本科系生想要轉職的建議與心得，也曾去聽過資策會的課程說明會等等。</p>
<p>後來，因為查到一些評論推薦說六角的課程適合初學者入門，就選擇在<span class="exturl" data-url="aHR0cHM6Ly93d3cuaGV4c2Nob29sLmNvbS8=">六角學院<i class="fa fa-external-link-alt"></i></span>繼續學習網頁前端基礎。發現透過不同的教學方式，不同的切入角度，能夠讓自己對程式語言有新的一層認識。</p>
<p>然後經過幾個禮拜，不斷循環練習切版、讓助教改作業、檢討的過程。在上完 HTML &amp; CSS 課程之後，再來應該繼續學習 jQuery 還是 RWD 呢？這段學習過程的確讓我獲得了成就感，但內心似乎又覺得不太踏實，究竟是缺少了什麼？我應該再學些什麼，才能夠讓自己變得更強，直到獲得足以踏入這個領域的入場門票呢？</p>
<p>在思考這些問題的當下，無意間我發現了有關<span class="exturl" data-url="aHR0cHM6Ly9odWxpdHcubWVkaXVtLmNvbS9saWRlbXktbWVudG9yLXByb2dyYW0tNHRoLTM5ZjU4YTAwMDY3Yw==">程式導師實驗計劃<i class="fa fa-external-link-alt"></i></span>的宣傳文章，而且還剛好在報名期間。看過課綱以後，不知為何，我很確信這就是我想尋找的。透過為期六個月的計畫，從程式基礎打起，瞭解前後端語言的差別，接著透過實作來熟悉開發流程等等。</p>
<p>看到那些充實的課程內容，竟然讓自己再次燃起學習熱情，我才明白，原來自己還是渴望學習的。而且和過去的被動學習不一樣了，這次是自己來選擇想要的東西，我想要改變自己。</p>
<h2 id="恐懼的背後什麼都沒有"><a href="#恐懼的背後什麼都沒有" class="headerlink" title="恐懼的背後什麼都沒有"></a>恐懼的背後什麼都沒有</h2><p>其實回想起這一路走來，總是對自己很沒自信，甚至到了會自我懷疑的程度。就好比膝跳反射，一旦要接觸新事物時，第一個反應一定會是「我不行、我辦不到」，悲觀地認為自己沒有那個能耐去勝任。</p>
<p>即使是直到三月左右，或是真正開始自學程式以後，這個現象依然如影隨形，我真的學得好嗎？我會不會太天真了？</p>
<blockquote>
<p>好害怕失敗，害怕新的開始，怕自己學不好，怕即使學完也找不到工作，怕就算順利找到工作結果卻不適合自己，怕……（以下略）。</p>
</blockquote>
<p>阿到底是在怕什麼？怕就能解決問題嗎？靜下來仔細想想，其實害怕並無助於任何事，只會讓自己駐足不前。這些道理我都明白，卻還是會忍不住去擔心害怕。</p>
<h3 id="人之所以會感到害怕，通常來自於對事物的不瞭解、不熟悉，也就是對於未知的恐懼。"><a href="#人之所以會感到害怕，通常來自於對事物的不瞭解、不熟悉，也就是對於未知的恐懼。" class="headerlink" title="人之所以會感到害怕，通常來自於對事物的不瞭解、不熟悉，也就是對於未知的恐懼。"></a>人之所以會感到害怕，通常來自於對事物的不瞭解、不熟悉，也就是對於未知的恐懼。</h3><p>倒不如說，「害怕」這份情緒其實會一直伴隨自己，或許是害怕失敗，又或許是害怕被比較，害怕自己被貼上「劣等」的標籤。</p>
<p>更何況，未來是不可預期的，不同階段或身分其實也存在不同的問題要去煩惱。就好比學生時期，煩惱不要被當和煩惱怎麼拚到書卷獎是完全不同的事；又好比月薪 3 萬和 25 萬要煩惱的事情也不會相同。</p>
<p>這讓我想到，每週在 Limedy 的學習系統上也有談到類似的話題：</p>
<blockquote>
<p>假如我今天想學某樣東西，卻花了兩三天的時間來思考自己究竟學不學得會。<br>假如學得會，就等於浪費掉這兩三天，因為如果不猶豫的話就可以再多兩三天來學習了；假如學不會，那這兩三天也是浪費掉的，因為只光憑想像而不動手，根本不會知道自己是真的學不會，還是只是「我認為自己學不會」。</p>
</blockquote>
<p>與其浪費過多的時間在猶豫不決、或是自我懷疑身上，倒不如直接動手做，這樣才能更快找出真正的答案。</p>
<p>在正式開始程師導師實驗計畫以前，其實有個前置作業，也就是<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0xpZGVteS9tZW50b3ItcHJvZ3JhbS00dGgjJUU3JUFDJUFDJUU5JTlCJUI2JUU5JTgwJUIxJUU1JUJGJTgzJUU2JTg1JThCJUU1JTlGJUI5JUU5JUE0JThB">第零週的心態培養<i class="fa fa-external-link-alt"></i></span>。在學習之前若是能夠先培養好心態，對於之後的學習也會容易許多。</p>
<p>當中有提到下列幾點，有關如何建立心態：</p>
<ol>
<li>不要害怕問問題，每個問題都值得被提出來，你的問題可能也是其他人的問題</li>
<li>問問題前應該先自己動手查詢資料，如果是很難查的也可以直接問</li>
<li>有老師、助教或同學能夠讓你盡量問，反正問就對了</li>
<li>重點是「目的」，而不是「手段」，持續問為什麼為什麼為什麼為什麼</li>
<li>學程式需要換一個思維模式</li>
</ol>
<p>其實最重要的，就是「懂得適時提問」這件事。接受自己有不懂的東西，然後不要害怕問問題；如果自己解決不了，就要趕快尋求他人幫助，如此也能避免自己鑽牛角尖或繞遠路，否則可能結果是浪費時間又沒能找到答案。</p>
<p>然而，如果每個人都能夠像這樣理性思考，或許人生也不會有那麼多煩惱存在了。理智上告訴自己不應該逃避學習，卻又會忍不住倒退三步，本來可以馬上完成的作業不知不覺又拖了兩三天。</p>
<p>老實說，自己也是不擅長主動發問的學生，就是那種在課堂上打死不舉手的那種，除非遇到老師規定每人都要發問，不問就要被扣分數的時候，可能才會很痛苦的擠出一兩個問題來問。</p>
<p>但後來我發現到，如果是私下問問題的話自己還是能辦到的，可能是利用課餘時間找老師或助教，或是透過一些學習系統發問，抑或是乾脆找比較熟的同學問等等。</p>
<p>之所以會在眾人面前發問感到害怕，我想根本原因還是在於「害怕」他人的眼光，如果我問的是笨問題怎麼辦？如果被別人發現我連這麼簡單的東西都不懂怎麼辦？我怎麼知道我的問題別人也可能遇到？像是害怕被發現自已其實是個失敗者似的，結果就成為一個既不敢發問，又害怕犯錯的學生。</p>
<p>也是從開始學習語言以後，才試著努力改掉這個不敢問問題的壞習慣，畢竟有很多時候，是需要仰賴有經驗的人，來幫助自己少繞一點遠路的。但即使是現在，要自己在所有人面前提問還是很有障礙的一件事，但還是會試著把握住能夠提問的學習平台，或是找看看有沒有同學曾和自己有過相同經歷能夠參考等等。</p>
<p>此外，提問也是有技巧的，詳細可以參考這篇文章：<span class="exturl" data-url="aHR0cHM6Ly9pdGhlbHAuaXRob21lLmNvbS50dy9hcnRpY2xlcy8xMDIxMzM3Nj9zYz1pVGhvbWVS">第一天上班就該學會的精準提問術<i class="fa fa-external-link-alt"></i></span>。記住個重點，就是提問時要帶著自己的答案找人，才能讓對方知道自己是有嘗試解決，而不是懶得找方法解決的伸手牌。</p>
<p>總之，為了能夠克服內心的恐懼，這些也都是需要慢慢練習的，只要能夠比昨天的自己又往前邁進一步，就是戰勝恐懼的第一步。</p>
<p>以自己在學習程式這段過程來說，在接觸某個新的程式語言或工具之前，總會忍不住在心底吶喊「這看起來也太難了吧！」。像是第四週學習如何串接 API、第八週的同步與非同步、第九週第一次接觸的後端語言 PHP、第十四週架設遠端主機、第十六週的 JavaScript 物件導向等等。</p>
<p>就算學習過程中遭遇滿滿的挫折，自己最終還是順利把作業給完成了。無論那些東西看起來再怎麼困難，只要自己願意花時間去學習它，那麼恐懼也就會隨著理解而慢慢消散。</p>
<p>即使如此，偶爾還是會擔心自己學得不夠扎實，那這也就不是「能不能學會」這個問題，而是「熟練不熟練」的問題才對。就像前面所提到的，每個階段都有每個階段要去煩惱的問題存在，重要的還是專注於當下的自己。</p>
<p>也是直到後來，瞭解到在這世界上，其實多數人都會對生活的未知感到恐懼，像是周遭和自己有類似際遇的人，或者即使是那些看起來很耀眼的人們，還是會害怕自己不夠好、害怕失敗，似乎也就慢慢釋懷「和他人比較」這件事了。</p>
<p>再回到最根本的問題，所以我們應該如何面對恐懼、面對失敗？</p>
<p>節錄 Huli 在<span class="exturl" data-url="aHR0cHM6Ly9tZWRpdW0uY29tL2h1bGlzLWJsb2cvYmVmb3JlLWxlYXJuaW5nLWI5YjkzM2I2MDc4ZQ==">學程式的第零課：心態調整<i class="fa fa-external-link-alt"></i></span>這篇寫的一段話，一方面也用來提醒自己：</p>
<blockquote>
<p>為什麼要讓別人幫你定義成功或失敗？這一點都不合理。你管他什麼成功跟失敗，知道自己在幹嘛就好了。</p>
</blockquote>
<p>與其把時間浪費在思考不確定的結果，或是害怕自己會不會失敗，不如直接去面對它，試著排除外在的雜音，把重心放在自己身上，然後試著面對問題，並找出適合的方法來解決它。</p>
<p>要記得，就算結果真的失敗了，人生也不會就此畫下句點，這些都只是過程的一部分，而失敗與挫折會化作成功的養分。因為只要我還沒放棄，比賽就還沒有結束，我只是走得比別人慢了一點，但我相信自己最終還是會到達。</p>
<hr>
<h2 id="找到適合自己的學習方式"><a href="#找到適合自己的學習方式" class="headerlink" title="找到適合自己的學習方式"></a>找到適合自己的學習方式</h2><p>在這半年中，我發現比起學習程式本身，更困難的，其實是該如何建立健全的心態來面對學習。</p>
<p>就好比要在一片空地蓋房子，假如地基一開始就沒有打穩，即使有再好的設計圖或工程器具，也沒辦法打造出理想中的樣貌，可能才蓋到一半建築物本身就先垮掉了。</p>
<p>人的內心也是一樣的，其實我並不是一個內心堅強的人，也會擔心自己跟不上進度。所以在真正開始學習程式以前，就先接受「我就爛」的事實，我就是因為什麼都不會，才要從現在開始學啊！</p>
<p><img src="https://i.imgur.com/HiU7ndw.png"></p>
<p>回想起在六月程師導師計畫開始之前，自己有先看過 Huli 的基礎課程：<span class="exturl" data-url="aHR0cHM6Ly9saWRlbXkuY29tL3AvY3MxMDEtY29kaW5n">[CS101] 初心者的計概與 coding 火球術<i class="fa fa-external-link-alt"></i></span> 和 <span class="exturl" data-url="aHR0cHM6Ly9saWRlbXkuY29tL3AvYWxnMTAxLWxlZXRjb2Rl">[ALG101] 先別急著寫 leetcode <i class="fa fa-external-link-alt"></i></span>，對計概這門課的第一印象其實是在 Hahow 平台的時候，沒想到會在這裡再次相遇。</p>
<p>再加上之前自學 HTML &amp; CSS 打下的基礎，或許就類似於預習的概念，多虧有提前開始奔跑，所以直到第九週以前，自己還是能跟上進度甚至是超前的，但是後來呢？</p>
<p>在計畫剛開始的時候，自己還有在做兼職，一週五天的那種文書工作。因此，要想達成每週四十小時的學習時間，勢必得每天都固定持續學習才能辦到。但，只要是人總會有惰性，尤其自己又不是意志力足夠堅定的類型，等前端基礎告一段落，正式踏入後端基礎課程時，先前儲存的扣打也用得差不多了。</p>
<p>直到課程進入中場，漸漸地發現自己有些負荷不來，為了有更充足的學習時間，兼職也從五天改為三天，直到上個月乾脆辭去，下了決心改為全職學習。但這樣自己是否就能全心全意在學習上了呢？其實並沒有，說來慚愧，自己可能就是那種容易邁向失敗的例子，已經沒辦法像高中時期從早讀到晚，這樣的我，是不是不適合寫程式？難道我要就這樣放棄嗎？</p>
<p>不、絕對不是這樣的，就像上一段提到的，這些都只是過程的一部分。如果一天學不起來，那就再多花一天；如果有一行程式碼寫不出的程式，那就再多寫一行。還沒學會怎麼爬之前，又怎能妄想一夕之間學會如何飛翔？</p>
<h3 id="速度並不代表一切"><a href="#速度並不代表一切" class="headerlink" title="速度並不代表一切"></a>速度並不代表一切</h3><p>永遠要記得「先求有再求好」，有做比沒做好，做好比有做好，總之先做做看就知道了。究竟資質優劣、成效好壞、成功與否，在還沒開始之前都只是空談，重要的是自己如何去面對這件事情。</p>
<p>或許當下我是進度落後了，但我只是跑得比較慢而已，就算資質高低不同、就算起跑點不同又如何呢？我已經盡自己最大的努力了嗎？難道參加這個程式計畫是為了被打擊信心？絕對不只是這樣。</p>
<p>或許我不會是最厲害的那一個，但我可以把握這個機會，學習怎樣寫出「好」的程式碼。與其糾結在「為什麼他可以想出這種解法我卻不行？」，不如換位思考，也許之前的我只是不夠熟悉而已，只要我能理解程式碼的邏輯，日後我也能把這個概念應用在其他專案上。</p>
<p>學習方法是需要不斷去調整適應的，正因為一定會有比自己還要厲害的人存在，透過這些社群互動與同儕刺激，能夠讓自己慢慢瞭解這世界有多大，原來可以用不同的思考邏輯去解決問題，而這些是靠自己單打獨鬥所無法接觸到的。</p>
<p>最後總結幾點自己在學習過程遇到的困難，以及自己如何去面對，或是正在進行式，仍然在摸索的問題：</p>
<blockquote>
<p>「害怕自己學不好，害怕比不上別人，害怕轉職失敗。」</p>
</blockquote>
<ul>
<li>大多情況下，恐懼這份情緒其實是自己想像出來的</li>
<li>與其浪費時間去想東想西，不如直接動手去驗證結果，光是在腦中想像事情並不會有任何進展</li>
<li>每個人學習的起跑點不同，花費的時間與成效也不盡相同，不需要太過在乎身旁的人</li>
</ul>
<blockquote>
<p>「進度落後了怎麼辦？想要加快腳步，卻又擔心學得不夠扎實怎麼辦？」</p>
</blockquote>
<ul>
<li>不需要總是跟其他人比較，學習專注在自己的學習上</li>
<li>一開始就想要學到 100% 需要付出的成本太大，不如先把課程都跑完，學會了以後剩下的就是提高熟練度</li>
<li>雖然說不需太過在乎進度落後這件事，但也需提醒自己落後了多少，做好時間管理同樣重要，真正進入職場後是不可能這樣寬容自己的</li>
</ul>
<blockquote>
<p>「對於學習產生惰性，覺得無法完全理解內容，導致效率低落。」</p>
</blockquote>
<ul>
<li>試著改變學習步調，例如原本預計一天要看完整個章節、要寫完整週的作業、要寫完一篇文章，可以把目標切成一段一段，變成看完一小節、寫第一份作業、寫一行文字。萬事起頭難，先讓自己習慣有個開始</li>
<li>試著改變學習方式，適時跳過也是很重要的技巧，比如幾週前 callback function 學得很頭痛，先跟著範例實作，剛開始不需要到完全理解，有時候多做幾次不知不覺就學會了</li>
<li>試著改變學習環境，例如在家裡無法集中精神，可以到咖啡廳或圖書館學習</li>
<li>讓自己維持規律生活也是個辦法，把學習變成一種習慣</li>
<li>找一些求職訊息，未來應徵自己夢想中的公司可能需要會哪些技能，激發自己產生動力去學習</li>
</ul>
<h2 id="慢慢變成理想中的樣子"><a href="#慢慢變成理想中的樣子" class="headerlink" title="慢慢變成理想中的樣子"></a>慢慢變成理想中的樣子</h2><p>有的時候，會覺得這段日子就像在跑馬拉松一樣，即使有許多人同時開跑，卻也能感受到自己是獨自一人在前行，但同學之間擁有共同目標，老師和助教也適時給予協助，儘管如此，真正去學習程式這件事還是得靠自己。</p>
<p>最近看了一部很喜歡的動畫《強風吹拂》，這是一部以「跑步」作為主題的作品，當中多數人是從沒想過人生中會出現跑步這個選項，當中幾段台詞非常有感：</p>
<blockquote>
<p>「以為只靠努力就能無所不能，其實是一種傲慢。」</p>
</blockquote>
<p>為什麼我這麼努力了，卻還是和前面的人差這麼遙遠？很多時候，我們往往只看到結果，而難以去想像別人背後經過的事情，甚至因此產生相對剝奪感。</p>
<p>卻很少會思考過，也許對方早在幾個月、幾年之前就開始奔跑，又或著對方其實就是萬中選一的天才。不管如何，要記住速度並不代表一切，別人的成功與否，與自己的將來其實是非關聯的，更重要的，是如何專注於自己，專注當下，不斷去思考自己想成為怎樣的人。</p>
<blockquote>
<p>「但是，實際跑起來，我卻發現，比起被強制要求跑步，自願去奔跑要快樂得多。不是因為喜歡，才認真起來，而是因為認真起來，說不定就能……」</p>
</blockquote>
<p>或許在還沒嘗試之前，永遠都不會知道自己會不會喜歡寫程式；也正因為是自己所選擇的路，而不是被強制說一定要這麼做，所以更加確信自己會走到最後，說不定就會喜歡上這條路也說不定。即使最後失敗又如何？至少我還是學會了些什麼，一切並不會歸零，而是會帶著這些經驗值前往下一個遠方。</p>
<p>回到最一開始的問題：「為什麼會想學寫程式？」</p>
<p>想起某一年曾寫過的作文題目《我曾那樣追尋》，那時的我其實不知該如何下筆，很難去想像未來的事，縱使引用了一句句事先背好的名言佳句，對於人生仍充滿迷惘，但是現在，我好像能夠找到答案了。</p>
<p>在學習程式這段過程中，我能夠與自己對話，回想起學習的快樂，然後確信這就是我想尋找的。也因此，打從開始加入程式導師計畫以來，我知道自己會走完這段課程，不管時間拉的多長，不論這路走得有多狼狽，還是想要追尋這個夢想，為了能夠慢慢接近那理想中的自己。</p>
<h2 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h2><p>最後放上我在課程中的學習筆記、GitHub 頁面，個人網誌目前正在架設中，會慢慢把之前寫的筆記或文章搬運過來：</p>
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9oYWNrbWQuaW8vQEhlaWRpLUxpdS9ub3RlLWxpZGVteQ==">Lidemy 程式導師計畫第四期 - 每週學習筆記<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2hlaWRpbGl1MjAyMA==">GitHub<i class="fa fa-external-link-alt"></i></span></li>
<li><a href="https://heidiliu2020.github.io/">Heidi’s Blog</a></li>
</ul>
<p>在總結自己這半年來的學習心得時，發現其實很多道理是當初「第零週心態建立」中就有提及的，結果也引用不少 Huli 說過的話，作為紀錄的同時也用來提醒自己，也很推薦那些跟我一樣迷惘的人去閱讀原文。</p>
<p>也許是還沒有親身體驗就不會懂，如果能早一點瞭解這些道理，或許也就不用浪費那麼多時間和內心的自己打架，或許也就能夠跟上課程進度也說不定；但人生沒有如果，我們能做的，也就是咬緊牙根繼續走下去。不過也不需走得那樣痛苦，試著從中獲得成就感與快樂同樣很重要，如此這條路也才能走得更久更遠。</p>
<p>Happy learning, happy coding!</p>
]]></content>
      <categories>
        <category>lidemy</category>
      </categories>
      <tags>
        <tag>lidemy</tag>
      </tags>
  </entry>
  <entry>
    <title>[week 12] 利用 PHP 實作留言板 - API 篇</title>
    <url>/php-api/</url>
    <content><![CDATA[<blockquote>
<p>本篇為 <span class="exturl" data-url="aHR0cHM6Ly9saWRlbXkuY29tL3AvYmUxMDEtcGhwLW15c3Fs">[BE101] 用 PHP 與 MySQL 學習後端基礎<i class="fa fa-external-link-alt"></i></span> 這門課程的學習筆記。如有錯誤歡迎指正。</p>
</blockquote>
<blockquote>
<p>hw1：<span class="exturl" data-url="aHR0cDovL21lbnRvci1wcm9ncmFtLmNvL210cjA0Z3JvdXAyL0hlaWRpL3dlZWsxMi9odzEv">JavaScript 留言板<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
<span id="more"></span>

<h4 id="參考筆記"><a href="#參考筆記" class="headerlink" title="參考筆記"></a>參考筆記</h4><ul>
<li><a href="https://heidiliu2020.github.io/http-protocol/">[week 4] 網路基礎概論 - HTTP 協定、TCP/IP、API</a></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2hlaWRpbGl1MjAyMC9UaGlzLWlzLUNvZGVkaWFyeS9ibG9iL21hc3Rlci93ZWVrOF8lRTUlODIlQjMlRTklODAlODElRTglQjMlODclRTYlOTYlOTklRTclOUElODQlRTYlOTYlQjklRTUlQkMlOEYlRTMlODAlODElRTclODAlOEYlRTglQTYlQkQlRTUlOTklQTglRTclOUElODQlRTklOTklOTAlRTUlODglQjYubWQ=">[week 8] 傳送資料的方式 &amp; 瀏覽器的限制<i class="fa fa-external-link-alt"></i></span></li>
</ul>
<h2 id="什麼是-API？"><a href="#什麼是-API？" class="headerlink" title="什麼是 API？"></a>什麼是 API？</h2><p>API 就是純資料的交換。資料以 JSON 形式儲存。</p>
<p>在第八週時，我們學會使用 JavaScript 來串接 API，前端負責顯示資料，後端只負責提供資料。</p>
<p>之前實作的留言板是透過 PHP 直接輸出內容。這週我們會透過 PHP 實作 API，再使用 JavaScript 串接 API 來動態顯示資料。</p>
<h3 id="如何測試-API"><a href="#如何測試-API" class="headerlink" title="如何測試 API"></a>如何測試 API</h3><p>有幾種方式能夠測試 API 是否能成功運行。可參考這篇文章介紹：<span class="exturl" data-url="aHR0cHM6Ly9ub29iLnR3L3Bvc3RtYW4v">API 實作(三)：以 Postman 測試 API<i class="fa fa-external-link-alt"></i></span></p>
<ul>
<li>瀏覽器：撰寫程式碼不易，步驟繁瑣</li>
<li>curl 工具：不易進行 debug</li>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cucG9zdG1hbi5jb20v">Postman<i class="fa fa-external-link-alt"></i></span>：方便使用，能夠針對不同分頁或欄位進行測試</li>
</ul>
<h2 id="練習：實作無會員機制的留言版-API"><a href="#練習：實作無會員機制的留言版-API" class="headerlink" title="練習：實作無會員機制的留言版 API"></a>練習：實作無會員機制的留言版 API</h2><h3 id="PHP-相關語法"><a href="#PHP-相關語法" class="headerlink" title="PHP 相關語法"></a>PHP 相關語法</h3><ul>
<li><code>header(&#39;Content-Type: application/json; charset=utf-8&#39;);</code>：指定瀏覽器以 JSON 格式內容，UTF-8 字元編碼</li>
<li><code>array_push()</code>：在一個陣列中，再插入一個值進去<ul>
<li>語法：<code>array_push(欲增加的陣列, 值)</code><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span> 
  <span class="token variable">$array</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
  <span class="token function">array_push</span><span class="token punctuation">(</span><span class="token variable">$array</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"Test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
  <span class="token function">print_r</span><span class="token punctuation">(</span><span class="token variable">$array</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token delimiter important">?></span></span>
// 輸出結果: Array ( [0] => Test )<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

</li>
</ul>
</li>
</ul>
<h3 id="用-PHP-實作-API"><a href="#用-PHP-實作-API" class="headerlink" title="用 PHP 實作 API"></a>用 PHP 實作 API</h3><p>首先要瞭解如何使用 PHP 做出 API，以 <code>api_comments.php</code> 下列程式碼為例：</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
  <span class="token comment">// 宣告變數 comments 為空陣列</span>
  <span class="token variable">$comments</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 把資料放到陣列 $comments，裡面再建立陣列 array</span>
  <span class="token function">array_push</span><span class="token punctuation">(</span><span class="token variable">$comments</span><span class="token punctuation">,</span> <span class="token keyword">array</span><span class="token punctuation">(</span>
    <span class="token string double-quoted-string">"id"</span> <span class="token operator">=></span> <span class="token number">1</span><span class="token punctuation">,</span>
    <span class="token string double-quoted-string">"username"</span> <span class="token operator">=></span> <span class="token string double-quoted-string">"aaa"</span><span class="token punctuation">,</span>
    <span class="token string double-quoted-string">"content"</span> <span class="token operator">=></span> <span class="token string double-quoted-string">"123"</span>
  <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">array_push</span><span class="token punctuation">(</span><span class="token variable">$comments</span><span class="token punctuation">,</span> <span class="token keyword">array</span><span class="token punctuation">(</span>
    <span class="token string double-quoted-string">"id"</span> <span class="token operator">=></span> <span class="token number">2</span><span class="token punctuation">,</span>
    <span class="token string double-quoted-string">"username"</span> <span class="token operator">=></span> <span class="token string double-quoted-string">"bbb"</span><span class="token punctuation">,</span>
    <span class="token string double-quoted-string">"content"</span> <span class="token operator">=></span> <span class="token string double-quoted-string">"456"</span>
  <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  
  <span class="token variable">$json</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span>
    <span class="token string double-quoted-string">"comments"</span> <span class="token operator">=></span> <span class="token variable">$comments</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token variable">$response</span> <span class="token operator">=</span> <span class="token function">json_encode</span><span class="token punctuation">(</span><span class="token variable">$json</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 讓瀏覽器知道我們要印出 JSON 格式</span>
  <span class="token function">header</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'Content-Type: application/json; charset=utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">echo</span> <span class="token variable">$response</span><span class="token punctuation">;</span>
<span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>在瀏覽器接收到的 response 就是 JSON 格式的物件，可使用開發者工具查看內容：</p>
<p><img src="https://i.imgur.com/RJIaktu.png"></p>
<h3 id="實作-API：列出所有文章"><a href="#實作-API：列出所有文章" class="headerlink" title="實作 API：列出所有文章"></a>實作 API：列出所有文章</h3><p>把之前實作留言板 <code>index.php</code> 時，使用的語法結合到 <code>api_comments.php</code>，即可得到只輸出資料的 API：</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
  <span class="token keyword">require_once</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"conn.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// 和 index.php 抓取資料的語法相同</span>
  <span class="token variable">$page</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">empty</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'page'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token variable">$page</span> <span class="token operator">=</span> <span class="token function">intval</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'page'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token variable">$items_per_page</span> <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>
  <span class="token variable">$offset</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token variable">$page</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token variable">$items_per_page</span><span class="token punctuation">;</span> 

  <span class="token variable">$sql</span> <span class="token operator">=</span>  <span class="token string double-quoted-string">"SELECT "</span><span class="token operator">.</span>
            <span class="token string double-quoted-string">"C.id as id, C.content AS content, "</span><span class="token operator">.</span> 
            <span class="token string double-quoted-string">"C.created_at AS created_at, U.nickname AS nickname, U.username AS username "</span><span class="token operator">.</span>
          <span class="token string double-quoted-string">"FROM heidi_comments AS C "</span><span class="token operator">.</span> 
          <span class="token string double-quoted-string">"LEFT JOIN heidi_users AS U ON C.username = U.username "</span><span class="token operator">.</span>
          <span class="token string double-quoted-string">"WHERE C.is_deleted IS NULL "</span><span class="token operator">.</span>
          <span class="token string double-quoted-string">"ORDER BY C.id DESC "</span><span class="token operator">.</span>
          <span class="token string double-quoted-string">"LIMIT ? OFFSET ? "</span><span class="token punctuation">;</span>
  <span class="token variable">$stmt</span> <span class="token operator">=</span> <span class="token variable">$conn</span><span class="token operator">-></span><span class="token function">prepare</span><span class="token punctuation">(</span><span class="token variable">$sql</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token variable">$stmt</span><span class="token operator">-></span><span class="token function">bind_param</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"ii"</span><span class="token punctuation">,</span> <span class="token variable">$items_per_page</span><span class="token punctuation">,</span> <span class="token variable">$offset</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token variable">$result</span> <span class="token operator">=</span> <span class="token variable">$stmt</span><span class="token operator">-></span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$result</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'Error:'</span> <span class="token operator">.</span> <span class="token variable">$conn</span><span class="token operator">-></span><span class="token property">error</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token variable">$result</span> <span class="token operator">=</span> <span class="token variable">$stmt</span><span class="token operator">-></span><span class="token function">get_result</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token variable">$comments</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// 把讀取的資料放到陣列 $comments，裡面再建立陣列 array，概念比較像 JS 物件</span>
  <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token variable">$row</span> <span class="token operator">=</span> <span class="token variable">$result</span><span class="token operator">-></span><span class="token function">fetch_assoc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token function">array_push</span><span class="token punctuation">(</span><span class="token variable">$comments</span><span class="token punctuation">,</span> <span class="token keyword">array</span><span class="token punctuation">(</span>
    <span class="token string double-quoted-string">"id"</span> <span class="token operator">=></span> <span class="token variable">$row</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'id'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token string double-quoted-string">"username"</span> <span class="token operator">=></span> <span class="token variable">$row</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'username'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token string double-quoted-string">"nickname"</span> <span class="token operator">=></span> <span class="token variable">$row</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'nickname'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token string double-quoted-string">"content"</span> <span class="token operator">=></span> <span class="token variable">$row</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'content'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token string double-quoted-string">"created_at"</span> <span class="token operator">=></span> <span class="token variable">$row</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'created_at'</span><span class="token punctuation">]</span>
    <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  
  <span class="token variable">$json</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span>
    <span class="token string double-quoted-string">"comments"</span> <span class="token operator">=></span> <span class="token variable">$comments</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token variable">$response</span> <span class="token operator">=</span> <span class="token function">json_encode</span><span class="token punctuation">(</span><span class="token variable">$json</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 讓瀏覽器知道我們要印出 JSON 格式</span>
  <span class="token function">header</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'Content-Type: application/json; charset=utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">echo</span> <span class="token variable">$response</span><span class="token punctuation">;</span>
<span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>上述程式碼，和 <code>index.php</code> 同樣是讀取資料，差別在於 API 是把資料放到陣列 <code>$comments</code>，裡面再建立陣列 array，概念比較像 JS 物件。</p>
<h3 id="實作-API：新增文章"><a href="#實作-API：新增文章" class="headerlink" title="實作 API：新增文章"></a>實作 API：新增文章</h3><p>以 <code>api_add_comment.php</code> 為例，寫法會和 <code>handle_add_comment.php</code>（新增留言功能）的邏輯類似：</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
  <span class="token keyword">require_once</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'conn.php'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">header</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'Content-Type: application/json; charset=utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 若讀取失敗</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>
    <span class="token keyword">empty</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'content'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
  <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token variable">$json</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span>
      <span class="token string double-quoted-string">"ok"</span> <span class="token operator">=></span> <span class="token constant boolean">false</span><span class="token punctuation">,</span>
      <span class="token string double-quoted-string">"message"</span> <span class="token operator">=></span> <span class="token string double-quoted-string">"Please input content"</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token variable">$response</span> <span class="token operator">=</span> <span class="token function">json_encode</span><span class="token punctuation">(</span><span class="token variable">$json</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">echo</span> <span class="token variable">$response</span><span class="token punctuation">;</span>
    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
  <span class="token punctuation">&#125;</span>
 
  <span class="token variable">$username</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'username'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token variable">$content</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'content'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

  <span class="token variable">$sql</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"INSERT INTO heidi_comments(username, content)
    VALUES(?, ?)"</span><span class="token punctuation">;</span>
  <span class="token variable">$stmt</span> <span class="token operator">=</span> <span class="token variable">$conn</span><span class="token operator">-></span><span class="token function">prepare</span><span class="token punctuation">(</span><span class="token variable">$sql</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token variable">$stmt</span><span class="token operator">-></span><span class="token function">bind_param</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'ss'</span><span class="token punctuation">,</span> <span class="token variable">$username</span><span class="token punctuation">,</span> <span class="token variable">$content</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token variable">$result</span> <span class="token operator">=</span> <span class="token variable">$stmt</span><span class="token operator">-></span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 若執行失敗</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$result</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token variable">$json</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span>
      <span class="token string double-quoted-string">"ok"</span> <span class="token operator">=></span> <span class="token constant boolean">false</span><span class="token punctuation">,</span>
      <span class="token string double-quoted-string">"message"</span> <span class="token operator">=></span> <span class="token variable">$conn</span><span class="token operator">-></span><span class="token property">error</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token variable">$response</span> <span class="token operator">=</span> <span class="token function">json_encode</span><span class="token punctuation">(</span><span class="token variable">$json</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">echo</span> <span class="token variable">$response</span><span class="token punctuation">;</span>
    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
  <span class="token punctuation">&#125;</span>
  <span class="token comment">// 若成功讀取資料</span>
  <span class="token variable">$json</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span>
      <span class="token string double-quoted-string">"ok"</span> <span class="token operator">=></span> <span class="token constant boolean">true</span><span class="token punctuation">,</span>
      <span class="token string double-quoted-string">"message"</span> <span class="token operator">=></span> <span class="token string double-quoted-string">"Success"</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token variable">$response</span> <span class="token operator">=</span> <span class="token function">json_encode</span><span class="token punctuation">(</span><span class="token variable">$json</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">echo</span> <span class="token variable">$response</span><span class="token punctuation">;</span>
<span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><img src="https://i.imgur.com/n9O600m.png"></p>
<h3 id="前端串接-API"><a href="#前端串接-API" class="headerlink" title="前端串接 API"></a>前端串接 API</h3><p>最後就是在前端頁面 <code>index.html</code> 串接寫好的 API：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>body<span class="token operator">></span>
  <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"wrapper"</span><span class="token operator">></span>
    <span class="token operator">&lt;</span>main <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"board"</span><span class="token operator">></span>　
      <span class="token operator">&lt;</span>div <span class="token keyword">class</span> <span class="token operator">=</span><span class="token string">"board__header"</span><span class="token operator">></span>
        <span class="token operator">&lt;</span>h1 <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"board__tittle"</span><span class="token operator">></span>Comments<span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span>
        <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"board__btn-block"</span><span class="token operator">></span> 
        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
  
      <span class="token operator">&lt;</span>form <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"board__new-comment-form"</span><span class="token operator">></span>
        <span class="token operator">&lt;</span>textarea name<span class="token operator">=</span><span class="token string">"content"</span> rows<span class="token operator">=</span><span class="token string">"5"</span> placeholder<span class="token operator">=</span><span class="token string">"請輸入留言..."</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>textarea<span class="token operator">></span>
        <span class="token operator">&lt;</span>input <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"board__submit-btn"</span> type<span class="token operator">=</span><span class="token string">"submit"</span><span class="token operator">></span>
      <span class="token operator">&lt;</span><span class="token operator">/</span>form<span class="token operator">></span>
    <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"board__hr"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>

    <span class="token operator">&lt;</span>section<span class="token operator">></span>
       <span class="token comment">// 動態新增留言的區塊...</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>section<span class="token operator">></span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>main<span class="token operator">></span>
  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>

  <span class="token operator">&lt;</span>script<span class="token operator">></span>
      <span class="token comment">// 發出 Request</span>
      <span class="token keyword">var</span> request <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      request<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">'GET'</span><span class="token punctuation">,</span> <span class="token string">'api_comments.php'</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

      request<span class="token punctuation">.</span><span class="token function-variable function">onload</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">>=</span> <span class="token number">200</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">&lt;</span> <span class="token number">400</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
          <span class="token keyword">var</span> resp <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>response<span class="token punctuation">;</span>
          <span class="token keyword">var</span> json <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>resp<span class="token punctuation">)</span>
          <span class="token keyword">var</span> comments <span class="token operator">=</span> json<span class="token punctuation">.</span>comments

          <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> comments<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">var</span> comment <span class="token operator">=</span> comments<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
            <span class="token keyword">var</span> div <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span>
            div<span class="token punctuation">.</span>classList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">'card'</span><span class="token punctuation">)</span>
            div<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">
              &lt;div class="card__avatar">&lt;/div>
              &lt;div class="card__body">
                  &lt;div class="card__info">
                    &lt;span class="card__author">
                      </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token function">encodeHTML</span><span class="token punctuation">(</span>comment<span class="token punctuation">.</span>nickname<span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">(@</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token function">encodeHTML</span><span class="token punctuation">(</span>comment<span class="token punctuation">.</span>username<span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">)
                    &lt;/span>
                    &lt;span class="card__time">
                      </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token function">encodeHTML</span><span class="token punctuation">(</span>comment<span class="token punctuation">.</span>created_at<span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">
                    &lt;/span>
                  &lt;/div>
                  &lt;p class="card__content"></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token function">encodeHTML</span><span class="token punctuation">(</span>comment<span class="token punctuation">.</span>content<span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">&lt;/p>
              &lt;/div>
            </span><span class="token template-punctuation string">`</span></span>
            document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'section'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>div<span class="token punctuation">)</span>
          <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span> 
      <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
      request<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

      <span class="token keyword">var</span> form <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.board__new-comment-form'</span><span class="token punctuation">)</span>
      form<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'submit'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">// 阻止預設事件: 送出表單</span>
        e<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token comment">// 讀取輸入內容</span>
        <span class="token keyword">var</span> content <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'textarea[name=content]'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value
        <span class="token keyword">var</span> request <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 發出 POST Request</span>
        request<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">'POST'</span><span class="token punctuation">,</span> <span class="token string">'api_add_comment.php'</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        request<span class="token punctuation">.</span><span class="token function">setRequestHeader</span><span class="token punctuation">(</span><span class="token string">'Content-Type'</span><span class="token punctuation">,</span> <span class="token string">'application/x-www-form-urlencoded; charset=UTF-8'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        request<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">"username=aaa&amp;content="</span> <span class="token operator">+</span> <span class="token function">encodeURIComponent</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        request<span class="token punctuation">.</span><span class="token function-variable function">onload</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
          <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">>=</span> <span class="token number">200</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">&lt;</span> <span class="token number">400</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">var</span> resp <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>response<span class="token punctuation">;</span>
            <span class="token keyword">var</span> json <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>resp<span class="token punctuation">)</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>json<span class="token punctuation">.</span>ok<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
              <span class="token comment">// 頁面重整: 可重新抓取留言</span>
              location<span class="token punctuation">.</span><span class="token function">reload</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
              <span class="token function">alert</span><span class="token punctuation">(</span>json<span class="token punctuation">.</span>message<span class="token punctuation">)</span>
            <span class="token punctuation">&#125;</span>       
          <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>
      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
      <span class="token comment">// 字串均需進行 escape 跳脫</span>
      <span class="token keyword">function</span> <span class="token function">encodeHTML</span><span class="token punctuation">(</span><span class="token parameter">s</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> s<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">&amp;</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">'&amp;amp;'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">&lt;</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">'&amp;lt;'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">"</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">'&amp;quot;'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span>
  <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>
<span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<hr>
<h2 id="實戰：增強版-JavaScript-留言板"><a href="#實戰：增強版-JavaScript-留言板" class="headerlink" title="實戰：增強版 JavaScript 留言板"></a>實戰：增強版 JavaScript 留言板</h2><p>接著要來打造後端 API，再利用前端 JavaScript 來串接 API 實作留言板功能。</p>
<h3 id="建立後端-API"><a href="#建立後端-API" class="headerlink" title="建立後端 API"></a>建立後端 API</h3><h4 id="Step1-建立資料庫-discussions"><a href="#Step1-建立資料庫-discussions" class="headerlink" title="Step1. 建立資料庫 discussions"></a>Step1. 建立資料庫 discussions</h4><ul>
<li>id</li>
<li>site_key</li>
<li>nickname</li>
<li>content</li>
<li>created_at</li>
</ul>
<h4 id="Step2-新增留言功能-api-add-comments-php"><a href="#Step2-新增留言功能-api-add-comments-php" class="headerlink" title="Step2. 新增留言功能 api_add_comments.php"></a>Step2. 新增留言功能 <code>api_add_comments.php</code></h4><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
  <span class="token keyword">require_once</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'conn.php'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 讓瀏覽器知道回覆的資料是 JSON 格式</span>
  <span class="token function">header</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'Content-Type: application/json; charset=utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 錯誤處理: 確認資料是否為空值</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>
    <span class="token keyword">empty</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'nickname'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">||</span>
    <span class="token keyword">empty</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'site_key'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">||</span>
    <span class="token keyword">empty</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'content'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
    <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token variable">$json</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span>
      <span class="token string double-quoted-string">"ok"</span> <span class="token operator">=></span> <span class="token constant boolean">false</span><span class="token punctuation">,</span>
      <span class="token string double-quoted-string">"message"</span> <span class="token operator">=></span> <span class="token string double-quoted-string">"Please input content"</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token variable">$response</span> <span class="token operator">=</span> <span class="token function">json_encode</span><span class="token punctuation">(</span><span class="token variable">$json</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">echo</span> <span class="token variable">$response</span><span class="token punctuation">;</span>
    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token variable">$nickname</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'nickname'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token variable">$site_key</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'site_key'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token variable">$content</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'content'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

  <span class="token variable">$sql</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"INSERT INTO heidi_discussions(site_key, nickname, content) VALUES (?, ?, ?)"</span><span class="token punctuation">;</span>
  <span class="token variable">$stmt</span> <span class="token operator">=</span> <span class="token variable">$conn</span><span class="token operator">-></span><span class="token function">prepare</span><span class="token punctuation">(</span><span class="token variable">$sql</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token variable">$stmt</span><span class="token operator">-></span><span class="token function">bind_param</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'sss'</span><span class="token punctuation">,</span> <span class="token variable">$site_key</span><span class="token punctuation">,</span> <span class="token variable">$nickname</span><span class="token punctuation">,</span> <span class="token variable">$content</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token variable">$result</span> <span class="token operator">=</span> <span class="token variable">$stmt</span><span class="token operator">-></span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 錯誤處理: 確認是否執行成功</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$result</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token variable">$json</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span>
      <span class="token string double-quoted-string">"ok"</span> <span class="token operator">=></span> <span class="token constant boolean">false</span><span class="token punctuation">,</span>
      <span class="token string double-quoted-string">"message"</span> <span class="token operator">=></span> <span class="token variable">$conn</span><span class="token operator">-></span><span class="token property">error</span>     <span class="token comment">// 通常不會直接顯示錯誤訊息，因為可能包含敏感資訊</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token variable">$response</span> <span class="token operator">=</span> <span class="token function">json_encode</span><span class="token punctuation">(</span><span class="token variable">$json</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">echo</span> <span class="token variable">$response</span><span class="token punctuation">;</span>
    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token comment">// 成功拿到資料</span>
  <span class="token variable">$json</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span>
    <span class="token string double-quoted-string">"ok"</span> <span class="token operator">=></span> <span class="token constant boolean">true</span><span class="token punctuation">,</span>
    <span class="token string double-quoted-string">"message"</span> <span class="token operator">=></span> <span class="token string double-quoted-string">"success"</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 把建立好的 $json 物件，轉成 JSON 字串輸出</span>
  <span class="token variable">$response</span> <span class="token operator">=</span> <span class="token function">json_encode</span><span class="token punctuation">(</span><span class="token variable">$json</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">echo</span> <span class="token variable">$response</span><span class="token punctuation">;</span>
<span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>利用 postman 以 <code>POST</code> 方式發出 request 測試，確認是否能新增留言到資料庫：</p>
<p><img src="https://i.imgur.com/f4m5fNp.png" alt="postmanTest"></p>
<h4 id="Step3-顯示留言功能-api-comments-php"><a href="#Step3-顯示留言功能-api-comments-php" class="headerlink" title="Step3. 顯示留言功能 api_comments.php"></a>Step3. 顯示留言功能 <code>api_comments.php</code></h4><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
  <span class="token keyword">require_once</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'conn.php'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 讓瀏覽器知道回覆的資料是 JSON 格式</span>
  <span class="token function">header</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'Content-Type: application/json; charset=utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 用 site_key 來區分不同的留言版</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>
    <span class="token keyword">empty</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'site_key'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
    <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token variable">$json</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span>
      <span class="token string double-quoted-string">"ok"</span> <span class="token operator">=></span> <span class="token constant boolean">false</span><span class="token punctuation">,</span>
      <span class="token string double-quoted-string">"message"</span> <span class="token operator">=></span> <span class="token string double-quoted-string">"Please add site_key in url"</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token variable">$response</span> <span class="token operator">=</span> <span class="token function">json_encode</span><span class="token punctuation">(</span><span class="token variable">$json</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">echo</span> <span class="token variable">$response</span><span class="token punctuation">;</span>
    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token variable">$site_key</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'site_key'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

  <span class="token variable">$sql</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"SELECT nickname, content, created_at FROM heidi_discussions WHERE site_key = ? ORDER BY id DESC"</span><span class="token punctuation">;</span>
  <span class="token variable">$stmt</span> <span class="token operator">=</span> <span class="token variable">$conn</span><span class="token operator">-></span><span class="token function">prepare</span><span class="token punctuation">(</span><span class="token variable">$sql</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token variable">$stmt</span><span class="token operator">-></span><span class="token function">bind_param</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'s'</span><span class="token punctuation">,</span> <span class="token variable">$site_key</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token variable">$result</span> <span class="token operator">=</span> <span class="token variable">$stmt</span><span class="token operator">-></span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 錯誤處理: 確認是否執行成功</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$result</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token variable">$json</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span>
      <span class="token string double-quoted-string">"ok"</span> <span class="token operator">=></span> <span class="token constant boolean">false</span><span class="token punctuation">,</span>
      <span class="token string double-quoted-string">"message"</span> <span class="token operator">=></span> <span class="token variable">$conn</span><span class="token operator">-></span><span class="token property">error</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token variable">$response</span> <span class="token operator">=</span> <span class="token function">json_encode</span><span class="token punctuation">(</span><span class="token variable">$json</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">echo</span> <span class="token variable">$response</span><span class="token punctuation">;</span>
    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token comment">// 若執行成功就拿取資料</span>
  <span class="token variable">$result</span> <span class="token operator">=</span> <span class="token variable">$stmt</span><span class="token operator">-></span><span class="token function">get_result</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token variable">$discussions</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token variable">$row</span> <span class="token operator">=</span> <span class="token variable">$result</span><span class="token operator">-></span><span class="token function">fetch_assoc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token function">array_push</span><span class="token punctuation">(</span><span class="token variable">$discussions</span><span class="token punctuation">,</span> <span class="token keyword">array</span><span class="token punctuation">(</span>
      <span class="token string double-quoted-string">"nickname"</span> <span class="token operator">=></span> <span class="token variable">$row</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"nickname"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
      <span class="token string double-quoted-string">"content"</span> <span class="token operator">=></span> <span class="token variable">$row</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"content"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
      <span class="token string double-quoted-string">"created_at"</span> <span class="token operator">=></span> <span class="token variable">$row</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"created_at"</span><span class="token punctuation">]</span>
    <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token variable">$json</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span>
    <span class="token string double-quoted-string">"ok"</span> <span class="token operator">=></span> <span class="token constant boolean">true</span><span class="token punctuation">,</span>
    <span class="token string double-quoted-string">"discussions"</span> <span class="token operator">=></span> <span class="token variable">$discussions</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 把建立好的 $json 物件，轉成 JSON 字串輸出</span>
  <span class="token variable">$response</span> <span class="token operator">=</span> <span class="token function">json_encode</span><span class="token punctuation">(</span><span class="token variable">$json</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">echo</span> <span class="token variable">$response</span><span class="token punctuation">;</span>
<span class="token delimiter important">?></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>利用 postman 以 <code>GET</code> 方式發出 request 測試，確認是否能讀取留言：</p>
<p><img src="https://i.imgur.com/2rjKvzl.png"></p>
<p>這樣就完成後端 API 的新增留言和顯示留言功能。</p>
<h3 id="前端串接-API-1"><a href="#前端串接-API-1" class="headerlink" title="前端串接 API"></a>前端串接 API</h3><h4 id="Step1-建立-UI-頁面"><a href="#Step1-建立-UI-頁面" class="headerlink" title="Step1. 建立 UI 頁面"></a>Step1. 建立 UI 頁面</h4><p>首先利用 <span class="exturl" data-url="aHR0cHM6Ly9nZXRib290c3RyYXAuY29tL2RvY3MvNC41L2dldHRpbmctc3RhcnRlZC9pbnRyb2R1Y3Rpb24v">Bootstrap<i class="fa fa-external-link-alt"></i></span> 來快速建立前端頁面 <code>index.html</code></p>
<h4 id="Step2-將前端頁面串接-API"><a href="#Step2-將前端頁面串接-API" class="headerlink" title="Step2. 將前端頁面串接 API"></a>Step2. 將前端頁面串接 API</h4><ul>
<li>顯示留言 API</li>
<li>新增留言 API</li>
</ul>
<pre class="line-numbers language-htmlmixed" data-language="htmlmixed"><code class="language-htmlmixed">&lt;!DOCTYPE html&gt;
&lt;html lang&#x3D;&quot;en&quot;&gt;
&lt;head&gt;
  &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;
  &lt;meta name&#x3D;&quot;viewport&quot; content&#x3D;&quot;width&#x3D;device-width, initial-scale&#x3D;1.0&quot;&gt;
  &lt;title&gt;Week12 留言板&lt;&#x2F;title&gt;
  &lt;!-- 引入 jQuery --&gt;
  &lt;script src&#x3D;&quot;https:&#x2F;&#x2F;code.jquery.com&#x2F;jquery-3.5.1.js&quot;&gt;&lt;&#x2F;script&gt;
  &lt;!-- 引入 Bootstrap --&gt;
  &lt;link rel&#x3D;&quot;stylesheet&quot; href&#x3D;&quot;https:&#x2F;&#x2F;stackpath.bootstrapcdn.com&#x2F;bootstrap&#x2F;4.5.2&#x2F;css&#x2F;bootstrap.min.css&quot; integrity&#x3D;&quot;sha384-JcKb8q3iqJ61gNV9KGb8thSsNjpSL0n8PARn9HuZOnIxN0hoP+VmmDGMN5t9UJ0Z&quot; crossorigin&#x3D;&quot;anonymous&quot;&gt;
  &lt;style&gt;
    .add-comment-form &#123;
      margin-bottom: 10px;
    &#125;
    .card &#123;
      margin-bottom: 10px;
    &#125;
    .card-body h5, .card-body span &#123;
      display: inline-block;
      margin-right: 20px;
    &#125;
  &lt;&#x2F;style&gt;
  &lt;script&gt;
    &#x2F;&#x2F; 跳脫函式
    function escape(toOutput) &#123;
      return toOutput
        .replace(&#x2F;&amp;&#x2F;g, &#39;&amp;&#39;)
        .replace(&#x2F;&lt;&#x2F;g, &#39;&lt;&#39;)
        .replace(&#x2F;&gt;&#x2F;g, &#39;&gt;&#39;)
        .replace(&#x2F;&quot;&#x2F;g, &#39;&quot;&#39;)
        .replace(&#x2F;&#39;&#x2F;g, &#39;&amp;#039;&#39;);
    &#125;
    &#x2F;&#x2F; 渲染 comment: 處理讀取的資料 &amp; 決定加在最前面或最後面
    function appendCommentToDOM(container, comment, isPrepend) &#123;
      const html &#x3D; &#96;
        &lt;div class&#x3D;&quot;card&quot;&gt;
          &lt;div class&#x3D;&quot;card-body&quot;&gt;
            &lt;h5 class&#x3D;&quot;card-title&quot;&gt;$&#123;escape(comment.nickname)&#125;&lt;&#x2F;h5&gt;
            &lt;span&gt;$&#123;escape(comment.created_at)&#125;&lt;&#x2F;span&gt;
            &lt;p class&#x3D;&quot;card-text&quot;&gt;$&#123;escape(comment.content)&#125;
            &lt;&#x2F;p&gt;
          &lt;&#x2F;div&gt;
        &lt;&#x2F;div&gt;
      &#96;;
      if (isPrepend) &#123;
        container.prepend(html);
      &#125; else &#123;
        container.append(html);
      &#125;
    &#125;

    const showUrl &#x3D; &#39;http:&#x2F;&#x2F;localhost&#x2F;heidi&#x2F;week12_local&#x2F;hw1&#x2F;api_comments.php?site_key&#x3D;heidi&#39;;
    const addUrl &#x3D; &#39;http:&#x2F;&#x2F;localhost&#x2F;heidi&#x2F;week12_local&#x2F;hw1&#x2F;api_add_comments.php&#39;;

    $(document).ready(() &#x3D;&gt; &#123;
      &#x2F;&#x2F; 顯示留言
      const commentDOM &#x3D; $(&#39;.comments&#39;)
      $.ajax(&#123;
        url: showUrl,
      &#125;).done(function (data) &#123;
        if (!data.ok) &#123;
          alert(data.message);
          return;
        &#125;
        &#x2F;&#x2F; 若 request 成功讀取資料
        const comments &#x3D; data.discussions;
        for (let comment of comments) &#123;
          appendCommentToDOM(commentDOM, comment);
        &#125;
      &#125;);
      
      &#x2F;&#x2F; 新增留言: 將資料存到後端
      $(&#39;.add-comment-form&#39;).submit(e &#x3D;&gt; &#123;
        e.preventDefault();             &#x2F;&#x2F; 取消原生行為 -&gt; 不會送出表單
        const newCommentData &#x3D; &#123;
          &#39;site_key&#39;: &#39;heidi&#39;,
          &#39;nickname&#39;: $(&#39;input[name&#x3D;nickname]&#39;).val(),
          &#39;content&#39;: $(&#39;textarea[name&#x3D;content]&#39;).val()
        &#125;
        $.ajax(&#123;
          type: &#39;POST&#39;,
          url: addUrl,
          data: newCommentData
        &#125;).done(function(data) &#123;        &#x2F;&#x2F; done(): 以函數處理回傳的 data 資料
          &#x2F;&#x2F; 執行失敗
          if (!data.ok) &#123;
            alert(data.message);
            return;
          &#125;
          &#x2F;&#x2F; 執行成功: 按下送出後把欄位清空
          $(&#39;input[name&#x3D;nickname]&#39;).val(&#39;&#39;);
          $(&#39;textarea[name&#x3D;content]&#39;).val(&#39;&#39;);
          &#x2F;&#x2F; 新增留言後以 JS 動態方式加到最上方
          appendCommentToDOM(commentDOM, newCommentData, true);
        &#125;);
      &#125;);
    &#125;);
  &lt;&#x2F;script&gt;
&lt;&#x2F;head&gt;

&lt;body&gt;
  &lt;div class&#x3D;&quot;container&quot;&gt;
    &lt;form class&#x3D;&quot;add-comment-form&quot;&gt;
      &lt;div class&#x3D;&quot;form-group&quot;&gt;
        &lt;label for&#x3D;&quot;form-nickname&quot;&gt;暱稱&lt;&#x2F;label&gt;
        &lt;input name&#x3D;&quot;nickname&quot; type&#x3D;&quot;text&quot; class&#x3D;&quot;form-control&quot; id&#x3D;&quot;form-nickname&quot; &gt;
      &lt;&#x2F;div&gt;
      &lt;div class&#x3D;&quot;form-group&quot;&gt;
        &lt;label for&#x3D;&quot;content-textarea&quot;&gt;留言內容&lt;&#x2F;label&gt;
        &lt;textarea name&#x3D;&quot;content&quot; class&#x3D;&quot;form-control&quot; id&#x3D;&quot;exampleFormControlTextarea1&quot; rows&#x3D;&quot;3&quot;&gt;&lt;&#x2F;textarea&gt;
      &lt;&#x2F;div&gt;
      &lt;button type&#x3D;&quot;submit&quot; class&#x3D;&quot;btn btn-dark&quot;&gt;送出&lt;&#x2F;button&gt;
    &lt;&#x2F;form&gt;
    &lt;div class&#x3D;&quot;comments&quot;&gt;
      &lt;!-- 以 JavaScript 動態顯示資料的區塊 --&gt;
    &lt;&#x2F;div&gt;
  &lt;&#x2F;div&gt;

&lt;&#x2F;body&gt;
&lt;&#x2F;html&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="Step3-實作分頁機制"><a href="#Step3-實作分頁機制" class="headerlink" title="Step3. 實作分頁機制"></a>Step3. 實作分頁機制</h4><ul>
<li><p>Offset/limit-based Pagination</p>
<ul>
<li>基於 Offset/limit 的分頁，也就是我們在 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2hlaWRpbGl1MjAyMC9UaGlzLWlzLUNvZGVkaWFyeS9ibG9iL21hc3Rlci93ZWVrMTFfJUU1JTg4JUE5JUU3JTk0JUE4UEhQJUU1JUFGJUE2JUU0JUJEJTlDJUU3JTk1JTk5JUU4JUE4JTgwJUU2JTlEJUJGXyVFNiU5NiVCMCVFNSVBMiU5RSVFNSU4QSU5RiVFOCU4MyVCRCVFNyVBRiU4Ny5tZA==">week11 實作的留言板<i class="fa fa-external-link-alt"></i></span></li>
<li>可計算資料的總數量、目前頁數，或跳到指定的頁數</li>
<li>缺點：當資料量大時執行緩慢</li>
</ul>
</li>
</ul>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 跳過 5 筆資料，回傳接下來的 5 筆資料</span>
<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> comments <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> id <span class="token keyword">DESC</span> <span class="token keyword">LIMIT</span> <span class="token number">5</span> <span class="token keyword">OFFSET</span> <span class="token number">5</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<ul>
<li><p>Cursor-based pagination</p>
<ul>
<li>基於 Cursor（指標）的分頁</li>
<li>可透過指定明確的起始點（Pointer）來回傳資料，例如：id 或 created_at</li>
<li>缺點：沒有「總和」和「頁數」的概念</li>
</ul>
</li>
</ul>
<h4 id="相關函式"><a href="#相關函式" class="headerlink" title="相關函式"></a>相關函式</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 再包一層 function 避免重複輸入同樣的程式碼</span>
<span class="token keyword">function</span> <span class="token function">getComments</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">const</span> commentDOM <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'.comments'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'.load-more'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hide</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">// 點擊後就隱藏按鈕</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>isEnd<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span>          <span class="token comment">// 若拿完資料就直接返回</span>
  <span class="token punctuation">&#125;</span>
  <span class="token function">getCommentsAPI</span><span class="token punctuation">(</span>siteKey<span class="token punctuation">,</span> lastId<span class="token punctuation">,</span> <span class="token parameter">data</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>data<span class="token punctuation">.</span>ok<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token function">alert</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token comment">// 若 request 成功讀取資料</span>
    <span class="token keyword">const</span> comments <span class="token operator">=</span> data<span class="token punctuation">.</span>discussions<span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> comment <span class="token keyword">of</span> comments<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token function">appendCommentToDOM</span><span class="token punctuation">(</span>commentDOM<span class="token punctuation">,</span> comment<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">let</span> length <span class="token operator">=</span> comments<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
    <span class="token comment">// 沒有 lastId: 初始頁面的留言若 &lt; 5 直接返回</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>lastId <span class="token operator">&amp;&amp;</span> length <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">return</span> <span class="token punctuation">(</span>comments<span class="token punctuation">.</span>length <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span> 
    <span class="token comment">// 有 lastId: 若拿完資料就隱藏按鈕</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>length <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      isEnd <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
      <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'.load-more'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hide</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
      lastId <span class="token operator">=</span> comments<span class="token punctuation">[</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>id<span class="token punctuation">;</span>
      <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'.comments'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>loadMoreButtonHTML<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 新增 "載入更多" 按鈕</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>參考資料：</p>
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9qaWVwZW5nLm1lLzIwMTkvMTIvMDYvbGVhcm5pbmctaG93LXRvLWltcGxlbWVudC1ncmFwaHFsLXBhZ2luYXRpb24=">深入淺出 GraphQL Pagination 實作<i class="fa fa-external-link-alt"></i></span></li>
</ul>
<hr>
<h3 id="debug"><a href="#debug" class="headerlink" title="debug"></a>debug</h3><h4 id="錯誤一-Reason"><a href="#錯誤一-Reason" class="headerlink" title="錯誤一 Reason"></a>錯誤一 Reason</h4><pre class="line-numbers language-none"><code class="language-none">Reason: CORS header &#39;Access-Control-Allow-Origin&#39; missing<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ul>
<li>原因：缺少表頭 <code>header(&#39;Access-Control-Allow-Origin: *&#39;);</code></li>
<li>實際情況：可能是 php 檔語法上有錯誤，才會出現這個錯誤訊息</li>
</ul>
<h4 id="錯誤二-TypeError"><a href="#錯誤二-TypeError" class="headerlink" title="錯誤二 TypeError"></a>錯誤二 TypeError</h4><pre class="line-numbers language-none"><code class="language-none">TypeError: Cannot read property &#39;replace&#39; of undefined<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p><img src="https://i.imgur.com/t5Me7wL.png"></p>
<ul>
<li>原因：要進行跳脫的值為 null</li>
<li>解決辦法：先判斷該值是否為空再進行 replace 操作</li>
</ul>
<p>參考網站：<span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2tfcHJpbmNlL2FydGljbGUvZGV0YWlscy84OTM1MDEyND91dG1fbWVkaXVtPWRpc3RyaWJ1dGUucGNfcmVsZXZhbnQubm9uZS10YXNrLWJsb2ctQmxvZ0NvbW1lbmRGcm9tTWFjaGluZUxlYXJuUGFpMi0xLmNoYW5uZWxfcGFyYW0mZGVwdGhfMS11dG1fc291cmNlPWRpc3RyaWJ1dGUucGNfcmVsZXZhbnQubm9uZS10YXNrLWJsb2ctQmxvZ0NvbW1lbmRGcm9tTWFjaGluZUxlYXJuUGFpMi0xLmNoYW5uZWxfcGFyYW0=">Cannot read property ‘replace’ of undefined<i class="fa fa-external-link-alt"></i></span></p>
]]></content>
      <categories>
        <category>Back-End</category>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>Back-End</tag>
        <tag>PHP</tag>
      </tags>
  </entry>
  <entry>
    <title>[week 22] React：用 SPA 架構實作一個部落格（一）- Router</title>
    <url>/react-router/</url>
    <content><![CDATA[<blockquote>
<p>本篇為 <span class="exturl" data-url="aHR0cHM6Ly9saWRlbXkuY29tL3AvZmUzMDItcmVhY3QtaG9va3M=">[FE302] React 基礎 - hooks 版本<i class="fa fa-external-link-alt"></i></span> 這門課程的學習筆記。如有錯誤歡迎指正！</p>
</blockquote>
<blockquote>
<p>參考文章：<span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmh1bGkudHcvMjAxOS8wOS8xOC9zcGEtY29tbW9uLXByb2JsZW0tYWJvdXQtcm91dGVyLw==">淺談新手在學習 SPA 時的常見問題：以 Router 為例<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
<span id="more"></span>

<p>之前實作的留言板只有單一頁面，但隨著專案規模越大，需要藉由路由來渲染不同頁面時，就需要路由進行配置與管理，而 react-router-dom 套件就有提供這個功能。</p>
<p>接下來我們使用 React 搭配 Router，實作一個 SPA（Single Page Application）架構的部落格。</p>
<hr>
<h2 id="React-Router：管理專案路由"><a href="#React-Router：管理專案路由" class="headerlink" title="React Router：管理專案路由"></a>React Router：管理專案路由</h2><p>可參考<span class="exturl" data-url="aHR0cHM6Ly9yZWFjdHJvdXRlci5jb20vd2ViL2d1aWRlcy9xdWljay1zdGFydA==">官方文件<i class="fa fa-external-link-alt"></i></span>，我們可透過 React Router 套件來管理 URL 路由。</p>
<h3 id="安裝-react-router-dom"><a href="#安裝-react-router-dom" class="headerlink" title="安裝 react-router-dom"></a>安裝 react-router-dom</h3><pre class="line-numbers language-none"><code class="language-none">$ npm install react-router-dom<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h3 id="用-Component-的概念設計-Router"><a href="#用-Component-的概念設計-Router" class="headerlink" title="用 Component 的概念設計 Router"></a>用 Component 的概念設計 Router</h3><p>React Router 同樣是要用寫 React 方式去理解，也就是以 Component 的概念去設計一個 Router。</p>
<p>這其實和我們之前寫 Back-End 時很不一樣，例如 <code>app.get(&#39;/comment&#39;)</code> ，代表讀取留言的路由。</p>
<p>可參考<span class="exturl" data-url="aHR0cHM6Ly9yZWFjdHJvdXRlci5jb20vd2ViL2V4YW1wbGUvYmFzaWM=">官方<i class="fa fa-external-link-alt"></i></span>提供的範例：</p>
<iframe src="https://codesandbox.io/embed/react-router-basic-bnpsd?fontsize=14&hidenavigation=1&theme=dark"
     style="width:100%; height:300px; border:0; border-radius: 4px; overflow:hidden;"
     title="React Router - Basic"
     allow="accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking"
     sandbox="allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts"
   ></iframe>

<p>以下是上方範例的程式碼，透過連結改變的網址，由 Router 決定要 render 的畫面：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">BasicExample</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token operator">&lt;</span>Router<span class="token operator">></span>
      <span class="token operator">&lt;</span>div<span class="token operator">></span>
<span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>    點選連結改變網址    <span class="token operator">--</span><span class="token operator">></span>
        <span class="token operator">&lt;</span>ul<span class="token operator">></span>
          <span class="token operator">&lt;</span>li<span class="token operator">></span>
            <span class="token operator">&lt;</span>Link to<span class="token operator">=</span><span class="token string">"/"</span><span class="token operator">></span>Home<span class="token operator">&lt;</span><span class="token operator">/</span>Link<span class="token operator">></span>
          <span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>
          <span class="token operator">&lt;</span>li<span class="token operator">></span>
            <span class="token operator">&lt;</span>Link to<span class="token operator">=</span><span class="token string">"/about"</span><span class="token operator">></span>About<span class="token operator">&lt;</span><span class="token operator">/</span>Link<span class="token operator">></span>
          <span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>
          <span class="token operator">&lt;</span>li<span class="token operator">></span>
            <span class="token operator">&lt;</span>Link to<span class="token operator">=</span><span class="token string">"/dashboard"</span><span class="token operator">></span>Dashboard<span class="token operator">&lt;</span><span class="token operator">/</span>Link<span class="token operator">></span>
          <span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>
        <span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">></span>

        <span class="token operator">&lt;</span>hr <span class="token operator">/</span><span class="token operator">></span>
<span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 根據不同網址 render 相對應頁面 <span class="token operator">--</span><span class="token operator">></span>
        <span class="token operator">&lt;</span>Switch<span class="token operator">></span>
          <span class="token operator">&lt;</span>Route exact path<span class="token operator">=</span><span class="token string">"/"</span><span class="token operator">></span>
            <span class="token operator">&lt;</span>Home <span class="token operator">/</span><span class="token operator">></span>
          <span class="token operator">&lt;</span><span class="token operator">/</span>Route<span class="token operator">></span>
          <span class="token operator">&lt;</span>Route path<span class="token operator">=</span><span class="token string">"/about"</span><span class="token operator">></span>
            <span class="token operator">&lt;</span>About <span class="token operator">/</span><span class="token operator">></span>
          <span class="token operator">&lt;</span><span class="token operator">/</span>Route<span class="token operator">></span>
          <span class="token operator">&lt;</span>Route path<span class="token operator">=</span><span class="token string">"/dashboard"</span><span class="token operator">></span>
            <span class="token operator">&lt;</span>Dashboard <span class="token operator">/</span><span class="token operator">></span>
          <span class="token operator">&lt;</span><span class="token operator">/</span>Route<span class="token operator">></span>
        <span class="token operator">&lt;</span><span class="token operator">/</span>Switch<span class="token operator">></span>
      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>Router<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="BrowserRouter-vs-HashRouter"><a href="#BrowserRouter-vs-HashRouter" class="headerlink" title="BrowserRouter vs HashRouter"></a>BrowserRouter vs HashRouter</h3><p>而在引入 Router 時，其實有兩種方式：</p>
<ul>
<li>BrowserRouter：直接在網址帶入路徑，但這種方式在 GitHub Pages 上其實會出現問題</li>
</ul>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span>
  BrowserRouter <span class="token keyword">as</span> Router<span class="token punctuation">,</span>
  Switch<span class="token punctuation">,</span>
  Route<span class="token punctuation">,</span>
  Link
<span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"react-router-dom"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>如果是從首頁點選 dashboard，前端就會透過 JavaScript 提供的 API 把網址改成 /dashboard，能夠正常 render 畫面。</p>
<p>但如果是直接在網址後帶上 /dashboard，GitHub Pages 會去找 dashboard 資料夾底下的 index.html，此時瀏覽器會直接發 request 到該頁面，發生不如預期的錯誤。</p>
<ul>
<li>HashRouter：會在網址加上 <code>/#/</code>，瀏覽器就會去載入 <code>#</code> 符號之前的網址，即可改善上述問題</li>
</ul>
<pre class="line-numbers language-none"><code class="language-none">Home  https:&#x2F;&#x2F;bnpsd.csb.app&#x2F;#&#x2F;
dashboard  https:&#x2F;&#x2F;bnpsd.csb.app&#x2F;#&#x2F;dashboard<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>有了以上關於 Router 的基本概念後，就來繼續實作專案吧！</p>
<h3 id="實作：管理專案-Router"><a href="#實作：管理專案-Router" class="headerlink" title="實作：管理專案 Router"></a>實作：管理專案 Router</h3><h4 id="1-App-js：根據不同-Component-管理路由"><a href="#1-App-js：根據不同-Component-管理路由" class="headerlink" title="1. App.js：根據不同 Component 管理路由"></a>1. App.js：根據不同 Component 管理路由</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> useState<span class="token punctuation">,</span> useEffect <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> styled <span class="token keyword">from</span> <span class="token string">"styled-components"</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> PropTypes <span class="token keyword">from</span> <span class="token string">"prop-types"</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> LoginPage <span class="token keyword">from</span> <span class="token string">"../../pages/LoginPage"</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> HomePage <span class="token keyword">from</span> <span class="token string">"../../pages/HomePage"</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> Header <span class="token keyword">from</span> <span class="token string">"../Header"</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> HashRouter <span class="token keyword">as</span> Router<span class="token punctuation">,</span> Switch<span class="token punctuation">,</span> Route <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"react-router-dom"</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> Root <span class="token operator">=</span> styled<span class="token punctuation">.</span>div<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token operator">&lt;</span>Root<span class="token operator">></span>
      <span class="token punctuation">&#123;</span><span class="token comment">/* Router: 包在最外層 */</span><span class="token punctuation">&#125;</span>
      <span class="token operator">&lt;</span>Router<span class="token operator">></span>
        <span class="token punctuation">&#123;</span><span class="token comment">/* 導覽列: 共同區塊 */</span><span class="token punctuation">&#125;</span>
        <span class="token operator">&lt;</span>Header <span class="token operator">/</span><span class="token operator">></span>
        <span class="token punctuation">&#123;</span><span class="token comment">/* Switch: 確保只會匹配第一個符合網址列的路由 */</span><span class="token punctuation">&#125;</span>
        <span class="token operator">&lt;</span>Switch<span class="token operator">></span>
          <span class="token punctuation">&#123;</span><span class="token comment">/* exact path: 代表完整匹配；若只有 path 是部分匹配 */</span><span class="token punctuation">&#125;</span>
          <span class="token operator">&lt;</span>Route exact path<span class="token operator">=</span><span class="token string">"/"</span><span class="token operator">></span>
            <span class="token operator">&lt;</span>HomePage <span class="token operator">/</span><span class="token operator">></span>
          <span class="token operator">&lt;</span><span class="token operator">/</span>Route<span class="token operator">></span>
          <span class="token operator">&lt;</span>Route exact path<span class="token operator">=</span><span class="token string">"/login"</span><span class="token operator">></span>
            <span class="token operator">&lt;</span>LoginPage <span class="token operator">/</span><span class="token operator">></span>
          <span class="token operator">&lt;</span><span class="token operator">/</span>Route<span class="token operator">></span>
        <span class="token operator">&lt;</span><span class="token operator">/</span>Switch<span class="token operator">></span>
      <span class="token operator">&lt;</span><span class="token operator">/</span>Router<span class="token operator">></span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>Root<span class="token operator">></span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ol start="2">
<li>整理專案結構</li>
</ol>
<ul>
<li>src<ul>
<li>components<ul>
<li>App</li>
<li>Header 導覽列（共同區塊）</li>
</ul>
</li>
<li>pages<ul>
<li>HomePage 首頁</li>
<li>LoginPage 登入頁面</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>以建立 HomePage Component 為例，Header 和 LoginPage 也是用這個模式：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// HomePage.js</span>
<span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> useState<span class="token punctuation">,</span> useEffect <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">HomePage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token operator">&lt;</span>div<span class="token operator">></span>Home Page<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>而為了調整專案結構，需在 index.js 引入並引出 HomePage.js，可參考<span class="exturl" data-url="aHR0cHM6Ly9oYWNrbWQuaW8vQEhlaWRpLUxpdS9ub3RlLWZlMzAyLXJlYWN0LWJvYXJk">上篇筆記<i class="fa fa-external-link-alt"></i></span>：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// index.js</span>
<span class="token keyword">export</span> <span class="token punctuation">&#123;</span> <span class="token keyword">default</span> <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"./HomePage"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>執行結果如下，可透過不同路由 render 相對應的頁面，其中 Header 是共同區塊不會變動：</p>
<p><img src="https://i.imgur.com/ff3aVd1.png"></p>
<p>參考資料：</p>
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmh1bGkudHcvMjAxOS8wOS8xOC9zcGEtY29tbW9uLXByb2JsZW0tYWJvdXQtcm91dGVyLw==">淺談新手在學習 SPA 時的常見問題：以 Router 為例<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9wamNoZW5kZXIuYmxvZ3Nwb3QuY29tLzIwMTgvMTEvcmVhY3QtcmVhY3Qtcm91dGVyLWR5bmFtaWMtYnJlYWRjcnVtYi5odG1s">[React] 搭配 React Router 打造一個動態麵包屑（dynamic breadcrumb）<i class="fa fa-external-link-alt"></i></span></li>
</ul>
<hr>
<h2 id="實作：從切板開始！"><a href="#實作：從切板開始！" class="headerlink" title="實作：從切板開始！"></a>實作：從切板開始！</h2><h2 id="1-切板與整合-react-router"><a href="#1-切板與整合-react-router" class="headerlink" title="1. 切板與整合 react router"></a>1. 切板與整合 react router</h2><p>瞭解到如何管理路由之後，再來就是透過 component 切出想要的畫面。</p>
<p>首先進行 Header component 導覽列連結的部分。</p>
<h3 id="方法一：透過-Link、useLoction"><a href="#方法一：透過-Link、useLoction" class="headerlink" title="方法一：透過 Link、useLoction"></a>方法一：透過 Link、useLoction</h3><ul>
<li>使用 useLocation 讀取當前位置，再透過 $active 這個屬性判斷符合哪個路徑，render 出相對應畫面：</li>
</ul>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 引入使用 Link, useLocation</span>
<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> Link<span class="token punctuation">,</span> useLocation <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"react-router-dom"</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> location <span class="token operator">=</span> <span class="token function">useLocation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token operator">&lt;</span>Nav to<span class="token operator">=</span><span class="token string">"/"</span> $active<span class="token operator">=</span><span class="token punctuation">&#123;</span>location<span class="token punctuation">.</span>pathname <span class="token operator">===</span> <span class="token string">"/"</span><span class="token punctuation">&#125;</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>程式碼如下：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> useState<span class="token punctuation">,</span> useEffect <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> styled <span class="token keyword">from</span> <span class="token string">"styled-components"</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> Link<span class="token punctuation">,</span> useLocation <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"react-router-dom"</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> HeaderContainer <span class="token operator">=</span> styled<span class="token punctuation">.</span>div<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">
  height: 58px;
  display: flex;
  justify-content: space-between;
  align-items: center;
  position: fixed;
  top: 0;
  left: 0;
  right: 0;
  border-bottom: 1px solid rgba(0, 0, 0, 0.2);
  box-shadow: 0px 0px 6px rgb(199, 197, 197);
  padding: 0px 32px;
</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>

<span class="token keyword">const</span> Brand <span class="token operator">=</span> styled<span class="token punctuation">.</span>h1<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">
  margin: 0;
</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>

<span class="token keyword">const</span> NavbarList <span class="token operator">=</span> styled<span class="token punctuation">.</span>ul<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">
  display: flex;
  align-items: center;
  list-style-type: none;
  text-decoration: none;
  margin: 0;
  padding: 0;
</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>

<span class="token keyword">const</span> Nav <span class="token operator">=</span> <span class="token function">styled</span><span class="token punctuation">(</span>Link<span class="token punctuation">)</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">
  height: 58px;
  width: 100px;
  display: flex;
  justify-content: center;
  align-items: center;
  text-decoration: none;
  color: #666;

  </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token operator">=></span>
    props<span class="token punctuation">.</span>$active <span class="token operator">&amp;&amp;</span>
    <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">
      background: #eee;
      color: #222;
  </span><span class="token template-punctuation string">`</span></span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">
</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>

<span class="token keyword">const</span> LeftNavbar <span class="token operator">=</span> styled<span class="token punctuation">.</span>div<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">
  display: flex;
  align-items: center;

  /* 代表在 LeftNavbar 底下的 NavbarList */
  </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>NavbarList<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> &#123;
    margin-left: 32px;
  &#125;
</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">Header</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// 可拿到目前路徑</span>
  <span class="token keyword">const</span> location <span class="token operator">=</span> <span class="token function">useLocation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token operator">&lt;</span>HeaderContainer<span class="token operator">></span>
      <span class="token operator">&lt;</span>LeftNavbar<span class="token operator">></span>
        <span class="token operator">&lt;</span>Brand<span class="token operator">></span>
          <span class="token operator">&lt;</span>Link exact to<span class="token operator">=</span><span class="token string">"/"</span><span class="token operator">></span>
            React 部落格
          <span class="token operator">&lt;</span><span class="token operator">/</span>Link<span class="token operator">></span>
        <span class="token operator">&lt;</span><span class="token operator">/</span>Brand<span class="token operator">></span>
        <span class="token operator">&lt;</span>NavbarList<span class="token operator">></span>
          <span class="token operator">&lt;</span>Nav to<span class="token operator">=</span><span class="token string">"/"</span> $active<span class="token operator">=</span><span class="token punctuation">&#123;</span>location<span class="token punctuation">.</span>pathname <span class="token operator">===</span> <span class="token string">"/"</span><span class="token punctuation">&#125;</span><span class="token operator">></span>
            首頁
          <span class="token operator">&lt;</span><span class="token operator">/</span>Nav<span class="token operator">></span>
          <span class="token operator">&lt;</span>Nav to<span class="token operator">=</span><span class="token string">"/new-post"</span> $active<span class="token operator">=</span><span class="token punctuation">&#123;</span>location<span class="token punctuation">.</span>pathname <span class="token operator">===</span> <span class="token string">"/new-post"</span><span class="token punctuation">&#125;</span><span class="token operator">></span>
            發布文章
          <span class="token operator">&lt;</span><span class="token operator">/</span>Nav<span class="token operator">></span>
        <span class="token operator">&lt;</span><span class="token operator">/</span>NavbarList<span class="token operator">></span>
      <span class="token operator">&lt;</span><span class="token operator">/</span>LeftNavbar<span class="token operator">></span>
      <span class="token operator">&lt;</span>NavbarList<span class="token operator">></span>
        <span class="token operator">&lt;</span>Nav to<span class="token operator">=</span><span class="token string">"/login"</span> $active<span class="token operator">=</span><span class="token punctuation">&#123;</span>location<span class="token punctuation">.</span>pathname <span class="token operator">===</span> <span class="token string">"/login"</span><span class="token punctuation">&#125;</span><span class="token operator">></span>
          登入
        <span class="token operator">&lt;</span><span class="token operator">/</span>Nav<span class="token operator">></span>
      <span class="token operator">&lt;</span><span class="token operator">/</span>NavbarList<span class="token operator">></span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>HeaderContainer<span class="token operator">></span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="方法二：NavLink"><a href="#方法二：NavLink" class="headerlink" title="方法二：NavLink"></a>方法二：NavLink</h3><p>除了使用 useLocation 來判斷當前路徑，React Router 還有提供 <span class="exturl" data-url="aHR0cHM6Ly9yZWFjdHJvdXRlci5jb20vd2ViL2FwaS9OYXZMaW5r">NavLink<i class="fa fa-external-link-alt"></i></span> 這個特殊的 Component，具有以下屬性：</p>
<ul>
<li>activeClassName(string)：設置選中樣式，預設為 active</li>
<li>activeStyle(object)：當元素被選中時，為此元素添加樣式</li>
<li>exact(bool)：為 true 時，只有當完全符合時才會應用</li>
<li>isActive(func)：判斷連結是否執行額外功能</li>
</ul>
<p>參考資料：</p>
<ul>
<li><a href="https://www.jianshu.com/p/fcb87e3b4da4"><NavLink>的介紹與使用</a></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzczMjUxMi9hcnRpY2xlL2RldGFpbHMvMTAzMTgyODMxP3V0bV9tZWRpdW09ZGlzdHJpYnV0ZS5wY19yZWxldmFudF90MC5ub25lLXRhc2stYmxvZy1CbG9nQ29tbWVuZEZyb21CYWlkdS0xLmNvbnRyb2wmZGVwdGhfMS11dG1fc291cmNlPWRpc3RyaWJ1dGUucGNfcmVsZXZhbnRfdDAubm9uZS10YXNrLWJsb2ctQmxvZ0NvbW1lbmRGcm9tQmFpZHUtMS5jb250cm9s">React手册之Link和NaviLink区别<i class="fa fa-external-link-alt"></i></span></li>
</ul>
<p>可透過 activeClassName 屬性或 inline style 行內樣式，來表示 NavLink 有無被選取，官方提供的範例如下：</p>
<h4 id="引入使用-NavLink"><a href="#引入使用-NavLink" class="headerlink" title="引入使用 NavLink"></a>引入使用 NavLink</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> NavLink <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'react-router-dom'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h4 id="1-一般寫法"><a href="#1-一般寫法" class="headerlink" title="1. 一般寫法"></a>1. 一般寫法</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>NavLink to<span class="token operator">=</span><span class="token string">"/about"</span><span class="token operator">></span>About<span class="token operator">&lt;</span><span class="token operator">/</span>NavLink<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h4 id="2-activeClassName-string"><a href="#2-activeClassName-string" class="headerlink" title="2. activeClassName: string"></a>2. activeClassName: string</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>NavLink to<span class="token operator">=</span><span class="token string">"/faq"</span> activeClassName<span class="token operator">=</span><span class="token string">"selected"</span><span class="token operator">></span>
  FAQs
<span class="token operator">&lt;</span><span class="token operator">/</span>NavLink<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<h4 id="3-activeStyle-object"><a href="#3-activeStyle-object" class="headerlink" title="3. activeStyle: object"></a>3. activeStyle: object</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>NavLink
  to<span class="token operator">=</span><span class="token string">"/faq"</span>
  activeStyle<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>
    fontWeight<span class="token operator">:</span> <span class="token string">"bold"</span><span class="token punctuation">,</span>
    color<span class="token operator">:</span> <span class="token string">"red"</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>
<span class="token operator">></span>
  FAQs
<span class="token operator">&lt;</span><span class="token operator">/</span>NavLink<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>但在實際應用的時候，有遇到個問題，就是如果想搭配 style-component 使用，會不知該如何傳入 activeClassName 這個 props！</p>
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvMzQ0MTgyNTQvaG93LWRvLWktYWRkLWFuLWFjdGl2ZS1jbGFzcy10by1hLWxpbmstZnJvbS1yZWFjdC1yb3V0ZXI=">How do I add an active class to a Link from React Router?<i class="fa fa-external-link-alt"></i></span></li>
</ul>
<p>針對如何在 NavLink 組件中使用 activeClassName 屬性，參考一些網路上的範例進行改寫，以下示範兩種作法：</p>
<h4 id="1-透過-styled-component-在-NavLink-component，使用-attr-自訂屬性-activeClassName："><a href="#1-透過-styled-component-在-NavLink-component，使用-attr-自訂屬性-activeClassName：" class="headerlink" title="1. 透過 styled component 在 NavLink component，使用 .attr() 自訂屬性 activeClassName："></a>1. 透過 styled component 在 NavLink component，使用 .attr() 自訂屬性 activeClassName：</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> activeClassName <span class="token operator">=</span> <span class="token string">'nav-item-active'</span>

<span class="token keyword">const</span> StyledLink <span class="token operator">=</span> <span class="token function">styled</span><span class="token punctuation">(</span>NavLink<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">attrs</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> activeClassName <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">

  &amp;.</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>activeClassName<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> &#123;
    background: #eee;
  &#125;
</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>

<span class="token comment">// ...</span>
      <span class="token operator">&lt;</span>NavbarList<span class="token operator">></span>
        <span class="token operator">&lt;</span>StyledLink exact to<span class="token operator">=</span><span class="token string">"/"</span><span class="token operator">></span>首頁<span class="token operator">&lt;</span><span class="token operator">/</span>StyledLink<span class="token operator">></span>
        <span class="token operator">&lt;</span>StyledLink to<span class="token operator">=</span><span class="token string">"/new-post"</span><span class="token operator">></span>發布文章<span class="token operator">&lt;</span><span class="token operator">/</span>StyledLink<span class="token operator">></span>
      <span class="token operator">&lt;</span><span class="token operator">/</span>NavbarList<span class="token operator">></span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>LeftNavbar<span class="token operator">></span>
    <span class="token operator">&lt;</span>NavbarList<span class="token operator">></span>
      <span class="token operator">&lt;</span>StyledLink to<span class="token operator">=</span><span class="token string">"/login"</span><span class="token operator">></span>登入<span class="token operator">&lt;</span><span class="token operator">/</span>StyledLink<span class="token operator">></span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>NavbarList<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>可參考下方範例：</p>
<iframe src="https://codesandbox.io/embed/34z5152z1q?fontsize=14&hidenavigation=1&theme=dark"
     style="width:100%; height:300px; border:0; border-radius: 4px; overflow:hidden;"
     title="Styling React Router - NavLink using Styled-Components "
     allow="accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking"
     sandbox="allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts"
   ></iframe>

<h4 id="2-將-activeClassName-視為一個-props，當-NavLink-被選中時，才會加上-activeClassName-屬性："><a href="#2-將-activeClassName-視為一個-props，當-NavLink-被選中時，才會加上-activeClassName-屬性：" class="headerlink" title="2. 將 activeClassName 視為一個 props，當 NavLink 被選中時，才會加上 activeClassName 屬性："></a>2. 將 activeClassName 視為一個 props，當 NavLink 被選中時，才會加上 activeClassName 屬性：</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> StyledLink <span class="token operator">=</span> <span class="token function">styled</span><span class="token punctuation">(</span>NavLink<span class="token punctuation">)</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">

&amp;.</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token operator">=></span> props<span class="token punctuation">.</span>activeClassName<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> &#123;
    background: #eee;
  &#125;
</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">Header</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token operator">&lt;</span>HeaderContainer<span class="token operator">></span>
      <span class="token operator">&lt;</span>LeftNavbar<span class="token operator">></span>
        <span class="token operator">&lt;</span>Brand<span class="token operator">></span>
          <span class="token operator">&lt;</span>Link exact to<span class="token operator">=</span><span class="token string">"/"</span><span class="token operator">></span>
            React 部落格
          <span class="token operator">&lt;</span><span class="token operator">/</span>Link<span class="token operator">></span>
        <span class="token operator">&lt;</span><span class="token operator">/</span>Brand<span class="token operator">></span>
        <span class="token operator">&lt;</span>NavbarList<span class="token operator">></span>
          <span class="token operator">&lt;</span>StyledLink exact to<span class="token operator">=</span><span class="token string">"/"</span> activeClassName<span class="token operator">=</span><span class="token string">"active"</span><span class="token operator">></span>
            首頁
          <span class="token operator">&lt;</span><span class="token operator">/</span>StyledLink<span class="token operator">></span>
          <span class="token operator">&lt;</span>StyledLink to<span class="token operator">=</span><span class="token string">"/new-post"</span> activeClassName<span class="token operator">=</span><span class="token string">"active"</span><span class="token operator">></span>
            發布文章
          <span class="token operator">&lt;</span><span class="token operator">/</span>StyledLink<span class="token operator">></span>
        <span class="token operator">&lt;</span><span class="token operator">/</span>NavbarList<span class="token operator">></span>
      <span class="token operator">&lt;</span><span class="token operator">/</span>LeftNavbar<span class="token operator">></span>
      <span class="token operator">&lt;</span>NavbarList<span class="token operator">></span>
        <span class="token operator">&lt;</span>StyledLink to<span class="token operator">=</span><span class="token string">"/login"</span> activeClassName<span class="token operator">=</span><span class="token string">"active"</span><span class="token operator">></span>
          登入
        <span class="token operator">&lt;</span><span class="token operator">/</span>StyledLink<span class="token operator">></span>
      <span class="token operator">&lt;</span><span class="token operator">/</span>NavbarList<span class="token operator">></span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>HeaderContainer<span class="token operator">></span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>其他參考資料：</p>
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9jb2Rlc2FuZGJveC5pby9zL3pyOHhtMDkxMHA/ZmlsZT0vZXhhbXBsZS5qcw==">React Router - Basic<i class="fa fa-external-link-alt"></i></span>：使用 isActive 屬性來判斷要 render 哪個 component</li>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vd2VucnVvL3AvMTAzMjE0NTYuaHRtbA==">React 中 Link 和 NavLink 组件 activeClassName、activeStyle 属性不生效的问题<i class="fa fa-external-link-alt"></i></span></li>
</ul>
<h2 id="實作：文章列表頁面"><a href="#實作：文章列表頁面" class="headerlink" title="實作：文章列表頁面"></a>實作：文章列表頁面</h2><p>測試用的 API 同樣參考：Lidemy 學生專用 API Server，部落格要串接的是 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0xpZGVteS9saWRlbXktc3R1ZGVudC1qc29uLWFwaS1zZXJ2ZXIjcG9zdHM=">Posts API<i class="fa fa-external-link-alt"></i></span>，資料結構如下：</p>
<p>URL：<span class="exturl" data-url="aHR0cHM6Ly9zdHVkZW50LWpzb24tYXBpLmxpZGVteS5tZS9wb3N0cz91c2VySWQ9MQ==">https://student-json-api.lidemy.me/posts?userId=1<i class="fa fa-external-link-alt"></i></span></p>
<p><img src="https://i.imgur.com/B6N7n53.png"></p>
<h3 id="1-串連-API：拿取所有-posts"><a href="#1-串連-API：拿取所有-posts" class="headerlink" title="1. 串連 API：拿取所有 posts"></a>1. 串連 API：拿取所有 posts</h3><p>通常會在 src 路徑底下，新增一個 WebAPI.js 專門用來管理串連 API 相關程式碼。</p>
<p>如下方程式碼，使用 fetch 串接 API 再進行資料處理：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token constant">BASE_URL</span> <span class="token operator">=</span> <span class="token string">"https://student-json-api.lidemy.me"</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">getPosts</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token constant">BASE_URL</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">/posts?_sort=createdAt&amp;_order=desc</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token operator">=></span>
    res<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="2-顯示文章標題-amp-時間"><a href="#2-顯示文章標題-amp-時間" class="headerlink" title="2. 顯示文章標題 &amp; 時間"></a>2. 顯示文章標題 &amp; 時間</h3><p>在文章列表頁面，我們希望能夠顯示文章標題（title）和時間（createdAt）這兩個資訊：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// HomePage.js</span>

<span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> useState<span class="token punctuation">,</span> useEffect <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> styled <span class="token keyword">from</span> <span class="token string">"styled-components"</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> PropTypes <span class="token keyword">from</span> <span class="token string">"prop-types"</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> Link <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"react-router-dom"</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> getPosts <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"../../WebAPI"</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> Root <span class="token operator">=</span> styled<span class="token punctuation">.</span>div<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">
  max-width: 80%;
  margin: 0 auto;
</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>

<span class="token keyword">const</span> PostContainer <span class="token operator">=</span> styled<span class="token punctuation">.</span>div<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">
  border-bottom: 1px solid rgba(0, 0, 0, 0.3);
  padding: 16px;
  display: flex;
  justify-content: space-between;
  align-items: center;
</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>

<span class="token keyword">const</span> PostTitle <span class="token operator">=</span> <span class="token function">styled</span><span class="token punctuation">(</span>Link<span class="token punctuation">)</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">
  font-size: 24px;
  color: #333;
  text-decoration: none;
</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>

<span class="token keyword">const</span> PostDate <span class="token operator">=</span> styled<span class="token punctuation">.</span>div<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">
  color: rgba(0, 0, 0, 0.8);
</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>

<span class="token comment">// PostList component: 顯示文章列表</span>
<span class="token keyword">function</span> <span class="token function">PostList</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">&#123;</span> post <span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token operator">&lt;</span>PostContainer<span class="token operator">></span>
      <span class="token operator">&lt;</span>PostTitle to<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">/posts/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>post<span class="token punctuation">.</span>id<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">&#125;</span><span class="token operator">></span><span class="token punctuation">&#123;</span>post<span class="token punctuation">.</span>title<span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>PostTitle<span class="token operator">></span>
      <span class="token operator">&lt;</span>PostDate<span class="token operator">></span><span class="token punctuation">&#123;</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>post<span class="token punctuation">.</span>createdAt<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toLocaleDateString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>PostDate<span class="token operator">></span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>PostContainer<span class="token operator">></span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

PostList<span class="token punctuation">.</span>propTypes <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  post<span class="token operator">:</span> PropTypes<span class="token punctuation">.</span>object<span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">HomePage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span>posts<span class="token punctuation">,</span> setPosts<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token function">getPosts</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">posts</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">setPosts</span><span class="token punctuation">(</span>posts<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token operator">&lt;</span>Root<span class="token operator">></span>
      <span class="token punctuation">&#123;</span>posts<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">post</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span>
        <span class="token operator">&lt;</span>PostList post<span class="token operator">=</span><span class="token punctuation">&#123;</span>post<span class="token punctuation">&#125;</span> <span class="token operator">/</span><span class="token operator">></span>
      <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>Root<span class="token operator">></span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>轉換時間格式</li>
</ul>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>post<span class="token punctuation">.</span>createdAt<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toLocaleDateString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ul>
<li>用 map() 處理 List 結構的資料：</li>
</ul>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">&#123;</span>posts<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">post</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span>
  <span class="token operator">&lt;</span>Post post<span class="token operator">=</span><span class="token punctuation">&#123;</span>post<span class="token punctuation">&#125;</span> <span class="token operator">/</span><span class="token operator">></span>
<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<ul>
<li>title 改用連結，引入 Link component 使用</li>
</ul>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> Link <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"react-router-dom"</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> PostTitle <span class="token operator">=</span> <span class="token function">styled</span><span class="token punctuation">(</span>Link<span class="token punctuation">)</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">
  font-size: 24px;
  color: #333;
  text-decoration: none;
</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>

<span class="token comment">// ...</span>
  <span class="token comment">// 用 to=&#123;&#125; 設定點擊導向的路由</span>
  <span class="token operator">&lt;</span>PostTitle to<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">/posts/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>post<span class="token punctuation">.</span>id<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">&#125;</span><span class="token operator">></span><span class="token punctuation">&#123;</span>post<span class="token punctuation">.</span>title<span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>PostTitle<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>結果如下：</p>
<p><img src="https://i.imgur.com/dny0n1U.png"></p>
<h2 id="實作：單一文章頁面"><a href="#實作：單一文章頁面" class="headerlink" title="實作：單一文章頁面"></a>實作：單一文章頁面</h2><h3 id="1-串聯-API：根據不同-id-拿取-post"><a href="#1-串聯-API：根據不同-id-拿取-post" class="headerlink" title="1. 串聯 API：根據不同 id 拿取 post"></a>1. 串聯 API：根據不同 id 拿取 post</h3><p>接著是單一文章頁面，當我們在 Router 使用動態參數來讀取個別資料時，會需要取得 URL 上的 id 值。</p>
<p>在 WebAPI.js 中，根據路由上不同 id 來拿取相對應的 post：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">getPost</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">id</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token constant">BASE_URL</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">/posts?id=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>id<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token operator">=></span> res<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<h3 id="2-useParams：抓取-URL-上的指定值"><a href="#2-useParams：抓取-URL-上的指定值" class="headerlink" title="2. useParams：抓取 URL 上的指定值"></a>2. useParams：抓取 URL 上的指定值</h3><p>透過 react-router 提供的 Hooks：<span class="exturl" data-url="aHR0cHM6Ly9yZWFjdHJvdXRlci5jb20vd2ViL2FwaS9Ib29rcy91c2VwYXJhbXM=">useParams<i class="fa fa-external-link-alt"></i></span> 就能更方便取得 id 值，而不需再透過 <code>props.match.params</code> 抓取 URL 路由的參數值。</p>
<p>以下是官方文件提供的範例，這裡指定的值就是 <code>&#123;slug&#125;</code>：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> ReactDOM <span class="token keyword">from</span> <span class="token string">"react-dom"</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">&#123;</span>
  BrowserRouter <span class="token keyword">as</span> Router<span class="token punctuation">,</span>
  Switch<span class="token punctuation">,</span>
  Route<span class="token punctuation">,</span>
  useParams
<span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"react-router-dom"</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">BlogPost</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// 指定參數值</span>
  <span class="token keyword">let</span> <span class="token punctuation">&#123;</span> slug <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token function">useParams</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token operator">&lt;</span>div<span class="token operator">></span>Now showing post <span class="token punctuation">&#123;</span>slug<span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>
  <span class="token operator">&lt;</span>Router<span class="token operator">></span>
    <span class="token operator">&lt;</span>Switch<span class="token operator">></span>
      <span class="token operator">&lt;</span>Route exact path<span class="token operator">=</span><span class="token string">"/"</span><span class="token operator">></span>
        <span class="token operator">&lt;</span>HomePage <span class="token operator">/</span><span class="token operator">></span>
      <span class="token operator">&lt;</span><span class="token operator">/</span>Route<span class="token operator">></span>
      <span class="token comment">// 抓取 URL 上的指定參數值</span>
      <span class="token operator">&lt;</span>Route path<span class="token operator">=</span><span class="token string">"/blog/:slug"</span><span class="token operator">></span>
        <span class="token operator">&lt;</span>BlogPost <span class="token operator">/</span><span class="token operator">></span>
      <span class="token operator">&lt;</span><span class="token operator">/</span>Route<span class="token operator">></span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>Switch<span class="token operator">></span>
  <span class="token operator">&lt;</span><span class="token operator">/</span>Router<span class="token operator">></span><span class="token punctuation">,</span>
  node
<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="3-App-js-設定路由"><a href="#3-App-js-設定路由" class="headerlink" title="3. App.js 設定路由"></a>3. App.js 設定路由</h4><p>新增 PostPage 和 NewPostPage 的路由，並在 src\pages 資料夾建立 pages component 引入使用：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 統一從 pages 的 index.js 引入</span>
<span class="token keyword">import</span> <span class="token punctuation">&#123;</span>
  HomePage<span class="token punctuation">,</span>
  NewPostPage<span class="token punctuation">,</span>
  PostPage<span class="token punctuation">,</span>
  LoginPage<span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"../../pages"</span><span class="token punctuation">;</span>

<span class="token comment">// ...</span>

  <span class="token operator">&lt;</span>Switch<span class="token operator">></span>
    <span class="token punctuation">&#123;</span><span class="token comment">/* exact path: 完整匹配 */</span><span class="token punctuation">&#125;</span>
    <span class="token operator">&lt;</span>Route exact path<span class="token operator">=</span><span class="token string">"/"</span><span class="token operator">></span>
      <span class="token operator">&lt;</span>HomePage <span class="token operator">/</span><span class="token operator">></span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>Route<span class="token operator">></span>
    <span class="token operator">&lt;</span>Route exact path<span class="token operator">=</span><span class="token string">"/posts/:id"</span><span class="token operator">></span>
      <span class="token operator">&lt;</span>PostPage <span class="token operator">/</span><span class="token operator">></span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>Route<span class="token operator">></span>
    <span class="token operator">&lt;</span>Route exact path<span class="token operator">=</span><span class="token string">"/new-post"</span><span class="token operator">></span>
      <span class="token operator">&lt;</span>NewPostPage <span class="token operator">/</span><span class="token operator">></span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>Route<span class="token operator">></span>
    <span class="token operator">&lt;</span>Route exact path<span class="token operator">=</span><span class="token string">"/login"</span><span class="token operator">></span>
      <span class="token operator">&lt;</span>LoginPage <span class="token operator">/</span><span class="token operator">></span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>Route<span class="token operator">></span>
  <span class="token operator">&lt;</span><span class="token operator">/</span>Switch<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>稍微整理專案結構，在 <code>src\pages</code> 建立 index.js 來統一處理 pages 的引入引出動作：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> HomePage <span class="token keyword">from</span> <span class="token string">"./HomePage"</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> LoginPage <span class="token keyword">from</span> <span class="token string">"./LoginPage"</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> PostPage <span class="token keyword">from</span> <span class="token string">"./PostPage"</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> NewPostPage <span class="token keyword">from</span> <span class="token string">"./NewPostPage"</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token punctuation">&#123;</span> HomePage<span class="token punctuation">,</span> LoginPage<span class="token punctuation">,</span> PostPage<span class="token punctuation">,</span> NewPostPage <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="4-實作-PostPage-js"><a href="#4-實作-PostPage-js" class="headerlink" title="4. 實作 PostPage.js"></a>4. 實作 PostPage.js</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> useState<span class="token punctuation">,</span> useEffect <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> styled <span class="token keyword">from</span> <span class="token string">"styled-components"</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> useParams <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"react-router-dom"</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> getPost <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"../../WebAPI"</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> PostContainer <span class="token operator">=</span> styled<span class="token punctuation">.</span>div<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">
  padding: 0 30px;
  max-width: 960px;
  margin: 8px auto;
</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>

<span class="token keyword">const</span> PostHeader <span class="token operator">=</span> styled<span class="token punctuation">.</span>div<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">
  margin-bottom: 16px;
  padding: 16px 0;
  border-bottom: 1px solid rgba(0, 0, 0, 0.1);
</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>

<span class="token keyword">const</span> PostTitle <span class="token operator">=</span> styled<span class="token punctuation">.</span>div<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">
  font-size: 36px;
  font-weight: 700;
</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>

<span class="token keyword">const</span> PostDate <span class="token operator">=</span> styled<span class="token punctuation">.</span>div<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">
  font-size: 16px;
  color: rgba(0, 0, 0, 0.4);
  margin-top: 16px;
</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>

<span class="token keyword">const</span> PostBody <span class="token operator">=</span> styled<span class="token punctuation">.</span>div<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">
  font-size: 20px;
  letter-spacing: 3px;
  line-height: 1.5;
</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">PostPage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span>post<span class="token punctuation">,</span> setPost<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> id <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token function">useParams</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token function">getPost</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">post</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">setPost</span><span class="token punctuation">(</span>post<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token operator">&lt;</span>PostContainer<span class="token operator">></span>
      <span class="token operator">&lt;</span>PostHeader<span class="token operator">></span>
        <span class="token punctuation">&#123;</span><span class="token comment">/* post &amp;&amp;: 確認陣列裡面有東西才會執行 */</span><span class="token punctuation">&#125;</span>
        <span class="token operator">&lt;</span>PostTitle<span class="token operator">></span><span class="token punctuation">&#123;</span>post <span class="token operator">&amp;&amp;</span> post<span class="token punctuation">.</span>title<span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>PostTitle<span class="token operator">></span>
        <span class="token operator">&lt;</span>PostDate<span class="token operator">></span>
          <span class="token punctuation">&#123;</span>post <span class="token operator">&amp;&amp;</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>post<span class="token punctuation">.</span>createdAt<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toLocaleString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span>
        <span class="token operator">&lt;</span><span class="token operator">/</span>PostDate<span class="token operator">></span>
      <span class="token operator">&lt;</span><span class="token operator">/</span>PostHeader<span class="token operator">></span>
      <span class="token operator">&lt;</span>PostBody<span class="token operator">></span><span class="token punctuation">&#123;</span>post <span class="token operator">&amp;&amp;</span> post<span class="token punctuation">.</span>body<span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>PostBody<span class="token operator">></span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>PostContainer<span class="token operator">></span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>用 useParams() 讀取網址列上的 id 值，並透過 useEffect 在 render 之後拿取資料，再以 setPost 來改變狀態：</li>
</ul>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token punctuation">[</span>post<span class="token punctuation">,</span> setPost<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token punctuation">&#123;</span> id <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token function">useParams</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token function">getPost</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">post</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">setPost</span><span class="token punctuation">(</span>post<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>需以 <code>post &amp;&amp;</code> 確認陣列裡面有東西才會執行，以 <code>post.title</code> 為例：</li>
</ul>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>PostTitle<span class="token operator">></span><span class="token punctuation">&#123;</span>post <span class="token operator">&amp;&amp;</span> post<span class="token punctuation">.</span>title<span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>PostTitle<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ul>
<li>顯示日期時間：</li>
</ul>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>post<span class="token punctuation">.</span>createdAt<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toLocaleString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment">// "2020/12/12 上午10:48:39"</span>

<span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>post<span class="token punctuation">.</span>createdAt<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toLocaleDateString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment">// "2020/12/12"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>結果如下：</p>
<p><img src="https://i.imgur.com/AromKKu.png"></p>
<hr>
<h2 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h2><p>到這邊我們已經完成專案基本架構，設定路由，以及顯示全部文章、顯示單篇文章的功能，下一篇要繼續學習如何在 React 實作登入機制。</p>
<ul>
<li>傳送門：<span class="exturl" data-url="aHR0cHM6Ly9oYWNrbWQuaW8vQEhlaWRpLUxpdS9ub3RlLWZlMzAyLXJlYWN0LWJsb2ctbG9naW4=">[week 21] React 實戰篇：用 SPA 架構實作一個部落格（二）<i class="fa fa-external-link-alt"></i></span></li>
</ul>
]]></content>
      <categories>
        <category>Front-End</category>
        <category>React</category>
      </categories>
      <tags>
        <tag>React</tag>
        <tag>Hooks</tag>
      </tags>
  </entry>
  <entry>
    <title>[week 21] React Hooks API：useEffect &amp; 實作一個自己的鉤子</title>
    <url>/react-useeffect/</url>
    <content><![CDATA[<blockquote>
<p>本篇為 <span class="exturl" data-url="aHR0cHM6Ly9saWRlbXkuY29tL3AvZmUzMDItcmVhY3QtaG9va3M=">[FE302] React 基礎 - hooks 版本<i class="fa fa-external-link-alt"></i></span> 這門課程的學習筆記。如有錯誤歡迎指正！</p>
</blockquote>
<p>在 React Hooks 當中，最重要的就是 useState 和 useEffect，若能學會如何使用這兩個 hook，對於 React 應用也會更容易上手。</p>
<span id="more"></span>
<hr>
<h2 id="初探-useEffect"><a href="#初探-useEffect" class="headerlink" title="初探 useEffect"></a>初探 useEffect</h2><blockquote>
<p>詳細可參考官方文件：<span class="exturl" data-url="aHR0cHM6Ly96aC1oYW50LnJlYWN0anMub3JnL2RvY3MvaG9va3MtZWZmZWN0Lmh0bWw=">使用 Effect Hook<i class="fa fa-external-link-alt"></i></span>。</p>
</blockquote>
<p>簡單來說，就是透過 useEffect 這個 hook，告訴 React「component 在 render 之後要做的事情」。</p>
<p>有別於一般的 hook 是傳值進去，userEffect 傳入的是 function，使用方法如下：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 從 react 引入使用useEffect</span>
<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> useEffect <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"執行完畢!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>就會在每次畫面 render 結束後執行 useEffect 傳入的 function：</p>
<p><img src="https://i.imgur.com/QJJIuOp.png"></p>
<p>但通常我們不會想要在每次 render 後都執行 function，像是設定在某些 state 改變時才會執行。</p>
<h3 id="範例：把資料同步到-LocalStorage"><a href="#範例：把資料同步到-LocalStorage" class="headerlink" title="範例：把資料同步到 LocalStorage"></a>範例：把資料同步到 LocalStorage</h3><p>以把 todo APP 同步到 LocalStorage 這個功能為例：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">writeTodosToLocalStorage</span><span class="token punctuation">(</span><span class="token parameter">todos</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// localStorage 只能存字串</span>
  window<span class="token punctuation">.</span>localStorage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span><span class="token string">"todos"</span><span class="token punctuation">,</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>todos<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="setState-：非同步更新狀態"><a href="#setState-：非同步更新狀態" class="headerlink" title="setState()：非同步更新狀態"></a>setState()：非同步更新狀態</h3><p>此外，還有很重要的一點，就是之前實作的 setTodos() 功能其實是非同步行為。</p>
<p>如果在新增 todo 的同時進行 <code>console.log(todos)</code>，會發現畫面 render 了，todos 卻還沒有更新：</p>
<p><img src="https://i.imgur.com/ATpucjM.png"></p>
<p>因此不能直接在 function 中寫入 todos，而是要直接寫入更新過的狀態，其他功能也以此類推，在每次改變 todo 時都要執行 writeTodosToLocalStorage()：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">handleButtonClick</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token function">setTodos</span><span class="token punctuation">(</span><span class="token punctuation">[</span>
    <span class="token punctuation">&#123;</span>
      id<span class="token operator">:</span> id<span class="token punctuation">.</span>current<span class="token punctuation">,</span>
      content<span class="token operator">:</span> value<span class="token punctuation">,</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token operator">...</span>todos<span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 因為 setTodos 非同步，不能直接傳入 todos</span>
  <span class="token function">writeTodosToLocalStorage</span><span class="token punctuation">(</span><span class="token punctuation">[</span>
    <span class="token punctuation">&#123;</span>
      id<span class="token operator">:</span> id<span class="token punctuation">.</span>current<span class="token punctuation">,</span>
      content<span class="token operator">:</span> value<span class="token punctuation">,</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token operator">...</span>todos<span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">setValue</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  id<span class="token punctuation">.</span>current<span class="token operator">++</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>上述這種做法，其實是我們過去利用 jQury 實作的想法，在變動資料的同時進行其他動作。</p>
<p>但其實進行新增、編輯、刪除 todo 時有個共通點，就是會「todos 會改變」，接著就是 useEffect 登場的時候了！</p>
<p>因為 useEffect() 會在每次 render 後執行，有 render 就代表 state 有變動。一旦有變動就執行同步 function，可把程式碼改寫如下：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 每次 render 後會執行 useEffect 中的 function</span>
<span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token function">writeTodosToLocalStorage</span><span class="token punctuation">(</span>todos<span class="token punctuation">)</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>todos<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>這樣就成功在每次 render 後，都把最新的 todos 狀態同步到 localStorage：</p>
<p><img src="https://i.imgur.com/UKSkzM7.png"></p>
<p>但這樣做其實有個缺點，透過執行的 console.log()，可發現連在輸入 input 時也會執行 render，應該只需要在 todos 有改變時才進行 render。</p>
<h3 id="useEffect-：可接收兩個參數"><a href="#useEffect-：可接收兩個參數" class="headerlink" title="useEffect()：可接收兩個參數"></a>useEffect()：可接收兩個參數</h3><p>而 useEffect 的第二個參數可以解決這個問題，需傳入一個陣列，用來放想要關注的資料，當變數改變時才會執行 useEffect：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span> code <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>array<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 第一個參數：一個函式，表示要做什麼事</span>
<span class="token comment">// 第二個參數：一個陣列，定義哪寫變數改變時，才會重新執行 useEffect</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>可改寫如下，代表在 todos 改變時才會重新執行 useEffect()：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
<span class="token function">writeTodosToLocalStorage</span><span class="token punctuation">(</span>todos<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 傳入第二個參數 [todos]</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>todos<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>透過 localStorage 的記憶功能，我們就能在頁面第一次 render 結束後，把 localStorage 中的 todos 同步到頁面上。</p>
<h3 id="第二個參數是空陣列：不會重新執行"><a href="#第二個參數是空陣列：不會重新執行" class="headerlink" title="第二個參數是空陣列：不會重新執行"></a>第二個參數是空陣列：不會重新執行</h3><p>在第二個參數傳入空陣列，就只有第一次 render 會執行這個 useEffect，可用來進行初始化：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 進行初始化: setTodos 或是拿 API</span>
<span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// 拿取資料，沒有資料的話就是空字串（進行錯誤處理）</span>
  <span class="token keyword">const</span> todoData <span class="token operator">=</span> window<span class="token punctuation">.</span>localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">"todos"</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token string">""</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>todoData<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// 把 todoData 放回 state</span>
    <span class="token function">setTodos</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>todoData<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token comment">// 傳入空陣列: 代表只有第一次 render 才會執行這個 useEffect</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="useEffect-會遇到的問題"><a href="#useEffect-會遇到的問題" class="headerlink" title="useEffect 會遇到的問題"></a>useEffect 會遇到的問題</h3><p>但是在重整頁面瞬間，會發現畫面閃了一下，這是因為第一次 render 畫面顯示的是 useState 初始設定，第二次 render 才是放入 todoDate：</p>
<p><img src="https://i.imgur.com/asdZh1d.gif"></p>
<p>那麼該如何解決 useEffect 這個問題呢？接下來會繼續介紹其他功能來改善。</p>
<h2 id="useLayoutEffect：render-時同步執行"><a href="#useLayoutEffect：render-時同步執行" class="headerlink" title="useLayoutEffect：render 時同步執行"></a>useLayoutEffect：render 時同步執行</h2><p>我們在開頭提到，可透過 useEffect 這個 hook，告訴 React「component 在 render 之後要做的事情」。</p>
<p>但其實更精確的，應該是「在 render 完，瀏覽器 paint 以後要做的事情」，所以才會有 render 後畫面閃一下的情況發生。</p>
<p>而 useLayoutEffect 這個 hook，則是「在 render 完，瀏覽器 paint 以前要做的事情」。</p>
<p>也就是說，和 useEffect 功能其實很類似，差別在於同步與非同步：</p>
<ul>
<li>useEffect：非同步函式，等 UI 渲染完才會執行</li>
<li>useLayoutEffect：同步函式，UI 會等 useLayoutEffect 中做的事情結束才會渲染</li>
</ul>
<p>實際修改剛才的程式碼：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 從 react 引入 hook</span>
<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> useState<span class="token punctuation">,</span> useRef<span class="token punctuation">,</span> useEffect<span class="token punctuation">,</span> useLayoutEffect <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span>

<span class="token comment">// 把讀取 todoData 的 useEffect 改用 useLayoutEffect</span>
  <span class="token function">useLayoutEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">const</span> todoData <span class="token operator">=</span> window<span class="token punctuation">.</span>localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">"todos"</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token string">""</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>todoData<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token function">setTodos</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>todoData<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>如此畫面就不會再閃一次初始的資料了：</p>
<p><img src="https://i.imgur.com/HNXymGK.gif"></p>
<p>至於為什麼會產生這個情況，可從 React 的 Hook Flow 談起。</p>
<h3 id="Hook-Flow-流程圖"><a href="#Hook-Flow-流程圖" class="headerlink" title="Hook Flow 流程圖"></a>Hook Flow 流程圖</h3><p><img src="https://i.imgur.com/usOw4li.png"><br>（圖片來源：<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2RvbmF2b24vaG9vay1mbG93L2Jsb2IvbWFzdGVyL1JFQURNRS5tZCVFRiVCQyU4OQ==">https://github.com/donavon/hook-flow/blob/master/README.md）<i class="fa fa-external-link-alt"></i></span></p>
<p>Hook 執行流程可分為三個部分：</p>
<ul>
<li>Mount：把 component 放到畫面上</li>
<li>Update：更新 state 流程</li>
<li>Unmount：清除 effect</li>
</ul>
<p>原本是在瀏覽器 paint 之後才 run effects，若能提早改變 state 並更新畫面，就會直接顯示最新的 state，而不會出現初始 state。</p>
<p>除了透過 useLayoutEffect，還有另一種做法，同樣能解決畫面閃一下的問題，也就是接下來要介紹的 lazy initializer。</p>
<p>因為 useState 可以傳入初始值，那就直接把要更新的 todoDate 作為 state 初始值：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// 從 localStorage 拿取資料</span>
  <span class="token keyword">const</span> todoData <span class="token operator">=</span> window<span class="token punctuation">.</span>localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">"todos"</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token string">""</span><span class="token punctuation">;</span>
  <span class="token comment">// 直接把 todoData 設為 state 初始值，沒有資料就設為空陣列</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span>todos<span class="token punctuation">,</span> setTodos<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>todoData<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 略</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>但這麼會產生另一個問題，就是只有第一次 render 才會執行 useState 初始值，但後續 render 還是會進行撈取 todoData 的動作，又因為 useState 已經有值了，React 就會忽略裡面的東西，這其實會造成效能上的浪費。</p>
<h3 id="lazy-initializer"><a href="#lazy-initializer" class="headerlink" title="lazy initializer"></a>lazy initializer</h3><p>useState 除了設定初始值，其實可以傳入一個 function，經由 function return 的值就會是 state 的初始值：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// 在 useState 傳入 function，會把回傳值設為初始值</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span>todos<span class="token punctuation">,</span> setTodos<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// 用來檢測 useState 是否只執行一次</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"init"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> todoData <span class="token operator">=</span> window<span class="token punctuation">.</span>localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">"todos"</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token string">""</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>todoData<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 略</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>又因為初始值改變了，也要重新設定 todo id，修改後如下：</p>
<blockquote>
<ul>
<li>JSON.stringify()：將資料轉為 JSON 格式的字串</li>
<li>JSON.parse()：將資料由 JSON 格式字串轉回原本的資料型別</li>
</ul>
</blockquote>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// 因為初始值改變了，也要重新設定 todo id</span>
  <span class="token keyword">const</span> id <span class="token operator">=</span> <span class="token function">useRef</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span>todos<span class="token punctuation">,</span> setTodos<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// 把 todos 轉回陣列型態</span>
    <span class="token keyword">let</span> todoData <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">"todos"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token string">""</span><span class="token punctuation">;</span>
    <span class="token comment">// 改由陣列長度判斷是否為空陣列</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>todoData<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      id<span class="token punctuation">.</span>current <span class="token operator">=</span> todoData<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>id <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
      todoData <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token comment">// 把 return 的值設定為初始值</span>
    <span class="token keyword">return</span> todoData<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>像這樣在 useState 透過傳入 function 來設定初始值，就是 run lazy initializer 的過程。因為只有第一次會執行，適合用於一些複雜的運算，這樣 function 就只會被執行一次，避免每次 render 產生的效能問題。</p>
<h2 id="再探-useEffect：cleanup-effect"><a href="#再探-useEffect：cleanup-effect" class="headerlink" title="再探 useEffect：cleanup effect"></a>再探 useEffect：cleanup effect</h2><p>在 Hook Flow 中，有個步驟其實是先 cleanup effect，然後再 run effect，這是什麼意思呢？</p>
<p>繼續用剛才的 todos 為範例，以下程式碼代表「每當 todos 改變，就會執行 useEffect 中的 function」：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token function">writeTodosToLocalStorage</span><span class="token punctuation">(</span>todos<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>todos<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>但其實在這個 function 中可以 return 另一個 function，又稱為 cleanup function，代表「在這個 effect 被清掉之前要做的事情」：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// 每當 todos 改變，effect 要做的事</span>
  <span class="token function">writeTodosToLocalStorage</span><span class="token punctuation">(</span>todos<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// effect 被清掉前要做的事</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>todos<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>每次畫面渲染時，其實就是執行一次 APP() 這個 function，可透過這段程式碼來模擬流程：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token constant">APP</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// ...</span>
  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token function">writeTodosToLocalStorage</span><span class="token punctuation">(</span>todos<span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"useEffect: todos"</span><span class="token punctuation">,</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>todos<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// clean up</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"clearEffect: todos"</span><span class="token punctuation">,</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>todos<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>todos<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// ...</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="1-進行第一次-render，執行-APP-，呼叫-useEffect"><a href="#1-進行第一次-render，執行-APP-，呼叫-useEffect" class="headerlink" title="1. 進行第一次 render，執行 APP()，呼叫 useEffect()"></a>1. 進行第一次 render，執行 APP()，呼叫 useEffect()</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token function">writeTodosToLocalStorage</span><span class="token punctuation">(</span>todos<span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"useEffect: todos"</span><span class="token punctuation">,</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>todos<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// useEffect: todos [&#123;"id":2,"content":"render!"&#125;]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="2-點擊已完成，進行第二次-render，執行-APP-，先清除上一個-effect，再執行第二次-useEffect"><a href="#2-點擊已完成，進行第二次-render，執行-APP-，先清除上一個-effect，再執行第二次-useEffect" class="headerlink" title="2. 點擊已完成，進行第二次 render，執行 APP()，先清除上一個 effect，再執行第二次 useEffect"></a>2. 點擊已完成，進行第二次 render，執行 APP()，先清除上一個 effect，再執行第二次 useEffect</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token number">1.</span> 先清除上一個 effect
<span class="token comment">// clearEffect: todos [&#123;"id":2,"content":"render!"&#125;]</span>
<span class="token number">2.</span> 再進行第二次 useEffect
<span class="token comment">// useEffect: todos [&#123;"id":2,"content":"render!","isDone":true&#125;]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="cleanup-function-執行時機"><a href="#cleanup-function-執行時機" class="headerlink" title="cleanup function 執行時機"></a>cleanup function 執行時機</h3><p>結合上述範例，cleanup function 執行的時間點有兩個：</p>
<ul>
<li>要執行下一個 useEffect 的時候，要先清除上一個 effect</li>
<li>component unmount 的時候，會清除 effect</li>
</ul>
<p>那我們可以透過 useEffect 的 cleanup function 做什麼呢？例如：</p>
<ul>
<li>用來清除訂閱操作，避免記憶體洩漏，可參考<span class="exturl" data-url="aHR0cHM6Ly96aC1oYW50LnJlYWN0anMub3JnL2RvY3MvaG9va3MtZWZmZWN0Lmh0bWw=">官網範例<i class="fa fa-external-link-alt"></i></span></li>
<li>當 component 被 unmount 時要執行的事情</li>
</ul>
<p>以下方範例來說，代表「只有在這個 component 被 unmount 會執行 cleanup function」，又因為第二個參數是空陣列，所以這個 useEffect 只會執行一次：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"mount"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"unmount"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="實作一個自己的鉤子"><a href="#實作一個自己的鉤子" class="headerlink" title="實作一個自己的鉤子"></a>實作一個自己的鉤子</h2><p>接下來要談談 hooks 最強大的地方，就是我們其實能寫一個自己 hook，又稱作 custom hook，命名開頭必須是 use 開頭，詳細內容可參考<span class="exturl" data-url="aHR0cHM6Ly96aC1oYW50LnJlYWN0anMub3JnL2RvY3MvaG9va3MtY3VzdG9tLmh0bWw=">官方文件<i class="fa fa-external-link-alt"></i></span>。</p>
<h3 id="實作一個-useInput"><a href="#實作一個-useInput" class="headerlink" title="實作一個 useInput"></a>實作一個 useInput</h3><p>以 input 元素為例，我們可以把 value 和 handleInputChange 等行為包在 useInput.js 檔案，寫法和之前的 APP.js 很類似：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 從 react 引入 useState</span>
<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> useState <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span>

<span class="token comment">// 匯出 useInput()</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">useInput</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span>value<span class="token punctuation">,</span> setValue<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> <span class="token function-variable function">handleChange</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token function">setValue</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>
    value<span class="token punctuation">,</span>
    setValue<span class="token punctuation">,</span>
    handleChange<span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>就可以用從 useInput.js 讀取到的 handleChange，取代原本的 handleInputChange：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// APP.js</span>
<span class="token keyword">import</span> useInput <span class="token keyword">from</span> <span class="token string">"./useInput"</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token constant">APP</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// ...</span>
  <span class="token comment">// 從 useInput 讀取 value 資料</span>
  <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> value<span class="token punctuation">,</span> setValue<span class="token punctuation">,</span> handleChange <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token function">useInput</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// ...</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
  <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">"App"</span><span class="token operator">></span>
    <span class="token operator">&lt;</span>input
      type<span class="token operator">=</span><span class="token string">"text"</span>
      placeholder<span class="token operator">=</span><span class="token string">"Add todo..."</span>
      value<span class="token operator">=</span><span class="token punctuation">&#123;</span>value<span class="token punctuation">&#125;</span>
      <span class="token comment">// 改為 handleChange</span>
      onChange<span class="token operator">=</span><span class="token punctuation">&#123;</span>handleChange<span class="token punctuation">&#125;</span>
      onKeyDown<span class="token operator">=</span><span class="token punctuation">&#123;</span>handleKeyDown<span class="token punctuation">&#125;</span>
    <span class="token operator">/</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>修改完程式也能正常運行，這樣寫的好處就是，如果有第二個 input 時，也能使用共通的邏輯，例如：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 第一個 input</span>
<span class="token keyword">const</span> <span class="token punctuation">&#123;</span> value<span class="token punctuation">,</span> setValue<span class="token punctuation">,</span> handleChange <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token function">useInput</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 第二個 input</span>
<span class="token keyword">const</span> <span class="token punctuation">&#123;</span> value<span class="token operator">:</span> todoName<span class="token punctuation">,</span> setValue<span class="token operator">:</span>setTodoName <span class="token punctuation">,</span> handleChange<span class="token operator">:</span> handleTodoName <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token function">useInput</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="實作一個-useTodos"><a href="#實作一個-useTodos" class="headerlink" title="實作一個 useTodos"></a>實作一個 useTodos</h3><p>我們也可以把 todos 的邏輯獨立成一個 hook，也就是 useTodos.js：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// useTodo.js</span>
<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> useState<span class="token punctuation">,</span> useEffect<span class="token punctuation">,</span> useRef <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">writeTodosToLocalStorage</span><span class="token punctuation">(</span><span class="token parameter">todos</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  window<span class="token punctuation">.</span>localStorage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span><span class="token string">"todos"</span><span class="token punctuation">,</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>todos<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">useTodos</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">const</span> id <span class="token operator">=</span> <span class="token function">useRef</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span>todos<span class="token punctuation">,</span> setTodos<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// 把 todos 轉回陣列型態</span>
    <span class="token keyword">let</span> todoData <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">"todos"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token string">""</span><span class="token punctuation">;</span>
    <span class="token comment">// 改由陣列長度判斷是否為空陣列</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>todoData<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      id<span class="token punctuation">.</span>current <span class="token operator">=</span> todoData<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>id <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
      todoData <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> todoData<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token function">writeTodosToLocalStorage</span><span class="token punctuation">(</span>todos<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>todos<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>
    todos<span class="token punctuation">,</span>
    setTodos<span class="token punctuation">,</span>
    id<span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>並引入 APP.js 使用：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> useInput <span class="token keyword">from</span> <span class="token string">"./useInput"</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> useTodos <span class="token keyword">from</span> <span class="token string">"./useTodos"</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// 從 useTodos 讀取 todos 資料</span>
  <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> todos<span class="token punctuation">,</span> setTodos<span class="token punctuation">,</span> id <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token function">useTodos</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 從 useInput 讀取 value 資料</span>
  <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> value<span class="token punctuation">,</span> setValue<span class="token punctuation">,</span> handleChange <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token function">useInput</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// ...</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="將-UI-與邏輯分開寫"><a href="#將-UI-與邏輯分開寫" class="headerlink" title="將 UI 與邏輯分開寫"></a>將 UI 與邏輯分開寫</h3><p>若再繼續細分功能，甚至可以做到把 UI 和 todos 邏輯完全分開，改寫如下：</p>
<ul>
<li>App.js</li>
</ul>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> TodoItem <span class="token keyword">from</span> <span class="token string">"./TodoItem"</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> useTodos <span class="token keyword">from</span> <span class="token string">"./useTodos"</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// 從 useTodos 讀取 todos 資料</span>
  <span class="token keyword">const</span> <span class="token punctuation">&#123;</span>
    todos<span class="token punctuation">,</span>
    setTodos<span class="token punctuation">,</span>
    id<span class="token punctuation">,</span>
    handleButtonClick<span class="token punctuation">,</span>
    handleKeyDown<span class="token punctuation">,</span>
    handleTogglerIsDone<span class="token punctuation">,</span>
    handleDeleteTodo<span class="token punctuation">,</span>
    value<span class="token punctuation">,</span>
    setValue<span class="token punctuation">,</span>
    handleChange<span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token function">useTodos</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// 剩下 UI 畫面</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">"App"</span><span class="token operator">></span>
      <span class="token operator">&lt;</span>input
        type<span class="token operator">=</span><span class="token string">"text"</span>
        placeholder<span class="token operator">=</span><span class="token string">"Add todo..."</span>
        value<span class="token operator">=</span><span class="token punctuation">&#123;</span>value<span class="token punctuation">&#125;</span>
        onChange<span class="token operator">=</span><span class="token punctuation">&#123;</span>handleChange<span class="token punctuation">&#125;</span>
        onKeyDown<span class="token operator">=</span><span class="token punctuation">&#123;</span>handleKeyDown<span class="token punctuation">&#125;</span>
      <span class="token operator">/</span><span class="token operator">></span>
      <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">&#123;</span>handleButtonClick<span class="token punctuation">&#125;</span><span class="token operator">></span>Add Todo<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>
      <span class="token punctuation">&#123;</span>todos<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">todo</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span>
        <span class="token operator">&lt;</span>TodoItem
          key<span class="token operator">=</span><span class="token punctuation">&#123;</span>todo<span class="token punctuation">.</span>id<span class="token punctuation">&#125;</span>
          todo<span class="token operator">=</span><span class="token punctuation">&#123;</span>todo<span class="token punctuation">&#125;</span>
          handleDeleteTodo<span class="token operator">=</span><span class="token punctuation">&#123;</span>handleDeleteTodo<span class="token punctuation">&#125;</span>
          handleTogglerIsDone<span class="token operator">=</span><span class="token punctuation">&#123;</span>handleTogglerIsDone<span class="token punctuation">&#125;</span>
        <span class="token operator">/</span><span class="token operator">></span>
      <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> App<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>useTodo.js</li>
</ul>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> useState<span class="token punctuation">,</span> useEffect<span class="token punctuation">,</span> useRef <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> useInput <span class="token keyword">from</span> <span class="token string">"./useInput"</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">writeTodosToLocalStorage</span><span class="token punctuation">(</span><span class="token parameter">todos</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  window<span class="token punctuation">.</span>localStorage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span><span class="token string">"todos"</span><span class="token punctuation">,</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>todos<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">useTodos</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">const</span> id <span class="token operator">=</span> <span class="token function">useRef</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 從 useInput 讀取 value 資料</span>
  <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> value<span class="token punctuation">,</span> setValue<span class="token punctuation">,</span> handleChange <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token function">useInput</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span>todos<span class="token punctuation">,</span> setTodos<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">let</span> todoData <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">"todos"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token string">""</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>todoData<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      id<span class="token punctuation">.</span>current <span class="token operator">=</span> todoData<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>id <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
      todoData <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> todoData<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// 點擊按鈕新增 todo</span>
  <span class="token keyword">const</span> <span class="token function-variable function">handleButtonClick</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token function">addTodo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
  <span class="token comment">// enter 新增 todo</span>
  <span class="token keyword">const</span> <span class="token function-variable function">handleKeyDown</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>keyCode <span class="token operator">!==</span> <span class="token number">13</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token function">addTodo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

  <span class="token keyword">const</span> <span class="token function-variable function">addTodo</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// 檢查輸入欄位是否為空值，trim() 可清除字串前後空白</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>value<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token function">setTodos</span><span class="token punctuation">(</span><span class="token punctuation">[</span>
      <span class="token punctuation">&#123;</span>
        id<span class="token operator">:</span> id<span class="token punctuation">.</span>current<span class="token punctuation">,</span>
        content<span class="token operator">:</span> value<span class="token punctuation">,</span>
      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
      <span class="token operator">...</span>todos<span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">setValue</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    id<span class="token punctuation">.</span>current<span class="token operator">++</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

  <span class="token keyword">const</span> <span class="token function-variable function">handleTogglerIsDone</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">id</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token function">setTodos</span><span class="token punctuation">(</span>
      todos<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">todo</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>todo<span class="token punctuation">.</span>id <span class="token operator">!==</span> id<span class="token punctuation">)</span> <span class="token keyword">return</span> todo<span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>
          <span class="token operator">...</span>todo<span class="token punctuation">,</span>
          isDone<span class="token operator">:</span> <span class="token operator">!</span>todo<span class="token punctuation">.</span>isDone<span class="token punctuation">,</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

  <span class="token keyword">const</span> <span class="token function-variable function">handleDeleteTodo</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">id</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token function">setTodos</span><span class="token punctuation">(</span>todos<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">todo</span><span class="token punctuation">)</span> <span class="token operator">=></span> todo<span class="token punctuation">.</span>id <span class="token operator">!==</span> id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token function">writeTodosToLocalStorage</span><span class="token punctuation">(</span>todos<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>todos<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>
    todos<span class="token punctuation">,</span>
    setTodos<span class="token punctuation">,</span>
    id<span class="token punctuation">,</span>
    handleButtonClick<span class="token punctuation">,</span>
    handleKeyDown<span class="token punctuation">,</span>
    handleTogglerIsDone<span class="token punctuation">,</span>
    handleDeleteTodo<span class="token punctuation">,</span>
    value<span class="token punctuation">,</span>
    setValue<span class="token punctuation">,</span>
    handleChange<span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>其實和之前寫前後端分離的時候很類似，寫成自訂 hook 的過程，就像是把不同邏輯的 function 給模組化，這麼說似乎也沒錯，畢竟 hook 就是 fucntion。</p>
<p>透過抽出共同邏輯的方式，可將功能包裝在 hooks，就算是在不同 UI，也同樣能利用 return 的值，在畫面上呈現想要的資料。</p>
<h2 id="hooks-觀念總結"><a href="#hooks-觀念總結" class="headerlink" title="hooks 觀念總結"></a>hooks 觀念總結</h2><p>hooks 基本上可以分成下列幾種：</p>
<ul>
<li>內建 hooks<ul>
<li>useState：讓 function component 擁有 state，可以管理內部狀態</li>
<li>useEffect：在 render 完、瀏覽器 paint 畫面之後要做什麼事</li>
<li>useLayoutEffect：在 render 完、瀏覽器 paint 畫面之前要做什麼事</li>
</ul>
</li>
<li>自訂 hooks：把邏輯從 UI 抽出來寫一個 hook</li>
<li>參考別人寫好的 hooks：<span class="exturl" data-url="aHR0cHM6Ly91c2Vob29rcy5jb20v">useHooks<i class="fa fa-external-link-alt"></i></span></li>
</ul>
<h2 id="補充資料"><a href="#補充資料" class="headerlink" title="補充資料"></a>補充資料</h2><p>推薦閱讀 Dan Abramov 所撰寫有關 React 的系列文章，裡面對於 useEffect 的原理有更詳細敘述：</p>
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9jb211cy5kZXYvemgtaGFudC9hLWNvbXBsZXRlLWd1aWRlLXRvLXVzZWVmZmVjdC8=">A Complete Guide to useEffect<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9jb211cy5kZXYvemgtaGFucy9ob3ctYXJlLWZ1bmN0aW9uLWNvbXBvbmVudHMtZGlmZmVyZW50LWZyb20tY2xhc3Nlcy8=">How Are Function Components Different from Classes?<i class="fa fa-external-link-alt"></i></span></li>
</ul>
<p>第 11 屆 iT 邦幫忙鐵人賽有關 React 的系列文章：</p>
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9pdGhlbHAuaXRob21lLmNvbS50dy91c2Vycy8yMDEwMzMxNS9pcm9ubWFuLzI2Njg=">從 Hooks 開始，讓你的網頁 React 起來<i class="fa fa-external-link-alt"></i></span></li>
</ul>
<p>參考資料：</p>
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9pdGhlbHAuaXRob21lLmNvbS50dy9hcnRpY2xlcy8xMDI1MjExOA==">【Day.26】React進階 - useEffect v.s useLayoutEffect<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9jb211cy5kZXYv">Overreacted - Dan Abramov.<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9wamNoZW5kZXIuZ2l0aHViLmlvLzIwMTkvMDgvMDcvcmVhY3Rkb2MtcmVhY3QtaG9va3MtdXNlZWZmZWN0Lw==">[ReactDoc] React Hooks - useEffect<i class="fa fa-external-link-alt"></i></span></li>
</ul>
]]></content>
      <categories>
        <category>Front-End</category>
        <category>React</category>
      </categories>
      <tags>
        <tag>React</tag>
        <tag>Hooks</tag>
      </tags>
  </entry>
  <entry>
    <title>[week 21] React Hooks API：useState &amp; 再戰 Todo List</title>
    <url>/react-usestate/</url>
    <content><![CDATA[<blockquote>
<p>本篇為 <span class="exturl" data-url="aHR0cHM6Ly9saWRlbXkuY29tL3AvZmUzMDItcmVhY3QtaG9va3M=">[FE302] React 基礎 - hooks 版本<i class="fa fa-external-link-alt"></i></span> 這門課程的學習筆記。如有錯誤歡迎指正！</p>
</blockquote>
<pre class="line-numbers language-none"><code class="language-none">學習目標：

 P1 我知道 React 的目的以及原理
 P1 我知道我們為什麼需要 React
 P1 我知道使用 React 跟之前使用 jQuery 的區別
 P1 我理解 state 跟 props 的不同<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<span id="more"></span>
<hr>
<h2 id="React-Hooks-API"><a href="#React-Hooks-API" class="headerlink" title="React Hooks API"></a>React Hooks API</h2><p>根據<span class="exturl" data-url="aHR0cHM6Ly96aC1oYW50LnJlYWN0anMub3JnL2RvY3MvaG9va3MtaW50cm8uaHRtbD9uby1jYWNoZT0x">官網介紹<i class="fa fa-external-link-alt"></i></span>：</p>
<blockquote>
<p>Hook 是 React 16.8 中增加的新功能。它讓你不必寫 class 就能使用 state 以及其他 React 的功能。</p>
</blockquote>
<p>先前提到，React 的核心概念之一是 component，而根據寫法又可分為兩種：</p>
<ul>
<li>class compent：透過 class 寫成，可以控制 state 和生命週期</li>
<li>function compent：透過 function 寫成，主要用來呈現 UI</li>
</ul>
<h3 id="hook-其實就是-function"><a href="#hook-其實就是-function" class="headerlink" title="hook 其實就是 function"></a>hook 其實就是 function</h3><p>根據<span class="exturl" data-url="aHR0cHM6Ly96aC1oYW50LnJlYWN0anMub3JnL2RvY3MvaG9va3Mtb3ZlcnZpZXcuaHRtbA==">官方文件<i class="fa fa-external-link-alt"></i></span>：</p>
<blockquote>
<p>hook 是 function，讓我們可以從 function component「hook into」React state 與生命週期功能。</p>
</blockquote>
<p>也就是說，React 因為加入了 hooks，再結合 props、state、context、refs 以及 lifecycle 等概念，提供了更直接的 API 使用，讓我們能在 functional component 管理狀態和使用生命周期等功能，藉此簡化程式碼與提高重用性。</p>
<p>引入 hook 的語法如下，原本要寫成 React.useState，透過 ES6 解構語法即可直接使用 useState：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> useState<span class="token punctuation">,</span> useEffect<span class="token punctuation">,</span> useRef <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h3 id="hooks-只能寫在-component-第一層"><a href="#hooks-只能寫在-component-第一層" class="headerlink" title="hooks 只能寫在 component 第一層"></a>hooks 只能寫在 component 第一層</h3><p>因為 React 背後的機制，hooks 只能寫在 component 第一層。</p>
<p>也就是說，不能把 hooks 寫在 if - else 等條件判斷句裡面，像是符合 XX 條件才使用，否則會出現錯誤訊息：</p>
<blockquote>
<p>React Hook “useRef” is called conditionally. React Hooks must be called in the exact same order in every component render    react-hooks/rules-of-hooks</p>
</blockquote>
<p>只能自行在 hooks 裡面進行判斷是否使用，例如下方寫法：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// 若不符合就直接 return</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>todos<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
  <span class="token comment">// 若符合要做的事情</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="useState：用來設定-react-中的-state"><a href="#useState：用來設定-react-中的-state" class="headerlink" title="useState：用來設定 react 中的 state"></a>useState：用來設定 react 中的 state</h3><p>語法如下：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token punctuation">[</span>currentValue<span class="token punctuation">,</span> setCurrentValue<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span>initialValue<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ul>
<li>currentValue：存放 state 的值</li>
<li>setCurrentValue：用來設定 state 值</li>
<li>initialValue：state 的初始值</li>
</ul>
<p>還記得我們前面舉的 Counter component 範例嗎？簡單來說，就是在 <code>useState([初始值])</code> 傳入初始值，然後回傳一個陣列：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
<span class="token keyword">const</span> <span class="token punctuation">[</span>todos<span class="token punctuation">,</span> setTodos<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>其中 todos 具有 immutable 特性，也就是無法再賦值，必須用 setTodos 來產生新的 state，才能在每次 render 畫面時改變 todos 的值。</p>
<p>透過這個概念，我們也能實作出簡單的 Todo List：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 解構語法</span>
<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> useState <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span>todos<span class="token punctuation">,</span> setTodos<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token punctuation">[</span>
    <span class="token number">1</span>
  <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">const</span> <span class="token function-variable function">handleButtonClick</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// 傳入參數: 新的 todo + 解構 todos</span>
    <span class="token function">setTodos</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"new todo"</span><span class="token punctuation">,</span> <span class="token operator">...</span>todos<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">"App"</span><span class="token operator">></span>
      <span class="token comment">/* 在 JSX 中，單標籤必須 /> 結尾 */</span>
      <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"text"</span> placeholder<span class="token operator">=</span><span class="token string">"Add todo..."</span> <span class="token operator">/</span><span class="token operator">></span>
      <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">&#123;</span>handleButtonClick<span class="token punctuation">&#125;</span><span class="token operator">></span>Add Todo<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>
      <span class="token punctuation">&#123;</span>
        todos<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">todo<span class="token punctuation">,</span> index</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token operator">&lt;</span>TodoItem key<span class="token operator">=</span><span class="token punctuation">&#123;</span>index<span class="token punctuation">&#125;</span> content<span class="token operator">=</span><span class="token punctuation">&#123;</span>todo<span class="token punctuation">&#125;</span> <span class="token operator">/</span><span class="token operator">></span> <span class="token punctuation">)</span> 
      <span class="token punctuation">&#125;</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><img src="https://i.imgur.com/f6EsvhC.png"></p>
<h3 id="controlled-vs-uncontrolled"><a href="#controlled-vs-uncontrolled" class="headerlink" title="controlled vs uncontrolled"></a>controlled vs uncontrolled</h3><blockquote>
<p>詳細可參考<span class="exturl" data-url="aHR0cHM6Ly96aC1oYW50LnJlYWN0anMub3JnL2RvY3MvZm9ybXMuaHRtbCNjb250cm9sbGVkLWNvbXBvbmVudHM=">官方文件<i class="fa fa-external-link-alt"></i></span>。</p>
</blockquote>
<p>在 React 中，表單元素的處理可分為 uncontrolled 和 controlled，兩者之間的差別，在於 component 的資料是否受到 React 的控制：</p>
<ul>
<li>uncontrolled component：資料不受 React 的控制<ul>
<li>例如 input、textarea 等表單元素，通常會維持本身的 state，並根據使用者的輸入來更新該元素的 state</li>
<li>若想取得 uncontrolled component 的值，可透過直接操作 DOM 或使用 useRef 來選取特定元素</li>
</ul>
</li>
<li>controlled component：資料受到 React 的控制 <ul>
<li>如果將資料的控制權交給 React 來處理，畫面就會根據 state 是否改變來重新渲染</li>
</ul>
</li>
</ul>
<p>參考文章：</p>
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9pdGhlbHAuaXRob21lLmNvbS50dy9hcnRpY2xlcy8xMDIyNzg2Ng==">[Day 27 - 即時天氣] React 中的表單處理（Controlled vs Uncontrolled）以及 useRef 的使用<i class="fa fa-external-link-alt"></i></span></li>
</ul>
<hr>
<h2 id="再戰-Todo-List"><a href="#再戰-Todo-List" class="headerlink" title="再戰 Todo List"></a>再戰 Todo List</h2><h3 id="新增-Todo"><a href="#新增-Todo" class="headerlink" title="新增 Todo"></a>新增 Todo</h3><p>透過下方程式碼，可存取 input 的值，並藉由 setValue 來更新 todos 狀態：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> TodoItem <span class="token keyword">from</span> <span class="token string">'./TodoItem'</span>
<span class="token comment">// 解構語法</span>
<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> useState<span class="token punctuation">,</span> useRef <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span>todos<span class="token punctuation">,</span> setTodos<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token punctuation">[</span>
    <span class="token number">1</span>
  <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">const</span> <span class="token punctuation">[</span>value<span class="token punctuation">,</span> setValue<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">const</span> <span class="token function-variable function">handleButtonClick</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// 傳入參數: 新的 todo + 解構 todos</span>
    <span class="token function">setTodos</span><span class="token punctuation">(</span><span class="token punctuation">[</span>value<span class="token punctuation">,</span> <span class="token operator">...</span>todos<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 新增完 todo 後清空 value</span>
    <span class="token function">setValue</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token keyword">const</span> <span class="token function-variable function">handleInputChange</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// 拿到 input 的 value</span>
    <span class="token function">setValue</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">"App"</span><span class="token operator">></span>
      <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"text"</span> placeholder<span class="token operator">=</span><span class="token string">"Add todo..."</span> value<span class="token operator">=</span><span class="token punctuation">&#123;</span>value<span class="token punctuation">&#125;</span> onChange<span class="token operator">=</span><span class="token punctuation">&#123;</span>handleInputChange<span class="token punctuation">&#125;</span> <span class="token operator">/</span><span class="token operator">></span>
      <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">&#123;</span>handleButtonClick<span class="token punctuation">&#125;</span><span class="token operator">></span>Add Todo<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>
      <span class="token punctuation">&#123;</span>
        todos<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">todo<span class="token punctuation">,</span> index</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token operator">&lt;</span>TodoItem key<span class="token operator">=</span><span class="token punctuation">&#123;</span>index<span class="token punctuation">&#125;</span> content<span class="token operator">=</span><span class="token punctuation">&#123;</span>todo<span class="token punctuation">&#125;</span> <span class="token operator">/</span><span class="token operator">></span> <span class="token punctuation">)</span> 
      <span class="token punctuation">&#125;</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><img src="https://i.imgur.com/EAY1tzO.png"></p>
<h3 id="useRef：用來抓取-DOM-節點的-hook"><a href="#useRef：用來抓取-DOM-節點的-hook" class="headerlink" title="useRef：用來抓取 DOM 節點的 hook"></a>useRef：用來抓取 DOM 節點的 hook</h3><p>基本用法：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> refContainer <span class="token operator">=</span> <span class="token function">useRef</span><span class="token punctuation">(</span>initialValue<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>根據<span class="exturl" data-url="aHR0cHM6Ly96aC1oYW50LnJlYWN0anMub3JnL2RvY3MvaG9va3MtcmVmZXJlbmNlLmh0bWwjdXNlcmVm">官方文件<i class="fa fa-external-link-alt"></i></span>介紹：</p>
<blockquote>
<p>useRef 回傳一個可變的 ref object，其 .current 屬性被初始為傳入的參數（initialValue）。回傳的 object 在 component 的生命週期將保持不變。</p>
</blockquote>
<p>簡單來說，useRef 是可持有 mutable（可變的）值、具有 .current 屬性的「盒子」，並具有以下特性：</p>
<ul>
<li>當 .current 屬性有變動時不會觸發重新 render</li>
<li>在每次 render 時都會給同一個的 ref object</li>
</ul>
<p>我們可透過宣告 <code>id = useRef(2)</code>，就能夠在每次 render 時，更改每個 todo 中 id.current 的值：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span>todos<span class="token punctuation">,</span> setTodos<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token punctuation">[</span>
    <span class="token punctuation">&#123;</span>id<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> content<span class="token operator">:</span> <span class="token string">'todo1'</span><span class="token punctuation">&#125;</span>
  <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">const</span> <span class="token punctuation">[</span>value<span class="token punctuation">,</span> setValue<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// useRef: 能我們抓取到 DOM 節點的 hooks</span>
  <span class="token comment">// 會回傳一個物件，要以 id.current 讀取</span>
  <span class="token keyword">const</span> id <span class="token operator">=</span> <span class="token function">useRef</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">const</span> <span class="token function-variable function">handleButtonClick</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token function">setTodos</span><span class="token punctuation">(</span><span class="token punctuation">[</span>
      <span class="token punctuation">&#123;</span>
        id<span class="token operator">:</span> id<span class="token punctuation">.</span>current<span class="token punctuation">,</span>
        content<span class="token operator">:</span> value
      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token operator">...</span>todos<span class="token punctuation">]</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">setValue</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    id<span class="token punctuation">.</span>current<span class="token operator">++</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token keyword">const</span> <span class="token function-variable function">handleInputChange</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token function">setValue</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">"App"</span><span class="token operator">></span>
      <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"text"</span> placeholder<span class="token operator">=</span><span class="token string">"Add todo..."</span> value<span class="token operator">=</span><span class="token punctuation">&#123;</span>value<span class="token punctuation">&#125;</span> onChange<span class="token operator">=</span><span class="token punctuation">&#123;</span>handleInputChange<span class="token punctuation">&#125;</span> <span class="token operator">/</span><span class="token operator">></span>
      <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">&#123;</span>handleButtonClick<span class="token punctuation">&#125;</span><span class="token operator">></span>Add Todo<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>
      <span class="token punctuation">&#123;</span>
        todos<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">todo</span> <span class="token operator">=></span> <span class="token operator">&lt;</span>TodoItem key<span class="token operator">=</span><span class="token punctuation">&#123;</span>todo<span class="token punctuation">.</span>id<span class="token punctuation">&#125;</span> todo<span class="token operator">=</span><span class="token punctuation">&#123;</span>todo<span class="token punctuation">&#125;</span> <span class="token operator">/</span><span class="token operator">></span> <span class="token punctuation">)</span> 
      <span class="token punctuation">&#125;</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>傳入 todo 這個參數，並放到 TodoItem：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">TodoItem</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">&#123;</span> content<span class="token punctuation">,</span> todo <span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token operator">&lt;</span>TodoItemWrapper data<span class="token operator">-</span>todo<span class="token operator">-</span>id<span class="token operator">=</span><span class="token punctuation">&#123;</span>todo<span class="token punctuation">.</span>id<span class="token punctuation">&#125;</span><span class="token operator">></span>
      <span class="token operator">&lt;</span>TodoContent<span class="token operator">></span><span class="token punctuation">&#123;</span>todo<span class="token punctuation">.</span>content<span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>TodoContent<span class="token operator">></span>
      <span class="token operator">&lt;</span>TodoButtonWrapper<span class="token operator">></span>
        <span class="token operator">&lt;</span>Button<span class="token operator">></span>未完成<span class="token operator">&lt;</span><span class="token operator">/</span>Button<span class="token operator">></span>
        <span class="token operator">&lt;</span>RedButton<span class="token operator">></span>刪除<span class="token operator">&lt;</span><span class="token operator">/</span>RedButton<span class="token operator">></span>
      <span class="token operator">&lt;</span><span class="token operator">/</span>TodoButtonWrapper<span class="token operator">></span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>TodoItemWrapper<span class="token operator">></span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token operator">===</span>上方寫法等同於<span class="token operator">===</span>

<span class="token keyword">function</span> <span class="token function">TodoItem</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// ...</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> TodoItem<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="刪除-todo"><a href="#刪除-todo" class="headerlink" title="刪除 todo"></a>刪除 todo</h3><h4 id="1-把要做的-function-寫在-Parent，並傳入參數給-Children"><a href="#1-把要做的-function-寫在-Parent，並傳入參數給-Children" class="headerlink" title="1. 把要做的 function 寫在 Parent，並傳入參數給 Children"></a>1. 把要做的 function 寫在 Parent，並傳入參數給 Children</h4><p>把 handleDeleteTodo 這個 function 當作 props 傳給 TodoItem：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">handleDeleteTodo</span> <span class="token operator">=</span> <span class="token parameter">id</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>

<span class="token punctuation">&#125;</span>

<span class="token keyword">return</span> <span class="token punctuation">(</span>
  <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">"App"</span><span class="token operator">></span>
    <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"text"</span> placeholder<span class="token operator">=</span><span class="token string">"Add todo..."</span> value<span class="token operator">=</span><span class="token punctuation">&#123;</span>value<span class="token punctuation">&#125;</span> onChange<span class="token operator">=</span><span class="token punctuation">&#123;</span>handleInputChange<span class="token punctuation">&#125;</span> <span class="token operator">/</span><span class="token operator">></span>
    <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">&#123;</span>handleButtonClick<span class="token punctuation">&#125;</span><span class="token operator">></span>Add Todo<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>
    <span class="token punctuation">&#123;</span>
      todos<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">todo</span> <span class="token operator">=></span> <span class="token operator">&lt;</span>TodoItem key<span class="token operator">=</span><span class="token punctuation">&#123;</span>todo<span class="token punctuation">.</span>id<span class="token punctuation">&#125;</span> todo<span class="token operator">=</span><span class="token punctuation">&#123;</span>todo<span class="token punctuation">&#125;</span> handleDeleteTodo<span class="token operator">=</span><span class="token punctuation">&#123;</span>handleDeleteTodo<span class="token punctuation">&#125;</span> <span class="token operator">/</span><span class="token operator">></span> <span class="token punctuation">)</span> 
    <span class="token punctuation">&#125;</span>
  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="2-再由-Children-呼叫-function"><a href="#2-再由-Children-呼叫-function" class="headerlink" title="2. 再由 Children 呼叫 function"></a>2. 再由 Children 呼叫 function</h4><p>TodoItem 就可以接收這個 funtcion，並透過刪除按鈕的監聽事件，來呼叫 handleDeleteTodo 以及回傳該 <code>todo.id</code>：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">TodoItem</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">&#123;</span> content<span class="token punctuation">,</span> todo<span class="token punctuation">,</span> handleDeleteTodo <span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token operator">&lt;</span>TodoItemWrapper data<span class="token operator">-</span>todo<span class="token operator">-</span>id<span class="token operator">=</span><span class="token punctuation">&#123;</span>todo<span class="token punctuation">.</span>id<span class="token punctuation">&#125;</span><span class="token operator">></span>
      <span class="token operator">&lt;</span>TodoContent<span class="token operator">></span><span class="token punctuation">&#123;</span>todo<span class="token punctuation">.</span>content<span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>TodoContent<span class="token operator">></span>
      <span class="token operator">&lt;</span>TodoButtonWrapper<span class="token operator">></span>
        <span class="token operator">&lt;</span>Button<span class="token operator">></span>未完成<span class="token operator">&lt;</span><span class="token operator">/</span>Button<span class="token operator">></span>
        <span class="token operator">&lt;</span>RedButton onClick<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
          <span class="token function">handleDeleteTodo</span><span class="token punctuation">(</span>todo<span class="token punctuation">.</span>id<span class="token punctuation">)</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">></span>刪除<span class="token operator">&lt;</span><span class="token operator">/</span>RedButton<span class="token operator">></span>
      <span class="token operator">&lt;</span><span class="token operator">/</span>TodoButtonWrapper<span class="token operator">></span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>TodoItemWrapper<span class="token operator">></span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="3-接著在-Parent-處理-function"><a href="#3-接著在-Parent-處理-function" class="headerlink" title="3. 接著在 Parent 處理 function"></a>3. 接著在 Parent 處理 function</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">handleDeleteTodo</span> <span class="token operator">=</span> <span class="token parameter">id</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// 若用 splice() 會改到原本的 todo，因此要用 filter()，留下該 id 以外的 todo</span>
  <span class="token function">setTodos</span><span class="token punctuation">(</span>todos<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">todo</span> <span class="token operator">=></span> todo<span class="token punctuation">.</span>id <span class="token operator">!==</span> id<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="編輯-todo"><a href="#編輯-todo" class="headerlink" title="編輯 todo"></a>編輯 todo</h3><p>在實作編輯 todo 之前，要先來檢視資料結構，也就是把 todo 的狀態加上 isDone，用來判斷是否已完成：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span>todos<span class="token punctuation">,</span> setTodos<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token punctuation">[</span>
    <span class="token punctuation">&#123;</span> id<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> content<span class="token operator">:</span> <span class="token string">'done'</span><span class="token punctuation">,</span> isDone<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#123;</span> id<span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> content<span class="token operator">:</span> <span class="token string">'not done'</span><span class="token punctuation">,</span> isDone<span class="token operator">:</span> <span class="token boolean">false</span> <span class="token punctuation">&#125;</span>
  <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">const</span> <span class="token punctuation">[</span>value<span class="token punctuation">,</span> setValue<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> id <span class="token operator">=</span> <span class="token function">useRef</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>接著在 TodoItem 的按鈕加上三元運算子，用來判斷 todo 狀態，再藉由 $isDone 這個參數，判斷式是否執行後面的 JSX 語法：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> TodoContent <span class="token operator">=</span> styled<span class="token punctuation">.</span>div<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">
  font-size: 26px;
  color: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token parameter">props</span> <span class="token operator">=></span> props<span class="token punctuation">.</span>theme<span class="token punctuation">.</span>colors<span class="token punctuation">.</span>primary_300<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">;

  // 若 isDone 這個參數為 true(已完成) 則接續後面的 JSX 語法
  </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token parameter">props</span> <span class="token operator">=></span> props<span class="token punctuation">.</span>$isDone <span class="token operator">&amp;&amp;</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">
    text-decoration: line-through;
  </span><span class="token template-punctuation string">`</span></span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">
</span><span class="token template-punctuation string">`</span></span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">TodoItem</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">&#123;</span> content<span class="token punctuation">,</span> todo<span class="token punctuation">,</span> handleDeleteTodo <span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token operator">&lt;</span>TodoItemWrapper data<span class="token operator">-</span>todo<span class="token operator">-</span>id<span class="token operator">=</span><span class="token punctuation">&#123;</span>todo<span class="token punctuation">.</span>id<span class="token punctuation">&#125;</span><span class="token operator">></span>
      <span class="token comment">// 傳入 isDone 這個參數</span>
      <span class="token operator">&lt;</span>TodoContent $isDone<span class="token operator">=</span><span class="token punctuation">&#123;</span>todo<span class="token punctuation">.</span>isDone<span class="token punctuation">&#125;</span><span class="token operator">></span><span class="token punctuation">&#123;</span>todo<span class="token punctuation">.</span>content<span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>TodoContent<span class="token operator">></span>
      <span class="token operator">&lt;</span>TodoButtonWrapper<span class="token operator">></span>
        <span class="token operator">&lt;</span>Button<span class="token operator">></span>
          <span class="token comment">// 透過三元運算子判斷 todo 狀態</span>
          <span class="token punctuation">&#123;</span>todo<span class="token punctuation">.</span>isDone <span class="token operator">?</span> <span class="token string">'已完成'</span> <span class="token operator">:</span> <span class="token string">'未完成'</span><span class="token punctuation">&#125;</span>
        <span class="token operator">&lt;</span><span class="token operator">/</span>Button<span class="token operator">></span>
        <span class="token operator">&lt;</span>RedButton onClick<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
          <span class="token function">handleDeleteTodo</span><span class="token punctuation">(</span>todo<span class="token punctuation">.</span>id<span class="token punctuation">)</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">></span>刪除<span class="token operator">&lt;</span><span class="token operator">/</span>RedButton<span class="token operator">></span>
      <span class="token operator">&lt;</span><span class="token operator">/</span>TodoButtonWrapper<span class="token operator">></span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>TodoItemWrapper<span class="token operator">></span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>除了三元運算子，也可改寫成邏輯運算子 &amp;&amp; 的寫法，適用於多種可能的情況：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>Button onClick<span class="token operator">=</span><span class="token punctuation">&#123;</span>handleToggleClick<span class="token punctuation">&#125;</span><span class="token operator">></span>
  <span class="token punctuation">&#123;</span>todo<span class="token punctuation">.</span>isDone <span class="token operator">&amp;&amp;</span> <span class="token string">'已完成'</span><span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#123;</span><span class="token operator">!</span>todo<span class="token punctuation">.</span>isDone <span class="token operator">&amp;&amp;</span> <span class="token string">'未完成'</span><span class="token punctuation">&#125;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>Button<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>接著實作 handleToggleIsDone 修改 todo 功能：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">handleToggleIsDone</span> <span class="token operator">=</span> <span class="token parameter">id</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token function">setTodos</span><span class="token punctuation">(</span>todos<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">todo</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// 如果不是要修改的 todo id 就直接回傳</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>todo<span class="token punctuation">.</span>id <span class="token operator">!==</span> id<span class="token punctuation">)</span> <span class="token keyword">return</span> todo<span class="token punctuation">;</span>
    <span class="token comment">// 要修改的 todo id</span>
    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>
      <span class="token comment">// todo 原本的東西</span>
      <span class="token operator">...</span>todo<span class="token punctuation">,</span>
      <span class="token comment">// 要修改的屬性</span>
      isDone<span class="token operator">:</span> <span class="token operator">!</span>todo<span class="token punctuation">.</span>isDone
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>傳入參數到 TodoItem：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">&#123;</span>
  todos<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">todo</span> <span class="token operator">=></span> <span class="token operator">&lt;</span>TodoItem key<span class="token operator">=</span><span class="token punctuation">&#123;</span>todo<span class="token punctuation">.</span>id<span class="token punctuation">&#125;</span> todo<span class="token operator">=</span><span class="token punctuation">&#123;</span>todo<span class="token punctuation">&#125;</span> handleDeleteTodo<span class="token operator">=</span><span class="token punctuation">&#123;</span>handleDeleteTodo<span class="token punctuation">&#125;</span> handleToggleIsDone<span class="token operator">=</span><span class="token punctuation">&#123;</span>handleToggleIsDone<span class="token punctuation">&#125;</span><span class="token operator">/</span><span class="token operator">></span> <span class="token punctuation">)</span> 
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>由 TodoItem 接收參數，可以把 click 事件抽出來寫，相較於原本的 inline function，能夠提高程式碼的可讀性：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">TodoItem</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">&#123;</span> todo<span class="token punctuation">,</span> handleDeleteTodo<span class="token punctuation">,</span> handleToggleIsDone <span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">const</span> <span class="token function-variable function">handleToggleClick</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token function">handleToggleIsDone</span><span class="token punctuation">(</span>todo<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token keyword">const</span> <span class="token function-variable function">handleDeleteClick</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token function">handleDeleteTodo</span><span class="token punctuation">(</span>todo<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token operator">&lt;</span>TodoItemWrapper data<span class="token operator">-</span>todo<span class="token operator">-</span>id<span class="token operator">=</span><span class="token punctuation">&#123;</span>todo<span class="token punctuation">.</span>id<span class="token punctuation">&#125;</span><span class="token operator">></span>
      <span class="token operator">&lt;</span>TodoContent $isDone<span class="token operator">=</span><span class="token punctuation">&#123;</span>todo<span class="token punctuation">.</span>isDone<span class="token punctuation">&#125;</span><span class="token operator">></span><span class="token punctuation">&#123;</span>todo<span class="token punctuation">.</span>content<span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>TodoContent<span class="token operator">></span>
      <span class="token operator">&lt;</span>TodoButtonWrapper<span class="token operator">></span>
        <span class="token operator">&lt;</span>Button onClick<span class="token operator">=</span><span class="token punctuation">&#123;</span>handleToggleClick<span class="token punctuation">&#125;</span><span class="token operator">></span>
          <span class="token punctuation">&#123;</span>todo<span class="token punctuation">.</span>isDone <span class="token operator">?</span> <span class="token string">'已完成'</span> <span class="token operator">:</span> <span class="token string">'未完成'</span><span class="token punctuation">&#125;</span>
        <span class="token operator">&lt;</span><span class="token operator">/</span>Button<span class="token operator">></span>
        <span class="token operator">&lt;</span>RedButton onClick<span class="token operator">=</span><span class="token punctuation">&#123;</span>handleDeleteClick<span class="token punctuation">&#125;</span><span class="token operator">></span>刪除<span class="token operator">&lt;</span><span class="token operator">/</span>RedButton<span class="token operator">></span>
      <span class="token operator">&lt;</span><span class="token operator">/</span>TodoButtonWrapper<span class="token operator">></span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>TodoItemWrapper<span class="token operator">></span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="Transient-props：-lt-props-gt"><a href="#Transient-props：-lt-props-gt" class="headerlink" title="Transient props：$&lt;props&gt;"></a>Transient props：<code>$&lt;props&gt;</code></h3><p>在上方程式碼中，加在 TodoContent 的 $isDone 這個 props，會被視為 style component props，不會被繼續傳到下一個 DOM 元素，也就不會顯示在 TodoContent 標籤上。</p>
<p>如果沒有加上 $ 符號，這個 props 就會被直接加在 TodoContent 這個 DOM 結構上。</p>
<p>再以下方程式碼為例：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>TodoContent id<span class="token operator">=</span><span class="token string">"abc"</span> $isDone<span class="token operator">=</span><span class="token punctuation">&#123;</span>todo<span class="token punctuation">.</span>isDone<span class="token punctuation">&#125;</span><span class="token operator">></span><span class="token punctuation">&#123;</span>todo<span class="token punctuation">.</span>content<span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>TodoContent<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>可以發現經過 render 之後，在 DOM 元素只會出現 <code>id=&quot;abc&quot;</code> 這個屬性，而不會有 <code>$isDone</code>，這是因為 Transient props 不會被往下傳：</p>
<p><img src="https://i.imgur.com/K4ROwak.png"></p>
<h2 id="Todo-List-總結"><a href="#Todo-List-總結" class="headerlink" title="Todo List 總結"></a>Todo List 總結</h2><p>透過實作簡單的 Todo List，其實我們就差不多學會了有關 React 的基礎：</p>
<ol>
<li>Component 組件</li>
</ol>
<p>開發 React 很重要的一點，就是去思考在頁面有哪些重複性高或相似的 Element，再透過 JSX 將這些 Element 建立成一個 Components，讓每個 Components 擁有重複性及可擴充性。</p>
<ol start="2">
<li>Props 參數</li>
</ol>
<p>Props 主要提供值給 Component，用來設定屬性或資料，因此就算是同一個組件，也會根據提供的 Props 而有所不同。</p>
<ol start="3">
<li>Style 樣式</li>
</ol>
<p>可透過幾種方式撰寫 React 中的 CSS，目前主流方法是透過 styled-components 這個套件來撰寫 CSS 語法。</p>
<ol start="4">
<li>Event handler 事件機制</li>
</ol>
<p>和過去在網頁添加事件監聽不同，必須先以 <code>querySelector()</code> 選取 DOM 元素：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'Hello!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.sayHello'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> sayHello<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>而 React 把 DOM 和 JavaScript 程式碼寫在一起，因此可直接在 DOM 元素加上 onClick、onSubmit、onKeyDown 等事件監聽：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">TodoItem</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">&#123;</span> todo<span class="token punctuation">,</span> handleDeleteTodo <span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">const</span> <span class="token function-variable function">handleDeleteClick</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token function">handleDeleteTodo</span><span class="token punctuation">(</span>todo<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token operator">&lt;</span>RedButton onClick<span class="token operator">=</span><span class="token punctuation">&#123;</span>handleDeleteClick<span class="token punctuation">&#125;</span><span class="token operator">></span>刪除<span class="token operator">&lt;</span><span class="token operator">/</span>RedButton<span class="token operator">></span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

      <span class="token comment">/* 也可簡化成箭頭函式 */</span>

<span class="token keyword">function</span> <span class="token function">TodoItem</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">&#123;</span> todo<span class="token punctuation">,</span> handleDeleteTodo <span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token operator">&lt;</span>RedButton onClick<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
      <span class="token function">handleDeleteTodo</span><span class="token punctuation">(</span>todo<span class="token punctuation">.</span>id<span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">></span>刪除<span class="token operator">&lt;</span><span class="token operator">/</span>RedButton<span class="token operator">></span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ol start="5">
<li>JSX 語法</li>
</ol>
<p>透過 JSX 語法，即可將 HTML 語法轉成 JavaScript 的形式，讓我們用來建立 React elements。</p>
<p>使用 JSX 時需注意下列幾點：</p>
<ul>
<li>class 是保留字，必須改寫成 className</li>
<li>可在大括號內寫程式碼，例如：<code>&#123; JS code &#125;</code>，也因此 inline-style 需改為駝峰式命名</li>
<li>沒有迴圈的概念，也沒有 if-else 判斷式<ul>
<li>解決方法：透過三元運算子，或是邏輯運算子 &amp;&amp; 進行判斷</li>
</ul>
</li>
</ul>
<p>此外，當我們要 render 一系列 list 的時候，會使用 <code>map()</code> 把資料變成一個陣列，然後 render 需要提供 key：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">&#123;</span>
   todos<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">todo</span> <span class="token operator">=></span> <span class="token operator">&lt;</span>TodoItem key<span class="token operator">=</span><span class="token punctuation">&#123;</span>todo<span class="token punctuation">.</span>id<span class="token punctuation">&#125;</span> todo<span class="token operator">=</span><span class="token punctuation">&#123;</span>todo<span class="token punctuation">&#125;</span> <span class="token operator">/</span><span class="token operator">></span> <span class="token punctuation">)</span> 
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<ol start="6">
<li>State 狀態</li>
</ol>
<p>是 React 中最重要的觀念，可透過 useState 設定 state 初始值，再以 setState 去改變 state。state 會對應到一個 UI，一旦 state 有變動，就會自動呼叫 render()。</p>
<p>state 最基本的語法如下：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token punctuation">[</span>currentValue<span class="token punctuation">,</span> setCurrentValue<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span>initialValue<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>在 React 當中，若要進行新增、編輯、刪除功能，雖然有許多方法能夠達成，但基本上有固定的作法：</p>
<ul>
<li>新增功能：解構語法</li>
</ul>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">handleButtonClick</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token function">setTodos</span><span class="token punctuation">(</span><span class="token punctuation">[</span>
    <span class="token punctuation">&#123;</span>
      <span class="token comment">// 要新增的 todo</span>
      id<span class="token operator">:</span> id<span class="token punctuation">.</span>current<span class="token punctuation">,</span>
      content<span class="token operator">:</span> value
      <span class="token comment">// 解構語法</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token operator">...</span>todos<span class="token punctuation">]</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">setValue</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  id<span class="token punctuation">.</span>current<span class="token operator">++</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>編輯功能：map()</li>
</ul>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">handleToggleIsDone</span> <span class="token operator">=</span> <span class="token parameter">id</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token function">setTodos</span><span class="token punctuation">(</span>todos<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">todo</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// 如果不是要修改的 todo id 就直接回傳</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>todo<span class="token punctuation">.</span>id <span class="token operator">!==</span> id<span class="token punctuation">)</span> <span class="token keyword">return</span> todo<span class="token punctuation">;</span>
    <span class="token comment">// 要修改的 todo id</span>
    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>
      <span class="token comment">// todo 原本的東西</span>
      <span class="token operator">...</span>todo<span class="token punctuation">,</span>
      <span class="token comment">// 要修改的屬性</span>
      isDone<span class="token operator">:</span> <span class="token operator">!</span>todo<span class="token punctuation">.</span>isDone
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>刪除功能：filter()</li>
</ul>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">handleDeleteTodo</span> <span class="token operator">=</span> <span class="token parameter">id</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// 留下該 id 以外的 todo</span>
  <span class="token function">setTodos</span><span class="token punctuation">(</span>todos<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">todo</span> <span class="token operator">=></span> todo<span class="token punctuation">.</span>id <span class="token operator">!==</span> id<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>


<h3 id=""><a href="#" class="headerlink" title=""></a></h3><hr>
<h2 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h2><p>這和以往的思考模式其實很不一樣，像是在切好的 UI 畫面上新增各種功能；而 React 則是先思考 state 狀態，再去想會如何改變畫面。</p>
<p>記住一個重點，就是 Component 之間可透過 props 把 state 傳遞下去。並且，只要 state 所有變動，就會觸發 render() 來更新 UI 畫面。</p>
<p>參考資料：</p>
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9zbmg5MDEwMC5tZWRpdW0uY29tLyVFNSVCOCVCOCVFOCVBNiU4QiVFNyU5QSU4NCVFNSVCOSVCRSVFNSU4MCU4Qi1yZWFjdC1ob29rcy0lRTQlQkIlOEIlRTclQjQlQjktdXNlc3RhdGUtdXNlZWZmZWN0LXVzZXJlZi00MGM5YWNkMGNjNGM=">常見的幾個 React hooks 教學-useState、useEffect、useRef<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLnRlY2hicmlkZ2UuY2MvMjAxOC8wMS8wNS9yZWFjdC1yZW5kZXItb3B0aW1pemF0aW9uLw==">React 性能優化大挑戰：一次理解 Immutable data 跟 shouldComponentUpdate<i class="fa fa-external-link-alt"></i></span></li>
</ul>
]]></content>
      <categories>
        <category>Front-End</category>
        <category>React</category>
      </categories>
      <tags>
        <tag>React</tag>
        <tag>Hooks</tag>
      </tags>
  </entry>
  <entry>
    <title>【學習筆記】RxJS - 封裝程式的藝術</title>
    <url>/rxjs-note/</url>
    <content><![CDATA[<blockquote>
<p>本篇為 <span class="exturl" data-url="aHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj1mMUtqSzhpckNiWQ==">JSDC 2017 - R201#D105​ RxJS - 封裝程式的藝術 By Jerry Hong<i class="fa fa-external-link-alt"></i></span> 這場演講的學習筆記。如有錯誤歡迎指正。</p>
</blockquote>
<span id="more"></span>

<h2 id="What’s-RxJS？"><a href="#What’s-RxJS？" class="headerlink" title="What’s RxJS？"></a>What’s RxJS？</h2><p>有一種說法是，我們可以把 RxJS 想像成 <code>Lodash for async.</code>，專門用來處理非同步行為。</p>
<p>或著更精準的說法，RxJS 就是「一個透過 Observable 來組合各種非同步行為的 Library」。</p>
<p>但我們不是已經有 Promise 來處理非同步了？為什麼我們還需要學 Observable 呢？</p>
<h2 id="Why-we-need-RxJS？"><a href="#Why-we-need-RxJS？" class="headerlink" title="Why we need RxJS？"></a>Why we need RxJS？</h2><p>以下方程式碼為例，這是用來實作無限滾動的程式碼：</p>
<p><img src="https://i.imgur.com/wXgT9xs.png"></p>
<p>這段程式碼的邏輯大致如下：</p>
<ul>
<li>註冊滾動事件：因為是無限滾動，我們需針對 Scroll 監聽事件。</li>
<li>判斷滾動高度：透過 event 拿到 DOM 物件，即可計算出使用者目前 Scroll 頁面多少 %。</li>
<li>發送 Request：當使用者 Scroll 超過 90%，就讓程式發送 Request，取得文章資料並顯示在畫面上。</li>
</ul>
<p>但這種寫法其實有些問題，每當使用者持續 Scroll 到 90% 時，會不斷發送同樣的 Request，此時畫面就會顯示許多重複的資料。</p>
<h3 id="一般解法：設定-Flag"><a href="#一般解法：設定-Flag" class="headerlink" title="一般解法：設定 Flag"></a>一般解法：設定 Flag</h3><p>我們可以透過「設定 Flag（標記）」來解決上述遇到的問題。在範例中，就是藉由判斷 isRequesting 的布林值，來決定要不要發送 Request：</p>
<ul>
<li>isRequesting 初始值為 false，代表沒有發送請求，當 isRequesting 為 false 時才會發送 Request。</li>
<li>發送 Request 前，設定 isRequesting 為 true。</li>
<li>接收到 Response 後，設定 isRequesting 為 false。</li>
</ul>
<h3 id="使用-Promise-的限制"><a href="#使用-Promise-的限制" class="headerlink" title="使用 Promise 的限制"></a>使用 Promise 的限制</h3><p>但是這段複雜的程式碼，其實隱藏一些問題：</p>
<ul>
<li>兩個非同步行為 Scroll 事件 &amp; 發送 request</li>
<li>同樣是非同步行為，卻使用不同的 pattern：Callback pattern &amp; Promise</li>
<li>由於 Promise 無法處理 Scroll 等事件，因此必須用兩種不同的 pattern</li>
<li>假設需求改成：接收到 fetch 資料，經過幾秒後再顯示訊息，則必須透過設定 setTimeout</li>
</ul>
<p>Promise 應該是為了解決 Callback 產生的問題，卻無法改善上述情形。</p>
<p>此外，這是在只設置一個 Flag 的情況下，假如需求不斷增長，必須設定更多的 Flags 時，程式碼將會變得更加複雜⋯⋯</p>
<blockquote>
<p>我們一定要寫這麼醜的程式碼嗎？</p>
</blockquote>
<h3 id="VanillaJS-vs-RxJS"><a href="#VanillaJS-vs-RxJS" class="headerlink" title="VanillaJS vs RxJS"></a>VanillaJS vs RxJS</h3><p>以下分別是使用原生 JavaScript 和 RxJS 所撰寫的程式碼：</p>
<p><img src="https://i.imgur.com/QXTxO4G.png"></p>
<p>可以很明顯看出，後者 RxJS 的寫法，即使不知道這些方法的實際用途，卻也能從語意大概猜出每個 function 的功能，大大提高程式碼可讀性。</p>
<hr>
<h2 id="What-is-Observable？"><a href="#What-is-Observable？" class="headerlink" title="What is Observable？"></a>What is Observable？</h2><p>想要瞭解 RxJS，就必須先從 Observable 談起。簡單來說，Observable 就是一個集合，再加上時間的維度：</p>
<pre class="line-numbers language-none"><code class="language-none">Obervable &#x3D; Collection + Time<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>再更白話一點，Observable 就像是一個「序列」，裡面的元素會隨著「時間推移」。</p>
<h3 id="Observable-建立與訂閱"><a href="#Observable-建立與訂閱" class="headerlink" title="Observable 建立與訂閱"></a>Observable 建立與訂閱</h3><ul>
<li>透過 Observable.fromEvent() 建立一個監聽 mousemove 事件的 observable：</li>
</ul>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">// mouseMove 這個變數就是一個 observable</span>
<span class="token keyword">var</span> mouseMove <span class="token operator">=</span> Observable
                  <span class="token punctuation">.</span><span class="token function">fromEvent</span><span class="token punctuation">(</span><span class="token constant">DOM</span><span class="token punctuation">,</span> <span class="token string">'mousemove'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<ul>
<li>接著就可以訂閱這個 observable，執行 mouseMove.subscribe() 時，就會傳入的 function：</li>
</ul>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">// 訂閱 mouseMove 這個 observable</span>
<span class="token keyword">var</span> subscription <span class="token operator">=</span> mouseMove
                    <span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span>x <span class="token operator">=></span> <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<ul>
<li>最後可透過 unsubscribe() 來移除這個監聽事件：</li>
</ul>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript">subscription<span class="token punctuation">.</span><span class="token function">unsubscribe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h3 id="更多建立-Observable-的方法"><a href="#更多建立-Observable-的方法" class="headerlink" title="更多建立 Observable 的方法"></a>更多建立 Observable 的方法</h3><p>以下舉幾個常見的方法，用來建立 Observable：</p>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">// 同步送出 2, 3, 4 後馬上結束</span>
Observable<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 與第一種方式相同，可同步送出 2, 3, 4 </span>
Observable<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// from 可接收 Promise 物件，並轉成 Observable</span>
Observable<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">'url'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 有提供 ajax 方法，直接把 http request 包成一個 Observable</span>
Observable<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token string">'url'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 透過 fromEvent 來監聽事件</span>
Observable<span class="token punctuation">.</span><span class="token function">fromEvent</span><span class="token punctuation">(</span><span class="token constant">DOM</span><span class="token punctuation">,</span> <span class="token string">'click'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 代表每 1000 毫秒，送出一個從 0 開始遞增的值</span>
Observable<span class="token punctuation">.</span><span class="token function">interval</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="觀念整理：observable-operator-oberver-subscription"><a href="#觀念整理：observable-operator-oberver-subscription" class="headerlink" title="觀念整理：observable / operator / oberver / subscription"></a>觀念整理：observable / operator / oberver / subscription</h3><p>這裡快速整理有關 observable 和 operators 的幾個重點：</p>
<h4 id="observable"><a href="#observable" class="headerlink" title="/ observable /"></a>/ observable /</h4><ul>
<li>是 Observable 的物件實例</li>
<li>在尚未被訂閱之前，只是記憶體中的一個物件，不會送出元素</li>
<li>可被訂閱（subscribe）</li>
<li>具有多種運算子（operators）</li>
</ul>
<h4 id="operators"><a href="#operators" class="headerlink" title="/ operators /"></a>/ operators /</h4><ul>
<li>是 Observable 的方法</li>
<li>可對元素進行運算處理</li>
<li>永遠回傳一個新的 observable（但有例外）</li>
</ul>
<p>以下方程式碼為例，其中 map 和 filter 就是 operators，用法其實就和 JavaScript 用來處理陣列的 map 和 filter 類似，只是對象換成了 Observable：</p>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">var</span> sub <span class="token operator">=</span> Observable
            <span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>x <span class="token operator">=></span> x <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>          <span class="token comment">// 回傳一個新的元素</span>
            <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>x <span class="token operator">=></span> x <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">===</span><span class="token number">0</span><span class="token punctuation">)</span>  <span class="token comment">// 過濾出想要的元素</span>
            <span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
              <span class="token function-variable function">next</span><span class="token operator">:</span> x <span class="token operator">=></span> <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span>
              <span class="token function-variable function">error</span><span class="token operator">:</span> err <span class="token operator">=></span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
              <span class="token function-variable function">complete</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="observer"><a href="#observer" class="headerlink" title="/ observer /"></a>/ observer /</h4><ul>
<li>用來訂閱 obervable 的物件</li>
<li>具有三個方法：next, error, complete<ul>
<li>next 為必要，error 與 complete 則是可選</li>
</ul>
</li>
</ul>
<h4 id="subscription"><a href="#subscription" class="headerlink" title="/ subscription /"></a>/ subscription /</h4><ul>
<li>在 observable 訂閱後回傳的物件</li>
<li>可用來退訂（unsubscribe），observable 就不會再執行其他動作</li>
<li>可以和其他訂單合併，一直執行退訂動作</li>
</ul>
<h3 id="舉個例子：生產線"><a href="#舉個例子：生產線" class="headerlink" title="舉個例子：生產線"></a>舉個例子：生產線</h3><p><img src="https://i.imgur.com/5BLZJz0.png"></p>
<ul>
<li>observable 的元素：生產線上的產品</li>
<li>operator：生產線上的機具，用來包裝或篩選產品</li>
<li>observer：啟動生產線的人員</li>
</ul>
<h2 id="Marble-Diagram-彈珠圖"><a href="#Marble-Diagram-彈珠圖" class="headerlink" title="Marble Diagram 彈珠圖"></a>Marble Diagram 彈珠圖</h2><p>由於 Observable 具有時間的維度，因此我們常會使用圖像的方式來表達，也就是彈珠圖（Marble Diagram）。</p>
<h3 id="呈現方式"><a href="#呈現方式" class="headerlink" title="呈現方式"></a>呈現方式</h3><ul>
<li><code>-</code>：由左向右代表時間推移</li>
<li><code>n(0-9/a-z)</code>：送出的元素（next）</li>
<li><code>|</code>：送出結束（complete）</li>
<li><code>#</code>：送出錯誤（error）</li>
<li><code>()</code>：同步送出</li>
</ul>
<pre class="line-numbers language-none"><code class="language-none">---0---1---2---3--
---0---1---2---3|
---0---1---2---3#<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>以下舉幾個範例：</p>
<ul>
<li><code>Observable.of(1, 2, 3)</code>：同步送出後馬上結束</li>
</ul>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">(</span><span class="token number">123</span><span class="token operator">|</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ul>
<li><code>Observable.interval(10)</code>：每隔 10 毫秒送出，注意 0 也會占一格</li>
</ul>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">-</span><span class="token number">01234.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ul>
<li><code>Observable.fromEvent(DOM, &#39;click&#39;)</code>：監聽 click 事件，當使用者點擊時才會發送 event 物件</li>
</ul>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">--</span><span class="token operator">-</span>e<span class="token operator">--</span>ee<span class="token operator">-</span>e<span class="token operator">--</span><span class="token operator">...</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h3 id="綜合範例"><a href="#綜合範例" class="headerlink" title="綜合範例"></a>綜合範例</h3><h4 id="例一：take-amp-map-amp-filter"><a href="#例一：take-amp-map-amp-filter" class="headerlink" title="例一：take &amp; map &amp; filter"></a>例一：take &amp; map &amp; filter</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">Observable<span class="token punctuation">.</span><span class="token function">interval</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>   <span class="token comment">// 每隔 10 毫秒送出</span>
  <span class="token punctuation">.</span><span class="token function">take</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>                <span class="token comment">// 只取前三個元素</span>
  <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">x</span> <span class="token operator">=></span> x <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>        <span class="token comment">// 將每個元素加 1</span>
  <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">x</span> <span class="token operator">=></span> x<span class="token operator">/</span><span class="token number">2</span> <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">// 篩選出除 2 餘數等於 1 的元素</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>彈珠圖如下：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">-</span><span class="token number">01234.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token operator">-</span><span class="token number">01</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">|</span><span class="token punctuation">)</span>
<span class="token operator">-</span><span class="token number">12</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token operator">|</span><span class="token punctuation">)</span>
<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token operator">|</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="例二：takeUntil-amp-fromEvent"><a href="#例二：takeUntil-amp-fromEvent" class="headerlink" title="例二：takeUntil &amp; fromEvent"></a>例二：takeUntil &amp; fromEvent</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">Observable<span class="token punctuation">.</span><span class="token function">interval</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span>   <span class="token comment">// 每隔 20 毫秒送出</span>
<span class="token punctuation">.</span><span class="token function">takeUntil</span><span class="token punctuation">(</span>      <span class="token comment">// 當某件事情發生時 Observable 會結束</span>
  Observable
    <span class="token punctuation">.</span><span class="token function">fromEvent</span><span class="token punctuation">(</span><span class="token constant">DOM</span><span class="token punctuation">,</span> <span class="token string">'click'</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>彈珠圖如下：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">--</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span><span class="token number">2</span><span class="token operator">-</span><span class="token number">3</span><span class="token operator">-</span><span class="token number">4</span><span class="token operator">-</span><span class="token number">5.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>e<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span>

<span class="token operator">--</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span><span class="token number">2</span><span class="token operator">|</span>          <span class="token comment">// 當點擊事件發生時馬上中止</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>


<h4 id="例三：map-amp-margeAll-gt-mergeMap-gt-switchMap-gt-exhaustMap"><a href="#例三：map-amp-margeAll-gt-mergeMap-gt-switchMap-gt-exhaustMap" class="headerlink" title="例三：map &amp; margeAll =&gt; mergeMap =&gt; switchMap =&gt; exhaustMap"></a>例三：map &amp; margeAll =&gt; mergeMap =&gt; switchMap =&gt; exhaustMap</h4><ul>
<li>map &amp; margeAll</li>
</ul>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">Observable
  <span class="token punctuation">.</span><span class="token function">fromEvent</span><span class="token punctuation">(</span><span class="token constant">DOM</span><span class="token punctuation">,</span> <span class="token string">'click'</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> 
    <span class="token function">ajax</span><span class="token punctuation">(</span><span class="token string">'url...'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">margeAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment">// 攤平變成一維</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>彈珠圖如下：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>e<span class="token operator">-</span>e<span class="token operator">--</span><span class="token operator">--</span>   <span class="token comment">// 使用者點擊兩次</span>
<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>o<span class="token operator">-</span>o<span class="token operator">--</span><span class="token operator">--</span>   <span class="token comment">// 將 event 物件轉成 request 物件，同樣是個 observable</span>
     \ \
     \ <span class="token operator">--</span><span class="token operator">--</span>r<span class="token operator">|</span>
     <span class="token operator">--</span><span class="token operator">--</span>r<span class="token operator">|</span>

<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>r<span class="token operator">-</span>r<span class="token operator">-</span>  <span class="token comment">// 收到的 response</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>如果不使用 margeAll 就直接訂閱結果，會因為 Observable 裡面還有 Observable，而無法拿到實際的 response，因此需要先將二維的 Observable 攤平，再繼續往下送結果。</p>
<ul>
<li>map + margeAll =&gt; 可簡寫成 mergeMap</li>
</ul>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">Observable
  <span class="token punctuation">.</span><span class="token function">fromEvent</span><span class="token punctuation">(</span><span class="token constant">DOM</span><span class="token punctuation">,</span> <span class="token string">'click'</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">margeMap</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> 
    <span class="token function">ajax</span><span class="token punctuation">(</span><span class="token string">'url...'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>switchMap =&gt; 當第一個 Observable 尚未處理完，又送出第二個 Observable 時，取消舊的訂閱，只想保留新的結果</li>
</ul>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">Observable
  <span class="token punctuation">.</span><span class="token function">fromEvent</span><span class="token punctuation">(</span><span class="token constant">DOM</span><span class="token punctuation">,</span> <span class="token string">'click'</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">switchMap</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> 
    <span class="token function">ajax</span><span class="token punctuation">(</span><span class="token string">'url...'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>彈珠圖如下：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>e<span class="token operator">-</span>e<span class="token operator">--</span><span class="token operator">--</span>
<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>o<span class="token operator">-</span>o<span class="token operator">--</span><span class="token operator">--</span>
     \ \
     \ <span class="token operator">--</span><span class="token operator">--</span>r<span class="token operator">|</span>    <span class="token comment">// 訂閱後進來的 Observable</span>
     <span class="token operator">--</span><span class="token operator">!</span>      <span class="token comment">// 退訂原本的 Observable</span>

<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>r<span class="token operator">-</span>    <span class="token comment">// 只保留後面的 response</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>exhaustMap =&gt; 當第一個 Observable 尚未處理完，又送出第二個 Observable 時，不管新的，只想保留舊的結果</li>
</ul>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">Observable
  <span class="token punctuation">.</span><span class="token function">fromEvent</span><span class="token punctuation">(</span><span class="token constant">DOM</span><span class="token punctuation">,</span> <span class="token string">'click'</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">exhaustMap</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> 
    <span class="token function">ajax</span><span class="token punctuation">(</span><span class="token string">'url...'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>彈珠圖如下：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>e<span class="token operator">-</span>e<span class="token operator">--</span><span class="token operator">--</span>
<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>o<span class="token operator">-</span>o<span class="token operator">--</span><span class="token operator">--</span>
     \ \
     \ <span class="token operator">--</span><span class="token operator">--</span>r<span class="token operator">|</span>    <span class="token comment">// 不會訂閱後進來的 Observable</span>
     <span class="token operator">--</span><span class="token operator">--</span>r<span class="token operator">|</span>    <span class="token comment">// 訂閱舊的 Observable</span>

<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>r<span class="token operator">--</span><span class="token operator">-</span>  <span class="token comment">// 只保留舊的 response</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>


<h3 id="【範例】無限滾動"><a href="#【範例】無限滾動" class="headerlink" title="【範例】無限滾動"></a>【範例】無限滾動</h3><p>接著回到一開始的無限滾動，使用 RxJS 語法邏輯如下：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">Observable<span class="token punctuation">.</span><span class="token function">fromEvent</span><span class="token punctuation">(</span>scrollView<span class="token punctuation">,</span> <span class="token string">'scroll'</span><span class="token punctuation">)</span>  <span class="token comment">// scroll 事件</span>
  <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">event</span> <span class="token operator">=></span> event<span class="token punctuation">.</span>target<span class="token punctuation">)</span>        <span class="token comment">// 轉成被 scroll 的 DOM 物件</span>
  <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>hasScrolled<span class="token punctuation">)</span>                  <span class="token comment">// DOM 物件被 scroll 了幾 %</span>
  <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">percent</span> <span class="token operator">=></span> percent <span class="token operator">></span> <span class="token number">0.9</span><span class="token punctuation">)</span>  <span class="token comment">// scroll 超過 90% 就繼續後面動作</span>
  <span class="token punctuation">.</span><span class="token function">exhaustMap</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">'url...'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 在第一個 Observable 處理完之前，不會處理訂閱的 Observable</span>
  <span class="token punctuation">.</span><span class="token function">take</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>    <span class="token comment">// 當接收到 3 次 response，這個 Observable 就直接 complete，不會再送出元素</span>
  <span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// Do sometheing to change view</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>


<h2 id="Make-Your-Code-Clean"><a href="#Make-Your-Code-Clean" class="headerlink" title="Make Your Code Clean"></a>Make Your Code Clean</h2><p>在熟悉如何使用 RxJS 語法之後，能夠提升程式碼可讀性；但，實際上真是如此嗎？</p>
<p>隨著程式碼以及需求漸趨複雜，就算使用 Observable，還是可能會寫出不易閱讀的程式碼，這時我們需要思考的，是如何讓簡潔化我們寫的程式碼。</p>
<p>也就是如何達成 Code Clean 的三大重點：</p>
<ul>
<li>Readable 可讀的</li>
<li>Composable 可組合的</li>
<li>Testable 可測試的</li>
</ul>
<h3 id="1-Readable-可讀的"><a href="#1-Readable-可讀的" class="headerlink" title="(1) Readable 可讀的"></a>(1) Readable 可讀的</h3><h3 id="【範例】scrollOverNinePercent-amp-getPostObservable"><a href="#【範例】scrollOverNinePercent-amp-getPostObservable" class="headerlink" title="【範例】scrollOverNinePercent &amp; getPostObservable"></a>【範例】<code>scrollOverNinePercent</code> &amp; <code>getPostObservable</code></h3><ol>
<li>抽取出有意義的、可能被多次使用的 Observable，並 assign 給一個變數：<code>$scroll</code></li>
</ol>
<p><img src="https://i.imgur.com/02pG8l2.png"></p>
<ol start="2">
<li>抽取出共用的 Operator，並命名為一個 function：<code>scrollOverNinePercent()</code></li>
</ol>
<p><img src="https://i.imgur.com/nVzS445.png"></p>
<ol start="3">
<li>為了避免出現多個小括號，可使用 <code>let</code> operator，即可取得 function 的回傳值</li>
</ol>
<p><img src="https://i.imgur.com/oYZpodN.png"></p>
<ol start="4">
<li>將共用 function 放到獨立的檔案</li>
</ol>
<p><img src="https://i.imgur.com/9YHOHSi.png"></p>
<ol start="5">
<li>抽離 Observable creator，也就是抽出「有建立新的 Observable」的程式碼：<code>getPostObservable()</code></li>
</ol>
<p><img src="https://i.imgur.com/TFVZKyO.png"></p>
<p>修改後的程式碼如下，透過簡化邏輯，提高了程式碼可讀性：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> scrollOverNinePercent <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'...'</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> getPostObservable <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'xxx'</span><span class="token punctuation">;</span>

Observable<span class="token punctuation">.</span><span class="token function">fromEvent</span><span class="token punctuation">(</span>scrollView<span class="token punctuation">,</span> <span class="token string">'scroll'</span><span class="token punctuation">)</span>  <span class="token comment">// scroll 事件</span>

scroll$
  <span class="token punctuation">.</span><span class="token function">let</span><span class="token punctuation">(</span>scrollOverNinePercent<span class="token punctuation">)</span>    <span class="token comment">// 判斷是否滾動超過 90%</span>
  <span class="token punctuation">.</span><span class="token function">exhaustMap</span><span class="token punctuation">(</span>getPostObservable<span class="token punctuation">)</span> <span class="token comment">// 抓取文章 API</span>
  <span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// Do sometheing to change view</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="2-Composable-可組合的"><a href="#2-Composable-可組合的" class="headerlink" title="(2) Composable 可組合的"></a>(2) Composable 可組合的</h3><p>可組合的意思並不在於是否可重用，重點是「能夠和其他程式碼組合，來針對不同情境使用」。</p>
<p>在 RxJS 中，盡可能使用 Observable 來撰寫程式碼，因為 Observable 本身就是可組合的！</p>
<h3 id="透過-Pipe-來組合多個-Operators"><a href="#透過-Pipe-來組合多個-Operators" class="headerlink" title="透過 Pipe 來組合多個 Operators"></a>透過 Pipe 來組合多個 Operators</h3><p>在演講中，有提到 RxJS 5.5 版本發佈了新特性：lettable operator，但其實 lettable 這個詞，後來又被改為 pipeable，因此後續皆以 Pipeable Operators（操作符）稱呼。</p>
<p><code>pipe</code> 是 Observable 的一部分，不需導入即可使用，可代替 <code>let</code> 操作符，用來組合 Operators，傳入的 Observable 會回傳新的 Observable，再繼續往下傳遞。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">source$<span class="token punctuation">.</span><span class="token function">let</span><span class="token punctuation">(</span>myOperator<span class="token punctuation">)</span> 

source$<span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>myOperator<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>要把 Operators 從 Observable 中獨立出來，必須解決 Operator 名稱和 JavaScript 的關鍵字衝突問題。</p>
<p>因此對部分 Pipeable Operators 名稱進行修改：</p>
<ul>
<li>do -&gt; tap</li>
<li>catch -&gt; catchError</li>
<li>switch -&gt; switchAll</li>
<li>finally -&gt; finalize</li>
</ul>
<blockquote>
<p>詳細可參考這篇文章：<span class="exturl" data-url="aHR0cHM6Ly9yZWFkMDEuY29tL3poLXR3L254ZDR5ekouaHRtbCMuWVYwQ1JwNHpaVFk=">[譯] Pipeable 操作符<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
<h3 id="【範例】scrollOver-amp-onErrorReturn"><a href="#【範例】scrollOver-amp-onErrorReturn" class="headerlink" title="【範例】scrollOver &amp; onErrorReturn"></a>【範例】<code>scrollOver</code> &amp; <code>onErrorReturn</code></h3><h4 id="1-scrollOverNinePercent-gt-scrollOver"><a href="#1-scrollOverNinePercent-gt-scrollOver" class="headerlink" title="1. scrollOverNinePercent() =&gt; scrollOver()"></a>1. <code>scrollOverNinePercent()</code> =&gt; <code>scrollOver()</code></h4><p>還記得我們剛才寫的 <code>scrollOverNinePercent()</code> 嗎？實際上，這個 Function 並不易用來重組，因為 scroll 觸發時機點不一定會在 90%。</p>
<p><img src="https://i.imgur.com/9Co9BLb.png"></p>
<p>這時可透過 <span class="exturl" data-url="aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3dpa2kvJUU5JUFCJTk4JUU5JTk4JUI2JUU1JTg3JUJEJUU2JTk1JUIw">Higher Order Function<i class="fa fa-external-link-alt"></i></span> 解決，也就是用一個 Function 回傳另一個新的 Function，作法如下：</p>
<ol>
<li>在第一個 Function 傳入 <code>criticalP</code>（代表臨界點），取代原本 0.9 的位置 </li>
</ol>
<p><img src="https://i.imgur.com/nC7dCI6.png"></p>
<ol start="2">
<li>接著可使用 Pipeable Operators，也就是改用 <code>pipe</code> 來組合多個 operator，傳入的 Observable 會回傳新的 Observable，再繼續往下傳遞</li>
</ol>
<p><img src="https://i.imgur.com/dec0xAI.png"></p>
<p>修改後的程式碼如下，讓 scrollOver() 的使用更加彈性，同時也透過 pipe 來簡化程式碼邏輯：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> scrollOver <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'...'</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> getPostObservable <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'xxx'</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> exhaustMap <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'rxjs/operators'</span><span class="token punctuation">;</span>

Observable<span class="token punctuation">.</span><span class="token function">fromEvent</span><span class="token punctuation">(</span>scrollView<span class="token punctuation">,</span> <span class="token string">'scroll'</span><span class="token punctuation">)</span>  <span class="token comment">// scroll 事件</span>

scroll$
  <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>
    <span class="token function">scrollOver</span><span class="token punctuation">(</span><span class="token number">0.9</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">exhaustMap</span><span class="token punctuation">(</span>getPostObservable<span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// Do sometheing to change view</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="2-getPostObservable-gt-onErrorReturn"><a href="#2-getPostObservable-gt-onErrorReturn" class="headerlink" title="2. getPostObservable() =&gt; onErrorReturn()"></a>2. <code>getPostObservable()</code> =&gt; <code>onErrorReturn()</code></h4><ol>
<li>取得文章的 Function，可能會需要進行錯誤處理，例如透過 <code>retry</code> 來重新發送</li>
</ol>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> defaultData <span class="token operator">=</span> <span class="token punctuation">&#123;</span> success<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> data<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token function-variable function">getPostObservable</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> 
  Observable<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token string">'url...'</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">retry</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 當文章取得失敗時，會重新嘗試三次後，還是失敗就拋出例外</span>
    <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> Observable<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>defaultData<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 如發送三次仍失敗，則回傳預設值</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ol start="2">
<li>經過簡化改回傳 Array，Array 會自動被轉成 Observable：</li>
</ol>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> defaultData <span class="token operator">=</span> <span class="token punctuation">&#123;</span> success<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> data<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token function-variable function">getPostObservable</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> 
  Observable<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token string">'url...'</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">retry</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">[</span>defaultData<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ol start="3">
<li>同樣改用 pipe 來組合運算子</li>
</ol>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> retry<span class="token punctuation">,</span> catError <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'rxjs/operators'</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> defaultData <span class="token operator">=</span> <span class="token punctuation">&#123;</span> success<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> data<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token function-variable function">getPostObservable</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> 
  Observable<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token string">'url...'</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>
      <span class="token function">retry</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token function">catchError</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">[</span>defaultData<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ol start="4">
<li>也可以試著自己定義一個 Pipeable Operators：<code>onErrorReturn</code></li>
</ol>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> retry<span class="token punctuation">,</span> catError <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'rxjs/operators'</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> defaultData <span class="token operator">=</span> <span class="token punctuation">&#123;</span> success<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> data<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token function-variable function">onErrorReturn</span> <span class="token operator">=</span> <span class="token parameter">defaultData</span> <span class="token operator">=></span>
  <span class="token function">catchError</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">[</span>defaultData<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token function-variable function">getPostObservable</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> 
  Observable<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token string">'url...'</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>
      <span class="token function">retry</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token function">onErrorReturn</span><span class="token punctuation">(</span>defaultData<span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ol start="5">
<li>再把 <code>onErrorReturn</code> 放到獨立的檔案，這段邏輯即可被重用</li>
</ol>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> retry<span class="token punctuation">,</span> catError <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'rxjs/operators'</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> onErrorReturn <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'...'</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> defaultData <span class="token operator">=</span> <span class="token punctuation">&#123;</span> success<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> data<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token function-variable function">getPostObservable</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> 
  Observable<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token string">'url...'</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>
      <span class="token function">retry</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token function">onErrorReturn</span><span class="token punctuation">(</span>defaultData<span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="【其他應用】物件拖拉-vs-取消請求"><a href="#【其他應用】物件拖拉-vs-取消請求" class="headerlink" title="【其他應用】物件拖拉 vs 取消請求"></a>【其他應用】物件拖拉 vs 取消請求</h3><p>這裡舉 RxJS 的經典案例「物件拖拉（Drag &amp; Drop）」，可拆解成以下步驟：</p>
<ol>
<li>使用者對目標物按下滑鼠左鍵：mouseDown$</li>
<li>使用者移動滑鼠：mouseMove$</li>
<li>直到放開滑鼠左鍵：mouseUp$</li>
</ol>
<p>若以程式碼表示：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">mouseDown$
  <span class="token punctuation">.</span><span class="token function">switchMap</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span>  <span class="token comment">// 將監聽對象 mouseDown$ 轉成 mouseMove$</span>
    mouseMove$<span class="token punctuation">.</span><span class="token function">takeUntil</span><span class="token punctuation">(</span>mouseUp$<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// 直到 mouseUp$ 時結束</span>
  <span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token parameter">value</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// do something</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>再舉另一個「點擊 Neflix 影片清單後，馬上取消請求」為例，動作可拆解如下：</p>
<ol>
<li>使用者點擊影片方塊：mouseClick$</li>
<li>發送 Request 讀取影片資訊：request$</li>
<li>如果在尚未接收到 Response 之前，就按下取消關閉視窗：cancel$</li>
</ol>
<p>程式碼如下：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">mouseClick$
  <span class="token punctuation">.</span><span class="token function">switchMap</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> 
    request$<span class="token punctuation">.</span><span class="token function">takeUntil</span><span class="token punctuation">(</span>cancel$<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token parameter">value</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// do something</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>嗯？這段程式碼怎麼好像似曾相識？</p>
<p>把剛才的兩個範例拿來比對：</p>
<p><img src="https://i.imgur.com/yhKwbV5.png"></p>
<p>可以發現到，程式碼竟然有 87% 像！因為兩段邏輯其實極為類似，都是在「做某件事情後，再做另一個非同步行為」，而這個非同步行為，會在某個時間點、發生某件事情時而被取消。</p>
<p>既然是相同邏輯，何不重用乎？</p>
<h3 id="3-Testable-可測試的"><a href="#3-Testable-可測試的" class="headerlink" title="(3) Testable 可測試的"></a>(3) Testable 可測試的</h3><p>程式碼寫得好壞，通常是和「是否可進行測試」畫上等號的。因為能夠被測試的程式，才能被檢驗程式的品質。</p>
<p>然而，在非同步的程式碼，其實是不易去撰寫測試的。</p>
<p>通常在撰寫非同步測試時，會有以下兩種方法：</p>
<ul>
<li>模擬非同步測試<ul>
<li>例如：使用 setTimeout 去模擬等待時間；或透過 <span class="exturl" data-url="aHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvSmVzdF8oSmF2YVNjcmlwdF9mcmFtZXdvcmsp">Jest<i class="fa fa-external-link-alt"></i></span> 模擬非同步行為，可參考這篇討論：<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2xvZGFzaC9sb2Rhc2gvaXNzdWVzLzI4OTM=">_.debounce() breaks fake timers #2893<i class="fa fa-external-link-alt"></i></span></li>
<li>情境複雜不易模擬，且容易出錯</li>
<li>出錯時不知道要找誰：Lodash 提供非同步行為 &amp; Jest 提供時間模擬</li>
</ul>
</li>
<li>精確非同步測試<ul>
<li>例如：真的等待需要的時間</li>
<li>測試會花費過多的時間</li>
</ul>
</li>
</ul>
<p>那麼，RxJS 是如何解決非同步測試遇到的問題呢？</p>
<h3 id="問題解決：Marble-Testing-彈珠測試"><a href="#問題解決：Marble-Testing-彈珠測試" class="headerlink" title="問題解決：Marble Testing 彈珠測試"></a>問題解決：Marble Testing 彈珠測試</h3><p>還記得我們在前面提到的彈珠圖嗎？我們可透過彈珠圖來撰寫非同步測試：</p>
<ul>
<li>用 Marble Diagram 撰寫測試<ul>
<li>只要會畫圖就能寫測試</li>
</ul>
</li>
<li>100% 可重複的測試</li>
<li>RxJS 提供時間模擬，同時也提供測試方法<ul>
<li>不需花時間等待測試結果</li>
</ul>
</li>
</ul>
<p>以下是之前舉的彈珠圖範例：</p>
<p><img src="https://i.imgur.com/s3kEdzR.png"></p>
<p>撰寫測試如下，透過預知最後結果的彈珠圖，我們可用來進行單元測：</p>
<p><img src="https://i.imgur.com/asnKEUk.png"></p>
<ul>
<li>更多 Unit Test 教學，可參考這篇：<span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmplcnJ5LWhvbmcuY29tL3NwZWFraW5nL3J4anMtbWFyYmxlLXRlc3Rpbmcv">如何「畫圖」寫測試 - RxJS Marble Test<i class="fa fa-external-link-alt"></i></span></li>
</ul>
<h2 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h2><blockquote>
<p>Programming is thinking, not typing. – Cassy Pottan</p>
</blockquote>
<p>我們在撰寫程式時，重要的應該是如何去思考，而非單純敲打文字。</p>
<blockquote>
<p>Be a Programmer, not just a Coder.</p>
</blockquote>
<p>當一個有想法的開發者，而不只是一個碼農。</p>
<p>時隔半年再來重新回顧 RxJS 的演講，一開始還不太懂 pipe 和 subscribe 使用時機？Operators 之間的差別？Observable 到底好用在哪？直到陸續在工作中實際應用，儘管偶爾和是會寫出和自己預期不符的程式碼，踩過一個又一個坑，累積不少經驗值之後，終於逐漸理解 Observable 的神奇魔力，期許自己未來能夠掌握 RxJS，靈活應對各種非同步行為。</p>
<h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmplcnJ5LWhvbmcuY29tL3NwZWFraW5nL3J4anMtYXJ0Lw==">RxJS - 封裝程式的藝術 - 演講簡報<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cubGVhcm5yeGpzLmlvLw==">btroncone/learn-rxjs<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL1J4SlMtQ04vbGVhcm4tcnhqcy1vcGVyYXRvcnM=">RxJS-CN/learn-rxjs-operators<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9pdGhlbHAuaXRob21lLmNvbS50dy91c2Vycy8yMDEwMzM2Ny9pcm9ubWFuLzExOTk=">30 天精通 RxJS<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLnRlY2hicmlkZ2UuY2MvMjAxNy8xMi8wOC9yeGpzLw==">希望是最淺顯易懂的 RxJS 教學<i class="fa fa-external-link-alt"></i></span></li>
</ul>
]]></content>
      <categories>
        <category>Front-End</category>
      </categories>
      <tags>
        <tag>Angular</tag>
        <tag>RxJS</tag>
      </tags>
  </entry>
  <entry>
    <title>[week 17] 後端中階 - 淺談 Sequelize：使用 ORM 框架串接資料庫</title>
    <url>/sequelize-orm/</url>
    <content><![CDATA[<blockquote>
<p>本篇為 <span class="exturl" data-url="aHR0cHM6Ly9saWRlbXkuY29tL3AvYmUyMDEtZXhwcmVzcy1zZXF1ZWxpemU=">[BE201] 後端中階：Express 與 Sequelize<i class="fa fa-external-link-alt"></i></span> 這門課程的學習筆記。如有錯誤歡迎指正！</p>
</blockquote>
<p>瞭解如何使用 Express 這套 Web 應用框架之後，再來要介紹新的工具：Sequelize，這是一款基於 Node.js 的非同步 ORM 框架，讓我們能透過 ORM（物件關聯對映）來開發網頁，以物件導向的概念來操作資料庫。</p>
<span id="more"></span>

<pre class="line-numbers language-none"><code class="language-none">學習目標：

 P1 了解什麼是 ORM
 P1 了解 ORM 的優缺點
 P1 了解什麼是 N+1 problem
 P1 我知道如何部署 Node.js 應用程式到 heroku<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<hr>
<h2 id="什麼是-ORM？"><a href="#什麼是-ORM？" class="headerlink" title="什麼是 ORM？"></a>什麼是 ORM？</h2><p>前面我們提到 Sequelize 是一款 ORM 框架，那什麼是 ORM？</p>
<p>ORM（Object Relational Mapping），中文為物件關聯對映。是一種將關聯式資料庫（MySQL）映射（mapping）至物件導向（OOP）的資料抽象化技術。</p>
<p>簡單來說，在網站開發 MVC 結構中，ORM 扮演資料庫系統和 Model 資料容器的中間橋梁，讓我們能透過程式語言（JavaScript）去操作資料庫語言（SQL），是實作物件導向概念的一種工具模式。</p>
<pre class="line-numbers language-none"><code class="language-none">JavaScript（物件） -&gt; ORM -&gt; SQL（資料）<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h2 id="初探-Sequelize"><a href="#初探-Sequelize" class="headerlink" title="初探 Sequelize"></a>初探 Sequelize</h2><p>初步瞭解什麼是 ORM 框架以後，接著我們要來實際操作 Sequelize 這套 Library，詳細可參考 <span class="exturl" data-url="aHR0cHM6Ly9zZXF1ZWxpemUub3JnL21hc3Rlci9tYW51YWwvZ2V0dGluZy1zdGFydGVkLmh0bWw=">Sequelize 官方文件<i class="fa fa-external-link-alt"></i></span>。</p>
<p>透過 npm 來安裝套件，如果專案設在新開的目錄底下，則需先初始化 npm：</p>
<pre class="line-numbers language-none"><code class="language-none">$ npm init
$ npm install --save sequelize<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>並根據使用的 database 來安裝相關套件，本篇使用 MySQL 作為範例：</p>
<pre class="line-numbers language-none"><code class="language-none"># One of the following:
$ npm install --save pg pg-hstore # Postgres
$ npm install --save mysql2
$ npm install --save mariadb
$ npm install --save sqlite3
$ npm install --save tedious # Microsoft SQL Server<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="連線資料庫"><a href="#連線資料庫" class="headerlink" title="連線資料庫"></a>連線資料庫</h3><p>建立 index.js 來引入 sequelize 套件，並透過物件導向概念來連線資料庫：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 引入 sequelize 套件</span>
<span class="token keyword">const</span> <span class="token punctuation">&#123;</span> Sequelize <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'sequelize'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 透過 new 建立 Sequelize 這個 class，而 sequelize 就是物件 instance</span>
<span class="token keyword">const</span> sequelize <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Sequelize</span><span class="token punctuation">(</span><span class="token string">'database'</span><span class="token punctuation">,</span> <span class="token string">'username'</span><span class="token punctuation">,</span> <span class="token string">'password'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>
  host<span class="token operator">:</span> <span class="token string">'localhost'</span><span class="token punctuation">,</span>
  dialect<span class="token operator">:</span> <span class="token string">'mysql'</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="定義物件：Model-模型"><a href="#定義物件：Model-模型" class="headerlink" title="定義物件：Model 模型"></a>定義物件：Model 模型</h3><p>由於 ORM 是透過物件與資料庫做連線，物件中的屬性會對映到資料庫欄位，例如資料型態、是否可為空值等等。</p>
<p>透過 <code>sequelize.define</code> 指令可定義 Model 模型：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 定義一個叫做 User 的資料結構</span>
<span class="token keyword">const</span> User <span class="token operator">=</span> sequelize<span class="token punctuation">.</span><span class="token function">define</span><span class="token punctuation">(</span><span class="token string">'User'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// 定義 Model 屬性</span>
  firstName<span class="token operator">:</span> <span class="token punctuation">&#123;</span>     　　　 <span class="token comment">// 欄位名稱</span>
    type<span class="token operator">:</span> Sequelize<span class="token punctuation">.</span><span class="token constant">STRING</span><span class="token punctuation">,</span>  <span class="token comment">//  資料型態</span>
    allowNull<span class="token operator">:</span> <span class="token boolean">false</span>　　　<span class="token comment">// 能不能為空，預設是 true</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  lastName<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    type<span class="token operator">:</span> Sequelize<span class="token punctuation">.</span><span class="token constant">STRING</span>
    <span class="token comment">// allowNull defaults to true</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// Other model options go here</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>再來必須呼叫 <code>sequelize.sync()</code> 來執行程式，Sequelize 就會在資料庫建立欄位。而這個指令會回傳一個 promise 物件，需要用 <code>.then()</code> 來接續後面的動作。</p>
<blockquote>
<p>這部分可參考之前的學習筆記：<span class="exturl" data-url="aHR0cHM6Ly9oYWNrbWQuaW8vQEhlaWRpLUxpdS9ub3RlLWZldGNoLWFuZC1wcm9taXNl">[week 13] Fetch &amp; Promise 補充<i class="fa fa-external-link-alt"></i></span>。</p>
</blockquote>
<h3 id="create-：新增一筆資料"><a href="#create-：新增一筆資料" class="headerlink" title=".create()：新增一筆資料"></a><code>.create()</code>：新增一筆資料</h3><p>如果要新增資料，就在 <code>.then()</code> 裡面使用 <code>&lt;Table Name&gt;.create()</code>，傳入欄位名稱和資料內容：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">sequelize<span class="token punctuation">.</span><span class="token function">sync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// 寫入對映欄位名稱的資料內容</span>
  User<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
    <span class="token comment">// 記得 value 字串要加上引號</span>
    firstName<span class="token operator">:</span> <span class="token string">'Heidi'</span><span class="token punctuation">,</span>
    lastName<span class="token operator">:</span><span class="token string">'Liu'</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// 執行成功後會印出文字</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'successfully created!!'</span><span class="token punctuation">)</span> 
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>在 CLI 介面執行後會發現 SQL log：</p>
<p><img src="https://i.imgur.com/sV6Dauj.png"></p>
<p>Sequelize 就會根據 Model 定義，自動在資料庫建立 users table 和一筆資料，並且會自動生成 createdAt 和 updateAt 兩個欄位：</p>
<p><img src="https://i.imgur.com/apIryUS.png"></p>
<h3 id="findAll-：選取所有資料"><a href="#findAll-：選取所有資料" class="headerlink" title=".findAll()：選取所有資料"></a><code>.findAll()</code>：選取所有資料</h3><p>如果要選取所有資料，就在 <code>.then()</code> 裡面用 <code>&lt;Table Name&gt;.findAll()</code>，而 <code>findAll()</code> 會回傳一個 promise，因此也要用 <code>.then()</code> 來接收：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">sequelize<span class="token punctuation">.</span><span class="token function">sync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  User<span class="token punctuation">.</span><span class="token function">findAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">users</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// 用 JSON.stringify() 來格式化輸出</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"All users:"</span><span class="token punctuation">,</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>users<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>就能拿到 All users 的資料：</p>
<p><img src="https://i.imgur.com/mY7pNA4.png"></p>
<p>若試著印出 <code>user[0]</code> 的資料：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">sequelize<span class="token punctuation">.</span><span class="token function">sync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  User<span class="token punctuation">.</span><span class="token function">findAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">users</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// 用 JSON.stringify() 來格式化輸出</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>users<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>會得到一個 User 物件，除了資料訊息，也會有一些底線開頭的屬性，像是 Sequelize 設定的資訊：</p>
<p><img src="https://i.imgur.com/mE0MsOM.png"></p>
<p>如果要存取 user 的資料訊息，可直接用 <code>user[0].id</code> 來拿到 id：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">sequelize<span class="token punctuation">.</span><span class="token function">sync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  User<span class="token punctuation">.</span><span class="token function">findAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">users</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>users<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>id<span class="token punctuation">,</span> users<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>firstName<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><img src="https://i.imgur.com/fWaQzG1.png"></p>
<h3 id="findAll-where-：設定資料條件"><a href="#findAll-where-：設定資料條件" class="headerlink" title=".findAll(where{ })：設定資料條件"></a>.findAll(where{ })：設定資料條件</h3><p>如果要指定讀取哪些資料，可在 <code>.findAll()</code> 裡面填入 <code>where&#123;&#125;</code> 這個物件來指定條件。假如在資料庫中找不到相對應的資料，就會回傳錯誤訊息：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">sequelize<span class="token punctuation">.</span><span class="token function">sync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  User<span class="token punctuation">.</span><span class="token function">findAll</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
    where<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
      firstName<span class="token operator">:</span> <span class="token string">'Apple'</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">users</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>users<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>id<span class="token punctuation">,</span> users<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>firstName<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>印出符合條件的資料：</p>
<p><img src="https://i.imgur.com/8raviKR.png"></p>
<p>這種寫法就相當於 SQL 語法的 <code>SELECT * FROM users WHERE firstName = Apple</code>，更多有關條設定的語法可參考：<span class="exturl" data-url="aHR0cHM6Ly9zZXF1ZWxpemUub3JnL3Y1L21hbnVhbC9xdWVyeWluZy5odG1s">官方文件 -  querying<i class="fa fa-external-link-alt"></i></span>。</p>
<h3 id="findOne-：選取單一資料"><a href="#findOne-：選取單一資料" class="headerlink" title=".findOne()：選取單一資料"></a>.findOne()：選取單一資料</h3><p>如果只想選取單一資料，或是想要透過 id 來讀取資料，可以使用 <code>.findOne()</code>：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">sequelize<span class="token punctuation">.</span><span class="token function">sync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  User<span class="token punctuation">.</span><span class="token function">findOne</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
    where<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
      id<span class="token operator">:</span> <span class="token string">'1'</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">user</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span>firstName<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Heidi</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>成功撈取指定資料之後，就可以對該筆資料進行 CRUD。</p>
<h3 id="update-：更新資料"><a href="#update-：更新資料" class="headerlink" title=".update()：更新資料"></a>.update()：更新資料</h3><p>如果要更新資料，可使用 <code>.then()</code> 接住資料，並在裡面傳入 function，用來執行 <code>user.update()</code>，把要更新的內容用 <code>&#123;&#125;</code> 大括號包住，再填入 <code>update()</code> 中：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">sequelize<span class="token punctuation">.</span><span class="token function">sync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  User<span class="token punctuation">.</span><span class="token function">findOne</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
    where<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
      id<span class="token operator">:</span> <span class="token string">'3'</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">user</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// 在 () 裡面用 &#123;&#125; 大括號包住要更新的內容</span>
    user<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
      lastName<span class="token operator">:</span> <span class="token string">'Banana'</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'update done!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>這樣就成功更新 id 為 3 這筆資料的 lastName：</p>
<p><img src="https://i.imgur.com/wZ95sPf.png"></p>
<h3 id="destroy-：刪除資料"><a href="#destroy-：刪除資料" class="headerlink" title=".destroy()：刪除資料"></a>.destroy()：刪除資料</h3><p>如果要刪除資料，可使用 <code>.then()</code> 接住資料，並在裡面傳入 function，用來執行 <code>user.destroy()</code>：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">sequelize<span class="token punctuation">.</span><span class="token function">sync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  User<span class="token punctuation">.</span><span class="token function">findOne</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
    where<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
      id<span class="token operator">:</span> <span class="token string">'2'</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">user</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    user<span class="token punctuation">.</span><span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'destroy done!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<hr>
<h2 id="Associations-資料庫關聯"><a href="#Associations-資料庫關聯" class="headerlink" title="Associations 資料庫關聯"></a>Associations 資料庫關聯</h2><p>再來我們要學習如何做資料庫關聯，也就是將兩個不同的 table 關聯，例如將 <code>users.id</code> 對應到 <code>comments.userId</code>。我們在之前課程使用的 SQL 指令，就是透過 <code>user.id</code> 或是 JOIN 等方式來進行資料庫關聯。</p>
<p>而在 ORM 當中，要將兩個 tabel 進行關聯，則需要透過 <code>.hasMany()</code>、<code>.hasOne</code> 等指令，告訴 Sequelize 執行資料庫關聯，詳細內容可參考<span class="exturl" data-url="aHR0cHM6Ly9zZXF1ZWxpemUub3JnL3Y1L2NsYXNzL2xpYi9hc3NvY2lhdGlvbnMvYmFzZS5qc35Bc3NvY2lhdGlvbi5odG1s">官方文件<i class="fa fa-external-link-alt"></i></span>。</p>
<h3 id="如何關聯兩個-table"><a href="#如何關聯兩個-table" class="headerlink" title="如何關聯兩個 table"></a>如何關聯兩個 table</h3><p>以 <code>User.hasMany(Comment)</code> 指令來說，意思就是告訴 Sequelize 一個 user 可以有很多 comment，接著就會在 comment table 中加上 userId 來建立關聯：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> User <span class="token operator">=</span> sequelize<span class="token punctuation">.</span><span class="token function">define</span><span class="token punctuation">(</span><span class="token string">'user'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>
  firstName<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    type<span class="token operator">:</span> Sequelize<span class="token punctuation">.</span><span class="token constant">STRING</span><span class="token punctuation">,</span>
    allowNull<span class="token operator">:</span> <span class="token boolean">false</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  lastName<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    type<span class="token operator">:</span> Sequelize<span class="token punctuation">.</span><span class="token constant">STRING</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> Comment <span class="token operator">=</span> sequelize<span class="token punctuation">.</span><span class="token function">define</span><span class="token punctuation">(</span><span class="token string">'comment'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>
  content<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    type<span class="token operator">:</span> Sequelize<span class="token punctuation">.</span><span class="token constant">STRING</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

User<span class="token punctuation">.</span><span class="token function">hasMany</span><span class="token punctuation">(</span>Comment<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 將兩個 table 進行關聯</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>執行後就會發現建立了 comments table，還多了 userId 這個欄位：</p>
<p><img src="https://i.imgur.com/KiaKCDW.png"></p>
<h3 id="範例：新增留言"><a href="#範例：新增留言" class="headerlink" title="範例：新增留言"></a>範例：新增留言</h3><p>接著我們就能對資料庫進行操作，以新建一個 comment 為例，在 Comment 要填入 content 和 userId：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">sequelize<span class="token punctuation">.</span><span class="token function">sync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  Comment<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
    userId<span class="token operator">:</span> <span class="token string">'3'</span><span class="token punctuation">,</span>
    content<span class="token operator">:</span> <span class="token string">'Hello!'</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span><span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'done!'</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  User<span class="token punctuation">.</span><span class="token function">findOne</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
    where<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
      firstName<span class="token operator">:</span> <span class="token string">'Apple'</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">user</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>

  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>執行成功會印出設定的 <code>done!</code>：</p>
<p><img src="https://i.imgur.com/7HvR4V7.png"></p>
<p>這樣就成功在 comments table 建立了一則留言：</p>
<p><img src="https://i.imgur.com/Qi9bRny.png"></p>
<h3 id="範例：撈取資料"><a href="#範例：撈取資料" class="headerlink" title="範例：撈取資料"></a>範例：撈取資料</h3><p>接著我們就可以利用關聯的 user id 來撈取資料，透過 <code>include:&lt;Table&gt;</code> 這個參數來指定 Model，如果要 include 多個 Model 可透過 Array 傳入：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">sequelize<span class="token punctuation">.</span><span class="token function">sync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  User<span class="token punctuation">.</span><span class="token function">findOne</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
    where<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
      firstName<span class="token operator">:</span> <span class="token string">'Apple'</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token comment">// 新增 include 這個參數來指定 Model</span>
    include<span class="token operator">:</span> Comment
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">user</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>若把 user 資料印出來，會發現包含很多資訊：</p>
<p><img src="https://i.imgur.com/c6SBlsD.png"></p>
<p>利用 <code>JSON.stringify()</code> 來格式化輸出，即可忽略不需要的資訊：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">sequelize<span class="token punctuation">.</span><span class="token function">sync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  User<span class="token punctuation">.</span><span class="token function">findOne</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
    where<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
      firstName<span class="token operator">:</span> <span class="token string">'Apple'</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    include<span class="token operator">:</span> Comment
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">user</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span>comments<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>就會拿到 userId 為 3 的使用者的所有留言：</p>
<p><img src="https://i.imgur.com/RYpcxxT.png"></p>
<p>而 <code>User.hasMany(Comment);</code> 其實是單向關係，也就是將 User 對 Comment 進行關聯，但沒有說明 Comment 和 User 的關係是什麼。這時如果要從 comment 來查詢 user 的資料，就會出現錯誤訊息。</p>
<p>需要加上 <code>Comment.belongsTo(User)</code>，透過這段指令將 Comment 對 User 做關聯，建立起雙向關係：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">User<span class="token punctuation">.</span><span class="token function">hasMany</span><span class="token punctuation">(</span>Comment<span class="token punctuation">)</span><span class="token punctuation">;</span>
Comment<span class="token punctuation">.</span><span class="token function">belongsTo</span><span class="token punctuation">(</span>User<span class="token punctuation">)</span><span class="token punctuation">;</span>

sequelize<span class="token punctuation">.</span><span class="token function">sync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  Comment<span class="token punctuation">.</span><span class="token function">findOne</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
    where<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
      content<span class="token operator">:</span> <span class="token string">'Hello!'</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    include<span class="token operator">:</span> User
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">comment</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>comment<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>就會拿到有關 comment 的 user 資訊：</p>
<p><img src="https://i.imgur.com/5U9BsA1.png"></p>
<h2 id="Sequelize-CLI"><a href="#Sequelize-CLI" class="headerlink" title="Sequelize CLI"></a>Sequelize CLI</h2><p>在實際開發時，為了讓程式碼更有結構性以及方便管理，可安裝 Sequelize CLI 這套工具，詳細內容可參考<span class="exturl" data-url="aHR0cHM6Ly9zZXF1ZWxpemUub3JnL3Y1L21hbnVhbC9taWdyYXRpb25zLmh0bWw=">官方文件<i class="fa fa-external-link-alt"></i></span>。</p>
<h3 id="安裝並初始化"><a href="#安裝並初始化" class="headerlink" title="安裝並初始化"></a>安裝並初始化</h3><pre class="line-numbers language-none"><code class="language-none">$ npm install --save sequelize-cli
$ npx sequelize-cli init<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>完成初始化會建立 config.json 檔案，裡面會有連線資料庫的設定，包含 database 帳密等資訊，因此通常不會加到 commit：</p>
<p><img src="https://i.imgur.com/UOauFVL.png"></p>
<h3 id="設定連線資料庫"><a href="#設定連線資料庫" class="headerlink" title="設定連線資料庫"></a>設定連線資料庫</h3><p>接著可以在 config.json 更改成我們連線資料庫的設定，三種設定分別是在開發環境、測試環境、正式環境。因為我們現在是在 localhost 開發所以要修改 development 的部分：</p>
<p><img src="https://i.imgur.com/opeKSyL.png"></p>
<h3 id="建立-Model"><a href="#建立-Model" class="headerlink" title="建立 Model"></a>建立 Model</h3><p>接著我們可以直接透過 CLI 指令來建立 User 和 Comment 這兩個 Model：</p>
<pre class="line-numbers language-none"><code class="language-none">$ npx sequelize-cli model:generate --name User --attributes firstName:string,lastName:string,email:string
$ npx sequelize-cli model:generate --name Comment --attributes content:string<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>建立好 Model 之後，Sequelize 會自動在 models 和 migrations 資料夾底下建立檔案：</p>
<p><img src="https://i.imgur.com/xTNnc3A.png"></p>
<p>我們可以透過 user.js 和 comment.js 這些檔案設定，來對 model 進行微調：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token string">'use strict'</span><span class="token punctuation">;</span>
module<span class="token punctuation">.</span><span class="token function-variable function">exports</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">sequelize<span class="token punctuation">,</span> DataTypes</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">const</span> Comment <span class="token operator">=</span> sequelize<span class="token punctuation">.</span><span class="token function">define</span><span class="token punctuation">(</span><span class="token string">'Comment'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>
    content<span class="token operator">:</span> DataTypes<span class="token punctuation">.</span><span class="token constant">STRING</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  Comment<span class="token punctuation">.</span><span class="token function-variable function">associate</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">models</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">//  在這裡設定資料庫關聯</span>
    Comment<span class="token punctuation">.</span><span class="token function">belongsTo</span><span class="token punctuation">(</span>Models<span class="token punctuation">.</span>User<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> Comment<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="執行-Migrations"><a href="#執行-Migrations" class="headerlink" title="執行 Migrations"></a>執行 Migrations</h3><p>但設定完這些檔案之後，資料庫裡面還不會有任何東西。這是因為必須透過執行 Migrations，才會依照我們在 Model 做的設定去操作資料庫：</p>
<pre class="line-numbers language-none"><code class="language-none">$ npx sequelize-cli db:migrate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>接著就會在資料庫建立 SequelizeMeta table 來記錄執行過的 migrations；並且依照 migrations 中的檔案去操作資料庫，也就是建立 users 和 comments table：</p>
<p><img src="https://i.imgur.com/RPTzLXv.png"></p>
<p>有了 migrations，就不需再透過 <code>sync()</code> 指令來操作資料庫，並且能夠以更結構性的方式進行管理。</p>
<h3 id="透過-Migrations-關聯資料庫"><a href="#透過-Migrations-關聯資料庫" class="headerlink" title="透過 Migrations 關聯資料庫"></a>透過 Migrations 關聯資料庫</h3><p>接著在建立好的檔案 user.js 和 comment.js 加上關聯設定，其中 model 通常會以英文大寫開頭：</p>
<ul>
<li>user.js</li>
</ul>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token string">'use strict'</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token punctuation">&#123;</span>
  Model
<span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'sequelize'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
module<span class="token punctuation">.</span><span class="token function-variable function">exports</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">sequelize<span class="token punctuation">,</span> DataTypes</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token keyword">extends</span> <span class="token class-name">Model</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">static</span> <span class="token function">associate</span><span class="token punctuation">(</span><span class="token parameter">models</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token comment">// 加上關聯資料庫的設定</span>
      User<span class="token punctuation">.</span><span class="token function">hasMany</span><span class="token punctuation">(</span>models<span class="token punctuation">.</span>Comment<span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
  User<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
    firstName<span class="token operator">:</span> DataTypes<span class="token punctuation">.</span><span class="token constant">STRING</span><span class="token punctuation">,</span>
    lastName<span class="token operator">:</span> DataTypes<span class="token punctuation">.</span><span class="token constant">STRING</span><span class="token punctuation">,</span>
    email<span class="token operator">:</span> DataTypes<span class="token punctuation">.</span><span class="token constant">STRING</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>
    sequelize<span class="token punctuation">,</span>
    modelName<span class="token operator">:</span> <span class="token string">'User'</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> User<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>comment.js</li>
</ul>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token string">'use strict'</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token punctuation">&#123;</span>
  Model
<span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'sequelize'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
module<span class="token punctuation">.</span><span class="token function-variable function">exports</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">sequelize<span class="token punctuation">,</span> DataTypes</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">class</span> <span class="token class-name">Comment</span> <span class="token keyword">extends</span> <span class="token class-name">Model</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">static</span> <span class="token function">associate</span><span class="token punctuation">(</span><span class="token parameter">models</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token comment">// 加上關聯資料庫的設定，存取其他 Model</span>
      Comment<span class="token punctuation">.</span><span class="token function">belongsTo</span><span class="token punctuation">(</span>models<span class="token punctuation">.</span>User<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
  Comment<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
    content<span class="token operator">:</span> DataTypes<span class="token punctuation">.</span><span class="token constant">STRING</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>
    sequelize<span class="token punctuation">,</span>
    modelName<span class="token operator">:</span> <span class="token string">'Comment'</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> Comment<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="新增資料"><a href="#新增資料" class="headerlink" title="新增資料"></a>新增資料</h3><p>再來回到根目錄的 index.js，即可從 models 引入 db 來使用：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> db <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./models'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>以下列程式碼為例，如此就可以透過 index.js 來操作資料庫：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> User <span class="token operator">=</span> db<span class="token punctuation">.</span>User<span class="token punctuation">;</span>
<span class="token keyword">const</span> Comment <span class="token operator">=</span>　db<span class="token punctuation">.</span>Comment<span class="token punctuation">;</span>

User<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
  firstName<span class="token operator">:</span> <span class="token string">'Hello'</span><span class="token punctuation">,</span>
  lastName<span class="token operator">:</span> <span class="token string">'World'</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'done!'</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>執行後成功在 User 新增一筆資料：</p>
<p><img src="https://i.imgur.com/OPsscPV.png"></p>
<hr>
<h2 id="改造留言板系統"><a href="#改造留言板系統" class="headerlink" title="改造留言板系統"></a>改造留言板系統</h2><p>在瞭解到什麼是 Sequelize 和 ORM 之後，接著我們要來改造之前時做的<span class="exturl" data-url="aHR0cHM6Ly9oYWNrbWQuaW8vQEhlaWRpLUxpdS9ub3RlLWJlMjAxLWV4cHJlc3MtcHJhY3RpY2U=">留言版系統<i class="fa fa-external-link-alt"></i></span>，也就是把 Model 部分改用 Sequelize 實作。</p>
<h3 id="前置作業"><a href="#前置作業" class="headerlink" title="前置作業"></a>前置作業</h3><p>在 express 專案中引入 Sequelize 套件，並進行初始化：</p>
<pre class="line-numbers language-none"><code class="language-none">$ npm install sequelize mysql2
$ npm install sequelize-cli
$ npx sequelize-cli init<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>接著在建立 Model 之前，可以先清除不必要的檔案和程式碼，例如 db.js、todocontroller、以及原本 models 的部分。</p>
<h3 id="設定連線資料庫-1"><a href="#設定連線資料庫-1" class="headerlink" title="設定連線資料庫"></a>設定連線資料庫</h3><p>接著修改 config.json 資料庫連線的設定：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token string">"development"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
  <span class="token string">"username"</span><span class="token operator">:</span> <span class="token string">"root"</span><span class="token punctuation">,</span>
  <span class="token string">"password"</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
  <span class="token string">"database"</span><span class="token operator">:</span> <span class="token string">"mydb"</span><span class="token punctuation">,</span>
  <span class="token string">"host"</span><span class="token operator">:</span> <span class="token string">"localhost"</span><span class="token punctuation">,</span>
  <span class="token string">"dialect"</span><span class="token operator">:</span> <span class="token string">"mysql"</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="建立-Model-1"><a href="#建立-Model-1" class="headerlink" title="建立 Model"></a>建立 Model</h3><p>再來要建立 User 和 Comment 兩個 Model：</p>
<ul>
<li>因為已經要把兩個 table 進行關聯，Comment  table 就不須再加上 username 欄位</li>
<li>string 型態預設會建立 VARCHAR，最大長度為 255，因此可以把 content 改用 text</li>
<li>在新增之前記得先把舊的同名 table 移除，避免互相干擾</li>
</ul>
<pre class="line-numbers language-none"><code class="language-none">$ npx sequelize-cli model:generate --name User --attributes username:string,password:string,nickname:string

$ npx sequelize-cli model:generate --name Comment --attributes content:text<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>執行後會在 models 建立檔案：</p>
<p><img src="https://i.imgur.com/XXR8r9j.png"></p>
<h3 id="執行-Migrations-1"><a href="#執行-Migrations-1" class="headerlink" title="執行 Migrations"></a>執行 Migrations</h3><p>再來執行 Migrations，才會真正把資料寫入資料庫來建立 table：</p>
<pre class="line-numbers language-none"><code class="language-none">$ npx sequelize-cli db:migrate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>執行後會在資料庫建立 table：</p>
<p><img src="https://i.imgur.com/cJidV5z.png"></p>
<p>但我們還需要在 comment table 加上 UserId 欄位，這部分要自己手動修改 migrations 中的 create-comment 檔案：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 新增 UserId 這個欄位，型態是數字</span>
  UserId<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    type<span class="token operator">:</span> Sequelize<span class="token punctuation">.</span><span class="token constant">INTEGER</span>
  <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>接著要重跑一次 Migrations，可透過下方<br>指令來撤銷上一個動作：</p>
<pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F; 單次撤銷（最近的一次）
$ npx sequelize-cli db:migrate:undo

&#x2F;&#x2F; 撤銷所有
$ npx sequelize-cli db:migrate:all<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><img src="https://i.imgur.com/iGSJ2HF.png"></p>
<p>到資料庫會發現 comments 不見了，但 users 不會受到影響：</p>
<p><img src="https://i.imgur.com/XKqaVdq.png"></p>
<p>再跑一次 Migrations 建立 Comment table，會多一個 UserId 欄位：</p>
<p><img src="https://i.imgur.com/N6Hfsy7.png"></p>
<h4 id="補充：設定-username-為-UNIQUE"><a href="#補充：設定-username-為-UNIQUE" class="headerlink" title="補充：設定 username 為 UNIQUE"></a>補充：設定 username 為 UNIQUE</h4><p>此外，也可透過修改 create-user 檔案，把 username 欄位設定為 UNIQUE，然後再重新 Migrations。如此可避免註冊時會有重複的 username：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">username<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
  type<span class="token operator">:</span> Sequelize<span class="token punctuation">.</span><span class="token constant">STRING</span><span class="token punctuation">,</span>
  unique<span class="token operator">:</span> <span class="token boolean">true</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="關聯資料庫"><a href="#關聯資料庫" class="headerlink" title="關聯資料庫"></a>關聯資料庫</h3><p>再來要進行資料庫關聯，分別在 models 資料夾中的 user.js 和 comment.js 加上關聯指令：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// user.js</span>
  <span class="token keyword">static</span> <span class="token function">associate</span><span class="token punctuation">(</span><span class="token parameter">models</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    User<span class="token punctuation">.</span><span class="token function">hasMany</span><span class="token punctuation">(</span>models<span class="token punctuation">.</span>Comment<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// comment.js</span>
  <span class="token keyword">static</span> <span class="token function">associate</span><span class="token punctuation">(</span><span class="token parameter">models</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    Comment<span class="token punctuation">.</span><span class="token function">belongsTo</span><span class="token punctuation">(</span>models<span class="token punctuation">.</span>User<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="修改-Controllers"><a href="#修改-Controllers" class="headerlink" title="修改 Controllers"></a>修改 Controllers</h3><p>接著要來修改 user 和 comment 的 Controllers，也就是原本處理 userModel 的部分：</p>
<ul>
<li>controllers\user.js</li>
</ul>
<ol>
<li>拿掉原本引入的 userModel，改成引入 db 中的 models：</li>
</ol>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> db <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'../models'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> User <span class="token operator">=</span> db<span class="token punctuation">.</span>User<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<ol start="2">
<li>修改 handleLogin：</li>
</ol>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function-variable function">handleLogin</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> username<span class="token punctuation">,</span> password <span class="token punctuation">&#125;</span> <span class="token operator">=</span> req<span class="token punctuation">.</span>body<span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>username <span class="token operator">||</span> <span class="token operator">!</span>password<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    req<span class="token punctuation">.</span><span class="token function">flash</span><span class="token punctuation">(</span><span class="token string">'errorMessage'</span><span class="token punctuation">,</span> <span class="token string">'請輸入您的帳密'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token comment">// 從 User table 撈取對應 username 的資料</span>
  User<span class="token punctuation">.</span><span class="token function">findOne</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
    where<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
      username
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">user</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>user<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      req<span class="token punctuation">.</span><span class="token function">flash</span><span class="token punctuation">(</span><span class="token string">'errorMessage'</span><span class="token punctuation">,</span> <span class="token string">'使用者不存在'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    bcrypt<span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span>password<span class="token punctuation">,</span> user<span class="token punctuation">.</span>password<span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> isSccess</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>err <span class="token operator">||</span> <span class="token operator">!</span>isSccess<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        req<span class="token punctuation">.</span><span class="token function">flash</span><span class="token punctuation">(</span><span class="token string">'errorMessage'</span><span class="token punctuation">,</span> <span class="token string">'輸入帳密有誤'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span>
      req<span class="token punctuation">.</span>session<span class="token punctuation">.</span>username <span class="token operator">=</span> user<span class="token punctuation">.</span>username<span class="token punctuation">;</span>
      <span class="token comment">// 在 session 中加入 user.id</span>
      req<span class="token punctuation">.</span>session<span class="token punctuation">.</span>userId <span class="token operator">=</span> user<span class="token punctuation">.</span>id<span class="token punctuation">;</span>
      res<span class="token punctuation">.</span><span class="token function">redirect</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 有錯誤的話就印出錯誤訊息</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">err</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    req<span class="token punctuation">.</span><span class="token function">flash</span><span class="token punctuation">(</span><span class="token string">'errorMessage'</span><span class="token punctuation">,</span> err<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ol start="3">
<li>修改 handleRegister：</li>
</ol>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function-variable function">handleRegister</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">const</span> <span class="token punctuation">&#123;</span>username<span class="token punctuation">,</span> password<span class="token punctuation">,</span> nickname<span class="token punctuation">&#125;</span> <span class="token operator">=</span> req<span class="token punctuation">.</span>body<span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>username <span class="token operator">||</span> <span class="token operator">!</span>password <span class="token operator">||</span> <span class="token operator">!</span>nickname<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    req<span class="token punctuation">.</span><span class="token function">flash</span><span class="token punctuation">(</span><span class="token string">'errorMessage'</span><span class="token punctuation">,</span> <span class="token string">'缺少必要欄位'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  bcrypt<span class="token punctuation">.</span><span class="token function">hash</span><span class="token punctuation">(</span>password<span class="token punctuation">,</span> saltRounds<span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> hash</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      req<span class="token punctuation">.</span><span class="token function">flash</span><span class="token punctuation">(</span><span class="token string">'errorMessage'</span><span class="token punctuation">,</span> err<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token comment">// 在 User table 建立資料</span>
    User<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
      username<span class="token punctuation">,</span>
      nickname<span class="token punctuation">,</span>
      password<span class="token operator">:</span> hash
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">user</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>     <span class="token comment">// create 完會回傳一個 instance</span>
      req<span class="token punctuation">.</span>session<span class="token punctuation">.</span>username <span class="token operator">=</span> username<span class="token punctuation">;</span>
      <span class="token comment">// 在 session 中加入 user.id</span>
      req<span class="token punctuation">.</span>session<span class="token punctuation">.</span>userId <span class="token operator">=</span> user<span class="token punctuation">.</span>id<span class="token punctuation">;</span>
      res<span class="token punctuation">.</span><span class="token function">redirect</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 有錯誤的話就印出錯誤訊息</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">err</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
      req<span class="token punctuation">.</span><span class="token function">flash</span><span class="token punctuation">(</span><span class="token string">'errorMessage'</span><span class="token punctuation">,</span> <span class="token string">'已存在相同用戶名'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>controllers\comment.js</li>
</ul>
<ol>
<li>拿掉原本引入的 commentModel，改成引入 db 中的 models：</li>
</ol>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 從 models 引入 db</span>
<span class="token keyword">const</span> db <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'../models'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> Comment <span class="token operator">=</span> db<span class="token punctuation">.</span>Comment<span class="token punctuation">;</span>
<span class="token keyword">const</span> User <span class="token operator">=</span> db<span class="token punctuation">.</span>User<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<ol start="2">
<li>修改 add：</li>
</ol>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function-variable function">add</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">const</span> <span class="token punctuation">&#123;</span>userId<span class="token punctuation">&#125;</span> <span class="token operator">=</span> req<span class="token punctuation">.</span>session
  <span class="token keyword">const</span> <span class="token punctuation">&#123;</span>content<span class="token punctuation">&#125;</span> <span class="token operator">=</span> req<span class="token punctuation">.</span>body
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>userId<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    req<span class="token punctuation">.</span><span class="token function">flash</span><span class="token punctuation">(</span><span class="token string">'errorMessage'</span><span class="token punctuation">,</span> <span class="token string">'請先登入'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>content<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    req<span class="token punctuation">.</span><span class="token function">flash</span><span class="token punctuation">(</span><span class="token string">'errorMessage'</span><span class="token punctuation">,</span> <span class="token string">'請填入留言內容'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  Comment<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
    content<span class="token punctuation">,</span>
    UserId<span class="token operator">:</span> userId
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    res<span class="token punctuation">.</span><span class="token function">redirect</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ol start="3">
<li>修改 index：</li>
</ol>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function-variable function">index</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  Comment<span class="token punctuation">.</span><span class="token function">findAll</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
    <span class="token comment">// 撈取資料需要關聯 Comment 和 User table</span>
    include<span class="token operator">:</span> User
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">comments</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    res<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token string">'index'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>
      comments
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>因為資料形式改變，必須修改 View 的部分，例如拿取 nickname 的部分，要改成 comment.User.nickname 來透過關聯拿取：</p>
<pre class="line-numbers language-htmlmixed" data-language="htmlmixed"><code class="language-htmlmixed">&lt;!-- index.ejs --&gt;
  &lt;div class&#x3D;&quot;card-container d-flex justify-content-around flex-wrap&quot; style&#x3D;&quot;width: 100%;&quot;&gt;
    &lt;% comments.forEach(function(comment) &#123; %&gt;
      &lt;div class&#x3D;&quot;card mb-2&quot; style&#x3D;&quot;width: 22rem; height: 18rem;&quot;&gt;
        &lt;div class&#x3D;&quot;card-header&quot;&gt;
          &lt;div class&#x3D;&quot;card-top d-flex justify-content-between&quot;&gt;
            &lt;h5 class&#x3D;&quot;card-title&quot;&gt;&lt;%&#x3D; comment.User.nickname %&gt;&lt;&#x2F;h5&gt;
            &lt;div class&#x3D;&quot;card-btn&quot;&gt;
              &lt;% if (username &#x3D;&#x3D;&#x3D; comment.User.username) &#123;%&gt;
              &lt;a href&#x3D;&quot;&#x2F;update_comments&#x2F;&lt;%&#x3D; comment.id %&gt;&quot; class&#x3D;&quot;card-link&quot;&gt;編輯&lt;&#x2F;a&gt;
              &lt;a href&#x3D;&quot;&#x2F;delete_comments&#x2F;&lt;%&#x3D; comment.id %&gt;&quot; class&#x3D;&quot;card-link&quot;&gt;刪除&lt;&#x2F;a&gt;
              &lt;% &#125; %&gt;
            &lt;&#x2F;div&gt;
          &lt;&#x2F;div&gt;
          &lt;p class&#x3D;&quot;card-subtitle text-muted&quot;&gt;&lt;%&#x3D; moment(comment.createdAt).format(shortDateFormat) %&gt;&lt;&#x2F;p&gt;
        &lt;&#x2F;div&gt;
        &lt;div class&#x3D;&quot;card-body&quot; style&#x3D;&quot;overflow:scroll; overflow-x:hidden; &quot;&gt;
          &lt;p class&#x3D;&quot;card-text&quot; &gt;&lt;%&#x3D; comment.content %&gt;&lt;&#x2F;p&gt;
        &lt;&#x2F;div&gt;
      &lt;&#x2F;div&gt;
    &lt;% &#125;) %&gt;
  &lt;&#x2F;div&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ol start="4">
<li>修改 delete：</li>
</ol>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function-variable function">delete</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  Comment<span class="token punctuation">.</span><span class="token function">findOne</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
    where<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
      id<span class="token operator">:</span> req<span class="token punctuation">.</span>params<span class="token punctuation">.</span>id<span class="token punctuation">,</span>
      UserId<span class="token operator">:</span> req<span class="token punctuation">.</span>session<span class="token punctuation">.</span>userId
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">comment</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> comment<span class="token punctuation">.</span><span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    res<span class="token punctuation">.</span><span class="token function">redirect</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    res<span class="token punctuation">.</span><span class="token function">redirect</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ol start="5">
<li>修改 update 和 handleupdate：</li>
</ol>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function-variable function">update</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  Comment<span class="token punctuation">.</span><span class="token function">findOne</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
    where<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
      id<span class="token operator">:</span> req<span class="token punctuation">.</span>params<span class="token punctuation">.</span>id
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">comment</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    res<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token string">'update'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>
      comment
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">,</span>

<span class="token function-variable function">handleUpdate</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  Comment<span class="token punctuation">.</span><span class="token function">findOne</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
    where<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
      id<span class="token operator">:</span> req<span class="token punctuation">.</span>params<span class="token punctuation">.</span>id<span class="token punctuation">,</span>
      UserId<span class="token operator">:</span> req<span class="token punctuation">.</span>session<span class="token punctuation">.</span>userId
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">comment</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> comment<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
      content<span class="token operator">:</span> req<span class="token punctuation">.</span>body<span class="token punctuation">.</span>content
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    res<span class="token punctuation">.</span><span class="token function">redirect</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    res<span class="token punctuation">.</span><span class="token function">redirect</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>修改結果：</p>
<p><img src="https://i.imgur.com/aSeD9vH.png"></p>
<h2 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h2><p>這樣就成功透過 Express 搭配 Sequelize 修改之前的留言板結構，即使不使用 SQL 指令，也能以 ORM 提供的物件導向形式來操作資料庫。</p>
<p>這種寫法和之前使用 PHP &amp; MySQL 實作留言板的方式很不相同會比較偏向先完成切版，然後一步一步增加功能；但以 MVC 架構去撰寫程式碼，會先規劃不同功能對應的不同路由，接著再規劃 Model 資料結構，以及如何呈現在畫面上，這使得整體結構分工更明確，也有助於後續的維護。</p>
<p>參考資料：</p>
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9tdHIwNC1ub3RlLmNvZGVyYnJpZGdlLmlvLzIwMjAvMTAvMTAvc2VxdWVsaXplLw==">[ 筆記 ] Express 03 - ORM ＆ Sequelize<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9pdGhlbHAuaXRob21lLmNvbS50dy9hcnRpY2xlcy8xMDIwNzc1Mg==">[Day20] 資料庫設計概念 - ORM<i class="fa fa-external-link-alt"></i></span></li>
</ul>
]]></content>
      <categories>
        <category>Back-End</category>
        <category>Sequelize</category>
      </categories>
      <tags>
        <tag>Back-End</tag>
        <tag>Database</tag>
        <tag>Sequelize</tag>
      </tags>
  </entry>
  <entry>
    <title>[week 17] 後端中階 - Express 實戰：簡易會員註冊系統 &amp; 留言板</title>
    <url>/express-board/</url>
    <content><![CDATA[<blockquote>
<p>本篇為 <span class="exturl" data-url="aHR0cHM6Ly9saWRlbXkuY29tL3AvYmUyMDEtZXhwcmVzcy1zZXF1ZWxpemU=">[BE201] 後端中階：Express 與 Sequelize<i class="fa fa-external-link-alt"></i></span> 這門課程的學習筆記。如有錯誤歡迎指正！</p>
</blockquote>
<p>在之前的課程中，我們學到如何使用 Express 這套框架，以及在 Express 扮演重要角色的 Middleware：</p>
<span id="more"></span>
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9oYWNrbWQuaW8vQEhlaWRpLUxpdS9ub3RlLWJlMjAxLWV4cHJlc3Mtbm9kZQ==">[week 17] 後端中階 - 使用 Node.js + Express 框架建立一個靜態網頁<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9oYWNrbWQuaW8vQEhlaWRpLUxpdS9ub3RlLWJlMjAxLWV4cHJlc3MtbWlkZGxld2FyZQ==">[week 17] 後端中階 - Express 中不可或缺的拼圖：淺談 Middleware<i class="fa fa-external-link-alt"></i></span></li>
</ul>
<p>接下來要整合我們之前所學的東西，透過串聯資料庫系統，來實作一個簡單的會員註冊系統，並且具有留言版功能的網頁。</p>
<hr>
<h2 id="實戰練習：簡易會員註冊系統"><a href="#實戰練習：簡易會員註冊系統" class="headerlink" title="實戰練習：簡易會員註冊系統"></a>實戰練習：簡易會員註冊系統</h2><p>在使用 Express 框架實作網頁時，大致上會依照下方流程進行：</p>
<ol>
<li>思考產品全貌：會員註冊系統</li>
<li>規劃資料庫結構：users table</li>
<li>載入需要的模組，設定 app 路由部分</li>
<li>依照 MVC 架構撰寫程式碼：<ul>
<li>設定 Controller：針對不同路由進行控制</li>
<li>設定 Model：如何處理資料</li>
<li>設定 View：如何呈現畫面</li>
</ul>
</li>
</ol>
<p>接下來我們也同樣會依照這個流程來進行實作。</p>
<h3 id="Step1-規劃資料庫"><a href="#Step1-規劃資料庫" class="headerlink" title="Step1. 規劃資料庫"></a>Step1. 規劃資料庫</h3><p>首先在資料庫新增一個 users Tabel：</p>
<p><img src="https://i.imgur.com/22wyXlm.png"></p>
<p>可以把 username 設定為 UNIQUE（唯一），只要 username 有重複就會自動跳出錯誤訊息：</p>
<p><img src="https://i.imgur.com/75SSRX2.png"></p>
<h3 id="Step2-實作-Model-部分"><a href="#Step2-實作-Model-部分" class="headerlink" title="Step2. 實作 Model 部分"></a>Step2. 實作 Model 部分</h3><p>接著要來建立 userModel：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> db <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'../db'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> userModel <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// 新增 user 功能</span>
  <span class="token function-variable function">add</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">user<span class="token punctuation">,</span> cb</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    db<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>
      <span class="token string">'INSERT INTO users(username, password, nickname) VALUES(?, ?, ?)'</span><span class="token punctuation">,</span>
      <span class="token punctuation">[</span>user<span class="token punctuation">.</span>username<span class="token punctuation">,</span> user<span class="token punctuation">.</span>password<span class="token punctuation">,</span> user<span class="token punctuation">.</span>nickname<span class="token punctuation">]</span><span class="token punctuation">,</span>
      <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> results</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">cb</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">cb</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>

  <span class="token comment">// 登入 -> 讀取 user 功能</span>
  <span class="token function-variable function">get</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">username<span class="token punctuation">,</span> cb</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    db<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>
      <span class="token string">'SELECT * FROM users WHERE username = ?'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>username<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> results</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">cb</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">cb</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> results<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> userModel<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="Step3-實作-Controller-部分"><a href="#Step3-實作-Controller-部分" class="headerlink" title="Step3. 實作 Controller 部分"></a>Step3. 實作 Controller 部分</h3><ol>
<li>先建立好程式碼架構，再來填寫路由部分：</li>
</ol>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 引入 userModel</span>
<span class="token keyword">const</span> userModel <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'../models/todo'</span><span class="token punctuation">)</span>

<span class="token keyword">const</span> userController <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  <span class="token function-variable function">get</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>

  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// 輸出 userController</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> userController<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ol start="2">
<li>在 index.js 引入 userController，並新增 userController 處理 login 和 logout 的路由：</li>
</ol>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> userController <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./controllers/user'</span><span class="token punctuation">)</span>

app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/login'</span><span class="token punctuation">,</span> userController<span class="token punctuation">.</span>login<span class="token punctuation">)</span>
app<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'/login'</span><span class="token punctuation">,</span> userController<span class="token punctuation">.</span>handleLogin<span class="token punctuation">)</span>
app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/logout'</span><span class="token punctuation">,</span> userController<span class="token punctuation">.</span>logout<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ol start="3">
<li>Controller 就會根據不同路由，建立相對應的 Method：</li>
</ol>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 引入 userModel</span>
<span class="token keyword">const</span> userModel <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'../models/user'</span><span class="token punctuation">)</span>

<span class="token keyword">const</span> userController <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// 渲染登入畫面</span>
  <span class="token function-variable function">login</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    res<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token string">'login'</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>

  <span class="token comment">// 驗證登入狀態</span>
  <span class="token function-variable function">handleLogin</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>req<span class="token punctuation">.</span>body<span class="token punctuation">.</span>password<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">'abc'</span> <span class="token punctuation">&#123;</span>
      req<span class="token punctuation">.</span>session<span class="token punctuation">.</span>isLogin <span class="token operator">=</span> <span class="token boolean">true</span>
      res<span class="token punctuation">.</span><span class="token function">redirect</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
      req<span class="token punctuation">.</span><span class="token function">flash</span><span class="token punctuation">(</span><span class="token string">'errorMessage'</span><span class="token punctuation">,</span> <span class="token string">'Please input the correct password.'</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>

  <span class="token comment">// 登出: 清除 session 並導回首頁</span>
  logout<span class="token operator">:</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    req<span class="token punctuation">.</span>session<span class="token punctuation">.</span>isLogin <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    res<span class="token punctuation">.</span><span class="token function">redirect</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// 輸出 userController</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> userController<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="Step4-實作-View-部分"><a href="#Step4-實作-View-部分" class="headerlink" title="Step4. 實作 View 部分"></a>Step4. 實作 View 部分</h3><ol>
<li>在根目錄增加一個首頁 index 的路由：</li>
</ol>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 建立首頁</span>
app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  res<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token string">'index'</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<ol start="2">
<li>接著建立 index.ejs 檔案，實作主要頁面：</li>
</ol>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>h1<span class="token operator">></span>簡易會員系統<span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span>

<span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"/register"</span><span class="token operator">></span>註冊<span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span>
<span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"/login"</span><span class="token operator">></span>登入<span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span>
<span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"/logout"</span><span class="token operator">></span>登出<span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>到這裡可先運行程式看看有沒有問題：</p>
<p><img src="https://i.imgur.com/Z1iMl9S.png"></p>
<ol start="3">
<li>加入前面範例中的驗證功能：</li>
</ol>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>h1<span class="token operator">></span>簡易會員系統<span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span>

<span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token keyword">if</span><span class="token punctuation">(</span>isLogin<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token operator">%</span><span class="token operator">></span>
  <span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"/logout"</span><span class="token operator">></span>登出<span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span>
<span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span> <span class="token operator">%</span><span class="token operator">></span>
  <span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"/register"</span><span class="token operator">></span>註冊<span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span>
  <span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"/login"</span><span class="token operator">></span>登入<span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span>
<span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token punctuation">&#125;</span> <span class="token operator">%</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>這樣在未登入狀態下，就只會看到註冊和登入，這樣就完成了首頁 index 的部分：</p>
<p><img src="https://i.imgur.com/n7ew34I.png"></p>
<h3 id="Step5-實作註冊功能"><a href="#Step5-實作註冊功能" class="headerlink" title="Step5. 實作註冊功能"></a>Step5. 實作註冊功能</h3><ol>
<li>先建立 register 路由：</li>
</ol>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/register'</span><span class="token punctuation">,</span> userController<span class="token punctuation">.</span>register<span class="token punctuation">)</span>
app<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'/register'</span><span class="token punctuation">,</span> userController<span class="token punctuation">.</span>handleRegister<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<ol start="2">
<li>根據不同路由建立相對應的 controller，這裡可以把有關 user 的 view 放在同一個資料夾，較方便管理：</li>
</ol>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 渲染註冊頁面</span>
<span class="token function-variable function">register</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// 把路徑設在 user 資料夾，較方便管理</span>
  res<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token string">'user/register'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">,</span>

<span class="token comment">// 驗證註冊</span>
<span class="token function-variable function">handleRegister</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>

<span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ol start="3">
<li>新增 register 的 view：</li>
</ol>
<pre class="line-numbers language-htmlmixed" data-language="htmlmixed"><code class="language-htmlmixed">&lt;h1&gt;註冊頁面&lt;&#x2F;h1&gt;

&lt;h2&gt;&lt;%&#x3D; errorMessage %&gt;&lt;&#x2F;h2&gt;

&lt;form method&#x3D;&quot;POST&quot; action&#x3D;&quot;&#x2F;register&quot;&gt;
  &lt;div&gt;username: &lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;username&quot; &#x2F;&gt;&lt;&#x2F;div&gt;
  &lt;div&gt;nickname: &lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;nickname&quot; &#x2F;&gt;&lt;&#x2F;div&gt;
  &lt;div&gt;password: &lt;input type&#x3D;&quot;password&quot; name&#x3D;&quot;password&quot; &#x2F;&gt;&lt;&#x2F;div&gt;
  &lt;input type&#x3D;&quot;submit&quot; &#x2F;&gt;
&lt;&#x2F;form&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>記得每做到一個段落就執行程式看有沒有出錯，這樣我們就完成簡單的註冊頁面。這時按提交還不會有反應：</p>
<p><img src="https://i.imgur.com/AiRq3HA.png"></p>
<ol start="4">
<li>再來就是實作 handleRegister 的 Controller 部分：</li>
</ol>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">  <span class="token comment">// 驗證註冊</span>
  <span class="token function-variable function">handleRegister</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// 從 resquest body 拿取 user 資料</span>
    <span class="token keyword">const</span> <span class="token punctuation">&#123;</span>username<span class="token punctuation">,</span> password<span class="token punctuation">,</span> nickname<span class="token punctuation">&#125;</span> <span class="token operator">=</span> req<span class="token punctuation">.</span>body<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>username <span class="token operator">||</span> <span class="token operator">!</span>password <span class="token operator">||</span> <span class="token operator">!</span>nickname<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token comment">// 這裡用 return 就可避免 if-else 寫法增加層數</span>
      <span class="token keyword">return</span> req<span class="token punctuation">.</span><span class="token function">flash</span><span class="token punctuation">(</span><span class="token string">'errorMessage'</span><span class="token punctuation">,</span> <span class="token string">'缺少必要欄位'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token comment">// 資料都沒問題的話，就可透過 userModel 寫入資料</span>
    <span class="token comment">// 傳入一個物件，若有錯誤會回傳 cb </span>
    userModel<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
      username<span class="token punctuation">,</span>
      nickname<span class="token punctuation">,</span>
      password
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
          <span class="token comment">// 印出 err</span>
          <span class="token keyword">return</span> req<span class="token punctuation">.</span><span class="token function">flash</span><span class="token punctuation">(</span><span class="token string">'errorMessage'</span><span class="token punctuation">,</span> err<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
      <span class="token punctuation">&#125;</span>
      <span class="token comment">// 註冊成功就保持登入狀態，並導回首頁</span>
      req<span class="token punctuation">.</span>session<span class="token punctuation">.</span>username <span class="token operator">=</span> username<span class="token punctuation">;</span>
      res<span class="token punctuation">.</span><span class="token function">redirect</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  
  <span class="token function-variable function">logout</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// 登出就把 session 重置</span>
  req<span class="token punctuation">.</span>session<span class="token punctuation">.</span>username <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
  res<span class="token punctuation">.</span><span class="token function">redirect</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ol start="5">
<li>但這樣其實就要把 session 改成存 username，有 username 就代表有登入狀態：</li>
</ol>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 透過 locals 傳值: session 功能和 errorMessage</span>
app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// 有 username 代表有登入狀態</span>
  res<span class="token punctuation">.</span>locals<span class="token punctuation">.</span>username <span class="token operator">=</span> req<span class="token punctuation">.</span>session<span class="token punctuation">.</span>username
  res<span class="token punctuation">.</span>locals<span class="token punctuation">.</span>errorMessage <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">flash</span><span class="token punctuation">(</span><span class="token string">'errorMessage'</span><span class="token punctuation">)</span>
  <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ol start="6">
<li>首頁 index.ejs 的驗證也同樣修改成判斷是否有 username，因為使用 <code>&lt;%= %&gt;</code> 會輸出原始碼，相當於做 escpae：</li>
</ol>
<pre class="line-numbers language-htmlmixed" data-language="htmlmixed"><code class="language-htmlmixed">&lt;h1&gt;簡易會員系統&lt;&#x2F;h1&gt;

&lt;!-- 以是否有 username 來判斷登入狀況 --&gt;
&lt;% if(username) &#123; %&gt;
  &lt;!-- 使用 &lt;%&#x3D; %&gt; 會輸出原始碼，相當於做 escpae --&gt;
  &lt;div&gt;Hello, &lt;%&#x3D; username + &#39;!&#39; %&gt;&lt;&#x2F;div&gt;
  &lt;a href&#x3D;&quot;&#x2F;logout&quot;&gt;登出&lt;&#x2F;a&gt;
&lt;% &#125; else &#123; %&gt;
  &lt;a href&#x3D;&quot;&#x2F;register&quot;&gt;註冊&lt;&#x2F;a&gt;
  &lt;a href&#x3D;&quot;&#x2F;login&quot;&gt;登入&lt;&#x2F;a&gt;
&lt;% &#125; %&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="Step6-用-hash-雜湊處理明碼"><a href="#Step6-用-hash-雜湊處理明碼" class="headerlink" title="Step6. 用 hash 雜湊處理明碼"></a>Step6. 用 hash 雜湊處理明碼</h3><ol>
<li>接下來可安裝 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2tlbGVrdGl2L25vZGUuYmNyeXB0LmpzLw==">node.bcrypt.js<i class="fa fa-external-link-alt"></i></span> 套件，即可將明碼進行雜湊處理，避免儲存明碼造成安全性問題：</li>
</ol>
<pre class="line-numbers language-none"><code class="language-none">$ npm install bcrypt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ul>
<li>使用方法</li>
</ul>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 引入 bcrypt</span>
<span class="token keyword">const</span> bcrypt <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'bcrypt'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 加鹽，增加密碼的複雜程度</span>
<span class="token keyword">const</span> saltRounds <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>雜湊函式</li>
</ul>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">bcrypt<span class="token punctuation">.</span><span class="token function">hash</span><span class="token punctuation">(</span>myPlaintextPassword<span class="token punctuation">,</span> saltRounds<span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> hash</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// Store hash in your password DB.</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<ol start="2">
<li>再來修改剛才的 handleRegister，利用 bcrypt 套件對密碼進行雜湊處理，再儲存 hash 過的密碼到資料庫：</li>
</ol>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 驗證註冊</span>
<span class="token function-variable function">handleRegister</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// 從 resquest body 拿取 user 資料</span>
  <span class="token keyword">const</span> <span class="token punctuation">&#123;</span>username<span class="token punctuation">,</span> password<span class="token punctuation">,</span> nickname<span class="token punctuation">&#125;</span> <span class="token operator">=</span> req<span class="token punctuation">.</span>body<span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>username <span class="token operator">||</span> <span class="token operator">!</span>password <span class="token operator">||</span> <span class="token operator">!</span>nickname<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// 這裡用 return 就可避免 if-else 寫法增加層數</span>
    req<span class="token punctuation">.</span><span class="token function">flash</span><span class="token punctuation">(</span><span class="token string">'errorMessage'</span><span class="token punctuation">,</span> <span class="token string">'缺少必要欄位'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token comment">// 利用 bcrypt 套件對密碼進行雜湊處理</span>
  bcrypt<span class="token punctuation">.</span><span class="token function">hash</span><span class="token punctuation">(</span>password<span class="token punctuation">,</span> saltRounds<span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> hash</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// 若有 err 就直接顯示錯誤訊息</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      req<span class="token punctuation">.</span><span class="token function">flash</span><span class="token punctuation">(</span><span class="token string">'errorMessage'</span><span class="token punctuation">,</span> err<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token comment">// 資料都沒問題的話，就可透過 userModel 寫入資料</span>
    userModel<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
      username<span class="token punctuation">,</span>
      nickname<span class="token punctuation">,</span>
      password<span class="token operator">:</span> hash
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
      <span class="token comment">// 若有 err 就直接顯示錯誤訊息</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        req<span class="token punctuation">.</span><span class="token function">flash</span><span class="token punctuation">(</span><span class="token string">'errorMessage'</span><span class="token punctuation">,</span> <span class="token string">'已存在相同用戶名'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span>
      <span class="token comment">// 註冊成功就保持登入狀態，並導回首頁</span>
      req<span class="token punctuation">.</span>session<span class="token punctuation">.</span>username <span class="token operator">=</span> username<span class="token punctuation">;</span>
      res<span class="token punctuation">.</span><span class="token function">redirect</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>執行程式並註冊一個帳號，確認資料是否有成功寫進資料庫，密碼也有先經過 hash 才儲存：</p>
<p><img src="https://i.imgur.com/SVAu3GZ.png"></p>
<p>這樣就差不多完成了註冊功能：</p>
<p><img src="https://i.imgur.com/zJZMhbF.png"></p>
<h3 id="Step7-實作登入功能"><a href="#Step7-實作登入功能" class="headerlink" title="Step7. 實作登入功能"></a>Step7. 實作登入功能</h3><ol>
<li>再來要修改登入頁面 login.ejs，畫面和註冊頁面很類似：</li>
</ol>
<pre class="line-numbers language-htmlmixed" data-language="htmlmixed"><code class="language-htmlmixed">&lt;h1&gt;登入頁面&lt;&#x2F;h1&gt;

&lt;h2&gt;&lt;%&#x3D; errorMessage %&gt;&lt;&#x2F;h2&gt;

&lt;form method&#x3D;&quot;POST&quot; action&#x3D;&quot;&#x2F;login&quot;&gt;
  &lt;div&gt;username: &lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;username&quot; &#x2F;&gt;&lt;&#x2F;div&gt;
  &lt;div&gt;password: &lt;input type&#x3D;&quot;password&quot; name&#x3D;&quot;password&quot; &#x2F;&gt;&lt;&#x2F;div&gt;
  &lt;input type&#x3D;&quot;submit&quot; &#x2F;&gt;
&lt;&#x2F;form&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ol start="2">
<li>然後是 handleLogin，確認是否有填入帳密、確認資料是否正確，透過 bcrypt.compare() 驗證雜湊密碼：</li>
</ol>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 渲染登入畫面</span>
<span class="token function-variable function">login</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  res<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token string">'login'</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">,</span>

<span class="token comment">// 驗證登入狀態</span>
<span class="token function-variable function">handleLogin</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> username<span class="token punctuation">,</span> password <span class="token punctuation">&#125;</span> <span class="token operator">=</span> req<span class="token punctuation">.</span>body<span class="token punctuation">;</span>
  <span class="token comment">// 確認是否有填入資料</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>username <span class="token operator">||</span> <span class="token operator">!</span>password<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    req<span class="token punctuation">.</span><span class="token function">flash</span><span class="token punctuation">(</span><span class="token string">'errorMessage'</span><span class="token punctuation">,</span> <span class="token string">'請輸入您的帳密！'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 每當呼叫 next 時，就會將控制權給下一個中間介 redirectBack(導回上一頁)</span>
    <span class="token keyword">return</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token comment">// 輸入正確就從 userModel 找出 user 資料</span>
  userModel<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>username<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> user</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      req<span class="token punctuation">.</span><span class="token function">flash</span><span class="token punctuation">(</span><span class="token string">'errorMessage'</span><span class="token punctuation">,</span> err<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>user<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      req<span class="token punctuation">.</span><span class="token function">flash</span><span class="token punctuation">(</span><span class="token string">'errorMessage'</span><span class="token punctuation">,</span> <span class="token string">'使用者不存在'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token comment">// 驗證密碼是否正確，三個參數代表: 明碼, 雜湊密碼, 方法</span>
    bcrypt<span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span>password<span class="token punctuation">,</span> user<span class="token punctuation">.</span>password<span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> isSccess</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token comment">// 若出現錯誤或比對不成功，就顯示錯誤訊息</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>err <span class="token operator">||</span> <span class="token operator">!</span>isSccess<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        req<span class="token punctuation">.</span><span class="token function">flash</span><span class="token punctuation">(</span><span class="token string">'errorMessage'</span><span class="token punctuation">,</span> <span class="token string">'密碼錯誤'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span>
      req<span class="token punctuation">.</span>session<span class="token punctuation">.</span>username <span class="token operator">=</span> user<span class="token punctuation">.</span>username<span class="token punctuation">;</span>
      res<span class="token punctuation">.</span><span class="token function">redirect</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">,</span>

<span class="token comment">// 登出: 清除 session 並導回首頁</span>
<span class="token function-variable function">logout</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  req<span class="token punctuation">.</span>session<span class="token punctuation">.</span>username <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
  res<span class="token punctuation">.</span><span class="token function">redirect</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ol start="3">
<li>在登入和註冊頁面，每當呼叫 next 時，就會將控制權給下一個中間介，可以自己寫一個中間介 redirectBack，用來在提交表單後自動導回上一頁：</li>
</ol>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 自己寫的中間介，用來導回上一頁</span>
<span class="token keyword">function</span> <span class="token function">redirectBack</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  res<span class="token punctuation">.</span><span class="token function">redirect</span><span class="token punctuation">(</span><span class="token string">'back'</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>

app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/register'</span><span class="token punctuation">,</span> userController<span class="token punctuation">.</span>register<span class="token punctuation">)</span>
app<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'/register'</span><span class="token punctuation">,</span> userController<span class="token punctuation">.</span>handleRegister<span class="token punctuation">,</span> redirectBack<span class="token punctuation">)</span>
app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/login'</span><span class="token punctuation">,</span> userController<span class="token punctuation">.</span>login<span class="token punctuation">)</span>
app<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'/login'</span><span class="token punctuation">,</span> userController<span class="token punctuation">.</span>handleLogin<span class="token punctuation">,</span> redirectBack<span class="token punctuation">)</span>
app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/logout'</span><span class="token punctuation">,</span> userController<span class="token punctuation">.</span>logout<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>能夠根據未填欄位、或是資料輸入錯誤，顯示相對應的錯誤訊息：</p>
<p><img src="https://i.imgur.com/rS4BspM.png"></p>
<p>執行程式確認註冊和登入功能都沒問題的話，這樣就完成了簡易的會員註冊系統！藉由 MVC 架構，就能夠很清楚的分工，簡化程式邏輯。</p>
<hr>
<h2 id="實戰練習：有新增功能的簡易留言板"><a href="#實戰練習：有新增功能的簡易留言板" class="headerlink" title="實戰練習：有新增功能的簡易留言板"></a>實戰練習：有新增功能的簡易留言板</h2><p>再來要結合會員系統，實作一個有新增功能的簡易留言版。那麼就趕緊開始吧！</p>
<h3 id="Step1-規劃資料庫-1"><a href="#Step1-規劃資料庫-1" class="headerlink" title="Step1. 規劃資料庫"></a>Step1. 規劃資料庫</h3><p>在 app database 新增一個 comments table，以 username 欄位和 users table 進行關聯</p>
<p><img src="https://i.imgur.com/WcPt20O.png"></p>
<h3 id="Step2-新增留言區塊"><a href="#Step2-新增留言區塊" class="headerlink" title="Step2. 新增留言區塊"></a>Step2. 新增留言區塊</h3><p>在首頁 index.ejs 介面新增留言表單，如果是登入狀態，就能看到留言區塊：</p>
<pre class="line-numbers language-htmlmixed" data-language="htmlmixed"><code class="language-htmlmixed">&lt;h1&gt;簡易會員系統&lt;&#x2F;h1&gt;

&lt;!-- 以是否有 username 來判斷是否登入 --&gt;
&lt;% if(username) &#123; %&gt;
  &lt;div&gt;Hello, &lt;%&#x3D; username + &#39;!&#39; %&gt;&lt;&#x2F;div&gt;
  &lt;a href&#x3D;&quot;&#x2F;logout&quot;&gt;登出&lt;&#x2F;a&gt;

  &lt;form method&#x3D;&quot;POST&quot; action&#x3D;&quot;&#x2F;comments&quot;&gt;
    &lt;textarea name&#x3D;&quot;content&quot; id&#x3D;&quot;&quot; cols&#x3D;&quot;30&quot; rows&#x3D;&quot;10&quot;&gt;&lt;&#x2F;textarea&gt;
    &lt;input type&#x3D;&quot;submit&quot; &#x2F;&gt;
  &lt;&#x2F;form&gt;

&lt;% &#125; else &#123; %&gt;
  &lt;a href&#x3D;&quot;&#x2F;register&quot;&gt;註冊&lt;&#x2F;a&gt;
  &lt;a href&#x3D;&quot;&#x2F;login&quot;&gt;登入&lt;&#x2F;a&gt;
&lt;% &#125; %&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>畫面看起來會是這個樣子：</p>
<p><img src="https://i.imgur.com/KbxPCEY.png"></p>
<h3 id="Step3-新增留言功能"><a href="#Step3-新增留言功能" class="headerlink" title="Step3. 新增留言功能"></a>Step3. 新增留言功能</h3><ol>
<li>新增路由：</li>
</ol>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> commentController <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./controllers/comment'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 提交表單來新增 comment，同樣以 redirectBack 來導回上一頁</span>
app<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'/comments'</span><span class="token punctuation">,</span> commentController<span class="token punctuation">.</span>add<span class="token punctuation">,</span> redirectBack<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<ol start="2">
<li>建立 commentConrtoller 架構：</li>
</ol>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 引入 commentModel</span>
<span class="token keyword">const</span> commentModel <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'../models/comment'</span><span class="token punctuation">)</span>

<span class="token keyword">const</span> commentController <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  <span class="token function-variable function">add</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">const</span> <span class="token punctuation">&#123;</span>username<span class="token punctuation">&#125;</span> <span class="token operator">=</span> req<span class="token punctuation">.</span>session
    <span class="token keyword">const</span> <span class="token punctuation">&#123;</span>content<span class="token punctuation">&#125;</span> <span class="token operator">=</span> req<span class="token punctuation">.</span>body
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>username<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      req<span class="token punctuation">.</span><span class="token function">flash</span><span class="token punctuation">(</span><span class="token string">'errorMessage'</span><span class="token punctuation">,</span> <span class="token string">'請先登入'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>content<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      req<span class="token punctuation">.</span><span class="token function">flash</span><span class="token punctuation">(</span><span class="token string">'errorMessage'</span><span class="token punctuation">,</span> <span class="token string">'缺少必要欄位'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token comment">// 若新增失敗就導回首頁</span>
    commentModel<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>username<span class="token punctuation">,</span> content<span class="token punctuation">,</span> <span class="token parameter">err</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">redirect</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// 輸出commentController</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> commentController<span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ol start="3">
<li>建立 commentModel 並新增 add，將表單提交內容寫入資料庫：</li>
</ol>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> commentModel <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// 新增 comment 功能</span>
  <span class="token function-variable function">add</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">username<span class="token punctuation">,</span> content<span class="token punctuation">,</span> cb</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    db<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>
      <span class="token string">'INSERT INTO comments(username, content) VALUES(?, ?)'</span><span class="token punctuation">,</span>
      <span class="token punctuation">[</span>username<span class="token punctuation">,</span> content<span class="token punctuation">]</span><span class="token punctuation">,</span>
      <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> results</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">cb</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">cb</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="Step4-讀取留言功能"><a href="#Step4-讀取留言功能" class="headerlink" title="Step4. 讀取留言功能"></a>Step4. 讀取留言功能</h3><ol>
<li>繼續在 commentModel 新增 getAll 來處讀取 username 資料，進行 users 和 comments 資料庫關聯：</li>
</ol>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 讀取 comment 功能</span>
<span class="token function-variable function">getAll</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">cb</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// 資料庫關聯</span>
  db<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>
    <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">
    SELECT U.nickname, C.content FROM comments as C
    LEFT JOIN users as U on U.username = C.username       
    </span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>
    <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> results</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">cb</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">cb</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> results<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ol start="2">
<li>修改首頁 index 路由：</li>
</ol>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span> commentController<span class="token punctuation">.</span>index<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ol start="3">
<li>在 Controller 處理 index 頁面，讀取資料並進行渲染：</li>
</ol>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 在 index 頁面讀取資料</span>
<span class="token function-variable function">index</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  commentModel<span class="token punctuation">.</span><span class="token function">getAll</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> results</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    res<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token string">'index'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>
      comments<span class="token operator">:</span> results<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ol start="4">
<li>修改首頁 index.ejs 顯示留言部分：</li>
</ol>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span><span class="token operator">%</span> comments<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">comment</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token operator">%</span><span class="token operator">></span>
  <span class="token operator">&lt;</span>div<span class="token operator">></span>
    <span class="token operator">&lt;</span>h2<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">%=</span> comment<span class="token punctuation">.</span>nickname <span class="token operator">%</span><span class="token operator">></span> <span class="token operator">&lt;</span><span class="token operator">%=</span> comment<span class="token punctuation">.</span>created_at <span class="token operator">%</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">></span>
    <span class="token operator">&lt;</span>p<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">%=</span> comment<span class="token punctuation">.</span>content <span class="token operator">%</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>
  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
<span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token operator">%</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>這樣其實就完成簡易的留言版了！但可以注意到，透過 EJS 語法輸出的時間，和我們預期的 <code>&#39;MMM-DD-YYYY&#39;</code> 格式不太相同：</p>
<p><img src="https://i.imgur.com/7BWBdzc.png"></p>
<h3 id="補充：透過-moment-js-修改時間格式"><a href="#補充：透過-moment-js-修改時間格式" class="headerlink" title="補充：透過 moment.js 修改時間格式"></a>補充：透過 moment.js 修改時間格式</h3><p>透過 <span class="exturl" data-url="aHR0cHM6Ly9tb21lbnRqcy5jb20v">moment.js<i class="fa fa-external-link-alt"></i></span> 這個套件，我們就能夠制定要輸出的時間日期格式，也能設定不同時區的時間。</p>
<ol>
<li>安裝 moment.js 套件：</li>
</ol>
<pre class="line-numbers language-none"><code class="language-none">npm install moment --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ol start="2">
<li>在 index.js 引入套件，並將 moment 和設定好的格式放入 locals，這樣就能在 View 使用：</li>
</ol>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 引入 moment 套件</span>
<span class="token keyword">const</span> moment <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'moment'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 設定時間格式</span>
<span class="token keyword">const</span> shortDateFormat <span class="token operator">=</span> <span class="token string">"YYYY-MM-DD HH:mm:ss"</span><span class="token punctuation">;</span>
<span class="token comment">// 將 moment 和 shortDateFormat 放到 locals 全域環境中</span>
app<span class="token punctuation">.</span>locals<span class="token punctuation">.</span>moment <span class="token operator">=</span> moment<span class="token punctuation">;</span>
app<span class="token punctuation">.</span>locals<span class="token punctuation">.</span>shortDateFormat <span class="token operator">=</span> shortDateFormat<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ol start="3">
<li>修改 index.ejs 的 View，用 moment 語法來輸出時間，也就是 <code>moment(&#39;datetime&#39;).format(&#39;模版&#39;)</code>，改寫如下：</li>
</ol>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span><span class="token operator">%</span> comments<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">comment</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token operator">%</span><span class="token operator">></span>
  <span class="token operator">&lt;</span>div<span class="token operator">></span>
    <span class="token operator">&lt;</span>h2<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">%=</span> comment<span class="token punctuation">.</span>nickname <span class="token operator">%</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">></span>
    <span class="token operator">&lt;</span>p<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">%=</span> <span class="token function">moment</span><span class="token punctuation">(</span>comment<span class="token punctuation">.</span>created_at<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>shortDateFormat<span class="token punctuation">)</span> <span class="token operator">%</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>
    <span class="token operator">&lt;</span>p<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">%=</span> comment<span class="token punctuation">.</span>content <span class="token operator">%</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>
  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
<span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token operator">%</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>這樣就成功把時間修改成 “YYYY-MM-DD h:mm:ss” 格式了！</p>
<p><img src="https://i.imgur.com/yiiWQeZ.png"></p>
<p>找了幾種引用 moment 的寫法，最後覺得這篇：<span class="exturl" data-url="aHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvMTI3OTQ4NjAvaG93LXRvLXVzZS1ub2RlLW1vZHVsZXMtbGlrZS1tb21lbnRqcy1pbi1lanMtdmlld3M=">How to use node modules (like MomentJS) in EJS views?<i class="fa fa-external-link-alt"></i></span> 內容蠻符合需要的，也就是要如何透過 node 提供的套件來改變 EJS views，稍微嘗試過後，也成功將時間格式調整成想要的樣子！</p>
<hr>
<h2 id="實戰：優化留言板"><a href="#實戰：優化留言板" class="headerlink" title="實戰：優化留言板"></a>實戰：優化留言板</h2><p>在上述範例中，我們在完成了一個有新增功能簡易留言版，接下來我們要試著把系統變得更完整一點。</p>
<h3 id="Step1-思考產品全貌"><a href="#Step1-思考產品全貌" class="headerlink" title="Step1. 思考產品全貌"></a>Step1. 思考產品全貌</h3><p>在開始實作產品內容之前，需要先思考幾個重點：</p>
<ol>
<li>產品會有哪些功能：新增留言、編輯留言、刪除留言</li>
<li>如何設計路由</li>
</ol>
<ul>
<li>刪除留言<ul>
<li><code>GET /delete_comments/:id =&gt; /</code></li>
</ul>
</li>
<li>編輯留言<ul>
<li>跳轉到編輯頁面 <code>GET /update_comments/:id =&gt; form</code></li>
<li>編輯完成提交 <code>POST /update_comments/:id =&gt; /</code></li>
</ul>
</li>
</ul>
<h3 id="Step2-規劃資料庫結構"><a href="#Step2-規劃資料庫結構" class="headerlink" title="Step2. 規劃資料庫結構"></a>Step2. 規劃資料庫結構</h3><p>規劃好系統功能和路由之後，再來就是規劃資料庫結構，這部分在先前的實作中就完成得差不多了。</p>
<p>在 users 和 comments table 中有個同樣的欄位 username，透過這個外鍵（Foreign Key），我們就能夠進行資料庫關聯，拿到想要的資料形式。</p>
<h3 id="Step3-實作刪除功能"><a href="#Step3-實作刪除功能" class="headerlink" title="Step3. 實作刪除功能"></a>Step3. 實作刪除功能</h3><ol>
<li>在 index.ejs 新增刪除按紐，並且只有留言本人才看得到刪除鍵：</li>
</ol>
<pre class="line-numbers language-htmlmixed" data-language="htmlmixed"><code class="language-htmlmixed">&lt;% comments.forEach(function(comment) &#123; %&gt;
  &lt;div&gt;
    &lt;h2&gt;&lt;%&#x3D; comment.nickname %&gt;&lt;&#x2F;h2&gt;
    &lt;p&gt;&lt;%&#x3D; moment(comment.created_at).format(shortDateFormat) %&gt;&lt;&#x2F;p&gt;
    &lt;p&gt;&lt;%&#x3D; comment.content %&gt;&lt;&#x2F;p&gt;
    &lt;!-- 判斷使用者的 username 和 comment 的 username 是否相同--&gt;
    &lt;% if (username &#x3D;&#x3D;&#x3D; comment.username) &#123;%&gt;
      &lt;!-- 只有本人才會看到刪除鍵 --&gt;
      &lt;a href&#x3D;&quot;&#x2F;delete_comments&#x2F;&lt;%&#x3D; comment.id %&gt;&quot;&gt;刪除&lt;&#x2F;a&gt;
    &lt;% &#125; %&gt;
  &lt;&#x2F;div&gt;
&lt;% &#125;) %&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ol start="2">
<li>修改 commentModel 來拿取需要的資料，也就是 comment table 的 id 和 username：</li>
</ol>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 讀取 comment 功能</span>
<span class="token function-variable function">getAll</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">cb</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// 資料庫關聯</span>
  db<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>
    <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">
    SELECT U.nickname, U.created_at, C.content, C.id, C.username, C.created_at 
    FROM comments as C
    LEFT JOIN users as U on U.username = C.username
    ORDER BY C.created_at DESC       
    </span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>
    <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> results</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">cb</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">cb</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> results<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ol start="3">
<li>在 index.js 新增刪除留言的路由：</li>
</ol>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/delete_comments/:id'</span><span class="token punctuation">,</span> commentController<span class="token punctuation">.</span>delete<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ol start="4">
<li>新增控制 delete 的方法。注意這裡的參數除了網址列上的 id，也需傳入 session 以確認是否為該 comment 作者：：</li>
</ol>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function-variable function">delete</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// 除了網址列上的 id，也需傳入 session 以確認是否為該 comment 作者</span>
  commentModel<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>session<span class="token punctuation">.</span>username<span class="token punctuation">,</span> req<span class="token punctuation">.</span>params<span class="token punctuation">.</span>id<span class="token punctuation">,</span> <span class="token parameter">err</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    res<span class="token punctuation">.</span><span class="token function">redirect</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ol start="5">
<li>實作 delete 的 commentModel 部分：</li>
</ol>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function-variable function">delete</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">username<span class="token punctuation">,</span> id<span class="token punctuation">,</span> cb</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  db<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>
    <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">
      DELETE FROM comments WHERE id=? AND username=?
    </span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token punctuation">[</span>id<span class="token punctuation">,</span> username<span class="token punctuation">]</span><span class="token punctuation">,</span> 
    <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> results</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">cb</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">cb</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>記得做好權限管裡，只有該則留言的’作者才能進行刪除：</p>
<p><img src="https://i.imgur.com/L9lV2x9.png"></p>
<h3 id="Step4-實作編輯功能"><a href="#Step4-實作編輯功能" class="headerlink" title="Step4. 實作編輯功能"></a>Step4. 實作編輯功能</h3><ol>
<li>同樣先從 View 部分開始，在 index.ejs 新增編輯按紐：</li>
</ol>
<pre class="line-numbers language-htmlmixed" data-language="htmlmixed"><code class="language-htmlmixed">&lt;!-- 判斷使用者的 username 和 comment 的 username 是否相同--&gt;
&lt;% if (username &#x3D;&#x3D;&#x3D; comment.username) &#123;%&gt;
  &lt;a href&#x3D;&quot;&#x2F;update_comments&#x2F;&lt;%&#x3D; comment.id %&gt;&quot;&gt;編輯&lt;&#x2F;a&gt;
  &lt;a href&#x3D;&quot;&#x2F;delete_comments&#x2F;&lt;%&#x3D; comment.id %&gt;&quot;&gt;刪除&lt;&#x2F;a&gt;
&lt;% &#125; %&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ol start="2">
<li>在 index.js 新增路由：</li>
</ol>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">app<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'/comments'</span><span class="token punctuation">,</span> commentController<span class="token punctuation">.</span>add<span class="token punctuation">,</span> redirectBack<span class="token punctuation">)</span>
app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/delete_comments/:id'</span><span class="token punctuation">,</span> commentController<span class="token punctuation">.</span>delete<span class="token punctuation">)</span>
<span class="token comment">// 讀取要編輯的 comment</span>
app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/update_comments/:id'</span><span class="token punctuation">,</span> commentController<span class="token punctuation">.</span>update<span class="token punctuation">)</span>
<span class="token comment">// 執行修改 comment</span>
app<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'/update_comments/:id'</span><span class="token punctuation">,</span> commentController<span class="token punctuation">.</span>handleupdate<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ol start="3">
<li>在新增 Controller 控制相對應的路由前，因為 update 需要讀取相對應 id 的 comment，因此需要在 Model 新增讀取單一 comment 的功能：</li>
</ol>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 讀取相對應 id 的 comment</span>
get<span class="token operator">:</span> <span class="token punctuation">(</span>id<span class="token punctuation">,</span> cb<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// 資料庫關聯</span>
  db<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>
    <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">
    SELECT U.nickname, U.created_at, C.content, C.id, C.username, C.created_at 
    FROM comments as C
    LEFT JOIN users as U on U.username = C.username
    WHERE C.id = ?  
    </span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> results</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">cb</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token comment">// 如果結果是 undefined 就會傳空物件，可避免程式出現錯誤</span>
      <span class="token function">cb</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> results<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ol start="4">
<li>接著就可以繼續編輯 Controller 中的 update：</li>
</ol>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function-variable function">update</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  commentModel<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>params<span class="token punctuation">.</span>id<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> result</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    res<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token string">'update'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>
      comment<span class="token operator">:</span> result
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ol start="5">
<li>再來實作 update 的 View 部分，因為直接修改網址就能進到這個頁面，要記得做驗證權限，必須是作者本人才能修改留言，這是透過前端處理：</li>
</ol>
<pre class="line-numbers language-htmlmixed" data-language="htmlmixed"><code class="language-htmlmixed">&lt;h1&gt;編輯留言&lt;&#x2F;h1&gt;

&lt;a href&#x3D;&quot;&#x2F;&quot;&gt;返回&lt;&#x2F;a&gt;

&lt;!-- 前端驗證 --&gt;
&lt;% if (username &#x3D;&#x3D;&#x3D; comment.username) &#123; %&gt;
  &lt;form method&#x3D;&quot;POST&quot; action&#x3D;&quot;&#x2F;update_comments&#x2F;&lt;%&#x3D; comment.id %&gt;&quot;&gt;
    &lt;textarea name&#x3D;&quot;content&quot; id&#x3D;&quot;&quot; cols&#x3D;&quot;30&quot; rows&#x3D;&quot;10&quot;&gt;&lt;&#x2F;textarea&gt;
    &lt;input type&#x3D;&quot;submit&quot; &#x2F;&gt;
  &lt;&#x2F;form&gt;
&lt;% &#125; else &#123; %&gt;
  &lt;div&gt;ノンノンだよ！你沒有修改權限！&lt;&#x2F;div&gt;
&lt;% &#125; %&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>有修改權限</li>
</ul>
<p><img src="https://i.imgur.com/GyCcRFg.png"></p>
<ul>
<li>沒有修改權限</li>
</ul>
<p><img src="https://i.imgur.com/J1iF7Ri.png"></p>
<ol start="6">
<li>最後剩下 handelUpdate 處理表單提交部分，首先是控制路由部分，透過比對 session 和 params.id 確認是否為本人，並傳入要修改的留言內容：</li>
</ol>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function-variable function">handleUpdate</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// 後端驗證: 必須是本人才有權限修改</span>
  commentModel<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>session<span class="token punctuation">.</span>username<span class="token punctuation">,</span> req<span class="token punctuation">.</span>params<span class="token punctuation">.</span>id<span class="token punctuation">,</span> req<span class="token punctuation">.</span>body<span class="token punctuation">.</span>content<span class="token punctuation">,</span> <span class="token parameter">err</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    res<span class="token punctuation">.</span><span class="token function">redirect</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ol start="7">
<li>然後修改 Model 處理資料：</li>
</ol>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function-variable function">update</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">username<span class="token punctuation">,</span> id<span class="token punctuation">,</span> content<span class="token punctuation">,</span> cb</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
db<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>
  <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">
    UPDATE comments SET content=? WHERE  id=? AND username=?
  </span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token punctuation">[</span>content<span class="token punctuation">,</span> id<span class="token punctuation">,</span> username<span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> results</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">cb</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">cb</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>這樣就完成具有新增、刪除和編輯功能的留言板了！再來我們要學習如何美化頁面，也就是 EJS 如何修改 template 來改變畫面。</p>
<h3 id="Step5-美化頁面"><a href="#Step5-美化頁面" class="headerlink" title="Step5. 美化頁面"></a>Step5. 美化頁面</h3><p>透過 <a href="(https://ejs.co/#install)">EJS</a> 提供的語法 <code>include()</code> 我們可以建立模版，獨立出每個頁面都有的元素，例如 head 和 navbar 等等，如此就能簡化程式碼，範例如下：</p>
<pre class="line-numbers language-htmlmixed" data-language="htmlmixed"><code class="language-htmlmixed">&lt;%- include(&#39;header&#39;); -%&gt;
&lt;h1&gt;
  Title
&lt;&#x2F;h1&gt;
&lt;p&gt;
  My page
&lt;&#x2F;p&gt;
&lt;%- include(&#39;footer&#39;); -%&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>此外，include() 也可以傳入參數：</p>
<pre class="line-numbers language-htmlmixed" data-language="htmlmixed"><code class="language-htmlmixed">&lt;ul&gt;
  &lt;% users.forEach(function(user)&#123; %&gt;
    &lt;%- include(&#39;user&#x2F;show&#39;, &#123;user: user&#125;); %&gt;
  &lt;% &#125;); %&gt;
&lt;&#x2F;ul&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>認識新語法之後，就來繼續修改畫面吧！</p>
<ol>
<li>首先在 index.ejs 加入 include() 語法，就像平常寫的 html 的架構。注意這裡的 <code>&lt;%- %&gt;</code> 是減號，代表會經過 html 解析：</li>
</ol>
<pre class="line-numbers language-htmlmixed" data-language="htmlmixed"><code class="language-htmlmixed">&lt;html&gt;
&lt;head&gt;
  &lt;%- include(&#39;template&#x2F;head&#39;) %&gt;
&lt;&#x2F;head&gt;

  &lt;h1&gt;簡易會員系統&lt;&#x2F;h1&gt;
  
  &lt;h2&gt;&lt;%&#x3D; errorMessage %&gt;&lt;&#x2F;h2&gt;
  
  &lt;% if(username) &#123; %&gt;
  &lt;div&gt;Hello, &lt;%&#x3D; username + &#39;!&#39; %&gt;&lt;&#x2F;div&gt;
  &lt;a href&#x3D;&quot;&#x2F;logout&quot;&gt;登出&lt;&#x2F;a&gt;
  
  &lt;form method&#x3D;&quot;POST&quot; action&#x3D;&quot;&#x2F;comments&quot;&gt;
    &lt;textarea name&#x3D;&quot;content&quot; id&#x3D;&quot;&quot; cols&#x3D;&quot;30&quot; rows&#x3D;&quot;10&quot;&gt;&lt;&#x2F;textarea&gt;
    &lt;input type&#x3D;&quot;submit&quot; &#x2F;&gt;
  &lt;&#x2F;form&gt;
  
  &lt;% &#125; else &#123; %&gt;
  &lt;a href&#x3D;&quot;&#x2F;register&quot;&gt;註冊&lt;&#x2F;a&gt;
  &lt;a href&#x3D;&quot;&#x2F;login&quot;&gt;登入&lt;&#x2F;a&gt;
  &lt;% &#125; %&gt;
  
  &lt;% comments.forEach(function(comment) &#123; %&gt;
  &lt;div&gt;
    &lt;h2&gt;&lt;%&#x3D; comment.nickname %&gt;&lt;&#x2F;h2&gt;
    &lt;p class&#x3D;&quot;card-subtitle text-muted&quot;&gt;&lt;%&#x3D; moment(comment.created_at).format(shortDateFormat) %&gt;&lt;&#x2F;p&gt;
    &lt;p&gt;&lt;%&#x3D; comment.content %&gt;&lt;&#x2F;p&gt;
    &lt;% if (username &#x3D;&#x3D;&#x3D; comment.username) &#123;%&gt;
    &lt;a href&#x3D;&quot;&#x2F;update_comments&#x2F;&lt;%&#x3D; comment.id %&gt;&quot;&gt;編輯&lt;&#x2F;a&gt;
    &lt;a href&#x3D;&quot;&#x2F;delete_comments&#x2F;&lt;%&#x3D; comment.id %&gt;&quot;&gt;刪除&lt;&#x2F;a&gt;
    &lt;% &#125; %&gt;
  &lt;&#x2F;div&gt;
  &lt;% &#125;) %&gt;

&lt;&#x2F;html&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ol start="2">
<li>再來編輯 head.ejs 部分，引入 <span class="exturl" data-url="aHR0cHM6Ly9nZXRib290c3RyYXAuY29tL2RvY3MvNC41L2dldHRpbmctc3RhcnRlZC9pbnRyb2R1Y3Rpb24v">Bootstrap<i class="fa fa-external-link-alt"></i></span> 提供的樣式和 meta tags：</li>
</ol>
<pre class="line-numbers language-htmlmixed" data-language="htmlmixed"><code class="language-htmlmixed">&lt;!-- Required meta tags --&gt;
&lt;meta charset&#x3D;&quot;utf-8&quot;&gt;
&lt;meta name&#x3D;&quot;viewport&quot; content&#x3D;&quot;width&#x3D;device-width, initial-scale&#x3D;1, shrink-to-fit&#x3D;no&quot;&gt;

&lt;!-- Bootstrap CSS --&gt;
&lt;link rel&#x3D;&quot;stylesheet&quot; href&#x3D;&quot;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;npm&#x2F;bootstrap@4.5.3&#x2F;dist&#x2F;css&#x2F;bootstrap.min.css&quot;
integrity&#x3D;&quot;sha384-TX8t27EcRE3e&#x2F;ihU7zmQxVncDAy5uIKz4rEkgIXeMed4M0jlfIDPvg6uqKI2xXr2&quot; crossorigin&#x3D;&quot;anonymous&quot;&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>成功引入之後，就會發現畫面套用了 Bootstrap 提供的樣式：</p>
<p><img src="https://i.imgur.com/EUjQqMo.png"></p>
<ol start="3">
<li>再來是 navbar，同樣在 index.ejs 中加上 include() 語法：</li>
</ol>
<pre class="line-numbers language-htmlmixed" data-language="htmlmixed"><code class="language-htmlmixed">&lt;%- include(&#39;template&#x2F;navbar&#39;) %&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ol start="4">
<li>新增模版 navbar.ejs，可在 <span class="exturl" data-url="aHR0cHM6Ly9nZXRib290c3RyYXAuY29tL2RvY3MvNC41L2NvbXBvbmVudHMvbmF2YmFyLw==">Bootstrap/navbar<i class="fa fa-external-link-alt"></i></span> 找合適的模版來套用，並且把之前在 index.ejs 做的登入驗證同樣放到這裡，加上對應的路徑：</li>
</ol>
<pre class="line-numbers language-htmlmixed" data-language="htmlmixed"><code class="language-htmlmixed">&lt;nav class&#x3D;&quot;navbar navbar-dark bg-dark&quot;&gt;
  &lt;a class&#x3D;&quot;navbar-brand&quot; href&#x3D;&quot;&#x2F;&quot; &gt;這是一個留言版&lt;&#x2F;a&gt;

  &lt;div&gt;
    &lt;% if(username) &#123; %&gt;
      &lt;div class&#x3D;&quot;&quot;&gt;
        &lt;span class&#x3D;&quot;text-light&quot;&gt;Hello, &lt;%&#x3D; username + &#39;!&#39; %&gt;&lt;&#x2F;span&gt;
        &lt;a class&#x3D;&quot;btn btn-outline-light my-2 my-sm-0&quot; href&#x3D;&quot;&#x2F;logout&quot;&gt;登出&lt;&#x2F;a&gt;
      &lt;&#x2F;div&gt;
    &lt;% &#125; else &#123; %&gt;
      &lt;a class&#x3D;&quot;btn btn-outline-light my-2 my-sm-0&quot; href&#x3D;&quot;&#x2F;login&quot;&gt;登入&lt;&#x2F;a&gt;
      &lt;a class&#x3D;&quot;btn btn-outline-warning my-2 my-sm-0&quot; href&#x3D;&quot;&#x2F;register&quot;&gt;註冊&lt;&#x2F;a&gt;
    &lt;% &#125; %&gt;
  &lt;&#x2F;div&gt;
&lt;&#x2F;nav&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>效果會長這樣：</p>
<p><img src="https://i.imgur.com/sepdlt7.png"></p>
<p>此外，像 head.ejs、navbar 這些通用模版，可放在 views/template 資料夾統一管理：</p>
<p><img src="https://i.imgur.com/2YdWdMx.png"></p>
<ol start="5">
<li>接著來修改註冊和登入頁面，同樣可在 Bootstrap 找合適的 <span class="exturl" data-url="aHR0cHM6Ly9nZXRib290c3RyYXAuY29tL2RvY3MvNC41L2NvbXBvbmVudHMvZm9ybXMv">forms<i class="fa fa-external-link-alt"></i></span> 版型：</li>
</ol>
<ul>
<li>register.ejs 註冊頁面</li>
</ul>
<pre class="line-numbers language-htmlmixed" data-language="htmlmixed"><code class="language-htmlmixed">&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;%- include(&#39;..&#x2F;template&#x2F;head&#39;) %&gt;
&lt;&#x2F;head&gt;
  &lt;%- include(&#39;..&#x2F;template&#x2F;navbar&#39;) %&gt;
  &lt;div class&#x3D;&quot;container&quot;&gt;
    &lt;!-- 若沒有錯誤會回傳一個空陣列 [] --&gt;
    &lt;% if (errorMessage.length &gt; 0) &#123; %&gt;
      &lt;div class&#x3D;&quot;alert alert-danger&quot; role&#x3D;&quot;alert&quot;&gt;
        &lt;%&#x3D; errorMessage %&gt;
      &lt;&#x2F;div&gt;
    &lt;% &#125; %&gt;
    &lt;form method&#x3D;&quot;POST&quot; action&#x3D;&quot;&#x2F;register&quot;&gt;
      &lt;div class&#x3D;&quot;form-group row&quot;&gt;
        &lt;label class&#x3D;&quot;col-sm-2 col-form-label&quot;&gt;Username: &lt;&#x2F;label&gt;
        &lt;div class&#x3D;&quot;col-sm-10&quot;&gt;
          &lt;input class&#x3D;&quot;form-control&quot; name&#x3D;&quot;username&quot;&gt;
        &lt;&#x2F;div&gt;
      &lt;&#x2F;div&gt;
      &lt;div class&#x3D;&quot;form-group row&quot;&gt;
        &lt;label class&#x3D;&quot;col-sm-2 col-form-label&quot;&gt;Nickname: &lt;&#x2F;label&gt;
        &lt;div class&#x3D;&quot;col-sm-10&quot;&gt;
          &lt;input class&#x3D;&quot;form-control&quot; name&#x3D;&quot;nickname&quot;&gt;
        &lt;&#x2F;div&gt;
      &lt;&#x2F;div&gt;
      &lt;div class&#x3D;&quot;form-group row&quot;&gt;
        &lt;label class&#x3D;&quot;col-sm-2 col-form-label&quot;&gt;Password: &lt;&#x2F;label&gt;
        &lt;div class&#x3D;&quot;col-sm-10&quot;&gt;
          &lt;input class&#x3D;&quot;form-control&quot; name&#x3D;&quot;password&quot; type&#x3D;&quot;password&quot;&gt;
        &lt;&#x2F;div&gt;
      &lt;&#x2F;div&gt;
      &lt;button type&#x3D;&quot;submit&quot; class&#x3D;&quot;btn btn-dark mb-2&quot;&gt;Submit&lt;&#x2F;button&gt;
    &lt;&#x2F;form&gt;
  &lt;&#x2F;div&gt;
&lt;&#x2F;html&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>login.ejs 登入頁面</li>
</ul>
<pre class="line-numbers language-htmlmixed" data-language="htmlmixed"><code class="language-htmlmixed">&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;%- include(&#39;..&#x2F;template&#x2F;head&#39;) %&gt;
&lt;&#x2F;head&gt;
  &lt;%- include(&#39;..&#x2F;template&#x2F;navbar&#39;) %&gt;

  &lt;div class&#x3D;&quot;container&quot;&gt;
    &lt;!-- 若沒有錯誤會回傳一個空陣列 [] --&gt;
    &lt;% if (errorMessage.length &gt; 0) &#123; %&gt;
    &lt;div class&#x3D;&quot;alert alert-danger&quot; role&#x3D;&quot;alert&quot;&gt;
      &lt;%&#x3D; errorMessage %&gt;
    &lt;&#x2F;div&gt;
    &lt;% &#125; %&gt;
    &lt;form method&#x3D;&quot;POST&quot; action&#x3D;&quot;&#x2F;login&quot;&gt;
      &lt;div class&#x3D;&quot;form-group row&quot;&gt;
        &lt;label class&#x3D;&quot;col-sm-2 col-form-label&quot;&gt;Username: &lt;&#x2F;label&gt;
        &lt;div class&#x3D;&quot;col-sm-10&quot;&gt;
          &lt;input class&#x3D;&quot;form-control&quot; name&#x3D;&quot;username&quot;&gt;
        &lt;&#x2F;div&gt;
      &lt;&#x2F;div&gt;
      &lt;div class&#x3D;&quot;form-group row&quot;&gt;
        &lt;label class&#x3D;&quot;col-sm-2 col-form-label&quot;&gt;Password: &lt;&#x2F;label&gt;
        &lt;div class&#x3D;&quot;col-sm-10&quot;&gt;
          &lt;input class&#x3D;&quot;form-control&quot; name&#x3D;&quot;password&quot; type&#x3D;&quot;password&quot;&gt;
        &lt;&#x2F;div&gt;
      &lt;&#x2F;div&gt;
      &lt;button type&#x3D;&quot;submit&quot; class&#x3D;&quot;btn btn-dark mb-2&quot;&gt;Submit&lt;&#x2F;button&gt;
    &lt;&#x2F;form&gt;
  &lt;&#x2F;div&gt;

&lt;&#x2F;html&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>兩者寫法其實差不多，只有欄位和路徑需要修改，畫面效果如下：</p>
<p><img src="https://i.imgur.com/ySLeqVp.png"></p>
<ol start="6">
<li>再來是首頁 index.ejs，同樣幫 forms 還有留言卡套用樣式：</li>
</ol>
<pre class="line-numbers language-htmlmixed" data-language="htmlmixed"><code class="language-htmlmixed">&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;%- include(&#39;template&#x2F;head&#39;) %&gt;
&lt;&#x2F;head&gt;
  &lt;%- include(&#39;template&#x2F;navbar&#39;) %&gt;

  &lt;div class&#x3D;&quot;container mx-auto mt-3&quot; style&#x3D;&quot;width: 100%;&quot;&gt;
    &lt;% if (errorMessage.length &gt; 0) &#123; %&gt;
    &lt;div class&#x3D;&quot;alert alert-danger&quot; role&#x3D;&quot;alert&quot;&gt;
      &lt;%&#x3D; errorMessage %&gt;
    &lt;&#x2F;div&gt;
    &lt;% &#125; %&gt;
    
    &lt;% if(username) &#123; %&gt;
    &lt;form method&#x3D;&quot;POST&quot; action&#x3D;&quot;&#x2F;comments&quot;&gt;
      &lt;div class&#x3D;&quot;form-group&quot;&gt;
        &lt;div class&#x3D;&quot;text-dark&quot;&gt;留言內容&lt;&#x2F;div&gt;
        &lt;textarea name&#x3D;&quot;content&quot; class&#x3D;&quot;form-control&quot;&gt;&lt;&#x2F;textarea&gt;
      &lt;&#x2F;div&gt;
      &lt;button type&#x3D;&quot;submit&quot; class&#x3D;&quot;btn btn-dark&quot;&gt;提交&lt;&#x2F;button&gt;
    &lt;&#x2F;form&gt;
    &lt;% &#125; else &#123; %&gt;
      &lt;div class&#x3D;&quot;alert alert-warning&quot; role&#x3D;&quot;alert&quot;&gt;留言請先登入&lt;&#x2F;div&gt;
    &lt;% &#125; %&gt;
    
    &lt;div class&#x3D;&quot;card-container d-flex flex-wrap&quot;&gt;
      &lt;% comments.forEach(function(comment) &#123; %&gt;
        &lt;div class&#x3D;&quot;card m-2&quot; style&#x3D;&quot;width: 18rem; height: 16rem;&quot;&gt;
          &lt;div class&#x3D;&quot;card-header&quot;&gt;
            &lt;h5 class&#x3D;&quot;card-title&quot;&gt;&lt;%&#x3D; comment.nickname %&gt;&lt;&#x2F;h5&gt;
            &lt;h6 class&#x3D;&quot;card-subtitle text-muted&quot;&gt;&lt;%&#x3D; moment(comment.created_at).format(shortDateFormat) %&gt;&lt;&#x2F;h6&gt;
            &lt;% if (username &#x3D;&#x3D;&#x3D; comment.username) &#123;%&gt;
            &lt;a href&#x3D;&quot;&#x2F;update_comments&#x2F;&lt;%&#x3D; comment.id %&gt;&quot; class&#x3D;&quot;card-link&quot;&gt;編輯&lt;&#x2F;a&gt;
            &lt;a href&#x3D;&quot;&#x2F;delete_comments&#x2F;&lt;%&#x3D; comment.id %&gt;&quot; class&#x3D;&quot;card-link&quot;&gt;刪除&lt;&#x2F;a&gt;
            &lt;% &#125; %&gt;
          &lt;&#x2F;div&gt;
          &lt;div class&#x3D;&quot;card-body&quot; style&#x3D;&quot;overflow:scroll; overflow-x:hidden;&quot;&gt;
            &lt;p class&#x3D;&quot;card-text&quot; &gt;&lt;%&#x3D; comment.content %&gt;&lt;&#x2F;p&gt;
          &lt;&#x2F;div&gt;
        &lt;&#x2F;div&gt;
      &lt;% &#125;) %&gt;
    &lt;&#x2F;div&gt;

  &lt;&#x2F;div&gt;
&lt;&#x2F;html&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>效果如下：</p>
<p><img src="https://i.imgur.com/AVp2KF7.png"></p>
<ol start="6">
<li>最後是編輯留言頁面 update.ejs，也和其他頁面版型差不多：</li>
</ol>
<pre class="line-numbers language-htmlmixed" data-language="htmlmixed"><code class="language-htmlmixed">&lt;!DOCTYPE html&gt;
&lt;html&gt;

&lt;head&gt;
  &lt;%- include(&#39;template&#x2F;head&#39;) %&gt;
&lt;&#x2F;head&gt;
  &lt;%- include(&#39;template&#x2F;navbar&#39;) %&gt;

  &lt;div class&#x3D;&quot;container mx-auto mt-4&quot; style&#x3D;&quot;width: 100%;&quot;&gt;
    &lt;!-- 若沒有錯誤會回傳一個空陣列 [] --&gt;
    &lt;% if (errorMessage.length &gt; 0) &#123; %&gt;
    &lt;div class&#x3D;&quot;alert alert-danger&quot; role&#x3D;&quot;alert&quot;&gt;
      &lt;%&#x3D; errorMessage %&gt;
    &lt;&#x2F;div&gt;
    &lt;% &#125; %&gt;

    &lt;% if (username &#x3D;&#x3D;&#x3D; comment.username) &#123; %&gt;
      &lt;form method&#x3D;&quot;POST&quot; action&#x3D;&quot;&#x2F;update_comments&#x2F;&lt;%&#x3D; comment.id %&gt;&quot;&gt;
        &lt;div class&#x3D;&quot;form-group&quot;&gt;
          &lt;div class&#x3D;&quot;text-dark&quot;&gt;編輯留言&lt;&#x2F;div&gt;
          &lt;textarea name&#x3D;&quot;content&quot; class&#x3D;&quot;form-control&quot;&gt;&lt;&#x2F;textarea&gt;
        &lt;&#x2F;div&gt;
        &lt;button type&#x3D;&quot;submit&quot; class&#x3D;&quot;btn btn-dark&quot;&gt;提交&lt;&#x2F;button&gt;
      &lt;&#x2F;form&gt;
    &lt;% &#125; else &#123; %&gt;
      &lt;div&gt;ノンノンだよ！你沒有修改權限！&lt;&#x2F;div&gt;
    &lt;% &#125; %&gt;
  &lt;&#x2F;div&gt;

&lt;&#x2F;html&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><img src="https://i.imgur.com/1JoojMH.png"></p>
<p>透過這個範例，我們學到該如何使用 include() 語法來引入模板，如此就能簡化程式碼，將重複使用的區塊給模組化；此外，也透過 BootStrap 提供的現成樣式，讓我們能快速修改頁面，達到想要的畫面效果。</p>
<h2 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h2><p>實際跟著範例操作之後，會發現透過 MVC 模式撰寫程式，思考邏輯會很類似。使用 Express 框架實作網頁時，會依照下方流程進行：</p>
<ol>
<li>思考產品全貌：哪些功能？哪些路由？</li>
<li>規劃資料庫結構</li>
<li>載入需要的模組，設定 app 路由部分</li>
<li>依照 MVC 架構撰寫程式碼：<ul>
<li>設定 Controller：針對不同路由進行控制</li>
<li>設定 Model：如何處理資料</li>
<li>設定 View：如何呈現畫面</li>
</ul>
</li>
</ol>
<p>也藉這個機會來複習 BootStrap 使用方式，這和之前「先刻版面再加入功能」的模式正好相反，反而是先把功能做好，再套用現有樣式，這也是藉由 MVC 將畫面和功能分割開來才能夠辦到。</p>
<p>在學會如何寫出一個簡單的會員註冊系統和留言版之後，其實就能夠應用到各種網頁，期待之後能夠熟悉 MVC 架構的寫法！</p>
]]></content>
      <categories>
        <category>Back-End</category>
        <category>Express</category>
      </categories>
      <tags>
        <tag>Back-End</tag>
        <tag>Express</tag>
        <tag>Middleware</tag>
      </tags>
  </entry>
  <entry>
    <title>[week 2] JavaScript 基礎 - 基本語法、值的型別、變數、迴圈、函數</title>
    <url>/javascript/</url>
    <content><![CDATA[<blockquote>
<p>本篇為 <span class="exturl" data-url="aHR0cHM6Ly9saWRlbXkuY29tL3AvanMxMDEtamF2YXNjcmlwdA==">[JS101] 用 JavaScript 一步步打造程式基礎<i class="fa fa-external-link-alt"></i></span> 這門課程的學習筆記。如有錯誤歡迎指正！</p>
</blockquote>
<pre class="line-numbers language-none"><code class="language-none">學習目標：

 P1 你能靈活運用變數、迴圈、判斷式等等基本概念來解題
 P1 你能一行行的說出現在程式在做什麼
 P1 你知道「回傳」跟「輸出」的差異
 P1 你可以把用文字寫好的演算法轉成程式碼<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<span id="more"></span>
<hr>
<h2 id="JavaScript-是什麼？"><a href="#JavaScript-是什麼？" class="headerlink" title="JavaScript 是什麼？"></a>JavaScript 是什麼？</h2><p>JavaScript 是一種物件導向（Object-oriented programming）的腳本語言（Script language），主要用來改進 Web 瀏覽器的客戶端體驗。</p>
<p>腳本語言是一種直譯語言，因不需進行編譯，在撰寫和除錯上較為方便；但缺點是執行效率比不上編譯語言，且無法單獨執行，必須仰賴運行環境。例如：HTML 網頁中的 JavaScript 需要瀏覽器支援才能執行。</p>
<p>直到 Node.js 出現後，提供了 JavaScript 在瀏覽器以外的運行環境。目前實務開發中，通常使用瀏覽器的開發者工具來進行 debug（除錯）。</p>
<p>參考資料：</p>
<ol>
<li><span class="exturl" data-url="aHR0cDovL3Rlc3QuZG9tb2p5dW4ubmV0L01FTU8vSmF2YVNjcmlwdC8=">JavaScript 基本認識 - JavaScript 入門學習筆記<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9tZWRpdW0uY29tL0B0b3Rvcm9MaXUvJUU3JUI3JUE4JUU4JUFEJUFGJUU4JUFBJTlFJUU4JUE4JTgwLXZzLSVFNyU5QiVCNCVFOCVBRCVBRiVFOCVBQSU5RSVFOCVBOCU4MC01ZjM0ZTZiYWUwNTE=">編譯語言 VS 直譯語言- Po-Ching Liu - Medium<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9tZWRpdW0uY29tL2NvZGVtZW1vLyVFNSVCRiU4MyVFNSVCRSU5NyVFNSU4OCU4NiVFNCVCQSVBQi1qcy0lRTUlQjAlODglRTclODIlQkElRTclODAlOEYlRTglQTYlQkQlRTUlOTklQTglRTglODAlOEMlRTclOTQlOUYlRTclOUElODQtc2NyaXB0LSVFOCU4NSVCMyVFNiU5QyVBQyVFOCVBQSU5RSVFOCVBOCU4MC02MGE2Mjg5ODg3MTA=">[心得分享] JS = 專為瀏覽器而生的 script (腳本語言)<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9ib29rcy5nb29nbGUuY29tLnR3L2Jvb2tzP2lkPThKXzNCUUFBUUJBSiZwZz1TQTEtUEE1JmxwZz1TQTEtUEE1JmRxPSVFOCU4NSVCMyVFNiU5QyVBQyVFOCVBQSU5RSVFOCVBOCU4MCVFNiU5OCVBRiVFNCVCOCU4MCVFNyVBOCVBRSVFNyU5QiVCNCVFOCVBRCVBRiVFOCVBQSU5RSVFOCVBOCU4MCVFRiVCQyU4QyZzb3VyY2U9Ymwmb3RzPW9IbkJMMUNHbnkmc2lnPUFDZlUzVTBoZ1diLW1uZWpSR1gyWmhzQ2xvYnhhZlVucUEmaGw9emgtVFcmc2E9WCZ2ZWQ9MmFoVUtFd2lEMVo3UThJX3FBaFhNdzRzQkhVM0lEbzBRNkFFd0JYb0VDQWtRQVEjdj1vbmVwYWdlJnE9JUU4JTg1JUIzJUU2JTlDJUFDJUU4JUFBJTlFJUU4JUE4JTgwJUU2JTk4JUFGJUU0JUI4JTgwJUU3JUE4JUFFJUU3JTlCJUI0JUU4JUFEJUFGJUU4JUFBJTlFJUU4JUE4JTgwJUVGJUJDJThDJmY9ZmFsc2U=">JavaScript+jQuery Mobile+Node.js跨平台網頁設計範例教本(電子書)<i class="fa fa-external-link-alt"></i></span></li>
</ol>
<h2 id="Node-js-環境建置"><a href="#Node-js-環境建置" class="headerlink" title="Node.js 環境建置"></a>Node.js 環境建置</h2><blockquote>
<p>進入<span class="exturl" data-url="aHR0cHM6Ly9ub2RlanMub3JnL2VuLw==">官網<i class="fa fa-external-link-alt"></i></span>會看到下列文字：<br>Node.js® is a JavaScript ==runtime== built on Chrome’s V8 JavaScript engine.<br>（Node.js 一個能執行 JavaScript 的==運行環境==，以 Google Chrome V8 引擎為核心。）</p>
</blockquote>
<p>安裝完成後，就可以在 Command Line 輸入指令：</p>
<h3 id="node-v：查看目前-Node-js-版本號"><a href="#node-v：查看目前-Node-js-版本號" class="headerlink" title="node -v：查看目前 Node.js 版本號"></a><code>node -v</code>：查看目前 Node.js 版本號</h3><p>出現版本號就代表安裝成功。</p>
<p><img src="https://i.imgur.com/IXXGrb0.png"></p>
<h3 id="node：直接在-CML-開啟-Node-環境"><a href="#node：直接在-CML-開啟-Node-環境" class="headerlink" title="node：直接在 CML 開啟 Node 環境"></a><code>node</code>：直接在 CML 開啟 Node 環境</h3><p>可在終端機輸入指令。按 Crtl+C 或輸入就<code>.exit</code> 即可退出。</p>
<p><img src="https://i.imgur.com/L3DJaob.png"></p>
<hr>
<h2 id="如何執行-JavaScript-文件？"><a href="#如何執行-JavaScript-文件？" class="headerlink" title="如何執行 JavaScript 文件？"></a>如何執行 JavaScript 文件？</h2><h3 id="在瀏覽器執行"><a href="#在瀏覽器執行" class="headerlink" title="在瀏覽器執行"></a>在瀏覽器執行</h3><ol>
<li>寫在 HTML 文件中的 <code>&lt;script &gt;</code> 標籤內</li>
</ol>
<p><img src="https://i.imgur.com/r1gMPnm.png" alt="HTML JS"></p>
<ol start="2">
<li>用瀏覽器開啟該檔案，點選右鍵選單的檢查，進入開發者工具介面</li>
<li>可在 Console 主控台檢視或直接撰寫。通常用來測試代碼的可行性、或直接 debug 抓錯</li>
</ol>
<p><img src="https://i.imgur.com/1U5LzRD.png" alt="Google JS"></p>
<h3 id="在-Command-Line-執行"><a href="#在-Command-Line-執行" class="headerlink" title="在 Command Line 執行"></a>在 Command Line 執行</h3><ol>
<li><code>vim index.js</code>：輸入 vim 指令建立檔案 index.js，並且編輯內容</li>
</ol>
<blockquote>
<p>也可使用 VSCode、Sublime 等程式碼編輯器來撰寫程式碼</p>
</blockquote>
<p><img src="https://i.imgur.com/4392JMK.png" alt="vim 介面"></p>
<ol start="2">
<li><code>node index.js</code>：在 CML 執行檔案 index.js</li>
</ol>
<p><img src="https://i.imgur.com/zkJPsbj.png" alt="node 執行"></p>
<hr>
<h2 id="基本語法"><a href="#基本語法" class="headerlink" title="基本語法"></a>基本語法</h2><h3 id="console-log-：將值輸出到瀏覽器控制台"><a href="#console-log-：將值輸出到瀏覽器控制台" class="headerlink" title="console.log()：將值輸出到瀏覽器控制台"></a>console.log()：將值輸出到瀏覽器控制台</h3><p>若要輸出字串，需用 ‘單引號’ 或 “雙引號” 括起來。</p>
<p><code>console.log(’Hello World’)　　//　輸出值：Hello World</code></p>
<h3 id="算術運算"><a href="#算術運算" class="headerlink" title="算術運算"></a>算術運算</h3><p><code>+</code>：加<br><code>-</code>：減<br><code>*</code>：乘<br><code>/</code>：除<br><code>%</code>：取餘數（例如 10 % 3，結果是 1）</p>
<h3 id="邏輯運算"><a href="#邏輯運算" class="headerlink" title="邏輯運算"></a>邏輯運算</h3><ul>
<li>邏輯運算子常在 if 判斷式中和布林值（true or false）一起使用</li>
<li>在 JavaScript 中會被判定為 false 的值為：<code>0</code>、<code>&quot;&quot;</code>、<code>null</code>、<code>false</code>、<code>undefined</code>、<code>NaN</code></li>
</ul>
<h4 id="：or"><a href="#：or" class="headerlink" title="||：or"></a><code>||</code>：or</h4><p>只要其中一個是 true 就會返回 true，除非全部為 false。意即只要其中一個條件滿足就成立。</p>
<p><img src="https://i.imgur.com/v0j07Ua.png" alt="or"></p>
<h4 id="amp-amp-：and"><a href="#amp-amp-：and" class="headerlink" title="&amp;&amp;：and"></a><code>&amp;&amp;</code>：and</h4><p>全部為 true 才會是 true，否則均返回 false。意即全部條件都必須成立。</p>
<p><img src="https://i.imgur.com/dbhRafe.png" alt="and"></p>
<h4 id="：not"><a href="#：not" class="headerlink" title="!：not"></a><code>!</code>：not</h4><p>做反向。</p>
<p><img src="https://i.imgur.com/2scURgc.png" alt="!"></p>
<h3 id="與-amp-amp-的短路性質"><a href="#與-amp-amp-的短路性質" class="headerlink" title="|| 與 &amp;&amp; 的短路性質"></a><code>||</code> 與 <code>&amp;&amp;</code> 的短路性質</h3><p>使用最短的路徑來求值，又稱<span class="exturl" data-url="aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3dpa2kvJUU3JTlGJUFEJUU4JUI3JUFGJUU2JUIxJTgyJUU1JTgwJUJD">短路求值<i class="fa fa-external-link-alt"></i></span>。只有當第一個運算數的值無法確定邏輯運算的結果時，才對第二個運算數進行求值。例如：</p>
<pre class="line-numbers language-none"><code class="language-none">1. 當 or 的第一個運算數為 true 時，最後結果必定為 true
2. 當 and 的第一個運算數的值為 false 時，其結果必定為 false<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>在這種情況下，就不需要知道第二個運算數的具體值。也就是短路性質。</p>
<p>範例：</p>
<pre class="line-numbers language-none"><code class="language-none">console.log(3 || 10)　　　　&#x2F;&#x2F;　output 3
console.log(false || 10)　　&#x2F;&#x2F;　output 10
console.log(3 &amp;&amp; 10)　　　　　&#x2F;&#x2F;　output 10
console.log(false &amp;&amp; 3)　　&#x2F;&#x2F;　output false<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p><code>var obj = obj || &#123; &#125;;　　//　如果 obj 存在就維持原樣，如果不存在就給予空物件</code></p>
<p><code>var student = name || &quot;小明&quot;;　　//　如果沒有 name 就用預設為小明。用 || 來設定變數預設值</code></p>
<blockquote>
<p>更多短路邏輯的運用可參考這篇：<span class="exturl" data-url="aHR0cHM6Ly9zd2VldGVhc29uLnBpeG5ldC5uZXQvYmxvZy9wb3N0LzQzMDIyOTIxLWphdmFzY3JpcHQtJUU1JTlGJUJBJUU3JUE0JThFJUU2JTg5JTkzJUU1JUJBJTk1JUU3JUIzJUJCJUU1JTg4JTk3LSUyOCVFNCVCOCU4OSUyOS0tLSVFOSU4MiU4RiVFOCVCQyVBRiVFOSU4MSU4QiVFNyVBRSU5NyVFNSVBRCU5MCVFRiVCQyU4QyVFOCU4OCU4Nw==">想知道&amp;&amp;與&amp;及||與|之間的區別嗎？ | 程式前沿<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
<h3 id="位移運算子：-lt-lt-與-gt-gt"><a href="#位移運算子：-lt-lt-與-gt-gt" class="headerlink" title="位移運算子：&lt;&lt; 與 &gt;&gt;"></a>位移運算子：<code>&lt;&lt;</code> 與 <code>&gt;&gt;</code></h3><p>首先來複習二進位制：</p>
<p>0100 = 2^3<em>0 + 2^2</em>1 + 2^1<em>0 + 2^0</em>0 = 2^2 = 4<br>1000 = 2^3<em>1 + 2^2</em>0 + 2^1<em>0 + 2^0</em>0 = 2^3 = 8</p>
<h4 id="lt-lt-：將位元往左移一位，可作為乘以-2。"><a href="#lt-lt-：將位元往左移一位，可作為乘以-2。" class="headerlink" title="&lt;&lt;：將位元往左移一位，可作為乘以 2。"></a>&lt;&lt;：將位元往左移一位，可作為乘以 2。</h4><p><img src="https://i.imgur.com/7f9YfSO.png" alt="&lt;&lt; 左移"></p>
<h4 id="gt-gt-：將位元往右移一位，可作為除以-2。若無法整除則會直接捨去。"><a href="#gt-gt-：將位元往右移一位，可作為除以-2。若無法整除則會直接捨去。" class="headerlink" title="&gt;&gt;：將位元往右移一位，可作為除以 2。若無法整除則會直接捨去。"></a>&gt;&gt;：將位元往右移一位，可作為除以 2。若無法整除則會直接捨去。</h4><p><img src="https://i.imgur.com/RP4O8zV.png" alt="&gt;&gt; 右移"></p>
<ul>
<li>由於電腦使用的是二進位系統，位元運算的速度通常會快於乘法和除法運算。</li>
</ul>
<h3 id="位元運算"><a href="#位元運算" class="headerlink" title="位元運算"></a>位元運算</h3><p>and<br>or<br>xor<br>not<br>(待補)</p>
<hr>
<h3 id="遞增、遞減運算子：-與"><a href="#遞增、遞減運算子：-與" class="headerlink" title="遞增、遞減運算子：++ 與 --"></a>遞增、遞減運算子：<code>++</code> 與 <code>--</code></h3><pre class="line-numbers language-none"><code class="language-none">var a &#x3D; 0　　&#x2F;&#x2F;　等號是賦值
a &#x3D; a + 1　　&#x2F;&#x2F;　可簡化為　a +&#x3D; 1 或 a++
a &#x3D; a - 1　　&#x2F;&#x2F;　可簡化為　a -&#x3D; 1 或 a--<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<h4 id="遞增（-，increment）：運算前或運算後「遞增」"><a href="#遞增（-，increment）：運算前或運算後「遞增」" class="headerlink" title="遞增（++，increment）：運算前或運算後「遞增」"></a>遞增（<code>++</code>，increment）：運算前或運算後「遞增」</h4><h4 id="遞減（-，decrement）：運算前或運算後「遞減」"><a href="#遞減（-，decrement）：運算前或運算後「遞減」" class="headerlink" title="遞減（--，decrement）：運算前或運算後「遞減」"></a>遞減（<code>--</code>，decrement）：運算前或運算後「遞減」</h4><blockquote>
<p>其中以 ++ 運算子為例：</p>
</blockquote>
<p>++ 運算子的回傳值，取決於相對於運算元的位置。</p>
<ol>
<li>先遞增（<code>++a</code>）：用在運算元之前，執行遞增，然後回傳遞增後的值。</li>
<li>後遞增（<code>a++</code>）：用在運算元後方，執行遞增，然後回傳未遞增前的值。</li>
</ol>
<pre class="line-numbers language-none"><code class="language-none">var i &#x3D; 1, j &#x3D; ++i　　&#x2F;&#x2F;　i 與 j 兩者皆為 2
var i &#x3D; 1, j &#x3D; i++　　&#x2F;&#x2F;　i 為 2, j 是 1　<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<blockquote>
<p>若以邏輯運算為例：</p>
</blockquote>
<ol>
<li>先遞增<pre class="line-numbers language-none"><code class="language-none">var a &#x3D; 0

console.log(++a &amp;&amp; 30)　　　&#x2F;&#x2F;　印出 30，此時 a 為 1
console.log(&#39;a:&#39; , a)　　　&#x2F;&#x2F;　 印出 a:1

&#x2F;&#x2F;　先跑 a+&#x3D;1，再 console.log(a &amp;&amp; 30)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li>後遞增</li>
</ol>
<pre class="line-numbers language-none"><code class="language-none">var a &#x3D; 0

console.log(a++ &amp;&amp; 30)　　　&#x2F;&#x2F;　印出 0，此時 a 為 0
console.log(&#39;a:&#39; , a)　　　&#x2F;&#x2F;　 印出 a:1

&#x2F;&#x2F;　先跑 console.log(a &amp;&amp; 30)，再 a+&#x3D;1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<hr>
<h2 id="值的型態"><a href="#值的型態" class="headerlink" title="值的型態"></a>值的型態</h2><h3 id="JavaScript-的資料型態可分為："><a href="#JavaScript-的資料型態可分為：" class="headerlink" title="JavaScript 的資料型態可分為："></a>JavaScript 的資料型態可分為：</h3><ul>
<li>原始型態（primitive types）</li>
</ul>
<ol>
<li>boolean（真偽值）：ture 和 false</li>
<li>number（數字）：例如 1、3.14159、NaN（無效的數字）</li>
<li>string（字串）：例如 <code>&#39;Hello World&#39;</code></li>
<li>null：沒有值存在（no value）</li>
<li>undefined：值不存在（absence） </li>
</ol>
<ul>
<li>其他都屬於物件型態（object types）</li>
</ul>
<ol>
<li>array（陣列）：例如 [1, 2, 3]</li>
<li>function（函式）</li>
<li>date…etc</li>
</ol>
<h3 id="typeof-lt-value-gt-：用來判斷參數型態"><a href="#typeof-lt-value-gt-：用來判斷參數型態" class="headerlink" title="typeof &lt;value&gt;：用來判斷參數型態"></a><code>typeof &lt;value&gt;</code>：用來判斷參數型態</h3><pre class="line-numbers language-none"><code class="language-none">console.log(&#39;typeof true&#39;, typeof true)
&#x2F;&#x2F;輸出 typeof true boolean<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p><img src="https://i.imgur.com/rT6DR1N.png"></p>
<p>在 <span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvemgtVFcvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvT3BlcmF0b3JzL3R5cGVvZg==">MDN 網站<i class="fa fa-external-link-alt"></i></span> 列出 typeof 的可能回傳值：</p>
<p><img src="https://4.bp.blogspot.com/-dBndQxibqJ8/V3xngW8lK5I/AAAAAAAAnDU/L5PVWe-8j-gL3vzcA4xMznzsgqq4AcnkACLcB/s1600/1.png"></p>
<blockquote>
<p>null 使用 typeof 運算子，回傳的結果會是字串 “object”，這指出 null 可被認為是象徵「無物件」（no object）的一種特殊物件值。（參考資料：<span class="exturl" data-url="aHR0cHM6Ly93d3cudGVubG9uZy5jb20udHcvcHJvZHVjdHMvOTc4OTg2Mjc2NDQxMQ==">犀牛書<i class="fa fa-external-link-alt"></i></span>）</p>
<p>這其實是 JavaScript 最初發現的一個錯誤，然後被 ECMAScript 沿用了。現在，null 被認為是物件的佔位符，從而解釋了這一矛盾<br>（參考資料：<span class="exturl" data-url="aHR0cHM6Ly9pdGhlbHAuaXRob21lLmNvbS50dy9hcnRpY2xlcy8xMDIwMDg0MQ==">你懂JavaScript 嗎？#4 型別（Types） <i class="fa fa-external-link-alt"></i></span>）</p>
</blockquote>
<hr>
<h2 id="變數（Variable）"><a href="#變數（Variable）" class="headerlink" title="變數（Variable）"></a>變數（Variable）</h2><ul>
<li>用來暫時儲存資料的地方</li>
<li>想像成裝東西的箱子，<code>宣告變數</code>是將這個箱子取名，<code>加上等號賦值</code>是在裡面裝東西</li>
</ul>
<pre class="line-numbers language-none"><code class="language-none">其他情形：

1. 當宣告變數，卻沒有給這個變數賦值，用 console.log 會印出 undefined
2. 若想印出一個沒有宣告的文字，會出現錯誤訊息 not defined<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="宣告變數"><a href="#宣告變數" class="headerlink" title="宣告變數"></a>宣告變數</h3><ul>
<li>不可用數字開頭</li>
<li>不可取名為<span class="exturl" data-url="aHR0cDovL3d3dy53M2JhaS5jb20vemgtVFcvanMvanNfcmVzZXJ2ZWQuaHRtbA==">保留字詞<i class="fa fa-external-link-alt"></i></span>，例如 var、function、for </li>
<li>變數盡量用語譯化的方式命名，例如 peopleCount、total</li>
<li>變數的取名規則需統一，可分為下列兩種：</li>
</ul>
<ol>
<li>蛇式命名（snake_case）:名稱中間的標點以底線連接<br><code>var this_is_a_box</code></li>
<li>駝峰式命名（camelCase）:除了第一個單詞外，後面的單詞首字母均為大寫<br><code>var thisIsABox</code></li>
</ol>
<h3 id="變數的儲存模型"><a href="#變數的儲存模型" class="headerlink" title="變數的儲存模型"></a>變數的儲存模型</h3><p>前面提到變數是像箱子的儲存模型，參考 Huli 寫的<span class="exturl" data-url="aHR0cHM6Ly9tZWRpdW0uY29tL0BodWxpdHcvdmFyaWFibGUtYW5kLWZyb250ZGVzay1hNTNhMDQ0MGFmM2M=">這篇文章<i class="fa fa-external-link-alt"></i></span>，舉以下範例來說明其特性：</p>
<pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F; 範例一

var A &#x3D; [1, 2, 3]
var B &#x3D; [1, 2, 3]
var C &#x3D; A
console.log(A &#x3D;&#x3D; B)　　　&#x2F;&#x2F; 回傳 false
console.log(C &#x3D;&#x3D; B)　　　&#x2F;&#x2F; 回傳 false
console.log(C &#x3D;&#x3D; A)　　　&#x2F;&#x2F; 回傳 true<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ol>
<li>即使代表的東西相同，但 A 和 B 其實存放在不同的格子，而 A 和 C 相同。</li>
<li><code>==</code> 與 <code>===</code> 是去看「格子的內容」是否相等，而不是檢查「所代表的東西」是否相等。</li>
</ol>
<pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F; 範例二

var F &#x3D; [1, 2, 3]
var G &#x3D; F

&#x2F;&#x2F; 往裡面放東西
F.push(4)　　　　　　　　
console.log(F, G)　　　&#x2F;&#x2F; 回傳 [1, 2, 3, 4] [1, 2, 3, 4]

&#x2F;&#x2F; 改放全新的東西
F &#x3D; [1, 3, 5]　　　　　
console.log(F, G)　　　&#x2F;&#x2F; 回傳 [1, 3, 5] [1, 2, 3, 4]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ol>
<li>「往裡面放東西」與「改放全新的東西」是兩件完全不同的事情。</li>
<li>一般的變數存資訊，物件存記憶體位置。</li>
</ol>
<ul>
<li>一般的變數：變數裡面存的內容就真的是那個資訊，例如：數字、字串</li>
<li>物件：變數裡面存的內容其實是「指引」，指引存的是記憶體位置，例如：陣列或物件</li>
</ul>
<h3 id="變數的運算"><a href="#變數的運算" class="headerlink" title="變數的運算"></a>變數的運算</h3><ul>
<li>注意值的型態：字串和數字相加時，會變成字串相加</li>
</ul>
<pre class="line-numbers language-none"><code class="language-none">var a &#x3D; &#39;10&#39;https:&#x2F;&#x2F;www.bilibili.com&#x2F;video&#x2F;BV1Hz411i7ph&#x2F;
var b &#x3D; 20
console.log(a + b)　　　&#x2F;&#x2F; 印出 1020<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>解決方法：</p>
<ol>
<li><code>console.log(Number(a) + b)</code>：用 <code>Number()</code> 將字串轉成數字</li>
<li><code>console.log(parseInt(a, 10) + b)</code>：用 <code>parseInt()</code> 將字串轉換成整數，10 代表預設的十進位 </li>
</ol>
<ul>
<li>注意<span class="exturl" data-url="aHR0cDovL2Jsb2cuZGN2aWV3LmNvbS9hcnRpY2xlLnBocD9hPVZtaFFOVlkrQ3pvPQ==">浮動數誤差<i class="fa fa-external-link-alt"></i></span>：電腦在儲存小數值可能會產生誤差</li>
</ul>
<pre class="line-numbers language-none"><code class="language-none">var a &#x3D; 0.1 + 0.2
console.log(a &#x3D;&#x3D; 0.3)　　　&#x2F;&#x2F; 印出 false
console.log(a)            &#x2F;&#x2F; 印出 0.30000000000000004
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<h3 id="萬年經典題：-與"><a href="#萬年經典題：-與" class="headerlink" title="萬年經典題：== 與 ==="></a>萬年經典題：<code>==</code> 與 <code>===</code></h3><p><code>=</code>：代表賦值<br><code>==</code> 和 <code>===</code>：均用來判斷是否相等</p>
<pre class="line-numbers language-none"><code class="language-none">var a &#x3D; 10 &#x3D;&#x3D; 10　　&#x2F;&#x2F; 會從右執行到左，10 &#x3D;&#x3D; 10 true
console.log(a)　　　&#x2F;&#x2F; 所以 a 印出 true<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>差別在於 <code>===</code> 會判斷「型態」：</p>
<pre class="line-numbers language-none"><code class="language-none">console.log(0 &#x3D;&#x3D; ’0’)  &#x2F;&#x2F; true
console.log(0 &#x3D;&#x3D;&#x3D; ’0’)  &#x2F;&#x2F; false，因為數字和字串型態不同<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<blockquote>
<p>永遠都用三個等號，如此最能夠避免型態不同而發生錯誤。</p>
</blockquote>
<hr>
<h2 id="陣列（Array）"><a href="#陣列（Array）" class="headerlink" title="陣列（Array）"></a>陣列（Array）</h2><blockquote>
<p>在寫程式時遇到重複的動作，一定有方法能夠優化。</p>
</blockquote>
<ul>
<li>通常用來存放性質相近的資料</li>
<li>想像成一個列表物件，裡面含有幾個數值</li>
</ul>
<pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F; 陣列基本操作

box[1, 2, 3]
&#x2F;&#x2F; box 代表陣列名稱
&#x2F;&#x2F; [] 內的值代表索引值（index），陣列中索引是從 0 開始

console.log(box.length)　　　　　　　　&#x2F;&#x2F; 印出 3，代表陣列長度
console.log(box[1])　　　　　　　　&#x2F;&#x2F; 索引為 1 時，印出 2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F; 範例練習

var score &#x3D; [20, 5, 100]
console.log(score, score.length)　　 　&#x2F;&#x2F;　印出 [20, 5, 100] 3
console.log(score[score.length - 1])　&#x2F;&#x2F;　印出 100，陣列長度減一代表最後一個數的索引
score.push(60)　　　　　　　　　　　　　&#x2F;&#x2F;　在陣列最後新增一個數
score[score.length] &#x3D; 80　　　　　　　&#x2F;&#x2F;　在陣列最後新增一個數
console.log(score.length)　　　　　　&#x2F;&#x2F;　印出 5<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="物件（Object）"><a href="#物件（Object）" class="headerlink" title="物件（Object）"></a>物件（Object）</h2><ul>
<li>物件是一批相關的數據或功能</li>
<li>通常包含幾個變數及函式，當它們包含在物件中時被稱做屬性（properties）或函式（methods）</li>
</ul>
<pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F; 試著建立一個物件

var heidi &#x3D; &#123;
    name: &#39;heidi&#39;,
    scores: [20, 60, 100],
    address: &#39;Japan&#39;,
&#125;

console.log(heidi, typeof heidi) &#x2F;&#x2F; 印出物件屬性、型別
console.log(heidi.address)　　　　&#x2F;&#x2F; 用點（.）取出物件屬性

var key &#x3D; &#39;name&#39;
console.log(heidi[key])　　　　　　&#x2F;&#x2F; 這裡 heidi[key] 等於 heidi.name<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><img src="https://i.imgur.com/XKReoRy.png"></p>
<hr>
<h3 id="從-Object-的等號真正的理解變數"><a href="#從-Object-的等號真正的理解變數" class="headerlink" title="從 Object 的等號真正的理解變數"></a>從 Object 的等號真正的理解變數</h3><p>由 <code>console.log(1 === 1)</code>，會回傳 true 這個例子，來判斷下列情形：</p>
<pre class="line-numbers language-none"><code class="language-none">console.log([] &#x3D;&#x3D;&#x3D; [])
console.log([1] &#x3D;&#x3D;&#x3D; [1])
console.log(&#123;&#125; &#x3D;&#x3D;&#x3D; &#123;&#125;)
console.log(&#123;a: 1&#125; &#x3D;&#x3D;&#x3D; &#123;a: 1&#125;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>結果卻是：</p>
<p><img src="https://i.imgur.com/x9CYSuk.png"></p>
<p>變數是一個箱子，在放入數字的情況下：</p>
<pre class="line-numbers language-none"><code class="language-none">var a &#x3D; 30
console.log(a &#x3D;&#x3D;&#x3D; 30)    &#x2F;&#x2F; 印出 true，兩者相等<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>但如果在變數裡放入物件，結果卻會如下：</p>
<pre class="line-numbers language-none"><code class="language-none">var obj &#x3D; &#123;
    a:1
&#125;
console.log(obj &#x3D;&#x3D;&#x3D; &#123;a:1&#125;)    &#x2F;&#x2F; 印出 false，兩者不相等<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>可以想像成「記憶體位置」：儘管兩個箱子儲存的數值相同，但因記憶體位置不同，指向的元素不同，所以不會相等。</p>
<p><img src="https://i.imgur.com/ZAY1PrG.png"></p>
<p>如果換成下列情形：</p>
<pre class="line-numbers language-none"><code class="language-none">var obj &#x3D; &#123;
    a:1
&#125;
var obj2 &#x3D; obj
console.log(obj &#x3D;&#x3D;&#x3D; obj2)        &#x2F;&#x2F; 印出 true<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>兩者理所當然會相等，但若將 <code>obj2.a = 2</code>：更改 obj2 物件中 a 的值，會連 obj 的值也一起更動：</p>
<pre class="line-numbers language-none"><code class="language-none">var obj &#x3D; &#123;
    a:1
&#125;
var obj2 &#x3D; obj
obj2.a &#x3D; 2
console.log(&#39;obj&#39;, obj2)         &#x2F;&#x2F; obj &#123; a: 2 &#125;
console.log(&#39;obj2&#39;, obj2)        &#x2F;&#x2F; obj2 &#123; a: 2 &#125;
console.log(obj &#x3D;&#x3D;&#x3D; obj2)        &#x2F;&#x2F; 印出 true，兩者相等<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>會發現 obj 的值也一起被更改了。這是因為 obj 和 obj2 指向同一個記憶體位置，指向同一個物件。</p>
<p><img src="https://i.imgur.com/cgfJMmd.png"></p>
<p>但如果 <code>obj2 = &#123;b:1&#125;</code>：obj2 等於一個新的物件，會指向一個新的記憶體位置：</p>
<pre class="line-numbers language-none"><code class="language-none">var obj &#x3D; &#123;
    a:1
&#125;
var obj2 &#x3D; obj
obj2.a &#x3D; 2
obj2 &#x3D; &#123;b:1&#125;
console.log(&#39;obj&#39;, obj2)         &#x2F;&#x2F; obj &#123; a: 2 &#125;
console.log(&#39;obj2&#39;, obj2)        &#x2F;&#x2F; obj2 &#123; b: 1 &#125;
console.log(obj &#x3D;&#x3D;&#x3D; obj2)        &#x2F;&#x2F; 印出 false，兩者不相等<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>這是因為「往裡面放東西」與「改放全新的東西」是兩件完全不同的事情。後者會指向一個新的記憶體，可參考下圖理解：</p>
<p><img src="https://i.imgur.com/JkzALWA.png"></p>
<hr>
<h2 id="判斷式"><a href="#判斷式" class="headerlink" title="判斷式"></a>判斷式</h2><p>判斷式在 JavaScript 中用來==控制流程==。當指定的條件成立時，就會執行後續的指令。判斷式的語法有兩種：<code>if...else</code> 和 <code>switch</code>。</p>
<h3 id="if-else-statement"><a href="#if-else-statement" class="headerlink" title="if-else statement"></a><code>if-else</code> statement</h3><ul>
<li>if 後面的小括號內：條件式，由比較運算子或邏輯運算子組成</li>
<li>當條件成立時：會執行 if 大括號內的程式碼：</li>
<li>當條件不成立，但也想執行特定動作：在 if 大括號外面使用 else</li>
</ul>
<pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F; 基本架構

if (條件)&#123;
  如果條件成立，執行 A;
&#125; else &#123;
  如果條件不成立，執行 B;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F; 練習：判斷是否為 5 的倍數

var number &#x3D; 10
if (number % 5 &#x3D;&#x3D;&#x3D; 0) &#123;
    console.log(&#39;是5的倍數&#39;)
&#125; else &#123;
    console.log(&#39;不是5的倍數&#39;)
&#125;
&#x2F;&#x2F; 印出 是5的倍數<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="if-else-if-statement"><a href="#if-else-if-statement" class="headerlink" title="if-else if statement"></a>if-else if statement</h3><ul>
<li>當判斷情境更複雜時，搭配 <code>else if</code>，用來新增條件判斷</li>
<li><code>else if</code> 可以有很多個</li>
</ul>
<pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F; 基本架構

if (條件一) &#123;
  如果條件一成立，執行 A;
&#125; else if (條件二) &#123;
  如果條件一不成立；但條件二成立，執行 B;
&#125; else &#123;
  如果條件一跟二都不成立，執行 C;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F; 練習：判斷是否及格

var score &#x3D; 70

if (score &#x3D;&#x3D; 100) &#123;
    console.log(&#39;you are no1!&#39;)
&#125; else if (score &gt;&#x3D; 60)&#123;
    console.log(&#39;pass&#39;)
&#125; else &#123;
    console.log(&#39;fail&#39;)
&#125;
&#x2F;&#x2F; 印出 pass<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-none"><code class="language-none">var kg &#x3D; 60
var m &#x3D; 1.6
var BMI &#x3D; kg &#x2F; (m**2)　　　&#x2F;&#x2F; 指數

console.log(&#39;BMI:&#39;, BMI.toFixed(2))
&#x2F;&#x2F; 印出 BMI: 23.44，函數 toFixed() 可取到小數點下的指定位數

if (BMI &lt; 18.5) &#123;
    console.log(&#39;體重過輕&#39;)
&#125; else if (BMI &lt; 24) &#123;
    console.log(&#39;正常範圍&#39;)
&#125; else if (BMI &lt; 27) &#123;
    console.log(&#39;過重&#39;)
&#125; else if (BMI &lt; 30) &#123;
    console.log(&#39;輕度肥胖&#39;)
&#125; else if (BMI &lt; 35) &#123;
    console.log(&#39;中度肥胖&#39;)
&#125; else &#123;
    console.log(&#39;重度肥胖&#39;)   
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="switch-case"><a href="#switch-case" class="headerlink" title="switch case"></a>switch case</h3><ul>
<li>通常用於「有很多條件」要判斷的情況，適合用來處理只有「整數」或「字元」類型的資料</li>
<li>switch-case 判斷式沒有辦法處理「數值範圍」的問題</li>
<li>每個 <code>case 條件:</code> 後方都會加上 <code>break</code>：用途是停止執行後面的程式碼，否則 <code>switch</code> 會從匹配的 <code>case</code> 標籤開始執行到尾端</li>
</ul>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 基本架構</span>

<span class="token keyword">switch</span><span class="token punctuation">(</span>參數<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
<span class="token keyword">case</span> 條件一<span class="token operator">:</span>　　　　　　　　<span class="token comment">// 如果 n===條件一 就從這裡開始</span>
  條件一成立時執行區塊一<span class="token punctuation">;</span>
  <span class="token keyword">break</span><span class="token punctuation">;</span>            　    <span class="token comment">// 在這裡停止執行</span>
  
<span class="token keyword">case</span> 條件二<span class="token operator">:</span>
  條件二成立時執行區塊二<span class="token punctuation">;</span>
  <span class="token keyword">break</span><span class="token punctuation">;</span>
  
<span class="token keyword">default</span><span class="token operator">:</span>　　　　　　　　　　<span class="token comment">// 如果都沒有找到相同值</span>
  條件都不成立時執行區塊三<span class="token punctuation">;</span>
  <span class="token keyword">break</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="switch-case-vs-if-else"><a href="#switch-case-vs-if-else" class="headerlink" title="switch case vs if else"></a>switch case vs if else</h4><ul>
<li>效能差異：當比對的參數多時，switch 的可讀性和效能較佳</li>
<li>判別差異：switch 在判斷上採取嚴謹模式（同等性由 <code>===</code> 運算子判斷），亦即型別也要相同</li>
</ul>
<p>參考資料：</p>
<ol>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cuaXRyZWFkMDEuY29tL2NvbnRlbnQvMTU0OTYwMjE5OC5odG1s">switch…case 和 if…else效率比較和優化<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9pdGhlbHAuaXRob21lLmNvbS50dy9hcnRpY2xlcy8xMDIxMTU2MQ==">JavaScript 基礎知識-switch &amp; if else 的判別差異<i class="fa fa-external-link-alt"></i></span></li>
</ol>
<hr>
<h3 id="三元運算子（ternary）"><a href="#三元運算子（ternary）" class="headerlink" title="三元運算子（ternary）"></a>三元運算子（ternary）</h3><ul>
<li>也可稱作 Conditional Expression（條件表達式）</li>
<li>其實就是 if-else 的簡單寫法，適合巢狀結構（建議最多一層）</li>
</ul>
<pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F; 語法：

condition ? A : B　　　　&#x2F;&#x2F; 條件 ? 符合條件結果 : 不符合條件結果

&#x2F;&#x2F; 範例：

console.log(10 &gt; 5 ? &#39;bigger&#39; : &#39;smaller&#39;)　　&#x2F;&#x2F; 印出 bigger<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>以判斷是否及格為例：</p>
<pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F; if-else 寫法：

var score &#x3D; 60
var message &#x3D; &#39;&#39;

if (score &gt;&#x3D; 60) &#123;
    message &#x3D; &#39;pass&#39;
&#125; else &#123;
    message &#x3D; &#39;fail&#39;
&#125;

&#x2F;&#x2F; 三元運算子寫法：

var score &#x3D; 60
var message &#x3D; score &gt;&#x3D; 60 ? &#39;pass&#39; : &#39;fail&#39;
&#x2F;&#x2F; 兩種寫法均回傳 pass<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>


<h2 id="迴圈（loop）"><a href="#迴圈（loop）" class="headerlink" title="迴圈（loop）"></a>迴圈（loop）</h2><ul>
<li>迴圈是程式流程控制的一環，用來重複執行相似的工作</li>
<li>必須設定==終止條件==，否則執行時將進入無窮迴圈（可按 <code>Ctrl+C</code> 跳出）</li>
</ul>
<h3 id="do…while-迴圈"><a href="#do…while-迴圈" class="headerlink" title="do…while 迴圈"></a>do…while 迴圈</h3><ul>
<li>先執行後才判斷條件，代表迴圈主體至少會被執行一次</li>
</ul>
<pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F; 語法：

do &#123;
  statement　　　　　　　&#x2F;&#x2F; 先執行一次
&#125; while (condition)　　&#x2F;&#x2F; 若符合條件，會再進行下一次迴圈

&#x2F;&#x2F; 範例：

var i &#x3D; 1

do &#123;
    console.log(i)       &#x2F;&#x2F; 印出 1 到 100 
    i++
&#125; while (i&lt;&#x3D;100)         &#x2F;&#x2F; 直到 i &#x3D; 101 時跳出迴圈

console.log(&#39;i&#x3D;&#39;, i)     &#x2F;&#x2F; 印出 i &#x3D; 101<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="while-迴圈"><a href="#while-迴圈" class="headerlink" title="while 迴圈"></a>while 迴圈</h3><ul>
<li>其實就是 do…while 迴圈的變形版本。差別在於 do…while 會至少被執行一次，才進行條件判斷</li>
<li>由於迴圈主體需至少執行一次的情況並不常見，通常還是會使用 while 迴圈</li>
</ul>
<pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F; 語法：

while (condition) &#123;
    statement
&#125;

&#x2F;&#x2F; 將上方 do…while 範例改寫，會得到相同輸出結果：

var i &#x3D; 1

while (i &lt;&#x3D; 100) &#123;　　　&#x2F;&#x2F; 直到 i &#x3D; 101 時跳出迴圈
    console.log(i)　　　&#x2F;&#x2F; 印出 1 到 100
    i++
&#125;

console.log(&#39;i&#x3D;&#39;, i)　&#x2F;&#x2F; 印出 i &#x3D; 101<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="for-迴圈"><a href="#for-迴圈" class="headerlink" title="for 迴圈"></a>for 迴圈</h3><ul>
<li>類似 while 迴圈，但 for 迴圈通常用於「已知重複次數」的情況，也就是設定初始值和終止條件</li>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cud2liaWJpLmNvbS9pbmZvLnBocD90aWQ9MTgy">for 迴圈基本架構<i class="fa fa-external-link-alt"></i></span>，需要三個運算式作為參數：initialize（初始值）、condition（條件判斷）、increment（遞增迴圈變數）</li>
<li>三個運算式可省略任何一個，但中間的兩個分號必須存在。例如：<code>for (;;)</code> 會是無窮迴圈</li>
</ul>
<pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F; 語法：

for (初始值; 終止條件; 遞增迴圈變數)&#123;
    要執行的程式碼
&#125;

&#x2F;&#x2F; 也就是：

for ( 變數 &#x3D; 初始值 ; 變數 &lt; 限制值 ; 變數 + 步進值 ) &#123;
　要執行的程式碼
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F; 範例：

for (var i &#x3D; 1; i&lt;&#x3D;100; i++) &#123;
    console.log(i)
&#125;
&#x2F;&#x2F; 印出 1 到 100<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F; 可和 while 迴圈進行對照：

var i &#x3D; 1　　　　　　&#x2F;&#x2F; 初始值
while(i &lt;&#x3D; 100) &#123;　　 &#x2F;&#x2F; 終止條件
    console.log(i)
    i++            &#x2F;&#x2F; i 每一圈要做的事情
&#125;
&#x2F;&#x2F; 同樣印出 1 到 100<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="break-與-continue"><a href="#break-與-continue" class="headerlink" title="break 與 continue"></a>break 與 continue</h3><ul>
<li>用來改變迴圈的執行流程</li>
<li>只能用在迴圈或 switch 述句中</li>
</ul>
<h4 id="break（中斷）：中斷整個迴圈語句，也就是「跳出」迴圈區塊"><a href="#break（中斷）：中斷整個迴圈語句，也就是「跳出」迴圈區塊" class="headerlink" title="break（中斷）：中斷整個迴圈語句，也就是「跳出」迴圈區塊"></a><code>break</code>（中斷）：中斷整個迴圈語句，也就是「跳出」迴圈區塊</h4><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F; 範例：

var i &#x3D; 1

do &#123;
    console.log(i)　　　 &#x2F;&#x2F; 印出 1 到 6
    if (i &#x3D;&#x3D;&#x3D; 6) &#123;
        break　　　　  　&#x2F;&#x2F; 當 i 等於 6 時跳出迴圈
    &#125;
    i++
&#125; while (i &lt;&#x3D; 10)

console.log(&#39;i&#x3D;&#39;, i)　　&#x2F;&#x2F; 印出 i &#x3D; 6<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>執行結果如下圖：</p>
<p><img src="https://i.imgur.com/V9mi4KK.png" alt="break"></p>
<h4 id="continue（繼續）：繼續下一次迴圈語句，會忽略在-continue-之後的語句，直接跳到下一次的迴圈開頭"><a href="#continue（繼續）：繼續下一次迴圈語句，會忽略在-continue-之後的語句，直接跳到下一次的迴圈開頭" class="headerlink" title="continue（繼續）：繼續下一次迴圈語句，會忽略在 continue 之後的語句，直接跳到下一次的迴圈開頭"></a><code>continue</code>（繼續）：繼續下一次迴圈語句，會忽略在 continue 之後的語句，直接跳到下一次的迴圈開頭</h4><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F; 範例：

var i &#x3D; 1

do &#123;
    console.log(i)　　　&#x2F;&#x2F; 印出 1 到 10
    i++
&#x2F;&#x2F; 當 i 為奇數時，直接跳到　while 檢查條件，進入下一個迴圈
    if (i % 2 &#x3D;&#x3D;&#x3D; 1) &#123;　　　　
        continue
    &#125;
    console.log(&#39;i++&#39;, i)　　&#x2F;&#x2F; 只會印出偶數的 i
&#125; while (i &lt;&#x3D; 10)

console.log(&#39;i&#x3D;&#39;, i)　　&#x2F;&#x2F; 印出 i &#x3D; 11<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>執行結果如下圖：</p>
<p><img src="https://i.imgur.com/FoASLD1.png" alt="continue"></p>
<hr>
<h2 id="函式（Function）"><a href="#函式（Function）" class="headerlink" title="函式（Function）"></a>函式（Function）</h2><p>以前學的國中數學 <code>y = f(x)</code> 其實就是一種函式：</p>
<pre class="line-numbers language-none"><code class="language-none">y &#x3D; f(x)
y：回傳值 &#x2F; f(x)：函式 &#x2F; x：參數<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F; 範例：

y &#x3D; f(x) &#x3D; 2x
f(1) &#x3D; 2*1 &#x3D; 2

&#x2F;&#x2F; 也可以是多項參數：

y &#x3D; f(a, b, c) &#x3D; a+2b+3c
f(1, 1, 1) &#x3D; 1+2+3 &#x3D; 6
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="最基本的函式結構"><a href="#最基本的函式結構" class="headerlink" title="最基本的函式結構"></a>最基本的函式結構</h3><p>在 JavaScript 的函式架構：</p>
<pre class="line-numbers language-none"><code class="language-none">function 函數名稱(參數) &#123;
   return 要回傳的內容
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F; 範例：

function abc(a, b, c) &#123;
    return a + 2*b + 3*c
&#125;

console.log(abc(1, 1, 1))　　　　&#x2F;&#x2F; 印出 6<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>範例：在陣列產生 n 個元素的函式</p>
<pre class="line-numbers language-none"><code class="language-none">function generateArray(n)&#123;
    var result &#x3D; [] 　　　　　　　　&#x2F;&#x2F; 宣告一個變數為空陣列
    for(var i &#x3D; 1; i&lt;&#x3D;n; i++)&#123;
        result.push(i)　　　　　　&#x2F;&#x2F; 把數字放進陣列
    &#125;
    return result         　　   &#x2F;&#x2F; 記得回傳結果
&#125;

&#x2F;&#x2F; generateArray(3) &#x3D;&gt; [1, 2, 3]
&#x2F;&#x2F; generateArray(10) &#x3D;&gt; [1, 2, 3, ... , 10]

console.log(generateArray(0))　　&#x2F;&#x2F; 印出 [] 空陣列
console.log(generateArray)
&#x2F;&#x2F; 函式後面需加上括號才能呼叫，否則會印出 [Function: generateArray]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>也可以不寫 return，寫法如下：</p>
<pre class="line-numbers language-none"><code class="language-none">function log(n) &#123;
    for(var i &#x3D; 1; i &lt;&#x3D; n; i++) &#123;
    console.log(i)　　　　&#x2F;&#x2F; 直接在函式裡面印出結果
    &#125;
&#125;
log(10)　　　　　&#x2F;&#x2F; 回傳 1 到 10<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>範例：印出 1~100 的偶數</p>
<blockquote>
<p>小技巧：不知如何解題時，可先從寫下 Function 架構開始</p>
</blockquote>
<pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F; 先寫出函式架構：

function print1to100() &#123;

&#125;
print1to100()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>要產生 1~100 的數字，可能需要迴圈：</p>
<pre class="line-numbers language-none"><code class="language-none">function print1to100() &#123;
    for (var i&#x3D;1; i&lt;&#x3D;100; i++)
    logEven(i)  　　　　　　　　　　&#x2F;&#x2F; log 偶數
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>需要再寫一個函式，來判斷 i 是否為偶數：</p>
<pre class="line-numbers language-none"><code class="language-none">function logEven(number) &#123;
    if (number%2 &#x3D;&#x3D;&#x3D; 0)　　　　　&#x2F;&#x2F; 若為偶數，就印出數字
    console.log(number)
&#125;
function print1to100() &#123;
    for (var i&#x3D;1; i&lt;&#x3D;100; i++)
    logEven(i)  　　　　　　　　　
&#125;

print1to100()　　　　　　　　　&#x2F;&#x2F; 印出 1~100 的偶數<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="宣告函式的不同種方式"><a href="#宣告函式的不同種方式" class="headerlink" title="宣告函式的不同種方式"></a>宣告函式的不同種方式</h3><ul>
<li>在語法上大致分為 4 種方式，可參考這篇介紹：<span class="exturl" data-url="aHR0cHM6Ly9pdGhlbHAuaXRob21lLmNvbS50dy9hcnRpY2xlcy8xMDIwNzc0MA==">函數定義 (Function Definition) 的 100 種寫法<i class="fa fa-external-link-alt"></i></span></li>
<li>其中最常使用的為宣告式，以及匿名表達式。</li>
</ul>
<h4 id="第一種：宣告式（Function-Declarations）"><a href="#第一種：宣告式（Function-Declarations）" class="headerlink" title="第一種：宣告式（Function Declarations）"></a>第一種：宣告式（Function Declarations）</h4><ul>
<li>是最常見的標準寫法。</li>
<li>使用 <code>function</code> 關鍵字作函數的宣告和定義。</li>
</ul>
<pre class="line-numbers language-none"><code class="language-none">function hello() &#123;
   console.log(&#39;hello&#39;)
&#125;

hello()　　　　　&#x2F;&#x2F; 執行函式，回傳 hello<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="第二種：匿名函數（anonymous-function），或稱匿名表達式"><a href="#第二種：匿名函數（anonymous-function），或稱匿名表達式" class="headerlink" title="第二種：匿名函數（anonymous function），或稱匿名表達式"></a>第二種：匿名函數（anonymous function），或稱匿名表達式</h4><ul>
<li>前面提到函式也是一種資料型態。因此可先宣告一個變數，再定義一個函數內容放到該變數裡。</li>
<li>此方式定義的函數，實際上是匿名函數，只是將函數存在某個變數裡。</li>
</ul>
<pre class="line-numbers language-none"><code class="language-none">var hello &#x3D; function (a, b) &#123;
    return a + b
&#125;

console.log(hello(3, 6))　　　　　&#x2F;&#x2F; 印出 9<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="console-log-括號內可傳入函式"><a href="#console-log-括號內可傳入函式" class="headerlink" title="console.log() 括號內可傳入函式"></a>console.log() 括號內可傳入函式</h3><p>我們在先前的範例，console.log() 都只傳入數字、字串等，但其實也可傳入函式，如以下範例：</p>
<pre class="line-numbers language-none"><code class="language-none">function transform(arr, transformFunction) &#123; 
    var result &#x3D; []
    for(var i&#x3D;0; i&lt;arr.length; i++) &#123;
        result.push(transformFunction(arr[i]))
    &#125;
    return result
&#125;

function double(x) &#123;　　　　　　
    return x*2
&#125;

&#x2F;&#x2F; transform([1, 2, 3], double) &#x3D;&gt; [2, 4, 6]

console.log (
    transform([1, 2, 3] ,double)　　　
)
&#x2F;&#x2F; 傳入 transform 函式，並且在 transform 函式中傳入 double 函式
&#x2F;&#x2F; 印出 [2, 4, 6]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>上述範例中，在 transform 函式裡面，double 函式取代了參數 transformFunction，也就是執行 double 函式內部的運算。</p>
<p>也可直接把整組函式丟到 console.log() 括號內，就不需再額外命名。好處是可直接修改函式定義，如以下範例：</p>
<p><img src="https://i.imgur.com/IatovLR.png" alt="function 傳入 log"></p>
<hr>
<h3 id="引數（Argument）與參數（Parameter）"><a href="#引數（Argument）與參數（Parameter）" class="headerlink" title="引數（Argument）與參數（Parameter）"></a>引數（Argument）與參數（Parameter）</h3><p>參數：方法定義中的變數<br>引數：在呼叫方法時真正傳入的值</p>
<pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F; 範例：
function add(a, b) &#123;        &#x2F;&#x2F; 參數就是 a 和 b
    console.log(arguments)    &#x2F;&#x2F; 可印出引數
    return a+b
&#125;

add(2, 5)                   &#x2F;&#x2F; 引數是 2 和　5<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>結果如下圖，印出 <code>&#123; &#39;0&#39;: 2, &#39;1&#39;: 5 &#125;</code>。</p>
<p><img src="https://i.imgur.com/9BaESkL.png"></p>
<h4 id="Argument-物件"><a href="#Argument-物件" class="headerlink" title="Argument 物件"></a>Argument 物件</h4><p>由上述範例可知，<code>arguments</code> 物件其實是種「類陣列物件」。</p>
<ul>
<li>arguments[0]：代表第一個引數</li>
<li>arguments[1]：代表第二個引數</li>
</ul>
<p>並且具有 length 屬性。</p>
<pre class="line-numbers language-none"><code class="language-none">function add(a, b) &#123;
 console.log(arguments.length)    &#x2F;&#x2F; 印出 2
 return a+b
&#125;
add(2, 5)
&#x2F;&#x2F; 一共傳了兩個引數<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>參考<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvemgtVFcvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvRnVuY3Rpb25zL2FyZ3VtZW50cw==">MDN - Arguments 物件<i class="fa fa-external-link-alt"></i></span>，由於 arguments 帶其他屬性，可能因此需要用物件的方式來儲存資訊。</p>
</blockquote>
<h3 id="function-傳參數的運作機制（待補）"><a href="#function-傳參數的運作機制（待補）" class="headerlink" title="function 傳參數的運作機制（待補）"></a>function 傳參數的運作機制（待補）</h3><pre class="line-numbers language-none"><code class="language-none">function swap(a, b) &#123;
在函式當傳入值時就會這樣跑
  var a &#x3D; number1
  var b &#x3D; number2
  所以只是把 number1 跟 number2 給複製了一份
  number1 number2 a b 是各自獨立的變數

 var temp &#x3D; a
 a &#x3D; b
 b &#x3D; temp
 console.log(&quot;a: b:&quot;, a, b)
&#125;
var number1 &#x3D; 10
var number2 &#x3D; 20
console.log(number1, number2)
swap(number1, number2)
console.log(number1, number2)
number1 . number2 . a . b 是各自獨立的變數<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-none"><code class="language-none">function addValue(obj) &#123;
這裡的操作如下：
  var obj &#x3D; a &#123;&#125;
  這是 Obj 的特性，如同前篇介紹的，物件是存取記憶體位置
  在這邊的操作等於是命名另外一個物件 obj &#x3D; a，
  所以現在有 obj 跟 a 都指向同個記憶體位置

  obj.number++ &#x2F;&#x2F; 在這邊等於把該記憶體位置儲存的內容+1 
 return 1
&#125;
var a &#x3D; &#123;
 number: 10
&#125;
addValue(a)
console.log(a)
&#x2F;&#x2F;&#123; number: 11 &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>例外情況是數字.字串.布林，這三者較簡單，所以在操作的時候會變成直接複製。而較複雜的部份因為使用指向的方式，所以只要有一個地方修改，就等修改其他指向該記憶體位置的操作。</p>
<pre class="line-numbers language-none"><code class="language-none">function addValue(obj) &#123;
 obj &#x3D; &#123;
 number: 100
 &#125;
 return 1
&#125;
var a &#x3D; &#123;
 number: 10
&#125;
addValue(a)
console.log(a)
&#x2F;&#x2F;&#123; number: 10 &#125; <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>在這邊的操作是把 obj 指向了另外一個新的記憶體，等於 obj 指向了另外一個記憶體位置</p>
<p>這種情況以專有名詞稱作：</p>
<p>pass by value<br>pass by reference. （JavaScript 中沒有）<br>pass by sharing</p>
<blockquote>
<p>可以參考：<span class="exturl" data-url="aHR0cHM6Ly9ibG9nLnRlY2hicmlkZ2UuY2MvMjAxOC8wNi8yMy9qYXZhc2NyaXB0LWNhbGwtYnktdmFsdWUtb3ItcmVmZXJlbmNlLw==">深入探討 JavaScript 中的參數傳遞：call by value 還是 reference？<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
<hr>
<h2 id="return-的作用與使用時機"><a href="#return-的作用與使用時機" class="headerlink" title="return 的作用與使用時機"></a>return 的作用與使用時機</h2><p>首先可以把 function 分成兩類：</p>
<h3 id="第一種：不需要知道結果"><a href="#第一種：不需要知道結果" class="headerlink" title="第一種：不需要知道結果"></a>第一種：不需要知道結果</h3><p>也就是只需要呼叫 function，但不需知道執行結果的情況。</p>
<pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F; 範例：
function sayhello() &#123;
    console.log(&#39;hello&#39;)
    &#x2F;&#x2F; 若沒有回傳，會預設 return undefined
&#125;

sayhello()
&#x2F;&#x2F; 印出 hello<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F; 也可以傳參數進去：
function sayhello(name) &#123;
    console.log(&#39;hello&#39;, name)
&#125;

sayhello(&#39;nick&#39;)
&#x2F;&#x2F; 印出 hello nick<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>也可以回傳些什麼，如以下範例，但 return 並不會影響結果。</p>
<pre class="line-numbers language-none"><code class="language-none">function sayhello(name) &#123;
    console.log(&#39;hello&#39;, name)
    return “i am a”         &#x2F;&#x2F; return 的值會是 a
&#125;

var a &#x3D; sayhello(‘nick’)    &#x2F;&#x2F; 印出 hello nick
console.log(a)              &#x2F;&#x2F; 印出 i am a<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="第二種：需要回傳值"><a href="#第二種：需要回傳值" class="headerlink" title="第二種：需要回傳值"></a>第二種：需要回傳值</h3><p>例如需要函式進行運算，然後回傳結果。</p>
<pre class="line-numbers language-none"><code class="language-none">function double(x) &#123;
    return x * 2
&#125;

var result &#x3D; double(3)
console.log(result)
&#x2F;&#x2F; 印出 6<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>注意：在 function 一旦執行 return 就會跳出，return 以下的任何程式碼都不會再執行。</p>
</blockquote>
<pre class="line-numbers language-none"><code class="language-none">舉例
function double(x) &#123;
    return 123            &#x2F;&#x2F; 執行 return 就會跳出
    console.log(abc)
    return x * 2
&#125;

var result &#x3D; double(3)
console.log(result)　　　　&#x2F;&#x2F; 只會印出回傳值 123<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="常用內建函式"><a href="#常用內建函式" class="headerlink" title="常用內建函式"></a>常用內建函式</h2><h3 id="Number-類型的內建函式"><a href="#Number-類型的內建函式" class="headerlink" title="Number 類型的內建函式"></a>Number 類型的內建函式</h3><blockquote>
<p>可參考：<br><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvemgtVFcvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvTnVtYmVy">Number - JavaScript - MDN - Mozilla<i class="fa fa-external-link-alt"></i></span><br><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvTWF0aA==">Math - JavaScript - MDN - Mozilla<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
<ul>
<li><code>Number()</code>：將字串轉數字</li>
</ul>
<pre class="line-numbers language-none"><code class="language-none">var a &#x3D; 10
var b &#x3D; &#39;20&#39;

console.log(a + Number(b))    &#x2F;&#x2F; 印出 30<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li><code>parseInt()</code>：將字串轉整數。預設為十進位，例如：<code>parseInt(a, 10)</code></li>
</ul>
<pre class="line-numbers language-none"><code class="language-none">var a &#x3D; 10
var b &#x3D; &#39;20.35&#39;

console.log(parseInt(b))    &#x2F;&#x2F; 印出 20<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li><code>parseFloat()</code>：將字串轉浮點數。也就是有小數點</li>
</ul>
<pre class="line-numbers language-none"><code class="language-none">var a &#x3D; 10
var b &#x3D; &#39;20.35&#39;

console.log(parseFloat(b))    &#x2F;&#x2F; 印出 20.35<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li><code>toFixed()</code>：取到小數點後第幾位。括號內不輸入就會取整數。可與 <code>parseFloat()</code> 搭配使用</li>
</ul>
<pre class="line-numbers language-none"><code class="language-none">var a &#x3D; 10
var b &#x3D; &#39;20.357&#39;

console.log(parseFloat(b).toFixed(2))    &#x2F;&#x2F; 印出 20.36，前一位會四捨五入<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li><code>.toString()</code>：數字轉字串</li>
</ul>
<p>或是將數字加空字串（<code>&#39;&#39;</code>），因為「<code>數字 + 字串 = 字串</code>」。</p>
<pre class="line-numbers language-none"><code class="language-none">var a &#x3D; 2

&#x2F;&#x2F; 第一種方法
a.toString() 

&#x2F;&#x2F; 第二種方法：數字 + 空字串 &#x3D; 字串
(a+&#39;&#39;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li><code>Number.MAX_VALUE</code>, <code>Number.MIN_VALUE</code>：得知在 JavaScript 可儲存的最大、最小值，若超出這個值，計算就會不精準</li>
</ul>
<pre class="line-numbers language-none"><code class="language-none">console.log(Number.MAX_VALUE)
&#x2F;&#x2F; 印出 1.7976931348623157e+308
console.log(Number.MIN_VALUE)
&#x2F;&#x2F; 印出 5e-324<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li><code>Math.PI</code>：圓周率。常數通常用大寫表示</li>
<li><code>Math.ceil()</code>：無條件進位，取大於這個數的最小整數</li>
</ul>
<pre class="line-numbers language-none"><code class="language-none">console.log(Math.ceil(3.14))
&#x2F;&#x2F; 印出 4<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<ul>
<li><code>Math.floor()</code>：無條件捨去，取小於這個數的最大整數</li>
</ul>
<pre class="line-numbers language-none"><code class="language-none">console.log(Math.floor(10.9))
&#x2F;&#x2F; 印出 10<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<ul>
<li><code>Math.round()</code>：四捨五入</li>
</ul>
<pre class="line-numbers language-none"><code class="language-none">console.log(Math.round(10.5))
&#x2F;&#x2F; 印出 11<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<ul>
<li><code>Math.sqrt()</code>：開根號</li>
</ul>
<pre class="line-numbers language-none"><code class="language-none">console.log(Math.sqrt(9))
&#x2F;&#x2F; 印出 3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<ul>
<li><code>Math.pow()</code>：次方</li>
</ul>
<pre class="line-numbers language-none"><code class="language-none">console.log(Math.pow(2, 10))
&#x2F;&#x2F; 印出 1024，也就是 2 的十次方<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<ul>
<li><code>Math.random()</code>：產生從 0~1 隨機數（不包含 1）</li>
</ul>
<pre class="line-numbers language-none"><code class="language-none">console.log(Math.random())
&#x2F;&#x2F; 產生 0~1 隨機數
console.log(Math.floor(Math.random()*10 + 1))
&#x2F;&#x2F; 乘以十可產生 0~10 的隨機數（不包含 10）
&#x2F;&#x2F; 無條件捨去，可產生 1~10 的整數<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="String-類型的內建函式"><a href="#String-類型的內建函式" class="headerlink" title="String 類型的內建函式"></a>String 類型的內建函式</h3><blockquote>
<p>可參考：<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvU3RyaW5n">String - JavaScript - MDN - Mozilla<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
<ul>
<li><code>toUpperCase</code>, <code>toLowerCase()</code>：將字串轉換大、小寫</li>
</ul>
<pre class="line-numbers language-none"><code class="language-none">var a &#x3D; &#39;abc&#39;.toUpperCase()
console.log(a)　　　　　　　　　&#x2F;&#x2F; 印出 ABC

var B &#x3D; &#39;ABC!!!&#39;.toLowerCase()
console.log(B)　　　　　　　　　&#x2F;&#x2F; 印出 abc!!!<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>或是參考 <span class="exturl" data-url="aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3dpa2kvQVNDSUk=">ASCII code<i class="fa fa-external-link-alt"></i></span> 進行轉換：</p>
<ul>
<li><code>.charCodeAt()</code>：取得字串特定位置的字元 ASCII 編碼</li>
</ul>
<pre class="line-numbers language-none"><code class="language-none">console.log(&quot;ABC&quot;.charCodeAt(0))
&#x2F;&#x2F; 印出 65（A 的編碼）
console.log(&quot;cba&quot;.charCodeAt(3))
&#x2F;&#x2F; 印出 97（a 的編碼）

&#x2F;&#x2F; 由此可知大、小寫字母的索引相差 32<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li><code>String.fromCharCode()</code>：將 ASCII 編碼的數字轉換成字元</li>
</ul>
<pre class="line-numbers language-none"><code class="language-none">var str &#x3D; String.fromCharCode(65)
console.log(str)
&#x2F;&#x2F; 印出 A

&#x2F;&#x2F; 將上述兩種函式組合應用：

var str &#x3D; String.fromCharCode(&quot;Abc&quot;.charCodeAt(0) + 32)
console.log(str)
&#x2F;&#x2F; 印出 a<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>利用 ASCII code 進行字串比大小，可判斷該字元為大小寫、是否在條件範圍內：</p>
<pre class="line-numbers language-none"><code class="language-none">var char &#x3D;&#39;J&#39;
console.log(char &gt;&#x3D; &#39;A&#39; &amp;&amp; char &lt;&#x3D; &#39;Z&#39;)
&#x2F;&#x2F; 印出 true，判斷為大寫

var char &#x3D;&#39;g&#39;
console.log(char &gt;&#x3D; &#39;A&#39; &amp;&amp; char &lt;&#x3D; &#39;Z&#39;)
&#x2F;&#x2F; 印出 false，判斷為小寫
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li><code>indexOf()</code>：可回傳「指定字串」在字串中第一次出現的位置。若找不到則回傳 -1</li>
</ul>
<pre class="line-numbers language-none"><code class="language-none">var str &#x3D; &#39;hey hello world&#39;
var index &#x3D; str.indexOf(&#39;hello&#39;)
console.log(index)                        &#x2F;&#x2F; 印出 4，hello 第一次出現在 index &#x3D; 4

var index &#x3D; str.indexOf(&#39;hello!!&#39;)
console.log(index)                        &#x2F;&#x2F; 印出 -1，代表字串不存在<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li><code>replace()</code>：取代字串。只能換第一個指定字串。要全換的話可使用<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvemgtVFcvZG9jcy9XZWIvSmF2YVNjcmlwdC9HdWlkZS9SZWd1bGFyX0V4cHJlc3Npb25z">正規表達式<i class="fa fa-external-link-alt"></i></span>來達成</li>
</ul>
<pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F; replace()換第一個：
var str &#x3D; &#39;hey hey hello world&#39;.replace(&#39;hey&#39;, &#39;!!!&#39;)
console.log(str)          
&#x2F;&#x2F; 印出 !!! hey hello world

&#x2F;&#x2F; 正規表達式可全換：
var str &#x3D; &#39;hey hey hello world&#39;.replace(&#x2F;hey&#x2F;g, &#39;!!!&#39;)
console.log(str)  
&#x2F;&#x2F; 印出 !!! !!! hello world，&#x2F;hey&#x2F;g 的 g 代表 global<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li><code>split()</code>：透過「指定分隔符」來分開字串，回傳值為陣列</li>
</ul>
<pre class="line-numbers language-none"><code class="language-none">var str &#x3D; &#39;data1,data2,data3&#39;
var arr &#x3D; str.split(&#39;,&#39;)                &#x2F;&#x2F; 取出分號
console.log(arr)
&#x2F;&#x2F; 印出 [&#39;data1&#39;, &#39;data2&#39;, &#39;data3&#39;]

let input &#x3D; [&#39;1 * 3&#39;]
let temp &#x3D; input[0].split(&#39; &#39;)          &#x2F;&#x2F; 取出空格
console.log(temp)
&#x2F;&#x2F; 印出 [1, *, 3]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li><code>trim()</code>：移除目前字串開頭和結尾的所有空格</li>
</ul>
<pre class="line-numbers language-none"><code class="language-none">var str &#x3D; &#39;   data1,data2,data3   &#39;
console.log(str.trim())
&#x2F;&#x2F; 印出 data1,data2,data3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<ul>
<li><code>string.length</code>：可回傳字串長度。此指令不是函式</li>
</ul>
<pre class="line-numbers language-none"><code class="language-none">var str &#x3D; &#39;hello world&#39;
console.log(str.length)
&#x2F;&#x2F; 印出 11<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>可應用在迴圈：</p>
<pre class="line-numbers language-none"><code class="language-none">var str &#x3D; &#39;hello!&#39;

for (var i&#x3D;0; i&lt;str.length; i++)&#123;
  console.log(str[i])            &#x2F;&#x2F; 可在每行印出第 i 個字元
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><img src="https://i.imgur.com/16SoONi.png"></p>
<h3 id="Array-類型的內建函式"><a href="#Array-類型的內建函式" class="headerlink" title="Array 類型的內建函式"></a>Array 類型的內建函式</h3><blockquote>
<p>可參考：<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvemgtVFcvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvQXJyYXk=">Array - JavaScript - MDN - Mozilla<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
<ul>
<li><code>join.()</code>：將陣列中所有元素連接成一個字串，預設分隔符是逗號（在 Windows 系統）</li>
</ul>
<pre class="line-numbers language-none"><code class="language-none">var arr &#x3D; [1, 2, 3]
console.log(arr.join())        &#x2F;&#x2F; 印出 1,2,3
console.log(arr.join(&#39;!&#39;))       &#x2F;&#x2F; 印出 1!2!3
console.log(arr.join(&#39;&#39;))       &#x2F;&#x2F; 印出 123<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li><code>map()</code>：把陣列中的每個元素帶入指定函式，然後建立一個新的陣列</li>
</ul>
<pre class="line-numbers language-none"><code class="language-none">var arr &#x3D; [1, 2, 3]

function negtive(x) &#123;
  return x*-1
&#125;

console.log(arr.map(negtive))    &#x2F;&#x2F; 印出 [-1, -2 ,-3]

&#x2F;&#x2F; 或是用匿名函式的寫法，直接放入函式定義：
var arr &#x3D; [1, 2, 3]

console.log(
  arr
  .map(function (x) &#123;
     return x * 2
  &#125;)
)                                &#x2F;&#x2F; 印出 [2, 4, 6]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li><code>filter()</code>：概念和 <code>map()</code> 類似，是根據指定的測試函數，從一個陣列中過濾出符合條件的元素，並建立新的陣列</li>
</ul>
<pre class="line-numbers language-none"><code class="language-none">var arr &#x3D; [1, 2, -3, 5, -7]

console.log(
  arr
  .filter(function (x) &#123;
    return x &gt; 0              &#x2F;&#x2F; 只留下 x 大於 0
  &#125;)
)
&#x2F;&#x2F; 印出 [1, 2, 5]

var arr &#x3D; [1, 3, 5, 7]
arr.filter(x &#x3D;&gt; x &gt; 4)        &#x2F;&#x2F; 只留下 x 大於 4 
&#x2F;&#x2F; 印出 [5, 7]
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li><code>slice()</code>：可截取出陣列某部份元素，會建立一個新的陣列</li>
</ul>
<pre class="line-numbers language-none"><code class="language-none">var arr &#x3D; [0, 1, 2, 3, 4, 5]
console.log(arr.slice(2, 4))        &#x2F;&#x2F; 印出 [2, 3]，不包含結尾元素<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<ul>
<li><code>splice()</code>：可用來刪除與新增元素，會改變原本的陣列</li>
</ul>
<pre class="line-numbers language-none"><code class="language-none">var months &#x3D; [&#39;Jan&#39;, &#39;March&#39;, &#39;April&#39;, &#39;June&#39;]
months.splice(1, 0, &#39;Feb&#39;)
&#x2F;&#x2F; 在 index 1 新增 &#39;Feb&#39;
console.log(months)
&#x2F;&#x2F; 印出 [&#39;Jan&#39;, &#39;Feb&#39;, &#39;March&#39;, &#39;April&#39;, &#39;June&#39;]

months.splice(4, 1, &#39;May&#39;)
&#x2F;&#x2F; 把 index 4 的 &#39;June&#39; 換成 &#39;May&#39;
console.log(months)
&#x2F;&#x2F; 印出 [&#39;Jan&#39;, &#39;Feb&#39;, &#39;March&#39;, &#39;April&#39;]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li><code>sort()</code>：依照字母順序排列陣列中的所有元素，會改變原本的陣列</li>
</ul>
<pre class="line-numbers language-none"><code class="language-none">var arr &#x3D; [1 ,30 ,4 ,21]

&#x2F;&#x2F; 要由小排到大
arr.sort(function(a,b) &#123;        &#x2F;&#x2F; 想像順序是 a b
  if (a&#x3D;&#x3D;&#x3D;b) return 0
  if (b&gt;a) return -1            &#x2F;&#x2F; 回傳 -1，代表不互換
  return 1                      &#x2F;&#x2F; 回傳 1（任何正數），代表 a b 互換位置
&#125;)

console.log(arr)                &#x2F;&#x2F; 印出 [1, 4, 21, 30]

&#x2F;&#x2F; 可用三元運算子簡化：
arr.sort(function(a, b) &#123;  
    if (a&#x3D;&#x3D;&#x3D;b) return 0  
    return a &gt; b ? 1:-1
&#125;)

&#x2F;&#x2F; 也可再簡化：
arr.sort(function(a, b) &#123;  
    return a - b                 
&#125;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<hr>
<h2 id="Immutable（不可變）"><a href="#Immutable（不可變）" class="headerlink" title="Immutable（不可變）"></a>Immutable（不可變）</h2><p>除了物件以外，其他基本型別（primitive types）具有不可變的特性。</p>
<pre class="line-numbers language-none"><code class="language-none">var a &#x3D; &quot;hello&quot;
a &#x3D; &quot;yo&quot;

a: &quot;hello&quot; 0x01    &#x2F;&#x2F; 不會改變原本 hello 的值
a: &quot;yo&quot; 0x02       &#x2F;&#x2F; 而是建立新的記憶體空間儲存 yo<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>以內建函式 <code>toUpperCase()</code> 為例，如以下寫法：</p>
<pre class="line-numbers language-none"><code class="language-none">var a &#x3D; &#39;hello&#39;
a &#x3D; a.toUpperCase()        &#x2F;&#x2F; a 指向了新的記憶體位置
console.log(a)
&#x2F;&#x2F; 印出 HELLO<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>由於字串具有不可變的特性，不論呼叫什麼函式均無法改變 a 的值，如以下範例：</p>
<pre class="line-numbers language-none"><code class="language-none">var a &#x3D; &#39;hello&#39;
a.toUpperCase()            &#x2F;&#x2F; 若直接對 a 字串呼叫函式，不會有任何改變
console.log(a)
&#x2F;&#x2F; 仍印出 hello，只能如上個範例，回傳一個新的值改變字串<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>而物件型別，例如 Array，呼叫某些函式的時候，有可能會更動到原本記憶體位置儲存的東西：</p>
<pre class="line-numbers language-none"><code class="language-none">var arr &#x3D; [2, 4, 6]
arr.push(8)                 &#x2F;&#x2F; 更動到原本的陣列
console.log(arr)
&#x2F;&#x2F; 印出 [2, 4, 6, 8]

&#x2F;&#x2F; 若改成下列錯誤寫法：
var arr &#x3D; [2, 4, 6]
arr &#x3D; arr.push(8)        
&#x2F;&#x2F; 會做兩件事情：新增元素到陣列、回傳陣列長度（arr.length）
console.log(arr)
&#x2F;&#x2F; 印出 4，也就是新的陣列長度<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<hr>
<p>參考資料：</p>
<ol>
<li><span class="exturl" data-url="aHR0cHM6Ly9pdGhlbHAuaXRob21lLmNvbS50dy9hcnRpY2xlcy8xMDIxNTMwMQ==">JavaScript 初心者筆記: 判斷式 - if…else / switch 篇<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9jb2RlcnR3LmNvbS8lRTclQTglOEIlRTUlQkMlOEYlRTglQUElOUUlRTglQTglODAvMzE2Mzg1Lw==">Java中for、while、do while三種迴圈語句的區別介紹<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9leWVzb2ZraWRzLmdpdGJvb2tzLmlvL2phdmFzY3JpcHQtc3RhcnQtZnJvbS1lczYvY29udGVudC9wYXJ0My9sb29wLmh0bWw=">迴圈· 從ES6開始的JavaScript學習生活<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9tZWRpdW0uY29tL0BodWdoX1Byb2dyYW1fbGVhcm5pbmdfZGlhcnlfSnMvamF2YXNjcmlwdC0lRTUlOUYlQkElRTclQTQlOEUtJUU1JTg3JUJEJUU1JUJDJThGJUU3JTlBJTg0JUU1JTlGJUJBJUU2JTlDJUFDJUU0JUJCJThCJUU3JUI0JUI5LWU2NDdiNGU0NWFmMQ==">JavaScript 基礎：函式的基本介紹- Hugh’s Program learning<i class="fa fa-external-link-alt"></i></span></li>
</ol>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>[week 2] 先別急著寫 leetcode - 虛擬碼、Debugger、解題技巧</title>
    <url>/leetcode/</url>
    <content><![CDATA[<blockquote>
<ul>
<li>本篇為 <span class="exturl" data-url="aHR0cHM6Ly9saWRlbXkuY29tL3AvYWxnMTAxLWxlZXRjb2Rl">[ALG101] 先別急著寫 leetcode<i class="fa fa-external-link-alt"></i></span> 這門課程的學習筆記。如有錯誤歡迎指正。</li>
<li>參考文章：<span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmh1bGkudHcvMjAxOS8xMS8wMS9iZWZvcmUtc3RhcnQtbGVldGNvZGUv">程式解題新手入門注意事項 - Huli<i class="fa fa-external-link-alt"></i></span></li>
</ul>
</blockquote>
<h2 id=""><a href="#" class="headerlink" title=""></a><span id="more"></span></h2><h2 id="寫程式-≠-寫程式碼"><a href="#寫程式-≠-寫程式碼" class="headerlink" title="寫程式 ≠ 寫程式碼"></a>寫程式 ≠ 寫程式碼</h2><p>重點是在寫程式之前，先想好要怎麼做，整理自己的想法，並轉換成程式碼表達。</p>
<ul>
<li>初學者寫程式 1.邊寫程式碼邊想怎麼解 2.試著套用自己以為學過的語法</li>
<li>會寫程式的人寫程式 1.先想解法，在腦中構思（太快看不出來） 2.把解法轉換成程式碼</li>
</ul>
<h3 id="初期如何學習寫程式？"><a href="#初期如何學習寫程式？" class="headerlink" title="初期如何學習寫程式？"></a>初期如何學習寫程式？</h3><ul>
<li>步驟</li>
</ul>
<ol>
<li>大概想一下解法，不寫程式碼</li>
<li>把解法寫成 pseudo code（虛擬碼）</li>
<li>把 pseudo code 翻譯成程式碼</li>
</ol>
<ul>
<li>利用條列式寫法</li>
</ul>
<ol>
<li>將大問題分割成小問題</li>
<li>一行只做一件事</li>
<li>善用敘述、條件判斷</li>
<li>善用跳轉（jump）來實現重複執行</li>
</ol>
<h3 id="範例：印出-1-100-之間的偶數"><a href="#範例：印出-1-100-之間的偶數" class="headerlink" title="範例：印出 1~100 之間的偶數"></a>範例：印出 1~100 之間的偶數</h3><ul>
<li>步驟一：如何印出 1~100？</li>
</ul>
<ol>
<li>令 i 為 1 　//　設置初始條件</li>
<li>如果 i&gt;100，結束　//　判斷是否該結束程式（終止條件）</li>
<li>印出 i</li>
<li>i = i+1</li>
<li>跳回第 2 行　//　重複動作</li>
</ol>
<ul>
<li>步驟二：如何判斷某個數是偶數？</li>
</ul>
<ol>
<li>令 i = 1</li>
<li>如果 i&gt;100，結束</li>
<li>如果 i % 2 ===0，印出 i 　//　利用是否能整除 2 來判斷奇偶</li>
<li>i = i+1</li>
<li>跳回第 2 行</li>
</ol>
<h2 id="如何撰寫-Pseudo-Code（虛擬碼）？"><a href="#如何撰寫-Pseudo-Code（虛擬碼）？" class="headerlink" title="如何撰寫 Pseudo Code（虛擬碼）？"></a>如何撰寫 Pseudo Code（虛擬碼）？</h2><p>虛擬碼是程式碼與想法之間的橋樑，把解法用抽象的方式表示。</p>
<p>將剛才步驟二得到的可執行步驟翻成英文，會發現和程式碼非常相似：</p>
<pre class="line-numbers language-none"><code class="language-none">1. let i &#x3D; 1
2. if i&gt;100 then exit
3. if i % 2 no remainder, print  i
4. i &#x3D; i+1
5. jump to line 2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>更像程式碼的虛擬碼：</p>
<pre class="line-numbers language-none"><code class="language-none">1. for (i from 1 to 100) do　&#x2F;&#x2F;　for迴圈，有數字i會從 1到 100，do代表迴圈內動作
2. 	if i &#x2F; 2 no remainder, print i
3. end for　&#x2F;&#x2F;　此迴圈結束<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>若以 JavaScript 撰寫成程式碼：</p>
<pre class="line-numbers language-none"><code class="language-none">for (var i &#x3D; 1; i&lt; 100; i++) &#123;
　if(i % 2 &#x3D;&#x3D;&#x3D; 0)&#123;
　console.log(i)
　&#125;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="實戰練習：印出-1-100-的奇數"><a href="#實戰練習：印出-1-100-的奇數" class="headerlink" title="實戰練習：印出 1-100 的奇數"></a>實戰練習：印出 1-100 的奇數</h3><p>利用「縮排」來標明條件判斷的區塊，較容易閱讀分析。</p>
<pre class="line-numbers language-none"><code class="language-none">1. for (i from 1 to 100) do
2.　if (i mod 2 &#x3D;&#x3D;&#x3D; 1) then　&#x2F;&#x2F;　mod（modulo）：取餘數，餘數為 1 代表為奇數
3.　　print i
4.　end if
5. end for<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="實戰練習：fiszz-buzz"><a href="#實戰練習：fiszz-buzz" class="headerlink" title="實戰練習：fiszz buzz"></a>實戰練習：fiszz buzz</h3><p>題目：<br>給一個數字 n<br>印出 1~n<br>但如果碰到 3 的倍數，改印 Fizz<br>碰到 5 的倍數，，改印 Buzz<br>若同時是 3 跟 5 的倍數，印 FizzBuzz</p>
<p>範例：n=7</p>
<pre class="line-numbers language-none"><code class="language-none">1
2
Fizz
4
Buzz
Fizz
7<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>基本解法：</p>
<pre class="line-numbers language-none"><code class="language-none">for (i from 1 to n) do　　&#x2F;&#x2F;　先寫出 1~n的迴圈
if　(i % 15 &#x3D;&#x3D;&#x3D; 0) print “FizzBuzz”
else if (i % 3 &#x3D;&#x3D;&#x3D; 0) print “Fizz”
else if (i % 5 &#x3D;&#x3D;&#x3D; 0) print “Buzz”
end for<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>但此解<a href="">並非最佳解法</a>，若條件多 7 的倍數或更多，需要考慮的條件判斷也更複雜。</p>
<h3 id="實戰練習：找最小值"><a href="#實戰練習：找最小值" class="headerlink" title="實戰練習：找最小值"></a>實戰練習：找最小值</h3><p>題目：<br>假設今天有一副撲克牌<br>一次只能看一張牌<br>要怎麼找到最小的牌？</p>
<p>解法（虛擬碼）：</p>
<pre class="line-numbers language-none"><code class="language-none">let 最小的牌 &#x3D; 第一張牌
for (i from 1 to n) do　　　&#x2F;&#x2F;　n為撲克牌總數
翻開第 i 張牌
if (第 i 張排比最小牌的還小) do
最小的牌 &#x3D; 第 i 張牌
end if
end for<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>將上述解法翻譯成陣列：</p>
<pre class="line-numbers language-none"><code class="language-none">let min &#x3D; arr[0]　&#x2F;&#x2F;　min是陣列中最小值，0代表array第一個元素
for (i from 0 to n-1) do　　&#x2F;&#x2F;　n-1：因為array的 index（索引）所以從 0 開始
if (arr[i] &lt; min) do　　&#x2F;&#x2F;　如果第 i 個元素比最小值還小　
min &#x3D; arr[i]　　&#x2F;&#x2F;　i 就變成最小值
end if
end for<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>延伸閱讀：<br><span class="exturl" data-url="aHR0cHM6Ly9tZWRpdW0uY29tL0BCZWFyXy8lRTclQjAlQTElRTUlOTYlQUUlRTclOUElODQtZml6emJ1enotJUU4JTk3JThGJUU2JTlDJTg5LSVFNiVCNyVCMSVFNSVCQSVBNi1nb29nbGUtJUU5JTlEJUEyJUU4JUE5JUE2JUU5JUExJThDLWY1ZTY2ZTNhOTdiZQ==">簡單的 FizzBuzz 藏有 深度(google 面試題)<i class="fa fa-external-link-alt"></i></span><br><span class="exturl" data-url="aHR0cHM6Ly9tZWRpdW0uY29tL0BtaWFoc3V3b3JrLyVFOCVBQSVCMiVFNyVBOCU4QiVFNSVBRCVCOCVFNyVCRiU5MiVFNyVBRCU4NiVFOCVBOCU5OC0lRTUlODUlODglRTUlODglQTUlRTYlODAlQTUlRTglOTElOTclRTUlQUYlQUItbGVldGNvZGUtJUU0JUI4JTgwJUU2JUFEJUE1JUU2JUFEJUE1JUU2JTg5JTkzJUU5JTgwJUEwJUU3JUE4JThCJUU1JUJDJThGJUU4JTg1JUE2LTdlZDEyYWFhNGEzZA==">[課程學習筆記 ]先別急著寫 leetcode — 一步步打造程式腦<i class="fa fa-external-link-alt"></i></span></p>
<hr>
<h2 id="學會像電腦一樣思考"><a href="#學會像電腦一樣思考" class="headerlink" title="學會像電腦一樣思考"></a>學會像電腦一樣思考</h2><p>寫程式之前，先學會「看程式」，所謂的看程式碼 = 理解程式碼如何運作。</p>
<h3 id="以陣列加總的虛擬碼為例"><a href="#以陣列加總的虛擬碼為例" class="headerlink" title="以陣列加總的虛擬碼為例"></a>以陣列加總的虛擬碼為例</h3><pre class="line-numbers language-none"><code class="language-none">let sum &#x3D; 0　　
for (i from 0 to n-1) do
    sum +&#x3D; arr[i]　　
end for
print sum<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>看懂程式碼：</li>
</ul>
<ol>
<li>假設 array 為 [1, 2, 3]，代表陣列長度 n = 3</li>
<li>設 sum = 0</li>
<li>讓 i 從 0 跑到 n-1（也就是 2）</li>
<li>i 現在是 0</li>
<li>sum += arr[0]，sum 變成 1</li>
<li>下一個迴圈</li>
<li>i 現在是 1</li>
<li>sum += arr[1]，sum 變成 1+2 = 3</li>
<li>下一個迴圈</li>
<li>i 現在是 2</li>
<li>sum += arr[2]，sum 變成 3+3 = 6</li>
<li>下一個迴圈</li>
<li>i 現在是 3，超出 n-1，結束</li>
<li>輸出 sum</li>
</ol>
<h3 id="人體編譯器"><a href="#人體編譯器" class="headerlink" title="人體編譯器"></a>人體編譯器</h3><p>編譯（Compile）：將高階語言所編寫的原始程式，透過編譯器（Compiler）轉成機械碼。</p>
<h3 id="以找最大值為例"><a href="#以找最大值為例" class="headerlink" title="以找最大值為例"></a>以找最大值為例</h3><ul>
<li>翻譯虛擬碼：</li>
</ul>
<pre class="line-numbers language-none"><code class="language-none">let max &#x3D; arr[0]
for (i from 0 to n-1) do
    if (arr[i] &gt; max) do
        max &#x3D; arr[i]
    end if
end for
print max<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ol>
<li>假設 arr 為 [2, 7, 5]</li>
<li>設 max 為 arr[0]，也就是 2</li>
<li>讓 i 從 0 跑到 2</li>
<li>i 現在是 0</li>
<li>判斷 arr[0] 是否 &gt;2</li>
<li>不是</li>
<li>下一個迴圈</li>
<li>i 現在是 1</li>
<li>判斷 arr[1] 是否 &gt; 2</li>
<li>是，設 max = arr[2]，也就是 7</li>
<li>下一個迴圈</li>
<li>i 現在是 2</li>
<li>判斷 arr[2] 是否 &gt; 7</li>
<li>不是</li>
<li>下一個迴圈</li>
<li>i 現在是 3，超出條件，結束</li>
<li>輸出 max</li>
</ol>
<p>接著翻譯真的程式碼（JavaScript）：</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> max <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">//　i=0 為初始條件；終止條件；每圈執行完 i+=1</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> max<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    max <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>max<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ol>
<li>假設 arr 為 [2, 7, 5]</li>
<li>設 max 為 arr[0]，也就是 2</li>
<li>讓 i 從 0 跑到 2</li>
<li>i 現在是 0</li>
<li>判斷 arr[0] 是否 &gt;2</li>
<li>不是</li>
<li>下一個迴圈</li>
<li>i 現在是 1</li>
<li>判斷 arr[1] 是否 &gt; 2</li>
<li>是，設 max = arr[2]，也就是 7</li>
<li>下一個迴圈</li>
<li>i 現在是 2</li>
<li>判斷 arr[2] 是否 &gt; 7</li>
<li>不是</li>
<li>下一個迴圈</li>
<li>i 現在是 3，超出條件，結束</li>
<li>輸出 max</li>
</ol>
<blockquote>
<p>重點：當不知道程式碼錯在哪時，可以一行一行檢視程式碼，驗證程式碼是否符合實際想表達的。</p>
</blockquote>
<hr>
<h2 id="Debug-神器：Debugger（偵錯）"><a href="#Debug-神器：Debugger（偵錯）" class="headerlink" title="Debug 神器：Debugger（偵錯）"></a>Debug 神器：Debugger（偵錯）</h2><p>利用 Chrome Devtool（開發者工具）Debugger，直接設置中斷點（break point），一行一行執行程式碼以找出除錯範圍。</p>
<h3 id="前置作業"><a href="#前置作業" class="headerlink" title="前置作業"></a>前置作業</h3><ol>
<li>將程式碼貼到一個 html 檔案</li>
<li>在 <code>&lt;script&gt;</code> 標籤（以執行 JavaScript）底下加上 <code>debugger</code></li>
</ol>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>script<span class="token operator">></span>
<span class="token keyword">debugger</span>
<span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> max <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>　
    <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> max<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      max <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>max<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ol start="3">
<li>用 Chrome 開啟檔案，以開發者工具進行檢視，在 Sources 欄位點選 Step（F9），即可一步一步執行程式碼，進行除錯</li>
</ol>
<p><img src="https://i.imgur.com/lLFpAEk.png"></p>
<h2 id="Log-大法"><a href="#Log-大法" class="headerlink" title="Log 大法"></a>Log 大法</h2><p>另一個 debug 的方法，也就是「log 加好加滿」，透過 log 可以得知每個階段的值。</p>
<p>舉例：</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>script<span class="token operator">></span>
<span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> max <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'max:'</span><span class="token punctuation">,</span> max<span class="token punctuation">)</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>　
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'i='</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> <span class="token string">'arr[i]='</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> max<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'found new max!'</span><span class="token punctuation">)</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'arr[i]:'</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'old max:'</span><span class="token punctuation">,</span> max<span class="token punctuation">)</span>
      max <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'new max:'</span><span class="token punctuation">,</span> max<span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>max<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>檢視 console 欄位結果如下，可以檢視程式碼運作是否和所想的相同，是否有進入迴圈等等。</p>
<p><img src="https://i.imgur.com/5jJvOFQ.png"></p>
<h3 id="補充：為什麼用-console-log-印出來的值和想像中不一樣？"><a href="#補充：為什麼用-console-log-印出來的值和想像中不一樣？" class="headerlink" title="補充：為什麼用 console.log 印出來的值和想像中不一樣？"></a>補充：為什麼用 console.log 印出來的值和想像中不一樣？</h3><p>舉例：</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>script<span class="token operator">></span>
<span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>　　<span class="token comment">//　[2, 7 , 5]</span>
<span class="token keyword">let</span> max <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>　
    <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> max<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      max <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>　　<span class="token comment">//　[2, 7 , 5, 3] 註解是 Chrome 認為的 log</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>max<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="原因："><a href="#原因：" class="headerlink" title="原因："></a>原因：</h4><p>前後 <code>arr</code> 均為同一個變數，而 Chrome 會顯示該數最新儲存的值（抓取當下時間點的 log），而不是該 log 時間點的值。這個問題會出現在陣列和物件上。</p>
<h4 id="解決方法："><a href="#解決方法：" class="headerlink" title="解決方法："></a>解決方法：</h4><p>利用 <code>JSON.stringify()</code> 將陣列或物件轉成「字串」印出，也就是深拷貝（Deep Copy）。</p>
<p>參考資料：</p>
<ol>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cuaXRob21lLmNvbS50dy92b2ljZS8xMDY2MzU=">從 Debugger 學除錯<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cudWRlbXkuY29tL2NvdXJzZS9jaHJvbWUtZGV2dG9vbHMv">六角學院 — Chrome 網頁除錯功能大解密<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmh1bGkudHcvMjAyMC8wMy8yMy9jb25zb2xlLWxvZy1idWcv">你需要注意的 console.log 問題<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9sYXJyeTg1MDgwNi5naXRodWIuaW8vMjAxNi8wOS8yMC9zaGFsbG93LXZzLWRlZXAtY29weS8=">[Javascript] 關於 JS 中的淺拷貝和深拷貝<i class="fa fa-external-link-alt"></i></span></li>
</ol>
<hr>
<h2 id="解題前需注意「輸入範圍」"><a href="#解題前需注意「輸入範圍」" class="headerlink" title="解題前需注意「輸入範圍」"></a>解題前需注意「輸入範圍」</h2><p>在開始寫程式碼之前，必須注意輸入範圍，因為「不同範圍可能有不同限制」，而範圍會決定解題方法。比如說排列一百萬個數字跟排序十個數字，用的方法會不相同。</p>
<p>在不同限制中，需注意可能會遇到下列幾種狀況：</p>
<h3 id="1-空間限制"><a href="#1-空間限制" class="headerlink" title="1. 空間限制"></a>1. 空間限制</h3><p>首先，對空間有個概念：</p>
<p>int: 4 bytes<br>double: bytes<br>JS 中的 Number: 8 bytes</p>
<p>由此可推算出，一百萬個數字所需記憶體：</p>
<p>(8 * 1e6 / 1024) = 7812 KB = 7.6 MB</p>
<p>那麼，十億個數字所需記憶體：</p>
<p>(8 * 1e8 / 1024) = 781200 KB = 7600 MB = 7.4 GB</p>
<p>由估算過程可知，我們不可能在程式語言中，宣告一個十億個元素儲存在陣列。<br>勢必得用其他方法，比如把排列好的數字先放在其他檔案等等。</p>
<h3 id="2-時間限制"><a href="#2-時間限制" class="headerlink" title="2. 時間限制"></a>2. 時間限制</h3><p>對初學題目來說不太重要（先求有再求好），之後會再來談 big O，用來估算時間。</p>
<h3 id="3-型態限制"><a href="#3-型態限制" class="headerlink" title="3. 型態限制"></a>3. 型態限制</h3><ul>
<li>int：-214783648 ~ 2147483648</li>
<li>JS 數字： Number.MAX_SAFE_INTEGER：JavaScript 能儲存的最大值為 16 位數字，在超過這個範圍的運算可能會有誤差，例如：</li>
</ul>
<pre class="line-numbers language-none"><code class="language-none">Number.MAX_SAFE_INTEGER + 2 &gt; Number.MAX_SAFE_INTEGER + 1
&#x2F;&#x2F; false
Number.MAX_SAFE_INTEGER + 2 &#x3D;&#x3D;&#x3D; Number.MAX_SAFE_INTEGER + 1
&#x2F;&#x2F; true<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>浮點數精準度問題：這和電腦底層儲存數字的方式有關，許多程式語言都會有這個現象</li>
</ul>
<pre class="line-numbers language-none"><code class="language-none">0.1 + 0.2 &#x3D;&#x3D;&#x3D; 0.3
&#x2F;&#x2F; false
&#x2F;&#x2F; 0.1 + 0.2 會印出的值為 0.30000000000000004<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>把範圍講清楚的題目，才是好題目。<br>沒有的話就問清楚！因為範圍決定解決的方法。</p>
</blockquote>
<hr>
<h2 id="解題技巧：函式填空法"><a href="#解題技巧：函式填空法" class="headerlink" title="解題技巧：函式填空法"></a>解題技巧：函式填空法</h2><blockquote>
<p>目的：簡化雙層迴圈，也就是切割問題。</p>
</blockquote>
<h3 id="判斷質數"><a href="#判斷質數" class="headerlink" title="判斷質數"></a>判斷質數</h3><p>以「<span class="exturl" data-url="aHR0cHM6Ly9vai5saWRlbXkuY29tL3Byb2JsZW0vMTAyMA==">如何判斷質數<i class="fa fa-external-link-alt"></i></span>」為例：</p>
<blockquote>
<p>印出陣列中的質數 = 印出陣列 + 質數</p>
</blockquote>
<p>Step 1. 簡化問題：不知道怎麼寫的部分，先寫成函式 isPrime</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 第一部分：主要邏輯</span>

<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isPrime</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// 變成函式：如果 arr[i] 是質數</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Prime"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Composite"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">function</span> <span class="token function">isPrime</span><span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// TO DO</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>Step 2. 實作判斷質數邏輯</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 第二部分：輔助函式</span>

<span class="token keyword">function</span> <span class="token function">isPrime</span><span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token comment">// 1 不是函式，先去除</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">%</span> i <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token comment">// 注意放在迴圈外，前面都不符合，才符合質數</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>Step 3. 合併結果</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">isPrime</span><span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">%</span> i <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isPrime</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Prime"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Composite"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>試著把 function 加回去，程式碼會複雜很多：</p>
<p>Step 1. 把函式拿掉，維持主要邏輯不便</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">let</span> isPrime <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>isPrime<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Prime"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Composite"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>Step 2. 加上判斷質數程式碼</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 雙層迴圈</span>

<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">let</span> isPrime <span class="token operator">=</span> <span class="token boolean">true</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    isPrime <span class="token operator">=</span> <span class="token boolean">false</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">var</span> j<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span> j<span class="token operator">&lt;</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>         <span class="token comment">// 用 j 表示，是因為前面已出現變數 i</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">%</span> j <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      is Prime <span class="token operator">=</span> <span class="token boolean">false</span>
      <span class="token keyword">break</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>isPrime<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Prime"</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Composite"</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="解題技巧：簡化法"><a href="#解題技巧：簡化法" class="headerlink" title="解題技巧：簡化法"></a>解題技巧：簡化法</h2><h3 id="印出星星"><a href="#印出星星" class="headerlink" title="印出星星"></a>印出星星</h3><p>以「<span class="exturl" data-url="aHR0cHM6Ly9vai5saWRlbXkuY29tL3Byb2JsZW0vMTAyMQ==">如何印出好多星星<i class="fa fa-external-link-alt"></i></span>」為例：</p>
<blockquote>
<p>目的：把大問題變成小問題。如果難的寫不出來，就先寫簡單的。</p>
</blockquote>
<p>Step 1. 不會輸出 n 個星星，就先輸出一個就好</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token constant">N</span><span class="token punctuation">;</span> i <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">// 印出每行都有 *</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>Step 2. 搭配函式填空法</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token constant">N</span><span class="token punctuation">;</span> i <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token function">printStar</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">function</span> <span class="token function">printStar</span><span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// TODO: 印出 n 個星星</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>Step 3. 利用迴圈重複加上星星</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token constant">N</span><span class="token punctuation">;</span> i <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token function">printStar</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">function</span> <span class="token function">printStar</span><span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">let</span> s <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    s <span class="token operator">+=</span> <span class="token string">"*"</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>也可直接利用 <code>repeat</code> 函式來解題：</p>
<h3 id="實戰：印出金字塔"><a href="#實戰：印出金字塔" class="headerlink" title="實戰：印出金字塔"></a>實戰：印出金字塔</h3><p>預期輸出：</p>
<p>n = 1</p>
<pre class="line-numbers language-none"><code class="language-none">*<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>n = 2</p>
<pre class="line-numbers language-none"><code class="language-none"> *
***<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>n = 3</p>
<pre class="line-numbers language-none"><code class="language-none">  *
 ***
*****<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>根據觀察可知規律為：</p>
<ol>
<li>一共有 n 層</li>
<li>第 i 層會有 2i -1 個星星</li>
<li>星星會置中</li>
<li>需要 n - i 個空白</li>
</ol>
<p>接著利用函式填空法：</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token function">printLayer</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">function</span> <span class="token function">printLayer</span><span class="token punctuation">(</span><span class="token parameter">i<span class="token punctuation">,</span> n</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>加上一個輔助的函式：</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">repeat</span><span class="token punctuation">(</span><span class="token parameter">str<span class="token punctuation">,</span> n</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">let</span> s <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    s <span class="token operator">+=</span> str<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">return</span> s<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>再按照規律把答案填上去：</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token function">printLayer</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">function</span> <span class="token function">printLayer</span><span class="token punctuation">(</span><span class="token parameter">i<span class="token punctuation">,</span> n</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// 空白 + 星星</span>
  <span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token function">repeat</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">,</span> n <span class="token operator">-</span> i<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">repeat</span><span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">,</span> <span class="token number">2</span> <span class="token operator">*</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">function</span> <span class="token function">repeat</span><span class="token punctuation">(</span><span class="token parameter">str<span class="token punctuation">,</span> n</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">let</span> s <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    s <span class="token operator">+=</span> str<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">return</span> s<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="實戰：九九乘法表"><a href="#實戰：九九乘法表" class="headerlink" title="實戰：九九乘法表"></a>實戰：九九乘法表</h3><p>預期輸出：</p>
<pre class="line-numbers language-none"><code class="language-none">1*1&#x3D;1
1*2&#x3D;2
...
1*9&#x3D;9
2*1&#x3D;2
...
9*9&#x3D;81<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>首先用簡化法，產生 <code>1*1 ~ 1*9</code>：</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">9</span><span class="token punctuation">;</span> i <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'1*'</span> <span class="token operator">+</span> i <span class="token string">'='</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token operator">*</span>i <span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>包成函式，把 1 換成 k：</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">printTable</span><span class="token punctuation">(</span><span class="token parameter">k</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">9</span><span class="token punctuation">;</span> i <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>k <span class="token operator">+</span> <span class="token string">'*'</span> <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token string">'='</span> <span class="token operator">+</span> k<span class="token operator">*</span>i <span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token function">printTable</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
<span class="token function">printTable</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
<span class="token operator">...</span>
<span class="token function">printTable</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span>
<span class="token comment">// 即可產生九九乘法表</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>其實就是再一個迴圈：</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">printTable</span><span class="token punctuation">(</span><span class="token parameter">k</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">9</span><span class="token punctuation">;</span> i <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>k <span class="token operator">+</span> <span class="token string">"*"</span> <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token string">"="</span> <span class="token operator">+</span> k <span class="token operator">*</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// 這個會產生 1~9</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> k <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> k <span class="token operator">&lt;=</span> <span class="token number">9</span><span class="token punctuation">;</span> k <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token function">printTable</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">// 結果：產生 1*1~9*9</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>但總有一天要學會雙層迴圈，試著把上面的寫法合併：</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 這個產生 1~9</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> k <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> k <span class="token operator">&lt;=</span> <span class="token number">9</span><span class="token punctuation">;</span> k <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// 這個也產生 1~9</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">9</span><span class="token punctuation">;</span> i <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>k <span class="token operator">+</span> <span class="token string">"*"</span> <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token string">"="</span> <span class="token operator">+</span> k <span class="token operator">*</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>我們可以利用 Debugger 來觀察雙層迴圈如何執行。也就是先執行外層迴圈第一圈，然後進入內層迴圈第一到九圈，執行完再回到外層迴圈第二圈，依序執行下去，用文字表示如下：</p>
<pre class="line-numbers language-none"><code class="language-none">k&#x3D;1 i&#x3D;1, 2, 3...9
k&#x3D;2 i&#x3D;1, 2, 3...9
k&#x3D;3 i&#x3D;1, 2, 3...9
...
k&#x3D;9 i&#x3D;1, 2, 3...9<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="實戰：印出-1-100-平方數"><a href="#實戰：印出-1-100-平方數" class="headerlink" title="實戰：印出 1~100 平方數"></a>實戰：印出 1~100 平方數</h3><p>簡化法：先印出 1~100</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">100</span><span class="token punctuation">;</span> i <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>搭配函式填空法</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">100</span><span class="token punctuation">;</span> i <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>isSquare<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">function</span> <span class="token function">isSquare</span><span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>那麼，該如何判斷平方數呢？</p>
<p>開根號：<code>Math.sqrt(n)</code><br>無條件捨去：<code>Math.floor(n)</code></p>
<p>將 n 開根號後得到的數字，無條件捨去後再相乘，若還是等於 n 則為平方數。</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">100</span><span class="token punctuation">;</span> i <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>isSquare<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">function</span> <span class="token function">isSquare</span><span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">let</span> root <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">sqrt</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> root <span class="token operator">*</span> root <span class="token operator">===</span> n<span class="token punctuation">;</span> <span class="token comment">// 成立得到 true；反之得到 false</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>另一種想法：印出平方數，直到超過 100 為止。</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">*</span> i <span class="token operator">&lt;=</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i <span class="token operator">*</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
  i <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="作業檢討：印出聖誕樹"><a href="#作業檢討：印出聖誕樹" class="headerlink" title="作業檢討：印出聖誕樹"></a>作業檢討：印出聖誕樹</h3><p><span class="exturl" data-url="aHR0cHM6Ly9vai5saWRlbXkuY29tL3Byb2JsZW0vMTAyMz9fZ2E9Mi4xMDUwMjg2MTEuMTI5MTEyODE0Mi4xNTkzMjcxMzU3LTE5NzcyNzc5MzEuMTU5MDMzODU5Ng==">LIOJ 1023：印出聖誕樹<i class="fa fa-external-link-alt"></i></span></p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> readline <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"readline"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> rl <span class="token operator">=</span> readline<span class="token punctuation">.</span><span class="token function">createInterface</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
  input<span class="token operator">:</span> process<span class="token punctuation">.</span>stdin<span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> lines <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token comment">// 讀取到一行，先把這一行加進去 lines 陣列，最後再一起處理</span>
rl<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">"line"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">line</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  lines<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">isPrime</span><span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">%</span> i <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// 前面已宣告過 lines，這裡改用 input 作為參數，拿取內容 lines</span>
<span class="token keyword">function</span> <span class="token function">solve</span><span class="token punctuation">(</span><span class="token parameter">input</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">let</span> n <span class="token operator">=</span> <span class="token function">Number</span><span class="token punctuation">(</span>input<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token function">printTree</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token function">printBottom</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">function</span> <span class="token function">printTree</span><span class="token punctuation">(</span><span class="token parameter">i<span class="token punctuation">,</span> n</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">repeat</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">,</span> n <span class="token operator">-</span> i<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">repeat</span><span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">,</span> <span class="token number">2</span> <span class="token operator">*</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">function</span> <span class="token function">printBottom</span><span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">repeat</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">,</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"|"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">function</span> <span class="token function">repeat</span><span class="token punctuation">(</span><span class="token parameter">str<span class="token punctuation">,</span> n</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    result <span class="token operator">+=</span> str<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">return</span> result<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// 輸入結束，開始針對 lines 做處理</span>
rl<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">"close"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token function">solve</span><span class="token punctuation">(</span>lines<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="作業檢討：NN-乘法表"><a href="#作業檢討：NN-乘法表" class="headerlink" title="作業檢討：NN 乘法表"></a>作業檢討：NN 乘法表</h3><p><span class="exturl" data-url="aHR0cHM6Ly9vai5saWRlbXkuY29tL3Byb2JsZW0vMTAyND9fZ2E9Mi4xMDk2Mjk0NDUuMTI5MTEyODE0Mi4xNTkzMjcxMzU3LTE5NzcyNzc5MzEuMTU5MDMzODU5Ng==">LIOJ 1024：NN 乘法表<i class="fa fa-external-link-alt"></i></span></p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> readline <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"readline"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> rl <span class="token operator">=</span> readline<span class="token punctuation">.</span><span class="token function">createInterface</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
  input<span class="token operator">:</span> process<span class="token punctuation">.</span>stdin<span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> lines <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token comment">// 讀取到一行，先把這一行加進去 lines 陣列，最後再一起處理</span>
rl<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">"line"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">line</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  lines<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 前面已宣告過 lines，這裡改用 input 作為參數，拿取內容 lines</span>
<span class="token keyword">function</span> <span class="token function">solve</span><span class="token punctuation">(</span><span class="token parameter">input</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">let</span> <span class="token constant">N</span> <span class="token operator">=</span> <span class="token function">Number</span><span class="token punctuation">(</span>input<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> <span class="token constant">M</span> <span class="token operator">=</span> <span class="token function">Number</span><span class="token punctuation">(</span>input<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 產生 1~N</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> k <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> k <span class="token operator">&lt;=</span> <span class="token constant">N</span><span class="token punctuation">;</span> k <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// 產生 1~M</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token constant">M</span><span class="token punctuation">;</span> i <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>k <span class="token operator">+</span> <span class="token string">"*"</span> <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token string">"="</span> <span class="token operator">+</span> k <span class="token operator">*</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token comment">// 也可寫成 console.log(`$&#123;k&#125;*$&#123;i&#125;=$&#123;k*i&#125;`)</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// 輸入結束，開始針對 lines 做處理</span>
rl<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">"close"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token function">solve</span><span class="token punctuation">(</span>lines<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="作業檢討：水仙花數"><a href="#作業檢討：水仙花數" class="headerlink" title="作業檢討：水仙花數"></a>作業檢討：水仙花數</h3><p><span class="exturl" data-url="aHR0cHM6Ly9vai5saWRlbXkuY29tL3Byb2JsZW0vMTAyNT9fZ2E9Mi4xMDk2Mjk0NDUuMTI5MTEyODE0Mi4xNTkzMjcxMzU3LTE5NzcyNzc5MzEuMTU5MDMzODU5Ng==">LIOJ 1025：水仙花數<i class="fa fa-external-link-alt"></i></span></p>
<p>水仙花數（Narcissistic number）定義為：「一個 n 位數的數字，每一個數字的 n 次方加總等於自身」。</p>
<p>例如說 153 是三位數，而 1^3 + 5^3 + 3^3 = 153。<br>而數字 0~9 也都是水仙花數，因為一位數 n 的 1 次方一定會等於自己。</p>
<p>解題難點：</p>
<ol>
<li>如何判斷幾位數</li>
<li>如何取出各個數字</li>
</ol>
<p>可直接判斷該數字是幾位數，但這個方法侷限於「需已知輸入範圍」，也就是必須知道有幾位數：</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 回傳數字幾位數</span>
<span class="token keyword">function</span> <span class="token function">digitsCount</span><span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token number">1</span>
  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;</span> <span class="token number">1e2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>         <span class="token comment">// 1e2 代表 100 科學記號寫法</span>
    <span class="token keyword">return</span> <span class="token number">2</span>
  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;</span> <span class="token number">1e3</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token number">3</span>
  <span class="token punctuation">&#125;</span> <span class="token operator">...</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>如何判斷幾位數：一直 <code>/ 10</code></p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 回傳數字幾位數</span>
<span class="token keyword">function</span> <span class="token function">digitsCount</span><span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span>n <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    n <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>n <span class="token operator">/</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 無條件捨去</span>
    result <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">return</span> result<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>取出各個數字：<code>% 10</code> 搭配 <code>/ 10</code></p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">isNarcissistic</span><span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// 幾位數，宣告一個 m = n</span>
  <span class="token keyword">let</span> m <span class="token operator">=</span> n
  <span class="token keyword">let</span> digits <span class="token operator">=</span> <span class="token function">digitsCount</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span>
  <span class="token keyword">let</span> sum <span class="token operator">=</span> <span class="token number">0</span>

  <span class="token keyword">while</span> <span class="token punctuation">(</span>m <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">let</span> num <span class="token operator">=</span> m <span class="token operator">%</span> <span class="token number">10</span>
    <span class="token comment">// 可改成 Math.pow(num, digits) => num 的 digits 次方</span>
    sum <span class="token operator">+=</span> num<span class="token operator">**</span>digits
    m <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>m <span class="token operator">/</span> <span class="token number">10</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>

  <span class="token comment">// 可簡化成：return sum === n</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>sum <span class="token operator">===</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token boolean">true</span>
  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token boolean">false</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// 應用上方兩個函式即可完成輸出</span>
<span class="token keyword">function</span> <span class="token function">solve</span><span class="token punctuation">(</span><span class="token parameter">input</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// 輸入 5 200 => ['5', '200']</span>
  <span class="token keyword">const</span> temp <span class="token operator">=</span> input<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> n <span class="token operator">=</span> <span class="token function">Number</span><span class="token punctuation">(</span>temp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> m <span class="token operator">=</span> <span class="token function">Number</span><span class="token punctuation">(</span>temp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> n<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> i <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isNarcissistic</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>也可以把「數字轉成字串」，直接用字串來判斷幾位數：</p>
<p>例如：</p>
<pre class="line-numbers language-none"><code class="language-none">&#39;1234&#39;.length &#x3D;&gt; 4
&#39;1234&#39;.[0] &#x3D;&gt; 1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 實際操作</span>
<span class="token keyword">function</span> <span class="token function">isNstr</span><span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// 數字 + 空字串 => 字串</span>
  <span class="token comment">// 或是 n.toString()、String(n)</span>
  <span class="token keyword">let</span> str <span class="token operator">=</span> n <span class="token operator">+</span> <span class="token string">''</span>
  <span class="token keyword">let</span> digits <span class="token operator">=</span> str<span class="token punctuation">.</span>length
  <span class="token keyword">let</span> sum <span class="token operator">=</span> <span class="token number">0</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> str<span class="token punctuation">.</span>length<span class="token punctuation">;</span><span class="token punctuation">;</span> i<span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    sum <span class="token operator">+=</span> <span class="token function">Number</span><span class="token punctuation">(</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">**</span>digits
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">return</span> sum <span class="token operator">===</span> n
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="實戰：判斷等差數列"><a href="#實戰：判斷等差數列" class="headerlink" title="實戰：判斷等差數列"></a>實戰：判斷等差數列</h3><p>判斷 [1, 3, 5, 7, 9] 是否為等差數列</p>
<p>解題技巧：</p>
<ol>
<li>先求公差：<code>arr[1] - arr[0]</code></li>
<li>再判斷 <code>arr[i] - arr[i-1]</code> 是否等於公差</li>
</ol>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 判斷是否為等差數列</span>
<span class="token keyword">function</span> <span class="token function">isValid</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">let</span> d <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> arr<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">!==</span> d<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">isValid</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">isValid</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">isValid</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>解題時需考慮到 Edge case（邊緣條件）：</p>
<ol>
<li>空陣列</li>
<li>只有一個元素的陣列</li>
</ol>
<pre class="line-numbers language-none"><code class="language-none">function isValid(arr) &#123;
  &#x2F;&#x2F; 涵蓋邊界條件，可避免不合法的存取
  if (arr.length &lt;&#x3D; 1) return true
  let d &#x3D; arr[1] - arr[0]
  for (let i &#x3D; 1; i &lt; arr.length; i +&#x3D; 1) &#123;
    if (arr[i] - arr[i-1] !&#x3D;&#x3D; d) &#123;
      return false
    &#125;
  &#125;
  return true
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="實戰：數字位數加總"><a href="#實戰：數字位數加總" class="headerlink" title="實戰：數字位數加總"></a>實戰：數字位數加總</h3><p>與「判斷水仙花數」題型類似。</p>
<p>解法一：數學解</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">addDigits</span><span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// 若 n 為負數，乘上 -1 變成正數</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    n <span class="token operator">=</span> n <span class="token operator">*</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">let</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span>n <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    sum <span class="token operator">+=</span> n <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">;</span>
    n <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>n <span class="token operator">/</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">return</span> sum<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">addDigits</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>解法二：字串偷吃步</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">addDigits</span><span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">let</span> str <span class="token operator">=</span> n <span class="token operator">+</span> <span class="token string">""</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> str<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    sum <span class="token operator">+=</span> <span class="token function">Number</span><span class="token punctuation">(</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">return</span> sum<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">addDigits</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<hr>
<h2 id="經典題型"><a href="#經典題型" class="headerlink" title="經典題型"></a>經典題型</h2><h3 id="LIOJ-1026：判斷等比數列"><a href="#LIOJ-1026：判斷等比數列" class="headerlink" title="LIOJ 1026：判斷等比數列"></a><span class="exturl" data-url="aHR0cHM6Ly9vai5saWRlbXkuY29tL3Byb2JsZW0vMTAyNg==">LIOJ 1026：判斷等比數列<i class="fa fa-external-link-alt"></i></span></h3><p>基本上和判斷等差數列作法類似：</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> readline <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"readline"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> rl <span class="token operator">=</span> readline<span class="token punctuation">.</span><span class="token function">createInterface</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
  input<span class="token operator">:</span> process<span class="token punctuation">.</span>stdin<span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> lines <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token comment">// 讀取到一行，先把這一行加進去 lines 陣列，最後再一起處理</span>
rl<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">"line"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">line</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  lines<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 判斷等比數列</span>
<span class="token keyword">function</span> <span class="token function">inValid</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">let</span> r <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">/</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">/</span> arr<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">!==</span> r<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// 前面已宣告過 lines，這裡改用 input 作為參數，拿取內容 lines</span>
<span class="token keyword">function</span> <span class="token function">solve</span><span class="token punctuation">(</span><span class="token parameter">input</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">let</span> n <span class="token operator">=</span> <span class="token function">Number</span><span class="token punctuation">(</span>input<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> arr <span class="token operator">=</span> input<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ['3', '9', '27'] => 得到字串的陣列</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">inValid</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Yes"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"No"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// 輸入結束，開始針對 lines 做處理</span>
rl<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">"close"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token function">solve</span><span class="token punctuation">(</span>lines<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="LIOJ-1027：信用卡號驗證"><a href="#LIOJ-1027：信用卡號驗證" class="headerlink" title="LIOJ 1027：信用卡號驗證"></a><span class="exturl" data-url="aHR0cHM6Ly9vai5saWRlbXkuY29tL3Byb2JsZW0vMTAyNw==">LIOJ 1027：信用卡號驗證<i class="fa fa-external-link-alt"></i></span></h3><h3 id="LIOJ-1028：生命靈數"><a href="#LIOJ-1028：生命靈數" class="headerlink" title="LIOJ 1028：生命靈數"></a><span class="exturl" data-url="aHR0cHM6Ly9vai5saWRlbXkuY29tL3Byb2JsZW0vMTAyOA==">LIOJ 1028：生命靈數<i class="fa fa-external-link-alt"></i></span></h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 與位數加總做法相同</span>
<span class="token keyword">function</span> <span class="token function">addDigits</span><span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">let</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span>n <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    sum <span class="token operator">+=</span> n <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">;</span>
    n <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>n <span class="token operator">/</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">return</span> sum<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">function</span> <span class="token function">solve</span><span class="token punctuation">(</span><span class="token parameter">input</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// ['1991 11 7'] = > ['1991', '11', '7']</span>
  <span class="token keyword">let</span> temp <span class="token operator">=</span> input<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 1991117</span>
  <span class="token keyword">let</span> num <span class="token operator">=</span> <span class="token function">Number</span><span class="token punctuation">(</span>temp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> temp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> temp<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> p <span class="token operator">=</span> <span class="token function">addDigits</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 判斷是否不只一位</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span>p <span class="token operator">>=</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    p <span class="token operator">=</span> <span class="token function">addDigits</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="LIOJ-1029：加減乘除"><a href="#LIOJ-1029：加減乘除" class="headerlink" title="LIOJ 1029：加減乘除"></a><span class="exturl" data-url="aHR0cHM6Ly9vai5saWRlbXkuY29tL3Byb2JsZW0vMTAyOQ==">LIOJ 1029：加減乘除<i class="fa fa-external-link-alt"></i></span></h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">solve</span><span class="token punctuation">(</span><span class="token parameter">input</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">let</span> temp <span class="token operator">=</span> input<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// => ['3', '*', '4']</span>
  <span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token function">Number</span><span class="token punctuation">(</span>temp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token function">Number</span><span class="token punctuation">(</span>temp<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span>temp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">"+"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a <span class="token operator">+</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>temp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">"-"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a <span class="token operator">-</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>temp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">"*"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a <span class="token operator">*</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// 不是加減乘，就是除</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a <span class="token operator">/</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="LIOJ-1030：判斷迴文"><a href="#LIOJ-1030：判斷迴文" class="headerlink" title="LIOJ 1030：判斷迴文"></a><span class="exturl" data-url="aHR0cHM6Ly9vai5saWRlbXkuY29tL3Byb2JsZW0vMTAzMA==">LIOJ 1030：判斷迴文<i class="fa fa-external-link-alt"></i></span></h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 反過來輸出</span>
<span class="token keyword">function</span> <span class="token function">reverse</span><span class="token punctuation">(</span><span class="token parameter">str</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> str<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">-=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    result <span class="token operator">+=</span> str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">return</span> result<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// 前面已宣告過 lines，這裡改用 input 作為參數，拿取內容 lines</span>
<span class="token keyword">function</span> <span class="token function">solve</span><span class="token punctuation">(</span><span class="token parameter">input</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">const</span> str <span class="token operator">=</span> input<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">reverse</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span> <span class="token operator">===</span> str<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"True"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"False"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="LIOJ-1031：完全平方和"><a href="#LIOJ-1031：完全平方和" class="headerlink" title="LIOJ 1031：完全平方和"></a><span class="exturl" data-url="aHR0cHM6Ly9vai5saWRlbXkuY29tL3Byb2JsZW0vMTAzMQ==">LIOJ 1031：完全平方和<i class="fa fa-external-link-alt"></i></span></h3><p>解一：找出比 N 小的完全平方數</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">square</span><span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">*</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    result <span class="token operator">+=</span> i <span class="token operator">*</span> i<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">return</span> result<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">square</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 印出 55，也就是 1+4+9+16+25 = 55</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>解二：判斷是否為完全平方數</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">isSquare</span><span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">let</span> r <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">sqrt</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> r <span class="token operator">*</span> r <span class="token operator">===</span> n<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// 前面已宣告過 lines，這裡改用 input 作為參數，拿取內容 lines</span>
<span class="token keyword">function</span> <span class="token function">solve</span><span class="token punctuation">(</span><span class="token parameter">input</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">const</span> n <span class="token operator">=</span> <span class="token function">Number</span><span class="token punctuation">(</span>input<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isSquare</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      sum <span class="token operator">+=</span> i<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="LIOJ-1032：平面距離計算"><a href="#LIOJ-1032：平面距離計算" class="headerlink" title="LIOJ 1032：平面距離計算"></a><span class="exturl" data-url="aHR0cHM6Ly9vai5saWRlbXkuY29tL3Byb2JsZW0vMTAzMg==">LIOJ 1032：平面距離計算<i class="fa fa-external-link-alt"></i></span></h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">distance</span><span class="token punctuation">(</span><span class="token parameter">x1<span class="token punctuation">,</span> y1<span class="token punctuation">,</span> x2<span class="token punctuation">,</span> y2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">let</span> dis <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">sqrt</span><span class="token punctuation">(</span>
    <span class="token function">abs</span><span class="token punctuation">(</span>x1 <span class="token operator">-</span> x2<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token function">abs</span><span class="token punctuation">(</span>x1 <span class="token operator">-</span> x2<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">abs</span><span class="token punctuation">(</span>y1 <span class="token operator">-</span> y2<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token function">abs</span><span class="token punctuation">(</span>y1 <span class="token operator">-</span> y2<span class="token punctuation">)</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> dis<span class="token punctuation">.</span><span class="token function">toFixed</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 取到小數點第二位</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// 回傳絕對值</span>
<span class="token keyword">function</span> <span class="token function">abs</span><span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token operator">-</span>n<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">return</span> n<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">function</span> <span class="token function">solve</span><span class="token punctuation">(</span><span class="token parameter">input</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">let</span> t <span class="token operator">=</span> <span class="token function">Number</span><span class="token punctuation">(</span>input<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> t<span class="token punctuation">;</span> i <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">let</span> start <span class="token operator">=</span> <span class="token punctuation">(</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">4</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> x1 <span class="token operator">=</span> <span class="token function">Number</span><span class="token punctuation">(</span>input<span class="token punctuation">[</span>start<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> y1 <span class="token operator">=</span> <span class="token function">Number</span><span class="token punctuation">(</span>input<span class="token punctuation">[</span>start <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> x2 <span class="token operator">=</span> <span class="token function">Number</span><span class="token punctuation">(</span>input<span class="token punctuation">[</span>start <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> y2 <span class="token operator">=</span> <span class="token function">Number</span><span class="token punctuation">(</span>input<span class="token punctuation">[</span>start <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">distance</span><span class="token punctuation">(</span>x1<span class="token punctuation">,</span> y1<span class="token punctuation">,</span> x2<span class="token punctuation">,</span> y2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="LIOJ-1033：最近點對"><a href="#LIOJ-1033：最近點對" class="headerlink" title="LIOJ 1033：最近點對"></a><span class="exturl" data-url="aHR0cHM6Ly9vai5saWRlbXkuY29tL3Byb2JsZW0vMTAzMw==">LIOJ 1033：最近點對<i class="fa fa-external-link-alt"></i></span></h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 利用平面距離計算得到的函式</span>
<span class="token keyword">function</span> <span class="token function">distance</span><span class="token punctuation">(</span><span class="token parameter">x1<span class="token punctuation">,</span> y1<span class="token punctuation">,</span> x2<span class="token punctuation">,</span> y2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">let</span> dis <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">sqrt</span><span class="token punctuation">(</span>
    <span class="token function">abs</span><span class="token punctuation">(</span>x1 <span class="token operator">-</span> x2<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token function">abs</span><span class="token punctuation">(</span>x1 <span class="token operator">-</span> x2<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">abs</span><span class="token punctuation">(</span>y1 <span class="token operator">-</span> y2<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token function">abs</span><span class="token punctuation">(</span>y1 <span class="token operator">-</span> y2<span class="token punctuation">)</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> dis<span class="token punctuation">;</span> <span class="token comment">// 取到小數點第二位</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">function</span> <span class="token function">abs</span><span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token operator">-</span>n<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">return</span> n<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">function</span> <span class="token function">solve</span><span class="token punctuation">(</span><span class="token parameter">input</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">let</span> n <span class="token operator">=</span> <span class="token function">Number</span><span class="token punctuation">(</span>input<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> dots <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> input<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">let</span> temp <span class="token operator">=</span> input<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    dots<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
      x<span class="token operator">:</span> <span class="token function">Number</span><span class="token punctuation">(</span>temp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      y<span class="token operator">:</span> <span class="token function">Number</span><span class="token punctuation">(</span>temp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token keyword">let</span> min <span class="token operator">=</span> <span class="token number">Infinity</span><span class="token punctuation">;</span> <span class="token comment">// 最短距離先設一個最大值</span>
  <span class="token keyword">let</span> ans <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> dots<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> dots<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">let</span> dis <span class="token operator">=</span> <span class="token function">distance</span><span class="token punctuation">(</span>dots<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>x<span class="token punctuation">,</span> dots<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>y<span class="token punctuation">,</span> dots<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>x<span class="token punctuation">,</span> dots<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>dis <span class="token operator">&lt;</span> min<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        min <span class="token operator">=</span> dis<span class="token punctuation">;</span>
        ans <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
          x1<span class="token operator">:</span> dots<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>x<span class="token punctuation">,</span>
          y1<span class="token operator">:</span> dots<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>y<span class="token punctuation">,</span>
          x2<span class="token operator">:</span> dots<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>x<span class="token punctuation">,</span>
          y2<span class="token operator">:</span> dots<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>y<span class="token punctuation">,</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span>ans<span class="token punctuation">.</span>x1 <span class="token operator">></span> ans<span class="token punctuation">.</span>x2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ans<span class="token punctuation">.</span>x2 <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> ans<span class="token punctuation">.</span>y2<span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ans<span class="token punctuation">.</span>x1 <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> ans<span class="token punctuation">.</span>y1<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>ans<span class="token punctuation">.</span>x1 <span class="token operator">&lt;</span> ans<span class="token punctuation">.</span>x2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ans<span class="token punctuation">.</span>x1 <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> ans<span class="token punctuation">.</span>y1<span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ans<span class="token punctuation">.</span>x2 <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> ans<span class="token punctuation">.</span>y2<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>ans<span class="token punctuation">.</span>y1 <span class="token operator">></span> ans<span class="token punctuation">.</span>y2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ans<span class="token punctuation">.</span>x2 <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> ans<span class="token punctuation">.</span>y2<span class="token punctuation">)</span><span class="token punctuation">;</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ans<span class="token punctuation">.</span>x1 <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> ans<span class="token punctuation">.</span>y1<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ans<span class="token punctuation">.</span>x1 <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> ans<span class="token punctuation">.</span>y1<span class="token punctuation">)</span><span class="token punctuation">;</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ans<span class="token punctuation">.</span>x2 <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> ans<span class="token punctuation">.</span>y2<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="LIOJ-1034：凱薩加密"><a href="#LIOJ-1034：凱薩加密" class="headerlink" title="LIOJ 1034：凱薩加密"></a><span class="exturl" data-url="aHR0cHM6Ly9vai5saWRlbXkuY29tL3Byb2JsZW0vMTAzNA==">LIOJ 1034：凱薩加密<i class="fa fa-external-link-alt"></i></span></h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 把字母右移 n 位</span>
<span class="token keyword">function</span> <span class="token function">ceaserCipher</span><span class="token punctuation">(</span><span class="token parameter">n<span class="token punctuation">,</span> s</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// 'a'.charCodeAt(0) = 97</span>
  <span class="token comment">// 減去 97，可得到數字 0 ~ 25</span>
  <span class="token keyword">let</span> code <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">97</span><span class="token punctuation">;</span>
  <span class="token comment">// 英文字母有 26 個，當數字超過時，對編碼除 26 取餘數</span>
  <span class="token keyword">let</span> newCode <span class="token operator">=</span> <span class="token punctuation">(</span>code <span class="token operator">+</span> n<span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">26</span><span class="token punctuation">;</span>
  <span class="token comment">// 取得真正的編碼</span>
  <span class="token keyword">return</span> String<span class="token punctuation">.</span><span class="token function">fromCharCode</span><span class="token punctuation">(</span>newCode <span class="token operator">+</span> <span class="token number">97</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">function</span> <span class="token function">solve</span><span class="token punctuation">(</span><span class="token parameter">input</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">let</span> n <span class="token operator">=</span> <span class="token function">Number</span><span class="token punctuation">(</span>input<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> str <span class="token operator">=</span> input<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> str<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    result <span class="token operator">+=</span> <span class="token function">ceaserCipher</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="LIOJ-1046：圈圈叉叉"><a href="#LIOJ-1046：圈圈叉叉" class="headerlink" title="LIOJ 1046：圈圈叉叉"></a><span class="exturl" data-url="aHR0cHM6Ly9vai5saWRlbXkuY29tL3Byb2JsZW0vMTAzNQ==">LIOJ 1046：圈圈叉叉<i class="fa fa-external-link-alt"></i></span></h3><p>輸入範例：</p>
<pre class="line-numbers language-none"><code class="language-none">XXO
OXX
XOO<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>利用二維陣列的概念，可知：</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js">input<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"XXO"</span><span class="token punctuation">;</span> <span class="token comment">// 即 (0, i)</span>
input<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"X"</span><span class="token punctuation">;</span> <span class="token comment">// 即 (0, 0)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">whoWin</span><span class="token punctuation">(</span><span class="token parameter">input</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// 判斷橫的三排</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>input<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">===</span> input<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> input<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">===</span> input<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">return</span> input<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token comment">// 判斷直的三排</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>input<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">===</span> input<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> input<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">===</span> input<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">return</span> input<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token comment">// 判斷斜對角</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>input<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">===</span> input<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> input<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">===</span> input<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> input<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>input<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">===</span> input<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> input<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">===</span> input<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> input<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token keyword">return</span> <span class="token string">"DRAW"</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="作業-LIOJ-1004：聯誼順序比大小"><a href="#作業-LIOJ-1004：聯誼順序比大小" class="headerlink" title="作業 - LIOJ 1004：聯誼順序比大小"></a>作業 - <span class="exturl" data-url="aHR0cHM6Ly9vai5saWRlbXkuY29tL3Byb2JsZW0vMTAwNA==">LIOJ 1004：聯誼順序比大小<i class="fa fa-external-link-alt"></i></span></h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 判斷比大小</span>
<span class="token keyword">function</span> <span class="token function">compare</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> k</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">===</span> b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token string">"DRAW"</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token comment">// 若比小，就將 a b 互換，注意 k 是字串不能用 ===</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>k <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">const</span> temp <span class="token operator">=</span> a<span class="token punctuation">;</span>
    a <span class="token operator">=</span> b<span class="token punctuation">;</span>
    b <span class="token operator">=</span> temp<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token comment">// 判斷字串長度是否相同</span>
  <span class="token comment">// 不同：比較字串長度</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">.</span>length <span class="token operator">></span> b<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token string">"A"</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">.</span>length <span class="token operator">&lt;</span> b<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token string">"B"</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token comment">// 相同：從字串最左邊開始比大小</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">.</span>length <span class="token operator">===</span> b<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> a<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token comment">// 若相等，就繼續迴圈比下一位</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">===</span> b<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">continue</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> b<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token string">"A"</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token string">"B"</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">function</span> <span class="token function">solve</span><span class="token punctuation">(</span><span class="token parameter">input</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">const</span> n <span class="token operator">=</span> <span class="token function">Number</span><span class="token punctuation">(</span>input<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// 長度為 512 個位數以內，不可轉成數字比大小</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// 輸出會是陣列 => [1, 2, 1]</span>
    <span class="token keyword">let</span> <span class="token punctuation">[</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> k<span class="token punctuation">]</span> <span class="token operator">=</span> input<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">compare</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="練習實作內建函式"><a href="#練習實作內建函式" class="headerlink" title="練習實作內建函式"></a>練習實作內建函式</h2><h3 id="LIOJ-1036：Array-reverse"><a href="#LIOJ-1036：Array-reverse" class="headerlink" title="LIOJ 1036：Array reverse"></a><span class="exturl" data-url="aHR0cHM6Ly9vai5saWRlbXkuY29tL3Byb2JsZW0vMTAzNg==">LIOJ 1036：Array reverse<i class="fa fa-external-link-alt"></i></span></h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 反轉陣列</span>
<span class="token keyword">function</span> <span class="token function">reverse</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">-=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 反轉 => [3, 2, 1]</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">return</span> result<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// 處理輸入</span>
<span class="token keyword">function</span> <span class="token function">solve</span><span class="token punctuation">(</span><span class="token parameter">input</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">let</span> numbers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> input<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    numbers<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>input<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [1, 2, 3]</span>
  <span class="token punctuation">&#125;</span>
  <span class="token comment">// 傳進 reverse 函式，並印出結果</span>
  <span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token function">reverse</span><span class="token punctuation">(</span>numbers<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>也可以直接在處理輸入後，直接輸出翻轉後的結果：</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 處理輸入</span>
<span class="token keyword">function</span> <span class="token function">solve</span><span class="token punctuation">(</span><span class="token parameter">input</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">let</span> numbers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> input<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    numbers<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>input<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [1, 2, 3]</span>
  <span class="token punctuation">&#125;</span>

  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> numbers<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">-=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>numbers<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="LIOJ-1037：Array-filter"><a href="#LIOJ-1037：Array-filter" class="headerlink" title="LIOJ 1037：Array filter"></a><span class="exturl" data-url="aHR0cHM6Ly9vai5saWRlbXkuY29tL3Byb2JsZW0vMTAzNw==">LIOJ 1037：Array filter<i class="fa fa-external-link-alt"></i></span></h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// 跳過不符合的數字</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">continue</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">return</span> result<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// 處理輸入</span>
<span class="token keyword">function</span> <span class="token function">solve</span><span class="token punctuation">(</span><span class="token parameter">input</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">let</span> numbers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> input<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    numbers<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>input<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [3, 5, 1, 3 , 3, 2, 8]</span>
  <span class="token punctuation">&#125;</span>
  <span class="token comment">// 傳進 filter 函式，並印出結果</span>
  <span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token function">filter</span><span class="token punctuation">(</span>numbers<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>或利用回傳函式 callback 來過濾 target：</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">arr<span class="token punctuation">,</span> callback</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// 跳過不符合的數字</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">callback</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">return</span> result<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// 處理輸入</span>
<span class="token keyword">function</span> <span class="token function">solve</span><span class="token punctuation">(</span><span class="token parameter">input</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// 排除目標</span>
  <span class="token keyword">let</span> target <span class="token operator">=</span> <span class="token function">Number</span><span class="token punctuation">(</span>input<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> input<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token function">Number</span><span class="token punctuation">(</span>input<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [1, 3 , 3, 2, 8]</span>
  <span class="token punctuation">&#125;</span>
  <span class="token comment">// 傳進 filter 函式，留下不等於 target 的值</span>
  <span class="token comment">// 也可寫成 filter(arr, element => element !== target)</span>
  <span class="token keyword">let</span> newArr <span class="token operator">=</span> <span class="token function">filter</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">element</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> element <span class="token operator">!==</span> target<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> newArr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newArr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="LIOJ-1038：Array-indexOf"><a href="#LIOJ-1038：Array-indexOf" class="headerlink" title="LIOJ 1038：Array indexOf"></a><span class="exturl" data-url="aHR0cHM6Ly9vai5saWRlbXkuY29tL3Byb2JsZW0vMTAzOD9fZ2E9Mi43MDgyNjM4NC4xMjkxMTI4MTQyLjE1OTMyNzEzNTctMTk3NzI3NzkzMS4xNTkwMzM4NTk2">LIOJ 1038：Array indexOf<i class="fa fa-external-link-alt"></i></span></h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 讀取到一行，先把這一行加進去 lines 陣列，最後再一起處理</span>
rl<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">"line"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">line</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  lines<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// LIOJ 1038：Array indexOf</span>
<span class="token keyword">function</span> <span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token parameter">arr<span class="token punctuation">,</span> searchElement</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">===</span> searchElement<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">return</span> i<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// 處理輸入</span>
<span class="token keyword">function</span> <span class="token function">solve</span><span class="token punctuation">(</span><span class="token parameter">input</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// 目標數字</span>
  <span class="token keyword">let</span> target <span class="token operator">=</span> <span class="token function">Number</span><span class="token punctuation">(</span>input<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 要檢查的數字</span>
  <span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> input<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token function">Number</span><span class="token punctuation">(</span>input<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// => [1, 2, 3, 3, 3]</span>
  <span class="token punctuation">&#125;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">indexOf</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> target<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="LIOJ-1039：Array-fill"><a href="#LIOJ-1039：Array-fill" class="headerlink" title="LIOJ 1039：Array fill"></a><span class="exturl" data-url="aHR0cHM6Ly9vai5saWRlbXkuY29tL3Byb2JsZW0vMTAzOQ==">LIOJ 1039：Array fill<i class="fa fa-external-link-alt"></i></span></h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// LIOJ 1039：Array fill</span>
<span class="token keyword">function</span> <span class="token function">fill</span><span class="token punctuation">(</span><span class="token parameter">arr<span class="token punctuation">,</span> value</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// 陣列每個元素會被取代成 value，也可寫成 result[i] = value</span>
    result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">return</span> result<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// 處理輸入</span>
<span class="token keyword">function</span> <span class="token function">solve</span><span class="token punctuation">(</span><span class="token parameter">input</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">let</span> target <span class="token operator">=</span> <span class="token function">Number</span><span class="token punctuation">(</span>input<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> input<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token function">Number</span><span class="token punctuation">(</span>input<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// => [1, 2, 3]</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">let</span> newArr <span class="token operator">=</span> <span class="token function">fill</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> target<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> newArr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newArr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="LIOJ-1040：Array-join"><a href="#LIOJ-1040：Array-join" class="headerlink" title="LIOJ 1040：Array join"></a><span class="exturl" data-url="aHR0cHM6Ly9vai5saWRlbXkuY29tL3Byb2JsZW0vMTA0MA==">LIOJ 1040：Array join<i class="fa fa-external-link-alt"></i></span></h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// LIOJ 1040：Array join</span>
<span class="token keyword">function</span> <span class="token function">join</span><span class="token punctuation">(</span><span class="token parameter">arr<span class="token punctuation">,</span> separator</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    result <span class="token operator">+=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      result <span class="token operator">+=</span> separator<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">return</span> result<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// 處理輸入</span>
<span class="token keyword">function</span> <span class="token function">solve</span><span class="token punctuation">(</span><span class="token parameter">input</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">const</span> str <span class="token operator">=</span> input<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> input<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>input<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [1, 2, 3]</span>
  <span class="token punctuation">&#125;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">join</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> str<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>或是把字串 <code>1!2 3</code> 看成 <code>1 !2!3</code>，迴圈內就不用再進行判斷：</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">join</span><span class="token punctuation">(</span><span class="token parameter">arr<span class="token punctuation">,</span> separator</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">let</span> result <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    result <span class="token operator">+=</span> separator <span class="token operator">+</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">return</span> result<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="LIOJ-1041：String-trim"><a href="#LIOJ-1041：String-trim" class="headerlink" title="LIOJ 1041：String trim"></a><span class="exturl" data-url="aHR0cHM6Ly9vai5saWRlbXkuY29tL3Byb2JsZW0vMTA0MQ==">LIOJ 1041：String trim<i class="fa fa-external-link-alt"></i></span></h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h3 id="LIOJ-1042：String-toLowerCase"><a href="#LIOJ-1042：String-toLowerCase" class="headerlink" title="LIOJ 1042：String toLowerCase"></a><span class="exturl" data-url="dG9Mb3dlckNhc2VodHRwczovL29qLmxpZGVteS5jb20vcHJvYmxlbS8xMDQy">LIOJ 1042：String toLowerCase<i class="fa fa-external-link-alt"></i></span></h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// LIOJ 1042：String toLowerCase</span>
<span class="token keyword">function</span> <span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token parameter">str</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> str<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">>=</span> <span class="token string">"A"</span> <span class="token operator">&amp;&amp;</span> str<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> <span class="token string">"Z"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">let</span> code <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
      result <span class="token operator">+=</span> String<span class="token punctuation">.</span><span class="token function">fromCharCode</span><span class="token punctuation">(</span>code <span class="token operator">+</span> <span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
      result <span class="token operator">+=</span> str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 若不是大寫就直接加到字串</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">return</span> result<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// 處理輸入</span>
<span class="token keyword">function</span> <span class="token function">solve</span><span class="token punctuation">(</span><span class="token parameter">input</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span>input<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="LIOJ-1043：String-endsWith"><a href="#LIOJ-1043：String-endsWith" class="headerlink" title="LIOJ 1043：String endsWith"></a><span class="exturl" data-url="aHR0cHM6Ly9vai5saWRlbXkuY29tL3Byb2JsZW0vMTA0Mw==">LIOJ 1043：String endsWith<i class="fa fa-external-link-alt"></i></span></h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h3 id="LIOJ-1044：String-padEnd"><a href="#LIOJ-1044：String-padEnd" class="headerlink" title="LIOJ 1044：String padEnd"></a><span class="exturl" data-url="aHR0cHM6Ly9vai5saWRlbXkuY29tL3Byb2JsZW0vMTA0NA==">LIOJ 1044：String padEnd<i class="fa fa-external-link-alt"></i></span></h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// LIOJ 1044：String padEnd</span>
<span class="token keyword">function</span> <span class="token function">padEnd</span><span class="token punctuation">(</span><span class="token parameter">str<span class="token punctuation">,</span> targetLength<span class="token punctuation">,</span> padString</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>str<span class="token punctuation">.</span>lenght <span class="token operator">>=</span> targetLength<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> str<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token comment">// 從 'S 字串長度 + 1' 開始填充，直到預期字串長度</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span>str<span class="token punctuation">.</span>length <span class="token operator">&lt;</span> targetLength<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> padString<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      str <span class="token operator">+=</span> padString<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
      <span class="token comment">// 若 S 達到預期字串長度，則結束迴圈</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>str<span class="token punctuation">.</span>length <span class="token operator">===</span> targetLength<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> str<span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// 處理輸入</span>
<span class="token keyword">function</span> <span class="token function">solve</span><span class="token punctuation">(</span><span class="token parameter">input</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">let</span> <span class="token constant">S</span> <span class="token operator">=</span> input<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> target <span class="token operator">=</span> <span class="token function">Number</span><span class="token punctuation">(</span>input<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 預期字串的最後長度</span>
  <span class="token keyword">let</span> padString <span class="token operator">=</span> input<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 要填充的字串</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">padEnd</span><span class="token punctuation">(</span><span class="token constant">S</span><span class="token punctuation">,</span> target<span class="token punctuation">,</span> padString<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="LIOJ-1045：String-slice"><a href="#LIOJ-1045：String-slice" class="headerlink" title="LIOJ 1045：String slice"></a><span class="exturl" data-url="aHR0cHM6Ly9vai5saWRlbXkuY29tL3Byb2JsZW0vMTA0NQ==">LIOJ 1045：String slice<i class="fa fa-external-link-alt"></i></span></h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// LIOJ 1045：String slice</span>
<span class="token keyword">function</span> <span class="token function">slice</span><span class="token punctuation">(</span><span class="token parameter">str<span class="token punctuation">,</span> beginIndex<span class="token punctuation">,</span> endIndex</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> beginIndex<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> endIndex<span class="token punctuation">;</span> i <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    result <span class="token operator">+=</span> str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">return</span> result<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// 處理輸入</span>
<span class="token keyword">function</span> <span class="token function">solve</span><span class="token punctuation">(</span><span class="token parameter">input</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">let</span> str <span class="token operator">=</span> input<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> start <span class="token operator">=</span> <span class="token function">Number</span><span class="token punctuation">(</span>input<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> end <span class="token operator">=</span> <span class="token function">Number</span><span class="token punctuation">(</span>input<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">slice</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> start<span class="token punctuation">,</span> end<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<hr>
<h2 id="補充：Lidemy-OJ-解題方式"><a href="#補充：Lidemy-OJ-解題方式" class="headerlink" title="補充：Lidemy OJ 解題方式"></a>補充：<span class="exturl" data-url="aHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj12N3p2MWl4YU8zTQ==">Lidemy OJ<i class="fa fa-external-link-alt"></i></span> 解題方式</h2><p>有三種方式可以驗證輸出：</p>
<ol>
<li>直接在 Command Line 介面直接執行 <code>node index.js</code>，即可直接輸入數字，按 ctrl+D 輸出結果（Windows 無法執行）</li>
<li>直接在 <code>index.js</code> 呼叫 function</li>
<li>新增檔案來放輸入，利用指令來產生輸出：<code>cat input.txt | node index.js</code><br>補充：Windows 需改成 <code>cat input.txt | env node code.js</code> 或是 <code>cat input.txt | command node code.js</code></li>
</ol>
<p>固定輸入程式碼如下，答題時只需更改 function solve(lines)：</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> readline <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"readline"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> rl <span class="token operator">=</span> readline<span class="token punctuation">.</span><span class="token function">createInterface</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
  input<span class="token operator">:</span> process<span class="token punctuation">.</span>stdin<span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">var</span> lines <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token comment">// 讀取到一行，先把這一行加進去 lines 陣列，最後再一起處理</span>
rl<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">"line"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">line</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  lines<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 輸入結束，開始針對 lines 做處理</span>
rl<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">"close"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token function">solve</span><span class="token punctuation">(</span>lines<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 拿到所有資料</span>
<span class="token keyword">function</span> <span class="token function">solve</span><span class="token punctuation">(</span><span class="token parameter">lines</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>以<span class="exturl" data-url="aHR0cHM6Ly9vai5saWRlbXkuY29tL3Byb2JsZW0vMTAxMA==">靈魂伴侶<i class="fa fa-external-link-alt"></i></span>為例：</p>
<pre class="line-numbers language-none"><code class="language-none">var readline &#x3D; require(&#39;readline&#39;);
var rl &#x3D; readline.createInterface(&#123;
    input: process.stdin
&#125;);

var lines &#x3D; []

&#x2F;&#x2F; 讀取到一行，先把這一行加進去 lines 陣列，最後再一起處理
rl.on(&#39;line&#39;, function (line) &#123;
    lines.push(line)
&#125;);

&#x2F;&#x2F; 輸入結束，開始針對 lines 做處理
rl.on(&#39;close&#39;, function () &#123;
    solve(lines)
&#125;)

function solve(lines) &#123;
    var arr &#x3D; lines[0].split(&#39; &#39;)        &#x2F;&#x2F; 注意需要取陣列！
    var a &#x3D; Number(arr[0])
    var b &#x3D; Number(arr[1])
    if (a &#x3D;&#x3D;&#x3D; b) &#123;
        console.log(&#39;Yes&#39;)
    &#125; else &#123;
        console.log(&#39;No&#39;)
    &#125;
&#125;

solve([                           &#x2F;&#x2F; 輸入是陣列，可用函式驗證是否正確
    &#39;15 15&#39;
])<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<hr>
<h2 id="補充：使用-eslint-檢查語法"><a href="#補充：使用-eslint-檢查語法" class="headerlink" title="補充：使用 eslint 檢查語法"></a>補充：使用 eslint 檢查語法</h2><blockquote>
<p>相關筆記：<span class="exturl" data-url="aHR0cHM6Ly9oYWNrbWQuaW8vbTk1Zmo5U3NSTGUxWERaRWRzeUJ3dw==">[week3] 設定 eslint：用來檢查語法的工具<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
<p>需注意宣告方式、縮排問題、結尾加分號等問題，修改後模板如下：</p>
<pre class="line-numbers language-none"><code class="language-none">const readline &#x3D; require(&#39;readline&#39;);

const rl &#x3D; readline.createInterface(&#123;
  input: process.stdin,
&#125;);

const lines &#x3D; [];

&#x2F;&#x2F; 讀取到一行，先把這一行加進去 lines 陣列，最後再一起處理
rl.on(&#39;line&#39;, (line) &#x3D;&gt; &#123;
  lines.push(line);
&#125;);

&#x2F;&#x2F; 前面已宣告過 lines，這裡改用 input 作為參數，拿取內容 lines
function solve(input) &#123;
  &quot;在這裡輸入函式內容&quot;
&#125;

&#x2F;&#x2F; 輸入結束，開始針對 lines 做處理
rl.on(&#39;close&#39;, () &#x3D;&gt; &#123;
  solve(lines);
&#125;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>淺談 WebSocket 協定：實作一個簡單的即時聊天室吧！</title>
    <url>/websocket/</url>
    <content><![CDATA[<p><img src="https://i.imgur.com/xLBMhye.png"></p>
<blockquote>
<p>參考資料：<span class="exturl" data-url="aHR0cHM6Ly9sZWVzb25oc3UuYmxvZ3Nwb3QuY29tLzIwMTgvMDcvc29ja2V0d2Vic29ja2V0c29ja2V0aW8uaHRtbA==">https://leesonhsu.blogspot.com/2018/07/socketwebsocketsocketio.html<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
<h2 id="What-is-WebSocket"><a href="#What-is-WebSocket" class="headerlink" title="What is WebSocket?"></a>What is WebSocket?</h2><p><span class="exturl" data-url="aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3poLXR3L1dlYlNvY2tldA==">WebSocket<i class="fa fa-external-link-alt"></i></span> 是 <span class="exturl" data-url="aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3poLXR3L0hUTUw1">HTML5<i class="fa fa-external-link-alt"></i></span> 提供的一種網路傳輸協定，是瀏覽器（Client）與伺服器（Server）交換資料的方式之一。</p>
<span id="more"></span>

<p>與我們較為熟知的 <span class="exturl" data-url="aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3poLXR3LyVFOCVCNiU4NSVFNiU5NiU4NyVFNiU5QyVBQyVFNCVCQyVBMCVFOCVCRSU5MyVFNSU4RCU4RiVFOCVBRSVBRQ==">HTTP<i class="fa fa-external-link-alt"></i></span> 或 <span class="exturl" data-url="aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3poLXR3LyVFOCVCNiU4NSVFNiU5NiU4NyVFNiU5QyVBQyVFNCVCQyVBMCVFOCVCRSU5MyVFNSVBRSU4OSVFNSU4NSVBOCVFNSU4RCU4RiVFOCVBRSVBRQ==">HTTPS<i class="fa fa-external-link-alt"></i></span> 協定，同樣位於 <span class="exturl" data-url="aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3poLXR3L09TSSVFNiVBOCVBMSVFNSU5RSU4Qg==">OSI 模型<i class="fa fa-external-link-alt"></i></span>的<span class="exturl" data-url="aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3poLXR3LyVFNSVCQSU5NCVFNyU5NCVBOCVFNSVCMSU4Mg==">應用層<i class="fa fa-external-link-alt"></i></span>，且基於傳輸層的 <span class="exturl" data-url="aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3dpa2kvJUU0JUJDJUEwJUU4JUJFJTkzJUU2JThFJUE3JUU1JTg4JUI2JUU1JThEJThGJUU4JUFFJUFF">TCP<i class="fa fa-external-link-alt"></i></span> 協定。其最大不同在於，WebSocket 協定只需連線一次，就能保持雙向溝通，不需重複發送 Request，因此回應更即時，進而提升 Web 通訊速度。</p>
<h2 id="Why-WebSocket"><a href="#Why-WebSocket" class="headerlink" title="Why WebSocket?"></a>Why WebSocket?</h2><ul>
<li>HTTP 協定只能由 Client 端「單向」發送請求，無法由 Server 端主動發送請求；WebSocket 協定則允許 Server 端主動向 Client 端推播資料，實現「雙向溝通」機制</li>
<li>透過 <span class="exturl" data-url="aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3dpa2kvSFRUUCVFNiU4QyU4MSVFNCVCOSU4NSVFOCVCRiU5RSVFNiU4RSVBNQ==">HTTP 1.1 持久連接（keep-alive）<i class="fa fa-external-link-alt"></i></span>，有效解決 HTTP <span class="exturl" data-url="aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3poLXR3LyVFOCVCQyVBQSVFOCVBOSVBMg==">輪詢（Polling）<i class="fa fa-external-link-alt"></i></span>產生的效能問題，節省伺服器資源</li>
<li>實際範例：訊息推播、即時聊天室、共同編輯等功能</li>
</ul>
<p><img src="https://i.imgur.com/S3Mhxau.png"></p>
<h2 id="How-to-use-WebSocket"><a href="#How-to-use-WebSocket" class="headerlink" title="How to use WebSocket?"></a>How to use WebSocket?</h2><p>WebSocket 的建立是由瀏覽器透過 JavaScript 指令，發起一個 HTTP Request 來實現。請求網址會長這樣：</p>
<pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx">ws<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>example<span class="token punctuation">.</span>com<span class="token operator">/</span>wsapi<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>若經過 SSL 加密（WebSocket Secure），則加密連接網址會變成：</p>
<pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx">wss<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>secure<span class="token punctuation">.</span>example<span class="token punctuation">.</span>com<span class="token operator">/</span>wsapi<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>WebSocket 進行一次雙方握手過程，Client 端發送資訊：</p>
<pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token constant">GET</span> ws<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>localhost<span class="token operator">:</span><span class="token number">8080</span> <span class="token constant">HTTP</span><span class="token operator">/</span><span class="token number">1.1</span>             <span class="token comment">// 透過 HTTP/1.1 進行交握</span>
Origin<span class="token operator">:</span> http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>localhost<span class="token operator">:</span><span class="token number">8080</span>                <span class="token comment">// Client 端 URL</span>
Host<span class="token operator">:</span> localhost<span class="token operator">:</span><span class="token number">8080</span>
Upgrade<span class="token operator">:</span> websocket                           <span class="token comment">// 表示發送 WebSocket 類型請求</span>
Connection<span class="token operator">:</span> Upgrade                          <span class="token comment">// 表示 Client 希望連接升級</span>
Sec<span class="token operator">-</span>WebSocket<span class="token operator">-</span>Key<span class="token operator">:</span> xqBt3ImNzJbYqRINxEFlkg<span class="token operator">==</span>  <span class="token comment">// base64 編碼密文，瀏覽器在每次握手隨機生成</span>
Sec<span class="token operator">-</span>WebSocket<span class="token operator">-</span>Protocol<span class="token operator">:</span> chat<span class="token punctuation">,</span> superchat      <span class="token comment">// 用來區分同 URL 下不同 Server 需要之協議</span>
Sec<span class="token operator">-</span>WebSocket<span class="token operator">-</span>Version<span class="token operator">:</span> <span class="token number">13</span>                    <span class="token comment">// 支持的 WebSocket 版本號</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>Server 端回應資訊：</p>
<pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token constant">HTTP</span><span class="token operator">/</span><span class="token number">1.1</span> <span class="token number">101</span>  Switching Protocols    <span class="token comment">// 表示成功建立連接</span>
Upgrade<span class="token operator">:</span> websocket     
Connection<span class="token operator">:</span> Upgrade     
Sec<span class="token operator">-</span>WebSocket<span class="token operator">-</span>Accept<span class="token operator">:</span> K7DJLdLooIwIG<span class="token operator">/</span>MOpvWFB3y3FE8<span class="token operator">=</span> <span class="token comment">// Server 端回覆對應的加密</span>
Sec<span class="token operator">-</span>WebSocket<span class="token operator">-</span>Protocol<span class="token operator">:</span> chat         <span class="token comment">// Server 端使用的協議</span>
Sec<span class="token operator">-</span>WebSocket<span class="token operator">-</span>Location<span class="token operator">:</span> ws<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>localhost<span class="token operator">:</span><span class="token number">8080</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>可參考 MDN 上提供的 <span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL1dlYlNvY2tldA==">WebSocket API<i class="fa fa-external-link-alt"></i></span> 使用範例，建立簡單的 WebSocket 連線。</p>
<p>接下來會分幾個步驟來實作 WebSocket，其中又分 Server 和 Client 兩個面向進行：</p>
<ul>
<li>Step1. 建置 WebSocket Server</li>
<li>Step2. 從 Client 發送請求給 WebSocket Server 建立連線</li>
<li>Step3. Server 處理來自 Client 的訊息與回應</li>
<li>Step4. Client 處理來自 Server 的訊息與回應</li>
<li>Step5. 實戰練習：實現 Server 與多個 Client 連線溝通</li>
</ul>
<p>那麼就開始吧！</p>
<h3 id="Server-端：建置-WebSocket-環境"><a href="#Server-端：建置-WebSocket-環境" class="headerlink" title="Server 端：建置 WebSocket 環境"></a>Server 端：建置 WebSocket 環境</h3><p>這裡以 Node.js 為例，使用 <span class="exturl" data-url="aHR0cHM6Ly9leHByZXNzanMuY29tLw==">Express<i class="fa fa-external-link-alt"></i></span> 框架搭配 WebSocket 套件來建立環境。</p>
<p>關於如何使用 Express 來架設 Server，可參考過去寫的筆記：<a href="https://heidiliu2020.github.io/express/">[week 17] 後端中階 - 使用 Node.js + Express 框架建立一個靜態網頁</a>。</p>
<ul>
<li>首先是安裝套件</li>
</ul>
<pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx">$ npm install express
$ npm install ws<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<ul>
<li>安裝完套件後，在專案中建立 <code>server.js</code> 檔案，作為專案的進入點：</li>
</ul>
<pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token comment">// import library</span>
<span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express'</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> ServerSocket <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'ws'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Server   <span class="token comment">// 引用 Server</span>

<span class="token comment">// 指定一個 port</span>
<span class="token keyword">const</span> <span class="token constant">PORT</span> <span class="token operator">=</span> <span class="token number">8080</span>

<span class="token comment">// 建立 express 物件並用來監聽 8080 port</span>
<span class="token keyword">const</span> server <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token constant">PORT</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">[Server] Listening on https://localhost:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token constant">PORT</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment">// 建立實體，透過 ServerSocket 開啟 WebSocket 的服務</span>
<span class="token keyword">const</span> wss <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServerSocket</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> server <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>

<span class="token comment">// Connection opened</span>
wss<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'connection'</span><span class="token punctuation">,</span> <span class="token parameter">ws</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'[Client connected]'</span><span class="token punctuation">)</span>

    <span class="token comment">// Connection closed</span>
    ws<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'close'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Close connected'</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>即可輸入下方指令來運行 Server：</p>
<pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx">$ node server<span class="token punctuation">.</span>js<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>出現以下 log 代表 Server 正在監聽 8080 port：</p>
<p><img src="https://i.imgur.com/mwIvN1w.png"></p>
<h3 id="Client-端：與-WebSocket-Server-連線"><a href="#Client-端：與-WebSocket-Server-連線" class="headerlink" title="Client 端：與 WebSocket Server 連線"></a>Client 端：與 WebSocket Server 連線</h3><p>處理完 Server 後，接下來要從 Client 端連結 WebSocket 服務。這裡需另起一個專案，包含 index.html 和 index.js 兩個檔案。</p>
<ul>
<li>UI 畫面：新增一個 index.html 檔案</li>
</ul>
<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>
        <span class="token comment">&lt;!-- Connect or Disconnect WebSocket Server --></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>connect<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Connect<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>disconnect<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Disconnect<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>

        <span class="token comment">&lt;!-- Send Message to Server --></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>
            Message: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sendMsg<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sendBtn<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Send<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>

        <span class="token comment">&lt;!-- Import index.js after UI rendered --></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>./index.js<span class="token punctuation">'</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>渲染後如下圖所示：</p>
<p><img src="https://i.imgur.com/0zhHOVC.png"></p>
<ul>
<li>邏輯處理：新增一個 index.js 檔案</li>
</ul>
<pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">var</span> ws

<span class="token comment">// 監聽 click 事件</span>
document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'#connect'</span><span class="token punctuation">)</span><span class="token operator">?.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'[click connect]'</span><span class="token punctuation">)</span>
    <span class="token function">connect</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>

document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'#disconnect'</span><span class="token punctuation">)</span><span class="token operator">?.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'[click disconnect]'</span><span class="token punctuation">)</span>
    <span class="token function">disconnect</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>

document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'#sendBtn'</span><span class="token punctuation">)</span><span class="token operator">?.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">const</span> msg <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'#sendMsg'</span><span class="token punctuation">)</span>
    <span class="token function">sendMessage</span><span class="token punctuation">(</span>msg<span class="token operator">?.</span>value<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>

<span class="token keyword">function</span> <span class="token function">connect</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> 
    <span class="token comment">// Create WebSocket connection</span>
    ws <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WebSocket</span><span class="token punctuation">(</span><span class="token string">'ws://localhost:8080'</span><span class="token punctuation">)</span> 
    <span class="token comment">// 在開啟連線時執行</span>
    ws<span class="token punctuation">.</span><span class="token function-variable function">onopen</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'[open connection]'</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">function</span> <span class="token function">disconnect</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    ws<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token comment">// 在關閉連線時執行</span>
    ws<span class="token punctuation">.</span><span class="token function-variable function">onclose</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'[close connection]'</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>可搭配 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2luZGV4emVyby9odHRwLXNlcnZlcg==">https://github.com/indexzero/http-server<i class="fa fa-external-link-alt"></i></span> 套件快速架設 <span class="exturl" data-url="aHR0cDovL2xvY2FsaG9zdC8=">localhost<i class="fa fa-external-link-alt"></i></span> 測試環境：</li>
</ul>
<pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token comment">// 安裝套件</span>
$ npm install http<span class="token operator">-</span>server
<span class="token comment">// 運行 http-server</span>
$ http<span class="token operator">-</span>server <span class="token punctuation">[</span>path<span class="token punctuation">]</span> <span class="token punctuation">[</span>options<span class="token punctuation">]</span>

<span class="token comment">// 預設為 8080 port，這裡指定 3000 port 為例</span>
$ http<span class="token operator">-</span>server <span class="token operator">-</span>p <span class="token number">3000</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>實際運行如下方所示 ：</p>
<p><img src="https://i.imgur.com/SYUbMM9.gif"></p>
<p>建立好 WebSocket 連結之後，就可以進行雙向溝通了！</p>
<h3 id="Server-端：處理接發送-message"><a href="#Server-端：處理接發送-message" class="headerlink" title="Server 端：處理接發送 message"></a>Server 端：處理接發送 message</h3><p>Server 端分別能使用 <code>send</code> 發送訊息，以及透過監聽 <code>message</code> 事件接收來自 Client 的訊息：</p>
<pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token comment">// Connection opened</span>
wss<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'connection'</span><span class="token punctuation">,</span> <span class="token parameter">ws</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'[Client connected]'</span><span class="token punctuation">)</span>

	<span class="token comment">// Listen for messages from client</span>
	ws<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'message'</span><span class="token punctuation">,</span> <span class="token parameter">data</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
	    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'[Message from client]: '</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span>
	    <span class="token comment">// Send message to client</span>
	    ws<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'[Get message from server]'</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>

	<span class="token comment">// ...</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="Client-端：處理接發送-message"><a href="#Client-端：處理接發送-message" class="headerlink" title="Client 端：處理接發送 message"></a>Client 端：處理接發送 message</h3><p>同樣的，Client 端也能使用 <code>send</code> 送出訊息，以及透過 <code>onmessage</code> 接收 Server 端的訊息：</p>
<pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token comment">// 監聽 click 事件</span>
document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'#sendBtn'</span><span class="token punctuation">)</span><span class="token operator">?.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">const</span> msg <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'#sendMsg'</span><span class="token punctuation">)</span>
    <span class="token function">sendMessage</span><span class="token punctuation">(</span>msg<span class="token operator">?.</span>value<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>

<span class="token comment">// Listen for messages from Server</span>
<span class="token keyword">function</span> <span class="token function">sendMessage</span><span class="token punctuation">(</span><span class="token parameter">msg</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// Send messages to Server</span>
    ws<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span>
    <span class="token comment">// Listen for messages from Server</span>
    ws<span class="token punctuation">.</span><span class="token function-variable function">onmessage</span> <span class="token operator">=</span> <span class="token parameter">event</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'[send message]'</span><span class="token punctuation">,</span> event<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="實戰練習：實作一個簡單的即時聊天室"><a href="#實戰練習：實作一個簡單的即時聊天室" class="headerlink" title="實戰練習：實作一個簡單的即時聊天室"></a>實戰練習：實作一個簡單的即時聊天室</h2><p>先前提到 WebSocket 常應用於即時聊天室等功能，也就是實現 Server 同時與多個 Client 連線。那該如何在 ClientA 傳送訊息給 Server 的同時，讓 ClientB 也接收到來自 Server 回傳的訊息呢？</p>
<p>這時就要仰賴「廣播功能」，首先透過 <code>ws</code> 提供的方法 <code>clients</code> 取得目前所有連線中的 Clients 資訊，再使用 forEach 迴圈送出訊息給每個 Client：</p>
<pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token comment">// Connection opened</span>
wss<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'connection'</span><span class="token punctuation">,</span> <span class="token parameter">ws</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'[Client connected]'</span><span class="token punctuation">)</span>

	<span class="token comment">// Listen for messages from client</span>
	ws<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'message'</span><span class="token punctuation">,</span> <span class="token parameter">data</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
	    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'[Message from client]: '</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span>
	    <span class="token comment">// Get clients who connected</span>
	    <span class="token keyword">let</span> clients <span class="token operator">=</span> wss<span class="token punctuation">.</span>clients
	    <span class="token comment">// Use loop for sending messages to each client</span>
	    clients<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">client</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
	        client<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'[Broadcast][Get message from server]'</span><span class="token punctuation">)</span>
	    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>

	<span class="token comment">// ...</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>至於如何區分各個 Client，可參考這篇提供的方法：<span class="exturl" data-url="aHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvMTMzNjQyNDMvd2Vic29ja2V0c2VydmVyLW5vZGUtanMtaG93LXRvLWRpZmZlcmVudGlhdGUtY2xpZW50cw==">《webSocketServer node.js how to differentiate clients》<i class="fa fa-external-link-alt"></i></span>，直接賦值 id 一個隨機變數。</p>
<p>或是參考 github 上的這篇討論 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3dlYnNvY2tldHMvd3MvaXNzdWVzLzg1OQ==">《unique identifier for each client request to websocket server》<i class="fa fa-external-link-alt"></i></span>，直接取 request header 中的 <code>&#39;sec-websocket-key&#39;</code> 給每個 Client 新屬性 id：</p>
<pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx">wss<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'connection'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">ws<span class="token punctuation">,</span> req</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">var</span> id <span class="token operator">=</span> req<span class="token punctuation">.</span>headers<span class="token punctuation">[</span><span class="token string">'sec-websocket-key'</span><span class="token punctuation">]</span>
      <span class="token comment">// Do something...</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>總之目的是取得各個使用者獨一無二的識別證，透過這些識別證，又能夠對照到我們所熟悉的遊戲 ID 或是帳號。</p>
<p>經整理後的程式碼如下：</p>
<ul>
<li>Server 端：server.js</li>
</ul>
<pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token comment">// import library</span>
<span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express'</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> ServerSocket <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'ws'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Server   <span class="token comment">// 引用 Server</span>

<span class="token keyword">const</span> <span class="token constant">PORT</span> <span class="token operator">=</span> <span class="token number">8080</span>

<span class="token comment">// 建立 express 物件並用來監聽 8080 port</span>
<span class="token keyword">const</span> server <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token constant">PORT</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">[Server] Listening on https://localhost:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token constant">PORT</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment">// 建立實體，透過 ServerSocket 開啟 WebSocket 的服務</span>
<span class="token keyword">const</span> wss <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServerSocket</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> server <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>

<span class="token comment">// Connection opened</span>
wss<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'connection'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">ws<span class="token punctuation">,</span> req</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    ws<span class="token punctuation">.</span>id <span class="token operator">=</span> req<span class="token punctuation">.</span>headers<span class="token punctuation">[</span><span class="token string">'sec-websocket-key'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span>
    ws<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">[Client </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>ws<span class="token punctuation">.</span>id<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> is connected!]</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>

    <span class="token comment">// Listen for messages from client</span>
    ws<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'message'</span><span class="token punctuation">,</span> <span class="token parameter">data</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'[Message from client] data: '</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span>
        <span class="token comment">// Get clients who has connected</span>
        <span class="token keyword">let</span> clients <span class="token operator">=</span> wss<span class="token punctuation">.</span>clients
        <span class="token comment">// Use loop for sending messages to each client</span>
        clients<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">client</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
            client<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>ws<span class="token punctuation">.</span>id<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">: </span><span class="token template-punctuation string">`</span></span> <span class="token operator">+</span> data<span class="token punctuation">)</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>

    <span class="token comment">// Connection closed</span>
    ws<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'close'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'[Close connected]'</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>Client 端：index.js</li>
</ul>
<pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">var</span> ws

<span class="token comment">// 監聽 click 事件</span>
document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'#connect'</span><span class="token punctuation">)</span><span class="token operator">?.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token function">connect</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>

document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'#disconnect'</span><span class="token punctuation">)</span><span class="token operator">?.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token function">disconnect</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>

document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'#sendBtn'</span><span class="token punctuation">)</span><span class="token operator">?.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">const</span> msg <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'#sendMsg'</span><span class="token punctuation">)</span>
    <span class="token function">sendMessage</span><span class="token punctuation">(</span>msg<span class="token operator">?.</span>value<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>

<span class="token keyword">function</span> <span class="token function">connect</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> 
    <span class="token comment">// Create WebSocket connection</span>
    ws <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WebSocket</span><span class="token punctuation">(</span><span class="token string">'ws://localhost:8080'</span><span class="token punctuation">)</span> 
    
    <span class="token comment">// ws = new WebSocket('ws://192.168.17.35:58095') </span>
    <span class="token comment">// 在開啟連線時執行</span>
    ws<span class="token punctuation">.</span><span class="token function-variable function">onopen</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'[open connection]'</span><span class="token punctuation">)</span>
        <span class="token comment">// Listen for messages from Server</span>
        ws<span class="token punctuation">.</span><span class="token function-variable function">onmessage</span> <span class="token operator">=</span> <span class="token parameter">event</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">[Message from server]:\n %c</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>event<span class="token punctuation">.</span>data<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span> <span class="token punctuation">,</span> <span class="token string">'color: blue'</span><span class="token punctuation">)</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">function</span> <span class="token function">sendMessage</span><span class="token punctuation">(</span><span class="token parameter">msg</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// Send messages to Server</span>
    ws<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">function</span> <span class="token function">disconnect</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    ws<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token comment">// 在關閉連線時執行</span>
    ws<span class="token punctuation">.</span><span class="token function-variable function">onclose</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'[close connection]'</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>實際運行如下圖，完成具備廣播功能的即時聊天室！</p>
<p><img src="https://i.imgur.com/AdQEjiF.gif"></p>
<h2 id="WebSocket-API"><a href="#WebSocket-API" class="headerlink" title="WebSocket API"></a>WebSocket API</h2><p>在實際練習後，這裡整理一些常用的 <span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvemgtVFcvZG9jcy9XZWIvQVBJL1dlYlNvY2tldA==">WebSocket API<i class="fa fa-external-link-alt"></i></span>：</p>
<ul>
<li><code>new WebSocket()</code>：和 Server 建立 WebSocket 連線</li>
</ul>
<h3 id="WebSocket-Event"><a href="#WebSocket-Event" class="headerlink" title="WebSocket Event"></a>WebSocket Event</h3><p>在建立 WebSocket 連線之後，即可透過 <code>addEventListener()</code> 監聽各種 Events，做出不同的對應方法，可參考 MDN 上的 <span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL1dlYlNvY2tldCNldmVudHM=">Events<i class="fa fa-external-link-alt"></i></span>：</p>
<ul>
<li>open：成功和 Server 建立連線時觸發</li>
<li>message：接收到 Server 端訊息時觸發</li>
<li>close：關閉連線時觸發</li>
<li>error：連線發生錯誤時觸發</li>
</ul>
<h3 id="WebSocket-Methods"><a href="#WebSocket-Methods" class="headerlink" title="WebSocket Methods"></a>WebSocket Methods</h3><p>同樣在建立 WebSocket 連線後，可使用以下 WebSocket 提供的方法進行互動：</p>
<ul>
<li>send()：發送訊息給 Server</li>
<li>close()：關閉連線</li>
</ul>
<h2 id="比較：Socket-WebSocket-Socket-IO"><a href="#比較：Socket-WebSocket-Socket-IO" class="headerlink" title="比較：Socket / WebSocket  / Socket.IO"></a>比較：Socket / WebSocket  / Socket.IO</h2><p><span class="exturl" data-url="aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3poLXR3LyVFNyVCNiVCMiVFOCVCNyVBRiVFNiU4RiU5MiVFNSVCQSVBNw==">Socket<i class="fa fa-external-link-alt"></i></span>、Websocket、<span class="exturl" data-url="aHR0cDovL3NvY2tldC5pby8=">Socket.io<i class="fa fa-external-link-alt"></i></span> 這三者都和網路即時通訊有關，名稱也有 87 像，但實際上是不同的東西，以下做簡單的整理介紹：</p>
<p><img src="https://i.imgur.com/aI5zQVj.png"></p>
<blockquote>
<p>參考資料：<span class="exturl" data-url="aHR0cHM6Ly9sZWVzb25oc3UuYmxvZ3Nwb3QuY29tLzIwMTgvMDcvc29ja2V0d2Vic29ja2V0c29ja2V0aW8uaHRtbA==">https://leesonhsu.blogspot.com/2018/07/socketwebsocketsocketio.html<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
<h3 id="Socket：傳輸與應用層之間的接口"><a href="#Socket：傳輸與應用層之間的接口" class="headerlink" title="Socket：傳輸與應用層之間的接口"></a>Socket：傳輸與應用層之間的接口</h3><ul>
<li>是應用層與 TCP/IP 協議之間的抽象層介面，是一組 API 接口</li>
<li>使用者可透過 Socket 來操作 TCP/IP 協議通信</li>
<li>傳輸方式多為 stream</li>
<li>傳輸載體類型為 binary</li>
</ul>
<h3 id="WebSocket：應用層協議"><a href="#WebSocket：應用層協議" class="headerlink" title="WebSocket：應用層協議"></a>WebSocket：應用層協議</h3><ul>
<li>為了改善 Web 即時雙向通訊而創造出來的協議</li>
<li>瀏覽器底層使用 Socket 作為通訊介面</li>
<li>載體類型有二種：binary（二進位）或 text（文字），只能擇一使用</li>
</ul>
<h3 id="Socket-IO：一套-JavaScript-函式庫"><a href="#Socket-IO：一套-JavaScript-函式庫" class="headerlink" title="Socket.IO：一套 JavaScript 函式庫"></a>Socket.IO：一套 JavaScript 函式庫</h3><ul>
<li>是一套用來建立即時通訊應用的 JavaScript 函式庫，透過 <span class="exturl" data-url="aHR0cDovL3NvY2tldC5pby8=">Socket.IO<i class="fa fa-external-link-alt"></i></span> 能夠實現 Server 與多個 Client 之間的溝通</li>
<li>是建立在 WebSocket 之上的套件，並支持代理和負載平衡器</li>
<li>由兩部分組成，包含 Server 端的 node.js 和 Client 端的 JavaScript</li>
<li>核心是 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3NvY2tldGlvL2VuZ2luZS5pbw==">engine.io<i class="fa fa-external-link-alt"></i></span>，透過 WebSocket 和 HTTP long-polling 方式實現伺服器和客戶端之間的連線</li>
</ul>
<h2 id="小結"><a href="#小結" class="headerlink" title="小結"></a>小結</h2><p>這次同樣是工作上接手新專案，需要研究 WebSocket 相關技術，於是又把過去一些網路基礎知識給複習一遍，每次都對網路協議多了一層認識。</p>
<p>對自己而言算是比較陌生的領域，即使大概知道功用是什麼，實際操作起來又是另一回事，但學習新知識果然還是很快樂，期許自己能夠早日上手。</p>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cuemhpaHUuY29tL3F1ZXN0aW9uLzIwMjE1NTYx">WebSocket 是什么原理？为什么可以实现持久连接？<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cDovL3lpeWltaWFvLmNvbS9odG1sL2h0bWw1LXdlYnNvY2tldC5odG1s">HTML5 WebSocket<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9tZWRpdW0uY29tL2Vuam95LWxpZmUtZW5qb3ktY29kaW5nL2phdmFzY3JpcHQtd2Vic29ja2V0LSVFOCVBRSU5MyVFNSU4OSU4RCVFNSVCRSU4QyVFNyVBQiVBRiVFNiVCMiU5MiVFNiU5QyU4OSVFOCVCNyU5RCVFOSU5QiVBMi0zNDUzNmMzMzNlMWI=">JavaScript | WebSocket 讓前後端沒有距離 - Medium<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9sZWVzb25oc3UuYmxvZ3Nwb3QuY29tLzIwMTgvMDcvc29ja2V0d2Vic29ja2V0c29ja2V0aW8uaHRtbA==">【筆記】Socket，Websocket，Socket.io的差異<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9wamNoZW5kZXIuZGV2L25wbS9ucG0tc29ja2V0LWlvLw==">[note] socket.io 筆記<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9jcmVhdGl2ZWNvZGluZy5pbi8yMDIwLzAzLzI1LyVFNyU5NCVBOC1zb2NrZXQtaW8tJUU1JTgxJTlBJUU0JUI4JTgwJUU1JTgwJThCJUU1JThEJUIzJUU2JTk5JTgyJUU4JTgxJThBJUU1JUE0JUE5JUU1JUFFJUE0JUU1JTkwJUE3JUVGJUJDJTgxJUVGJUJDJTg4JUU3JTlCJUI0JUU2JTkyJUFEJUU3JUFEJTg2JUU4JUE4JTk4JUVGJUJDJTg5Lw==">用Socket.io 做一個即時聊天室吧！（直播筆記）<i class="fa fa-external-link-alt"></i></span></li>
</ul>
]]></content>
      <categories>
        <category>Front-End</category>
        <category>Internet</category>
      </categories>
      <tags>
        <tag>Front-End</tag>
        <tag>WebSocket</tag>
      </tags>
  </entry>
  <entry>
    <title>【學習筆記】JavaScript：Regex 正則表達式</title>
    <url>/regex/</url>
    <content><![CDATA[<p><img src="/images/pasted-5.png" alt="upload successful"><br>參考來源：<span class="exturl" data-url="aHR0cHM6Ly9jb2RlcnBhZC5pby9ibG9nL2RldmVsb3BtZW50L3RoZS1jb21wbGV0ZS1ndWlkZS10by1yZWd1bGFyLWV4cHJlc3Npb25zLXJlZ2V4Lw==">https://coderpad.io/blog/development/the-complete-guide-to-regular-expressions-regex/<i class="fa fa-external-link-alt"></i></span></p>
<h2 id="Why-we-need-Regular-Expression"><a href="#Why-we-need-Regular-Expression" class="headerlink" title="Why we need Regular Expression?"></a>Why we need Regular Expression?</h2><p>正則表達式（Regular Expression），常簡寫為 RegEx、RegExp 或 RE，代表描述一種字串匹配的模式（pattern）。在程式語言中，通常用來搜尋、比對、替換符合某個模式的文字。</p>
<span id="more"></span>

<p>在 JavaScript 中，Regex 常見使用情境如下：</p>
<ol>
<li>尋找符合條件的字串</li>
<li>取代符合條件的字串</li>
<li>驗證使用者輸入欄位</li>
</ol>
<p>舉個簡單的例子：「如何判斷某段資料內，是否包含字元 <code>H</code>？」</p>
<p>可能就有以下三種解法：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">'Hello World'</span><span class="token punctuation">;</span>

<span class="token comment">// 法一：跑迴圈</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> str<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">'H'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span> 
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// 法二：使用 indexOf</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'H'</span><span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// 法三：正則表達式</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span><span class="token string">'H'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="How-to-use"><a href="#How-to-use" class="headerlink" title="How to use?"></a>How to use?</h2><p>撰寫正規表達式，可透過以下兩種方式：</p>
<ul>
<li>正規表達式字面值（literal）：使用兩個斜線 <code>/ /</code><ul>
<li>在 script 載入時被編譯，效能較佳</li>
</ul>
</li>
</ul>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> reStr <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">abc</span><span class="token regex-delimiter">/</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ul>
<li>建構式：直接 new 一個 RegExp 物件 <code>new RegExp()</code><ul>
<li>適合需動態產生 pattern 時使用</li>
</ul>
</li>
</ul>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> reStr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span><span class="token string">'abc'</span><span class="token punctuation">)</span>       <span class="token comment">// 查詢第一次匹配項目</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h2 id="特殊字元"><a href="#特殊字元" class="headerlink" title="特殊字元"></a>特殊字元</h2><p>在正規表達式中，某些特殊字元或符號屬於保留字：</p>
<p><img src="https://i.imgur.com/CIlAXQ8.png"></p>
<p>以下為使用範例：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> str <span class="token operator">=</span> <span class="token string">'The History of Hello World History'</span>

str<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">History</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span>    <span class="token comment">// ['History', index: 4, ...</span>
<span class="token comment">// ^：匹配輸入的開頭</span>
str<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^History</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span>   <span class="token comment">// null</span>
<span class="token comment">// $：匹配輸入的結尾</span>
str<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">History$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span>   <span class="token comment">// ['History', index: 27...</span>

<span class="token comment">// 使用反斜線 '\' 來跳脫特殊字元</span>
<span class="token keyword">const</span> reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\$6</span><span class="token regex-delimiter">/</span></span>
reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'$666'</span><span class="token punctuation">)</span>         <span class="token comment">// ture</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="匹配次數：-、-、-、"><a href="#匹配次數：-、-、-、" class="headerlink" title="匹配次數：*、+、?、{}"></a>匹配次數：<code>*</code>、<code>+</code>、<code>?</code>、<code>&#123;&#125;</code></h3><p>預設情況下，一個字元只會匹配一次，搭配 <code>*</code>、<code>+</code>、<code>?</code>、<code>&#123;&#125;</code> 字元可指定匹配次數：</p>
<ul>
<li><code>*</code>：任意次數，等同於 <code>&#123;0,&#125;</code></li>
<li><code>+</code>：至少一次（後面要跟著），等同於 <code>&#123;1,&#125;</code></li>
<li><code>?</code>：零或一次（有或沒有），等同於 <code>&#123;0,1&#125;</code></li>
<li><code>&#123;m&#125;</code>：m 次</li>
<li><code>&#123;m, n&#125;</code>：從 m 到 n 次</li>
</ul>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> str <span class="token operator">=</span> <span class="token string">'banana'</span>

<span class="token keyword">const</span> regex <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">ban</span><span class="token regex-delimiter">/</span></span>       <span class="token comment">// 符合 ban</span>
<span class="token keyword">const</span> regex <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">ba*n</span><span class="token regex-delimiter">/</span></span>      <span class="token comment">// ba, ban, baaan 均符合</span>
<span class="token keyword">const</span> regex <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">k?a</span><span class="token regex-delimiter">/</span></span>       <span class="token comment">// k 可有可無</span>
<span class="token keyword">const</span> regex <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">a+n</span><span class="token regex-delimiter">/</span></span>       <span class="token comment">// 必須包含 an</span>
<span class="token keyword">const</span> regex <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">an&#123;2&#125;</span><span class="token regex-delimiter">/</span></span>     <span class="token comment">// an 要包含 2 次</span>
<span class="token keyword">const</span> regex <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">an&#123;2,4&#125;</span><span class="token regex-delimiter">/</span></span>   <span class="token comment">// an 介於 2 到 4 次</span>
<span class="token keyword">const</span> regex <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">an&#123;2,&#125;</span><span class="token regex-delimiter">/</span></span>    <span class="token comment">// 2 次以上 an 均符合</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="標記-Flag：i、g、m"><a href="#標記-Flag：i、g、m" class="headerlink" title="標記 Flag：i、g、m"></a>標記 Flag：<code>i</code>、<code>g</code>、<code>m</code></h3><p>而 <code>i</code>、<code>g</code>、<code>m</code> 這類標記（flag），不會寫在正則表達式裡，格式與範例如下：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">/</span>pattern<span class="token operator">/</span>flags

 <span class="token keyword">let</span> reStr <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">abc</span><span class="token regex-delimiter">/</span><span class="token regex-flags">i</span></span>                   <span class="token comment">// ignore：不區分大小寫</span>
 <span class="token keyword">let</span> reStr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span><span class="token string">'abc'</span><span class="token punctuation">,</span> <span class="token string">'g'</span><span class="token punctuation">)</span>   <span class="token comment">// global：全局匹配   </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>可參考下圖，在 <span class="exturl" data-url="aHR0cHM6Ly9yZWdleHIuY29tLw==">Regexr<i class="fa fa-external-link-alt"></i></span> 網站的測試結果：</p>
<p><img src="https://i.imgur.com/VKVMHff.png"></p>
<br>

<h2 id="常用語法"><a href="#常用語法" class="headerlink" title="常用語法"></a>常用語法</h2><p>在 JavaScript 中，常與 RegExp 物件搭配使用的函式如下：</p>
<ul>
<li>檢測是否包含指定字串：<code>test()</code>、<code>search()</code></li>
<li>尋找並回傳指定字串：<code>exec()</code>、<code>match()</code></li>
<li>取代指定字串：<code>replace()</code></li>
</ul>
<h3 id="RegExp-prototype-test-：檢測字串是否包含，回傳-true-false"><a href="#RegExp-prototype-test-：檢測字串是否包含，回傳-true-false" class="headerlink" title="RegExp.prototype.test()：檢測字串是否包含，回傳 true/false"></a><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvemgtQ04vZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvUmVnRXhwL3Rlc3Q=">RegExp.prototype.test()<i class="fa fa-external-link-alt"></i></span>：檢測字串是否包含，回傳 true/false</h3><ul>
<li>類似 String.prototype.search() 方法，差別在於回傳值不同</li>
</ul>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> paragraph <span class="token operator">=</span> <span class="token string">'Hello World'</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> regex1 <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^He</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">;</span>
<span class="token keyword">const</span> regex2 <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">Woooo</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>regex1<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>paragraph<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment">// true</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>regex2<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>paragraph<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment">// false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="String-prototype-search-：檢測字串是否包含，有的話回傳-index，否則回傳-1"><a href="#String-prototype-search-：檢測字串是否包含，有的話回傳-index，否則回傳-1" class="headerlink" title="String.prototype.search()：檢測字串是否包含，有的話回傳 index，否則回傳 -1"></a><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvemgtQ04vZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvU3RyaW5nL3NlYXJjaA==">String.prototype.search()<i class="fa fa-external-link-alt"></i></span>：檢測字串是否包含，有的話回傳 index，否則回傳 -1</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> paragraph <span class="token operator">=</span> <span class="token string">'Hello World'</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> regex1 <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^He</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">;</span>
<span class="token keyword">const</span> regex2 <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">Woooo</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>paragraph<span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span>regex1<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment">// 0</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>paragraph<span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span>regex2<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment">// -1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="RegExp-prototype-exec-：尋找並取出內容，有的話以陣列回傳，否則回傳-null"><a href="#RegExp-prototype-exec-：尋找並取出內容，有的話以陣列回傳，否則回傳-null" class="headerlink" title="RegExp.prototype.exec()：尋找並取出內容，有的話以陣列回傳，否則回傳 null"></a><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvemgtQ04vZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvUmVnRXhwL2V4ZWM=">RegExp.prototype.exec()<i class="fa fa-external-link-alt"></i></span>：尋找並取出內容，有的話以陣列回傳，否則回傳 null</h3><ul>
<li>類似 String.prototype.match() 方法，差別在於「全域性匹配」時結果不同</li>
</ul>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> paragraph <span class="token operator">=</span> <span class="token string">'Hello, I am fine. Thank you.'</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> regex <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[A-Z]</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>
<span class="token keyword">const</span> globalReg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[A-Z]</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>regex<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>paragraph<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">// ["H"]</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>globalReg<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>paragraph<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// ["H"]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>


<h3 id="String-prototype-match-：尋找並取出內容，有的話以陣列回傳，否則回傳-null"><a href="#String-prototype-match-：尋找並取出內容，有的話以陣列回傳，否則回傳-null" class="headerlink" title="String.prototype.match()：尋找並取出內容，有的話以陣列回傳，否則回傳 null"></a><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvemgtQ04vZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvU3RyaW5nL21hdGNo">String.prototype.match()<i class="fa fa-external-link-alt"></i></span>：尋找並取出內容，有的話以陣列回傳，否則回傳 null</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> paragraph <span class="token operator">=</span> <span class="token string">'Hello, I am fine. Thank you.'</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> regex <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[A-Z]</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>
<span class="token keyword">const</span> globalReg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[A-Z]</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>paragraph<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>regex<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// ["H"]</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>paragraph<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>globalReg<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// ["H", "I", "T"]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="String-prototype-replace-：尋找並取代字串中匹配的部分"><a href="#String-prototype-replace-：尋找並取代字串中匹配的部分" class="headerlink" title="String.prototype.replace()：尋找並取代字串中匹配的部分"></a><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvemgtQ04vZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvU3RyaW5nL3JlcGxhY2U=">String.prototype.replace()<i class="fa fa-external-link-alt"></i></span>：尋找並取代字串中匹配的部分</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> str <span class="token operator">=</span> <span class="token string">'banana'</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">na</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token string">'NA'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// baNAna</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">n.</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token string">'NA'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// baNAna  '.' 代表任意字元</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">na</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">'NA'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// baNANA</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="常用匹配規則"><a href="#常用匹配規則" class="headerlink" title="常用匹配規則"></a>常用匹配規則</h2><p>詳細規則可參考這篇：<span class="exturl" data-url="aHR0cHM6Ly93d3cuaXRyZWFkMDEuY29tL3N0dWR5L3JlZ2V4cC1ydWxlLmh0bWw=">正則表示式 – 匹配規則<i class="fa fa-external-link-alt"></i></span></p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">[</span>a<span class="token operator">-</span>z<span class="token punctuation">]</span>           <span class="token comment">// 匹配所有的小寫字母 </span>
<span class="token punctuation">[</span><span class="token constant">A</span><span class="token operator">-</span><span class="token constant">Z</span><span class="token punctuation">]</span>           <span class="token comment">// 匹配所有的大寫字母 </span>
<span class="token punctuation">[</span>a<span class="token operator">-</span>zA<span class="token operator">-</span><span class="token constant">Z</span><span class="token punctuation">]</span>        <span class="token comment">// 匹配所有的字母 </span>
<span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span>           <span class="token comment">// 匹配所有的數字 </span>
<span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">9</span>\<span class="token punctuation">.</span>\<span class="token operator">-</span><span class="token punctuation">]</span>       <span class="token comment">// 匹配所有的數字，句號和減號 </span>

<span class="token operator">^</span><span class="token punctuation">[</span>a<span class="token operator">-</span>z<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span>$    <span class="token comment">// 匹配一個開頭為小寫字母，和一位數字組成的字串：e7</span>
<span class="token operator">^</span><span class="token punctuation">[</span><span class="token constant">A</span><span class="token operator">-</span><span class="token constant">Z</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token number">9</span><span class="token punctuation">&#125;</span>  <span class="token comment">// 身分證字號(大寫英文 + 9 位數字)：A123456789</span>
<span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token number">10</span><span class="token punctuation">&#125;</span>       <span class="token comment">// 手機號碼(10 位數字)：0912345678</span>
<span class="token operator">/</span>\d<span class="token punctuation">&#123;</span><span class="token number">6</span><span class="token punctuation">&#125;</span><span class="token operator">/</span>         <span class="token comment">// 匹配 6 次任意數字：123456</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvemgtVFcvZG9jcy9XZWIvSmF2YVNjcmlwdC9HdWlkZS9SZWd1bGFyX0V4cHJlc3Npb25z">MDN - 正規表達式- JavaScript<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly81eHJ1YnkudHcvcG9zdHMvMTVtaW4tcmVndWxhci1leHByZXNzaW9u">十五分鐘認識正規表達式，解決所有文字難題<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9tb29qaW5nLm1lZGl1bS5jb20vamF2YXNjcmlwdC0lRTUlODglOUQlRTYlOEUlQTJyZWdleC0lRTYlQUQlQTMlRTglQTYlOEYlRTglQTElQTglRTklODElOTQlRTUlQkMlOEYtMWRhMmY0ZDk0Nzk1">[Javascript] 初探Regex 正規表達式<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9wamNoZW5kZXIuZGV2L2phdmFzY3JpcHQvanMtcmVnZXgv">[JS] 正則表達式（Regular Expression, regex<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9yZWdleHIuY29tLw==">測試網站：Regexr<i class="fa fa-external-link-alt"></i></span></li>
</ul>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>Regex</tag>
      </tags>
  </entry>
  <entry>
    <title>[INT101] 求職入門：準備方向 &amp; 面試常見問題</title>
    <url>/INT101-interview/</url>
    <content><![CDATA[<blockquote>
<p>課程連結：<span class="exturl" data-url="aHR0cHM6Ly9saWRlbXkuY29tL3AvaW50MTAx">[INT101] 求職入門<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
<h2 id="求職準備：一般篇"><a href="#求職準備：一般篇" class="headerlink" title="求職準備：一般篇"></a>求職準備：一般篇</h2><h3 id="調整求職心態：拋開完美主義，邊試邊改進"><a href="#調整求職心態：拋開完美主義，邊試邊改進" class="headerlink" title="調整求職心態：拋開完美主義，邊試邊改進"></a>調整求職心態：拋開完美主義，邊試邊改進</h3><p>在開始求職之前，必須先建立求職心態：「不可能有準備好的一天」。就像我們以前在準備考試的時候，也不可能有準備完所有考試範圍的一天。</p>
<p>而在面對求職，我們要準備的，並不是達到完美的一百分，而是該如何達到想進入的公司，所需要的「及格分數」。</p>
<span id="more"></span>

<h3 id="什麼程度可以去求職？"><a href="#什麼程度可以去求職？" class="headerlink" title="什麼程度可以去求職？"></a>什麼程度可以去求職？</h3><p>不如應該說「什麼時候去求職比較穩？」。</p>
<p><a href="https://heidiliu2020.github.io/callback-event-loop/">《十六週的 JavaScript 核心與物件導向》</a>和<a href="https://heidiliu2020.github.io/categories/Front-End/React/">《二十一週開始的 React》</a>是重點部分，也是面試常問的考題。是重點部分，也是面試常問的考題。</p>
<h3 id="面試順序"><a href="#面試順序" class="headerlink" title="面試順序"></a>面試順序</h3><p>大致可分為三個階段：</p>
<ul>
<li>先投沒有很想去的練功（2-3 間即可）</li>
<li>再投想去的（30-40 間）</li>
<li>還是沒有就靠海投！沒有經驗的菜鳥必須靠數量取得入場票的機會</li>
</ul>
<h3 id="準備流程"><a href="#準備流程" class="headerlink" title="準備流程"></a>準備流程</h3><ul>
<li>花兩三天準備第一版履歷，投 20 - 30 間</li>
<li>準備面試題目，一邊改第二版履歷，投面試</li>
<li>面試前可以先上 lidemy 學習系統 / PTT / 面試趣等平台，查看有沒有人投過類似職缺</li>
<li>以兩個禮拜為單位，進行一輪檢討</li>
<li>目標是在兩個月內找到工作，時間拉太長容易後繼無力</li>
</ul>
<h2 id="求職準備：面試篇"><a href="#求職準備：面試篇" class="headerlink" title="求職準備：面試篇"></a>求職準備：面試篇</h2><p>面試流程大致如下：</p>
<ul>
<li>自我介紹<ul>
<li>拿到名片 → 把名片放在桌上，就不會忘記面試官是誰</li>
</ul>
</li>
<li>針對你的背景提問<ul>
<li>前面的自我介紹不需要太詳細，適度留點空白</li>
</ul>
</li>
<li>技術問題<ul>
<li>遇到不會的就說不會，或嘗試引導到自己知道的部分</li>
</ul>
</li>
<li>反問問題<ul>
<li>公司福利、公司架構、使用技術</li>
</ul>
</li>
</ul>
<blockquote>
<p>註：可以帶電腦 DEMO 作品，但要記得先把頁面開好，確認是否有網路，才不會當場耗太多時間。</p>
</blockquote>
<h3 id="Part1-自我介紹"><a href="#Part1-自我介紹" class="headerlink" title="Part1. 自我介紹"></a>Part1. 自我介紹</h3><ul>
<li>準備 2~3 分鐘</li>
<li>不要講一堆無關的</li>
<li>不要太長</li>
<li>可以提到轉職的理由</li>
</ul>
<h3 id="Part2-針對你的背景提問"><a href="#Part2-針對你的背景提問" class="headerlink" title="Part2. 針對你的背景提問"></a>Part2. 針對你的背景提問</h3><ul>
<li>為什麼想轉職？</li>
</ul>
<pre class="line-numbers language-none"><code class="language-none">在過去的工作經驗中，其實從事的大多是取代性較高的工作。
希望未來能夠結合過去所學知識，並擴展自己的專業技能，因而開始學習程式語言，也從最初的線上自學，到成為程式導師實驗計畫的學生，逐漸確定自己想要往這個領域進一步發展。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<ul>
<li>你是非本科的，覺得跟本科會有差嗎？</li>
</ul>
<pre class="line-numbers language-none"><code class="language-none">和本科系的最大差別，我認為是能透過「興趣」來激發學習動力，也透過自學過程，培養找出問題答案的能力。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ul>
<li>為什麼選 Lidemy 這個計畫？</li>
</ul>
<pre class="line-numbers language-none"><code class="language-none">在最初學習程式時，其實自己也有找一些像是 Hahow 或六角等線上課程。
但總覺得哪裡不夠，後來剛好看到這個計畫，發現是為期半年的前後端課程，課綱非常扎實，也能夠藉由這個機會讓自己接觸到後端，確定自己未來發展方向。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<ul>
<li>計畫學了哪些東西？</li>
</ul>
<pre class="line-numbers language-none"><code class="language-none">在課程最開始，是先從程式基礎打起，學習網路知識，以及如何使用 Git 版本控制。
接著學習網站前後端開發，如何 HTML, CSS, JavaScript，也學習如何操作 MySQL 資料庫，到中後期就是更深入探究原理，像是 JavaScript 物件導向以及 ES6 語法等等。
到課程最後，是學習現代框架，使用 React 和 Express 進行專案開發。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<ul>
<li>學過哪些印象最深刻？</li>
</ul>
<pre class="line-numbers language-none"><code class="language-none">第一次卡關是在串接 API 的時候，那時不知道為什麼，沒辦法理解什麼是同步非同步，為什麼要用 callback 之類的。
直到後期使用頻率增高，才從做中學，理解有時概念不一定要在一開始就理解到 100%，透過實作來理解也是一種方式。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<ul>
<li>卡關怎麼解決？</li>
</ul>
<pre class="line-numbers language-none"><code class="language-none">通常會先重新複習當周課程，接著會找官方文件或直接上網 Google，像是 Stack Overflow 等論壇，透過關鍵字尋找答案。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ul>
<li>平常都怎麼學習的？</li>
</ul>
<pre class="line-numbers language-none"><code class="language-none">試著讓自己處於有 input 和 output 的狀態，除了吸收每周所學，也會試著用自己的話去解釋觀念，確認自己是否有充份吸收。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h3 id="Part3-技術問題常考題"><a href="#Part3-技術問題常考題" class="headerlink" title="Part3. 技術問題常考題"></a>Part3. 技術問題常考題</h3><p>可參考 GitHub 上，有各種大神整理好的試題合集：</p>
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2g1YnAvRnJvbnQtZW5kLURldmVsb3Blci1JbnRlcnZpZXctUXVlc3Rpb25z">h5bp/Front-end-Developer-Interview-Questions<i class="fa fa-external-link-alt"></i></span>：前端工程師面試問題集</li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2NvZmZlMTg5MS9mcm9udGVuZC1oYXJkLW1vZGUtaW50ZXJ2aWV3">coffe1891/frontend-hard-mode-interview<i class="fa fa-external-link-alt"></i></span>：更深入探討前端技術</li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3lpZmVpa29uZy9yZXZlcnNlLWludGVydmlldy16aA==">yifeikong/reverse-interview-zh<i class="fa fa-external-link-alt"></i></span>：如何反問面試官問題</li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0RvcHBsZXJIUS9hd2Vzb21lLWludGVydmlldy1xdWVzdGlvbnM=">DopplerHQ/awesome-interview-questions<i class="fa fa-external-link-alt"></i></span>：包含前後端、不同框架技術的問題合集</li>
</ul>
<h4 id="準備方向"><a href="#準備方向" class="headerlink" title="準備方向"></a>準備方向</h4><ol>
<li>程式導師計畫各週簡答題</li>
<li>ALG101：第五～七週</li>
<li>JS201 進階 JS：面試大集合</li>
<li>PTT / 面試趣等平台上的面試經驗分享</li>
</ol>
<h4 id="基本題"><a href="#基本題" class="headerlink" title="基本題"></a>基本題</h4><ul>
<li>什麼是前端？後端？</li>
</ul>
<h4 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h4><ul>
<li>怎麼做垂直水平置中<ul>
<li>Flexbox、top 50%; left 50%;、transform -50% -50%</li>
</ul>
</li>
<li>position 的各個屬性差別<ul>
<li>static, absolute, relative, fixed, sticky </li>
<li>參考：<span class="exturl" data-url="aHR0cHM6Ly96aC10dy5sZWFybmxheW91dC5jb20vcG9zaXRpb24uaHRtbA==">https://zh-tw.learnlayout.com/position.html<i class="fa fa-external-link-alt"></i></span></li>
</ul>
</li>
<li>block, inline-block, inline 差別</li>
<li>CSS 優先層級：!important, id, class, tag 排序</li>
<li>display: none; 跟 visibility: hidden; 的差別？</li>
<li>請解釋 box model<ul>
<li>margin, padding, border, width</li>
</ul>
</li>
</ul>
<h4 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h4><ul>
<li>hoisting</li>
<li>closure</li>
<li>event loop</li>
<li>this 的值</li>
<li>cookies, sessionStorage, locakStorage 的區別</li>
<li>捕獲與冒泡</li>
<li>跟 call by reference 有關的題目</li>
<li>DOM 跟 BOM 是什麼<ul>
<li>document object model</li>
<li>browser object model 瀏覽器</li>
</ul>
</li>
</ul>
<h4 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h4><ul>
<li>GET 與 POST 的差別</li>
<li>CORS 怎麼避免</li>
<li>SQL Injection 是什麼</li>
<li>XSS 是什麼</li>
<li>restful 是什麼？慣例是什麼？</li>
<li>cookie 與 session 的差別<ul>
<li>cookie 是 <code>Browser</code> 用來存資料的；session 則是 <code>Server</code> 用來存資料的</li>
</ul>
</li>
</ul>
<h4 id="React"><a href="#React" class="headerlink" title="React"></a>React</h4><ul>
<li>function component 和 class component 差別是？</li>
<li>control 和 uncontrol 的差別是？</li>
<li>有哪些 Hooks</li>
<li>什麼是 HOC？</li>
<li>什麼是 Redux？</li>
<li>怎麼進行 promotion（優化效能）？<ul>
<li>memo、useMemo、useCallback、component update</li>
</ul>
</li>
</ul>
<h4 id="程式考題"><a href="#程式考題" class="headerlink" title="程式考題"></a>程式考題</h4><ol>
<li>費氏數列：遞迴解、迴圈解</li>
<li>two sum：Leetcode 經典題</li>
<li>其他複習 alg101</li>
</ol>
<h4 id="注意答題重點！"><a href="#注意答題重點！" class="headerlink" title="注意答題重點！"></a>注意答題重點！</h4><ul>
<li>不要不懂裝懂<ul>
<li>例如：雖然我不太確定，但目前我有學到 XXX 概念</li>
</ul>
</li>
<li>就算不會 A，也可以講跟 A 類似的 B，注意不要扯遠了<ul>
<li>例如：我記得這兩個是和儲存資訊有關，但是兩者差別我不太清楚，不過我知道除了這兩個東西以外，還可以用 cookie 在瀏覽器上儲存資訊</li>
</ul>
</li>
<li>有把握的題目請好好發揮</li>
</ul>
<h4 id="白板題答題重點"><a href="#白板題答題重點" class="headerlink" title="白板題答題重點"></a>白板題答題重點</h4><ul>
<li>先問好輸出入範圍跟格式<ul>
<li>輸入的數字都是正整數嗎？輸入的 n 範圍是多少？</li>
</ul>
</li>
<li>先想解法，不要先寫程式碼</li>
<li>確認想得出來，可以先講思考流程，然後再寫程式碼</li>
<li>更好的是邊寫程式碼邊講解，需要平常練習</li>
<li>就算是最慢的解答也可以，先求有再求好</li>
</ul>
<h3 id="Part4-反問問題"><a href="#Part4-反問問題" class="headerlink" title="Part4. 反問問題"></a>Part4. 反問問題</h3><p>推薦文章：<span class="exturl" data-url="aHR0cHM6Ly93d3cucHR0LmNjL2Jicy9Tb2Z0X0pvYi9NLjE1Mzk1MDMyNzIuQS4yQjMuaHRtbA==">[請益] 你還有什麼問題想問？<i class="fa fa-external-link-alt"></i></span></p>
<ul>
<li>這個缺是離職補人還是擴編</li>
<li>公司的技術棧是什麼</li>
<li>技術團隊人數</li>
<li>公司的產品開發流程（scrum, agile）</li>
<li>技術開發流程（git flow）</li>
<li>協作工具（slack, teams）</li>
<li>我還有哪些地方需要加強的</li>
</ul>
<p>主要問的方向分為三部分：</p>
<ul>
<li>公司相關：福利、績效考核、升遷、公司文化</li>
<li>團隊相關：如何協作、如何分工、有哪些角色</li>
<li>技術相關：用哪些技術、工作流程</li>
</ul>
<h4 id="薪水怎麼開？"><a href="#薪水怎麼開？" class="headerlink" title="薪水怎麼開？"></a>薪水怎麼開？</h4><ul>
<li>先看公司有沒有公開範圍，有的話開在範圍內</li>
<li>課程跟完：45k~50k</li>
<li>沒跟完：40k~45k</li>
<li>薪水是可以調整的，拿到 offer，下一間就往上開</li>
<li>第一間重要，但也沒有那麼重要</li>
</ul>
<h2 id="重要！寫面試心得-amp-After-Action-Review"><a href="#重要！寫面試心得-amp-After-Action-Review" class="headerlink" title="重要！寫面試心得 &amp; After Action Review"></a>重要！寫面試心得 &amp; After Action Review</h2><ul>
<li>標題：面試 OOXX</li>
<li>開始之前你覺得應該是怎樣</li>
<li>開始後實際是怎樣</li>
<li>下次如何改進</li>
<li>面試內容<ul>
<li>條列式記錄問了哪些問題</li>
<li>一定要當天寫下來，好的壞的都留下紀錄供日後參考</li>
</ul>
</li>
<li>有問題都可以找 Huli、助教或同學討論！！</li>
</ul>
<h2 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h2><p>其實這篇距離最開始已經過一年多了，直到去年五月轉職時才又打開，發現還是有不少受用的觀念，相信要找下一份工作時，還是會再打開這篇來看吧XD</p>
<p>記得在面試過程有很深的體悟，那就是面試完只要沒有馬上寫心得，很快就會忘得一乾二凈，所以不管結果是好是壞，都還是要強迫自己做紀錄，當作留念也未嘗不可，畢竟都花費時間心力去準備了。</p>
<p>此外，一直也有想要整理一份屬於自己的前端面試答題合集，只是遲遲未動工，就把這件事訂為今年的待辦事項，繼續朝目標邁進吧！</p>
]]></content>
      <categories>
        <category>lidemy</category>
      </categories>
      <tags>
        <tag>lidemy</tag>
        <tag>Interview</tag>
      </tags>
  </entry>
  <entry>
    <title>【學習筆記】 關於 iOS Safari 的那些坑：禁止選取 &amp; 縮放設定</title>
    <url>/safari-pinch-and-double-tap/</url>
    <content><![CDATA[<p><img src="https://i.imgur.com/BjhUbsU.png"></p>
<p>這次專案開發是針對 iOS 系統，需要解決畫面縮放的問題，有些關鍵字來回搜尋好多遍，卻還是容易搞混，於是乎乾脆記錄下來，日後如果遇到這類型問題，也會直接更新在這篇。</p>
<span id="more"></span>

<h2 id="前言：進入-meta-元宇宙"><a href="#前言：進入-meta-元宇宙" class="headerlink" title="前言：進入 meta 元宇宙"></a>前言：進入 meta 元宇宙</h2><p><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvemgtQ04vZG9jcy9XZWIvSFRNTC9FbGVtZW50L21ldGEvbmFtZQ==">meta tag<i class="fa fa-external-link-alt"></i></span> 是網頁 HTML 架構中的一種描述標籤，提供網頁的內容資訊給瀏覽器或搜尋引擎，語法如下：</p>
<pre class="line-numbers language-htmlmixed" data-language="htmlmixed"><code class="language-htmlmixed">&lt;meta name&#x3D;&quot;參數&quot; content&#x3D;&quot;具體參數值&quot;&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>在 android 系統與 iOS 10 以前的行動裝置，透過設定 HTML meta tag 的 viewport（可視區域），我們能控制畫面顯示的寬高、縮放比例以及是否允許縮放。</p>
<h2 id="Zoom-in-out-on-mobile-device"><a href="#Zoom-in-out-on-mobile-device" class="headerlink" title="Zoom in/out on mobile device"></a>Zoom in/out on mobile device</h2><p>一般而言，在行動裝置的瀏覽器中，使用者可透過以下手勢來達到縮放頁面（zoom-in/zoom-out）的效果：</p>
<ul>
<li><strong>pinch</strong>：兩指縮放</li>
<li><strong>double-tap</strong>：雙擊縮放</li>
</ul>
<h3 id="user-scalable-no：禁止縮放畫面"><a href="#user-scalable-no：禁止縮放畫面" class="headerlink" title="user-scalable=no：禁止縮放畫面"></a><code>user-scalable=no</code>：禁止縮放畫面</h3><p>若在網頁的 <code>&lt;head&gt;</code> 區塊加入以下屬性，即可達到「禁止使用者縮放畫面」的效果：</p>
<pre class="line-numbers language-htmlmixed" data-language="htmlmixed"><code class="language-htmlmixed">&lt;meta name&#x3D;&quot;viewport&quot; content&#x3D;&quot;width&#x3D;device-width, initial-scale&#x3D;1, user-scalable&#x3D;no&quot;&gt;

&#x2F;&#x2F; 等同於
&lt;meta name&#x3D;&quot;viewport&quot; content&#x3D;&quot;width&#x3D;device-width, initial-scale&#x3D;1, minimum-scale&#x3D;1, maximum-scale&#x3D;1&quot;&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>上述 content 屬性說明：</p>
<ul>
<li><code>width=device-width</code>：設定瀏覽器頁面的寬度同裝置的寬度，即自動符合不同手機螢幕預設的最佳解析度</li>
<li><code>initial-scale=1.0</code>：設定畫面初始縮放比例為 100%，即不放大也不縮小</li>
<li><code>minimum-scale=1, maximum-scale=1</code>：設定畫面最小和最大的縮放比例，均為 1 代表無法縮放</li>
<li><code>user-scalable=0</code>：不允許使用者改變縮放比例</li>
</ul>
<p>但到 iOS 10 之後的版本，為了提高 Safari 網頁的輔助功能，便忽略 meta 設定中的 <code>user-scalable=no</code> 屬性，使得「不允許使用者改變縮放比例」這項限制失效，以下是<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYXBwbGUuY29tL2xpYnJhcnkvYXJjaGl2ZS9yZWxlYXNlbm90ZXMvR2VuZXJhbC9XaGF0c05ld0luU2FmYXJpL0FydGljbGVzL1NhZmFyaV8xMF8wLmh0bWw=">官網原文<i class="fa fa-external-link-alt"></i></span>：</p>
<blockquote>
<p>To improve accessibility on websites in Safari, users can now pinch-to-zoom even when a website sets user-scalable=no in the viewport.</p>
<p>為了提高 Safari 網站中的輔助功能，即使在網站中的 viewport 設定 user-scalable=no，用戶仍可用手指進行縮放。</p>
</blockquote>
<p>查了資料發現 meta viewport 特性原來最早就是由 Apple 公司引入，旨在解決不同行動裝置畫面顯示的問題；到現在選擇忽略 <code>user-scalable=no</code>，雖然本意是好的，讓使用者能夠自由縮放畫面至合適的大小，卻也因此失去開發網頁的彈性。</p>
<p>但山不轉人轉，我們還是能透過其他語法來達到想要的結果，以下舉幾個範例：</p>
<ul>
<li>CSS 屬性 <code>touch-action: manipulation</code>：禁止 double-tap</li>
<li>監聽 JS 事件 <code>touchstart/touchend</code>：禁止 pinch &amp;  double-tap</li>
<li>監聽 JS 事件<code>gesturestart</code>：禁止 pinch</li>
</ul>
<h3 id="CSS-解法：以-touch-action-manipulation-禁止-double-tap"><a href="#CSS-解法：以-touch-action-manipulation-禁止-double-tap" class="headerlink" title="CSS 解法：以 touch-action: manipulation 禁止 double-tap"></a><strong><strong>CSS</strong></strong> 解法：以 <strong><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvemgtQ04vZG9jcy9XZWIvQ1NTL3RvdWNoLWFjdGlvbg==">touch-action: manipulation<i class="fa fa-external-link-alt"></i></span> 禁止 double-tap</strong></h3><p>加上 <code>touch-action: manipulation</code> 屬性，讓元素只能使用滑動或兩指縮放，即忽略 double tap 手勢的縮放：</p>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">html, body</span> <span class="token punctuation">&#123;</span>
  <span class="token property">touch-action</span><span class="token punctuation">:</span> manipulation<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<h3 id="JS-解法：handle-touchstart-touchend-event"><a href="#JS-解法：handle-touchstart-touchend-event" class="headerlink" title="JS 解法：handle touchstart/touchend event"></a><strong><strong>JS</strong></strong> 解法：<strong>handle touchstart/touchend event</strong></h3><p>監聽這兩個 event 原理如下：</p>
<ul>
<li>touchstart：透過偵測 <code>e.touches.length</code>（觸控點數目）handle pinch 手勢</li>
</ul>
<pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx">document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'touchstart'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>event<span class="token punctuation">.</span>touches <span class="token operator">&amp;&amp;</span> event<span class="token punctuation">.</span>touches<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 禁止多指觸控</span>
     event<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> passive<span class="token operator">:</span> <span class="token boolean">false</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>由於 iOS 11.1 版本的變動，預設 <code>passive: true</code> 以提高使用性能，但也因此造成 <code>e.preventDefault()</code> 語法失效。因此需加上 <code>&#123; passive: false &#125;</code> 屬性，主動告訴瀏覽器這裡的監聽將使用 <code>event.preventDefault()</code>，即可阻止事件後面的動作。</p>
<p>可參考這篇討論：<a href="https://stackoverflow.com/questions/49500339/cant-prevent-touchmove-from-scrolling-window-on-ios">scroll - Can’t prevent <code>touchmove</code> from scrolling window on iOS - Stack Overflow</a></p>
<ul>
<li>touchend：透過偵測點擊時間差 handle double-tap 手勢</li>
</ul>
<pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">let</span> lastTouchEndTime <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'touchend'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">const</span> now <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>now <span class="token operator">-</span> lastTouchEndTime<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">300</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 偵測時間差是否小於 300ms</span>
    event<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  lastTouchEndTime <span class="token operator">=</span> now<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>之所以 <code>touchend</code> 會取 <code>300ms</code> 時間差，是因為每一次在使用者 touch 螢幕時，都會產生 300ms 的延遲去監聽是否觸發 double-tap。在兩次 touch 之間的時間差小於 300ms 的情況下執行 <code>event.preventDefault()</code>，即可取消 double-tap 動作所觸發的縮放效果。</p>
<h3 id="JS-解法：gesturestart-event-兩指以上事件觸發"><a href="#JS-解法：gesturestart-event-兩指以上事件觸發" class="headerlink" title="JS 解法：gesturestart event 兩指以上事件觸發"></a>JS 解法：<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL0VsZW1lbnQvZ2VzdHVyZXN0YXJ0X2V2ZW50">gesturestart<i class="fa fa-external-link-alt"></i></span> event 兩指以上事件觸發</h3><p>可參考 MDN 文件 <span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL0VsZW1lbnQvZ2VzdHVyZXN0YXJ0X2V2ZW50">Element: gesturestart event - Web APIs | MDN (mozilla.org)<i class="fa fa-external-link-alt"></i></span>，和 touchEvent 類似，但僅適用於 iOS 系統。</p>
<p>gesturestart 會在兩指以上觸碰螢幕時觸發，即可忽略  pinch tap 手勢的兩指縮放：</p>
<pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token comment">// [Safari only] gesturestart event: multi finger gestures touching </span>
document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'gesturestart'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token comment">// 阻止兩指縮放畫面</span>
  event<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="其他想記錄的"><a href="#其他想記錄的" class="headerlink" title="其他想記錄的"></a>其他想記錄的</h2><h3 id="mouseEvent-vs-touchEvent-vs-gesturestart"><a href="#mouseEvent-vs-touchEvent-vs-gesturestart" class="headerlink" title="mouseEvent vs touchEvent vs gesturestart"></a>mouseEvent vs touchEvent vs gesturestart</h3><ul>
<li>mouseEvent 一次只能有一個觸擊點</li>
<li>touchEvent 支援多點觸控</li>
<li>gesturestart 兩指以上觸碰時觸發，僅 iOS 支援</li>
</ul>
<p><img src="https://i.imgur.com/IJ6LKrt.png"></p>
<h3 id="user-select-none：禁止區塊反白選取"><a href="#user-select-none：禁止區塊反白選取" class="headerlink" title="user-select: none：禁止區塊反白選取"></a><code>user-select: none</code>：<strong>禁止區塊反白選取</strong></h3><p>即雙點擊不會選取到文字區塊：</p>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">*</span> <span class="token punctuation">&#123;</span>
  <span class="token property">user-select</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>
  <span class="token property">-webkit-user-select</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span> <span class="token comment">/* Chrome Safari */</span>        
  <span class="token property">-moz-user-select</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>    <span class="token comment">/* Firefox */</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="小結"><a href="#小結" class="headerlink" title="小結"></a>小結</h2><p>如果被問到工作上曾遇過什麼樣的困難，除了溝通技巧，我想「跨平台開發」肯定能名列前茅。</p>
<p>畢竟光是不同作業系統（如：Windows、Mac、Android、iOS）、不同行動裝置（Pixel、Samsung、iPhone、iPad）、不同版本（Android 10-14、iOS 10-16.3），甚至是不同瀏覽器（Safari、Chrome、Firefox、Edge）等，都可能出現非預期的結果，有時不一定是程式碼有錯誤，而是版本不支援導致，必須仰賴多方測試，才能確定是否能夠兼容各個平台系統。</p>
<p>想當然耳，一名工程師哪可能同時擁有這麼多種裝置，要面面俱到尤其困難，更多的情況是「遇到問題再說」，或盡可能吸收前人的智慧，避免再踩到類似的坑。</p>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvNDM4OTkzMi9ob3ctZG8teW91LWRpc2FibGUtdmlld3BvcnQtem9vbWluZy1vbi1tb2JpbGUtc2FmYXJp">html - How do you disable viewport zooming on Mobile Safari? - Stack Overflow<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9tZWRpdW0uY29tL0BsaXR0bGVEb2cvJUU1JUE2JTgyJUU0JUJEJTk1JUU4JUE3JUEzJUU2JUIxJUJBLXVzZXItc2NhbGFibGUtbm8tJUU1JUIxJUFDJUU2JTgwJUE3JUU4JUEyJUFCaW9zLXNhZmFyaS1pZ25vcmUtZTZhMDUzMTA1MGJh">“user-scalable=no”屬性被iOS Safari ignore的解決方法 | by 狗狗 | Medium<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9tZWRpdW0uY29tL0BqYWNreTgxMDEyNC8lRTclQTYlODElRTYlQUQlQTItc2FmYXJpLSVFNCVCOCVBRC1kb3VibGUtdGFwLSVFNyU5QSU4NCVFNyVCOCVBRSVFNSVCMCU4RiVFNSU5MiU4QyVFNiU5NCVCRSVFNSVBNCVBNy02NjE4MDJmYTI3Y2I=">禁止Safari 中Double Tap 的縮小和放大. 在很多情況下 - Medium<i class="fa fa-external-link-alt"></i></span></li>
</ul>
]]></content>
      <categories>
        <category>Front-End</category>
      </categories>
      <tags>
        <tag>Front-End</tag>
        <tag>Safari</tag>
        <tag>iOS</tag>
      </tags>
  </entry>
  <entry>
    <title>【學習筆記】JavaScript 尋找字串的方法：includes/indexOf/search/match</title>
    <url>/search-string-in-javascript/</url>
    <content><![CDATA[<p><img src="https://i.imgur.com/nZfxv6r.jpg"></p>
<blockquote>
<p>Photo by <span class="exturl" data-url="aHR0cHM6Ly91bnNwbGFzaC5jb20vQHJvY2luYW50ZV8xMT91dG1fc291cmNlPXVuc3BsYXNoJnV0bV9tZWRpdW09cmVmZXJyYWwmdXRtX2NvbnRlbnQ9Y3JlZGl0Q29weVRleHQ=">Mick Haupt<i class="fa fa-external-link-alt"></i></span> on <span class="exturl" data-url="aHR0cHM6Ly91bnNwbGFzaC5jb20vcGhvdG9zL2VRMlo5YXk5V3dzP3V0bV9zb3VyY2U9dW5zcGxhc2gmdXRtX21lZGl1bT1yZWZlcnJhbCZ1dG1fY29udGVudD1jcmVkaXRDb3B5VGV4dA==">Unsplash<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
<p>在處理資料時，查找字串是一種常見的操作，JavaScript 提供不同的方法來搜索字串。其中，最常用的方法包括：search、indexOf、includes 和 match，能夠辨別字串裡是否有想要查找的文字：</p>
<ul>
<li>String.prototype.search( )</li>
<li>String.prototype.indexOf( )</li>
<li>String.prototype.match()</li>
<li>String.prototype.includes()</li>
</ul>
<p>接下來會比較這四種方法的不同之處，以及使用範例。</p>
<span id="more"></span>

<hr>
<h2 id="String-prototype-search-：檢測字串是否包含，有的話回傳-index，否則回傳-1"><a href="#String-prototype-search-：檢測字串是否包含，有的話回傳-index，否則回傳-1" class="headerlink" title="String.prototype.search( )：檢測字串是否包含，有的話回傳 index，否則回傳 -1"></a><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvU3RyaW5nL3NlYXJjaA==">String.prototype.search( )<i class="fa fa-external-link-alt"></i></span>：檢測字串是否包含，有的話回傳 index，否則回傳 -1</h2><ul>
<li>搜索指定字符串，並返回匹配字串第一個字的索引值</li>
<li>若找不到，則返回 -1</li>
<li>可支援正則表達式</li>
</ul>
<pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token function">search</span><span class="token punctuation">(</span>regexp<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<blockquote>
<p>關於正則表達式的用法，可參考這篇筆記：<a href="https://heidiliu2020.github.io/regex/">【學習筆記】JavaScript：Regex 正則表達式</a>。</p>
</blockquote>
<p>使用範例：</p>
<ul>
<li>字串符匹配</li>
</ul>
<pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">"Hello world!"</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> position <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span><span class="token string">"world"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>position<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 6</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>正則表達式匹配</li>
</ul>
<pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">"Say hello to Hello World!"</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> rule1 <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[A-Z]</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 符合大寫字母 A 到 Z</span>
<span class="token keyword">let</span> rule2 <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">Hello</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 符合 Hello</span>
<span class="token keyword">let</span> rule3 <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">Hello</span><span class="token regex-delimiter">/</span><span class="token regex-flags">i</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// i 代表不區分大小寫</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>rule1<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 0</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>rule2<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 13</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>rule3<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 4</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="String-prototype-indexOf-：檢測字串是否包含，有的話回傳-index，否則回傳-1"><a href="#String-prototype-indexOf-：檢測字串是否包含，有的話回傳-index，否則回傳-1" class="headerlink" title="String.prototype.indexOf()：檢測字串是否包含，有的話回傳 index，否則回傳 -1"></a><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvU3RyaW5nL2luZGV4T2Y=">String.prototype.indexOf()<i class="fa fa-external-link-alt"></i></span>：檢測字串是否包含，有的話回傳 index，否則回傳 -1</h2><ul>
<li>搜索指定字符串，並返回匹配字串第一個字的索引值</li>
<li>若沒有找到，則返回 -1</li>
<li>第二個參數 position 為選填屬性，代表從哪個 index 找起</li>
<li>與 search() 方法類似，差別在於 indexOf() 不支援正則表達式</li>
</ul>
<pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token function">indexOf</span><span class="token punctuation">(</span>searchString<span class="token punctuation">,</span> position<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>使用範例：</p>
<ul>
<li>找特定字符的 index</li>
</ul>
<pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">"Say hello to hello world!"</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> position1 <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> position2 <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> position3 <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">"Hello"</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> position4 <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">"zzz"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>position1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 4</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>position2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 13</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>position3<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// -1</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>position4<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// -1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="String-prototype-match-：尋找並取出內容，有的話以陣列回傳，否則回傳-null"><a href="#String-prototype-match-：尋找並取出內容，有的話以陣列回傳，否則回傳-null" class="headerlink" title="String.prototype.match()：尋找並取出內容，有的話以陣列回傳，否則回傳 null"></a><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvU3RyaW5nL21hdGNo">String.prototype.match()<i class="fa fa-external-link-alt"></i></span>：尋找並取出內容，有的話以陣列回傳，否則回傳 null</h2><ul>
<li>搜索指定字符串，並返回一個或多個與指定值匹配的數組</li>
<li>若找不到則返回 null</li>
<li>支援正則表達式</li>
</ul>
<pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx">string<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>searchvalue<span class="token punctuation">)</span>
string<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>regexp<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>使用範例：</p>
<ul>
<li>字符串匹配</li>
</ul>
<pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">"hello world"</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> result1 <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> result2 <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token string">"Hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result1<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// ['hello', index: 0, input: 'hello world', groups: undefined]</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result2<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// null</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>正規表達式匹配：需注意要加上 <code>g</code> 標誌，才會返回匹配的所有結果</li>
</ul>
<p>找指定字串：</p>
<pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">"Say hello to hello World!"</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> result1 <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">hello</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> result2 <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">hello</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result1<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// ['hello', index: 4, input: 'Say hello to hello World!', groups: undefined]</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result2<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// ['hello', 'hello']</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>找大寫字母：</p>
<pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx">
<span class="token keyword">const</span> paragraph <span class="token operator">=</span> <span class="token string">'Hello, I am fine. Thank you.'</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> regex <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[A-Z]</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>
<span class="token keyword">const</span> globalReg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[A-Z]</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>paragraph<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>regex<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// ['H', index: 0, input: 'Hello, I am fine. Thank you.', groups: undefined]</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>paragraph<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>globalReg<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// ["H", "I", "T"]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="String-prototype-includes-：判斷字串中是否包含指定字串"><a href="#String-prototype-includes-：判斷字串中是否包含指定字串" class="headerlink" title="String.prototype.includes()：判斷字串中是否包含指定字串"></a><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvemgtQ04vZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvU3RyaW5nL2luY2x1ZGVz">String.prototype.includes()<i class="fa fa-external-link-alt"></i></span>：判斷字串中是否包含指定字串</h2><ul>
<li>找到匹配字串返回 true；否則返回 flase</li>
<li>不支援正則表達式</li>
</ul>
<pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx">string<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>searchvalue<span class="token punctuation">,</span> start<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>使用範例：</p>
<pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">"Hello world!"</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> isPresent1 <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">"world"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> isPresent2 <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">"zzz"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>isPresent1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>isPresent2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="小結"><a href="#小結" class="headerlink" title="小結"></a>小結</h2><p>過去曾整理過陣列遍歷的相關筆記：</p>
<ul>
<li><a href="https://heidiliu2020.github.io/javascript-for-loop/">【學習筆記】JavaScript 的陣列遍歷（ㄧ）：for/for…of/for…in/forEach</a></li>
<li><a href="https://heidiliu2020.github.io/javascript-native-array/">【學習筆記】JavaScript 的陣列遍歷（二）：forEach/map/filter/every/some/reduce</a></li>
</ul>
<p>專案中時常需要去搜尋特定字串，來達成特定目的。翻找筆記時，才發現自己竟然還沒有整理過這幾個 JavaScript 提供的方法的差異。</p>
<p>也藉由這個機會，又好好重新複習正則表達式的一些觀念，雖然很多時候是需要用到的時候再查就好，但果然原生的底子還是基礎中的基礎。</p>
<p>此外，也體驗了最近正夯的 <span class="exturl" data-url="aHR0cHM6Ly9vcGVuYWkuY29tL2Jsb2cvY2hhdGdwdC8=">ChatGPT<i class="fa fa-external-link-alt"></i></span>，給一段關鍵字寫出來的文章，差不多就完成了八七分架構，只需要再多補充一些觀念，一篇筆記就熱騰騰的誕生了ಠ_ಠ</p>
<p><img src="https://i.imgur.com/Fd2VwfC.png"></p>
<p>雖然這項功能方便又快速，結果卻不一定 100% 正確，有時也會出現一些瞎掰的，甚至與事實相差甚遠的回答；因此該如何善用這項工具，辨別結果並實際應用在工作上的開發、測試、寫文件等等，想必是使用者需要學習的課題吧。</p>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9tZWRpdW0uY29tL3VuYWxhaS8lRTglQUElOEQlRTglQUQlOTgtc2VhcmNoLWluZGV4b2YtaW5jbHVkZXMtJUU0JUI4JTg5JUU3JUE4JUFFJUU2JTkwJTlDJUU1JUIwJThCJUU1JUFEJTk3JUU0JUI4JUIyJUU3JTlBJTg0JUU3JTlCJUI4JUU5JTk3JTlDJUU2JTk2JUI5JUU2JUIzJTk1LTcwNDg1NjE3Njk1Mg==">認識 search、indexOf、includes 三種搜尋字串的相關方法 | by Lai | UnaLai | Medium<i class="fa fa-external-link-alt"></i></span></li>
<li><a href="https://medium.com/%E6%8B%89%E6%8B%89%E7%9A%84%E7%A8%8B%E5%BC%8F%E7%AD%86%E8%A8%98/%E5%AD%97%E4%B8%B2%E7%9A%84%E8%99%95%E7%90%86%E6%96%B9%E5%BC%8F-793037c1182"><JavaScript>字串的處理方式. 覺得自己每次都忘記字串、物件、陣列的處理方式，決定要來整理這些的用法。 | by 拉拉 | 拉拉的程式筆記 | Medium</a></li>
</ul>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>Front-End</tag>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>【學習筆記】關於 iOS 的那些坑之二：Web API、Resize 與消失的 Console</title>
    <url>/safari-web-api-resize-and-console/</url>
    <content><![CDATA[<p><img src="https://images.unsplash.com/photo-1639656333400-ee5240f757a0?ixlib=rb-4.0.3&q=85&fm=jpg&crop=entropy&cs=srgb" alt="Photo by [Pandhuya Niking](https://unsplash.com/@dispandu?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText) on [Unsplash](https://unsplash.com/photos/rl6aomPDKl8?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText)"></p>
<p>Photo by <span class="exturl" data-url="aHR0cHM6Ly91bnNwbGFzaC5jb20vQGRpc3BhbmR1P3V0bV9zb3VyY2U9dW5zcGxhc2gmdXRtX21lZGl1bT1yZWZlcnJhbCZ1dG1fY29udGVudD1jcmVkaXRDb3B5VGV4dA==">Pandhuya Niking<i class="fa fa-external-link-alt"></i></span> on <span class="exturl" data-url="aHR0cHM6Ly91bnNwbGFzaC5jb20vcGhvdG9zL3JsNmFvbVBES2w4P3V0bV9zb3VyY2U9dW5zcGxhc2gmdXRtX21lZGl1bT1yZWZlcnJhbCZ1dG1fY29udGVudD1jcmVkaXRDb3B5VGV4dA==">Unsplash<i class="fa fa-external-link-alt"></i></span></p>
<h2 id="前言：iOS-之坑、再次襲來"><a href="#前言：iOS-之坑、再次襲來" class="headerlink" title="前言：iOS 之坑、再次襲來"></a>前言：iOS 之坑、再次襲來</h2><p>既上篇的「<a href="https://heidiliu2020.github.io/safari-pinch-and-double-tap/">【學習筆記】 關於 iOS Safari 的那些坑：禁止選取 &amp; 縮放設定</a>」之後，因為 Web APP 開發需同時支援 Android 和 iOS 裝置，在過程中仍不時被新的隕石砸中，只好再挖新的坑來填補。</p>
<span id="more"></span>

<p>這次要探討的主題比較瑣碎，大致如下：</p>
<ul>
<li>Wait!! Do you know where’s my console?</li>
<li>Resize fires multiple times</li>
<li>Web API: Fullscreen &amp; Vibration</li>
</ul>
<h2 id="Wait-Do-you-know-where’s-my-console"><a href="#Wait-Do-you-know-where’s-my-console" class="headerlink" title="Wait!! Do you know where’s my console?"></a>Wait!! Do you know where’s my console?</h2><ul>
<li>Reference：<span class="exturl" data-url="aHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvNzU4NjIwODEvY29uc29sZS1sb2ctbm90LWRpc3BsYXlpbmctb24taXBhZC1wcm8tc2FmYXJpLTE2LTQtd2hlbi11c2luZy1kZXYtdG9vbHMtb24tbXktbWE=">Console.log not displaying on iPad Pro Safari 16.4 when using dev tools on my mac - Stack Overflow<i class="fa fa-external-link-alt"></i></span></li>
<li>預期結果：透過開啟 Safari 開發者模式，詳細操作可參考這篇：<span class="exturl" data-url="aHR0cHM6Ly9pdGhlbHAuaXRob21lLmNvbS50dy9hcnRpY2xlcy8xMDIwOTQxMg==">[30- 相關工具] 手機遠程測試 - iT 邦幫忙<i class="fa fa-external-link-alt"></i></span></li>
<li>實際操作：裝置升級至 iOS 16.4 版本後，需注意可能發生無法 Debug 的情況，尤其在需要測試行動裝置時，發現 console 畫面無法顯示任何資訊</li>
</ul>
<p>儘管仍可查看元件樣式，但主控台呈現一片空白：</p>
<p><img src="https://hackmd.io/_uploads/BynS2TbSn.png"></p>
<blockquote>
<p>白天不懂夜的黑，Console 不懂我的悲QQ</p>
</blockquote>
<h3 id="How-to-resolve"><a href="#How-to-resolve" class="headerlink" title="How to resolve?"></a>How to resolve?</h3><p>以下提供幾種解決方案：</p>
<ul>
<li>最土法煉鋼的方法：透過 <code>console.log</code> 大法直接印到 webview 上，但若需要動態更新頁面，例如多國語系功能（i18n），則需要抓取 DOM 的 innerHTML 一個一個置換更新，但非常麻煩且耗費效能<ul>
<li>因為習慣使用 Angular 框架提供的 NGX-Translate，支援快速切換多國語系功能<em>，</em>詳細可參考這篇：<span class="exturl" data-url="aHR0cHM6Ly9pdGhlbHAuaXRob21lLmNvbS50dy9hcnRpY2xlcy8xMDI5OTU5NQ==">i18n 多國語系- Ngx-Translate - iT 邦幫忙<i class="fa fa-external-link-alt"></i></span></li>
<li>如果是原生 JavaScript 專案，可參考這份套件 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2ZuYW5kby9pMThuLWpz">https://github.com/fnando/i18n-js<i class="fa fa-external-link-alt"></i></span> 來實作</li>
</ul>
</li>
<li>或建立一個 div 容器在頁面上，把需要的 Debug 資訊放在這裡，像是監聽事件等，這做法同樣是透過更新 DOM 元素</li>
<li>或更新 mac 上的 Safari 版本至 16.4，但需注意 Safari 16.4 僅支援 <span class="exturl" data-url="aHR0cHM6Ly9zdXBwb3J0LmFwcGxlLmNvbS96aC10dy9IVDIxMzY3MQ==">macOS Big Sur 和 macOS Monterey<i class="fa fa-external-link-alt"></i></span> 較新的 macOS 版本，目前手上的 mac 因為版本較舊還沒嘗試此解法</li>
<li>2023.8 將 macOS 更新至 Monterey 12.6.6 版本以後，即可將 Safari 版本升級到 16.4，Console 又回來了，可喜可賀^_^</li>
</ul>
<h2 id="Resize-fires-multiple-times"><a href="#Resize-fires-multiple-times" class="headerlink" title="Resize fires multiple times"></a>Resize fires multiple times</h2><ul>
<li>Reference：<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvMTU4MTI2MTgvd2luZG93LW9ucmVzaXplLWZpcmVzLXR3aWNl">javascript - window.onresize fires twice - Stack Overflow<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvMTM5MTY0ODUvd2luZG93LXJlc2l6ZS1maXJlcy10d2ljZS1pbi1jaHJvbWUtYW5kLWZpcmVmb3gtYnV0LW9ubHktb25lLWluLXNhZmFyaQ==">Window resize fires twice in Chrome and FireFox, but only one in Safari - Stack Overflow<i class="fa fa-external-link-alt"></i></span></li>
</ul>
</li>
<li>預期結果：當畫面進行縮放或旋轉時，預期會觸發一次 resize event 來進行後續動作，像是重新生成 UI 元件到相對或絕對位置</li>
<li>實際操作：但在不同瀏覽器上，這段期間卻有可能不只觸發一次 resize，導致畫面更新不如預期，例如萬惡的 Safari 或是熟悉的 Chrome，在實測時是發生在行動裝置的 Chrome 上</li>
</ul>
<h3 id="How-to-resolve-1"><a href="#How-to-resolve-1" class="headerlink" title="How to resolve?"></a>How to resolve?</h3><p>這時可透過設定 setTimeout，避免短時間內重複觸發 resize event，範例如下：</p>
<pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">let</span> resizeTimer<span class="token punctuation">;</span>
window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"resize"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>resizeTimer<span class="token punctuation">)</span> <span class="token function">clearTimeout</span><span class="token punctuation">(</span>resizeTimer<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 判斷是否已發生 resize</span>
  resizeTimer <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// Do something...</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="Web-API-Fullscreen-amp-Vibration"><a href="#Web-API-Fullscreen-amp-Vibration" class="headerlink" title="Web API: Fullscreen &amp; Vibration"></a>Web API: Fullscreen &amp; Vibration</h2><p>接著要探討的，是 Web API 提供的全螢幕顯示（Fullscreen）以及控制裝置震動（Vibration）功能。不論是在使用什麼 API 之前，都應該先查詢是否支援所需裝置，否則即使實作完成，到最後才發現原來不支援，反而要花更多時間去找別種工具，因此事前評估尤其重要。</p>
<h3 id="Fullscreen-API-顯示全螢幕"><a href="#Fullscreen-API-顯示全螢幕" class="headerlink" title="Fullscreen API 顯示全螢幕"></a>Fullscreen API 顯示全螢幕</h3><ul>
<li>Reference：<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL0Z1bGxzY3JlZW5fQVBJ">Fullscreen API - MDN Web Docs<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYXBwbGUuY29tL2ZvcnVtcy90aHJlYWQvMTMzMjQ4">[iOS Safari] Fullscreen API on a non-video element | Apple Developer Forums<i class="fa fa-external-link-alt"></i></span></li>
</ul>
</li>
</ul>
<p>以下是不同裝置上的瀏覽器對 Fullscreen API 支援度：</p>
<p><img src="https://hackmd.io/_uploads/rk2Y3pZSh.png"></p>
<p>可以看到 Safari 雖然在行動裝置僅支援到 iOS 12，在 PC 上還是能支援到 16.4。但需注意的是，不像其他瀏覽器，Fullscreen API 只能套用在 video 元素上，若用在其他像是 div 元素時一概沒有反應，這點真的很不友善。</p>
<p>但如果因為功能需求，必須套用在 div 元素上的話，還是有方法可以繞過這個限制，例如透過 PWA 來實現全螢幕效果，外觀就像 Native APP 一樣。</p>
<h3 id="What-is-PWA"><a href="#What-is-PWA" class="headerlink" title="What is PWA?"></a>What is PWA?</h3><p><img src="https://hackmd.io/_uploads/ByFz66WBh.png"><br>Ref: <span class="exturl" data-url="aHR0cHM6Ly93d3cuZXZlcnRvcC5wbC9lbi9wcm9ncmVzc2l2ZS13ZWItYXBwLXB3YS8=">https://www.evertop.pl/en/progressive-web-app-pwa/<i class="fa fa-external-link-alt"></i></span></p>
<p>以下是 MDN 關於 <span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvemgtVFcvZG9jcy9XZWIvUHJvZ3Jlc3NpdmVfd2ViX2FwcHM=">PWA<i class="fa fa-external-link-alt"></i></span> 的介紹：</p>
<blockquote>
<p><strong>Progressive Web Apps</strong> (PWAs) are web apps that use <span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL1NlcnZpY2VfV29ya2VyX0FQSQ==">service workers<i class="fa fa-external-link-alt"></i></span>, <span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvTWFuaWZlc3Q=">manifests<i class="fa fa-external-link-alt"></i></span>, and other web-platform features in combination with <span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9HbG9zc2FyeS9Qcm9ncmVzc2l2ZV9FbmhhbmNlbWVudA==">progressive enhancement<i class="fa fa-external-link-alt"></i></span> to give users an experience on par with native apps.</p>
</blockquote>
<blockquote>
<p>漸進式網路應用程式（PWAs）是透過 <span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL1NlcnZpY2VfV29ya2VyX0FQSQ==">service workers<i class="fa fa-external-link-alt"></i></span>、<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvTWFuaWZlc3Q=">manifests<i class="fa fa-external-link-alt"></i></span> 技術，並以漸進增強策略，建立跨平台 web 應用程式，提供用戶體驗近似於原生程式的功能。</p>
</blockquote>
<p>這裡簡單介紹上述提到的 Service Worker 與 Manifest 兩項技術：</p>
<ul>
<li>Service Worker：可想像是位於 Web APP 與網路連接之間的代理人，讓網頁擁夠像 Native APP 一樣支援離線和訊息推播功能</li>
<li>Manifest：藉由設定 manifest.json 檔的參數，可自訂啟動畫面、安裝在主畫面顯示的名稱與 icon 等</li>
</ul>
<p>透過 PWA 建立的 Web APP，使用者只需將網頁加到主畫面，開啟時就不會顯示網址列，外表就和 Native APP 一樣是全螢幕，能夠有更好的沉浸式體驗。</p>
<p>除此之外，使用 PWA 還有其他好處，像是安裝快速、定義快取、離線瀏覽、可被搜尋等優點，藉此提升使用者體驗。詳細可參考這篇文章：<span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmh1bGkudHcvMjAxOC8xMC8xMy9wd2EtaW4tYWN0aW9uLw==">PWA 實戰經驗分享 - Huli’s blog<i class="fa fa-external-link-alt"></i></span>，有提到如何實作 PWA 以及不同平台可能遇到的問題等等。</p>
<h3 id="Vibration-API-使裝置震動"><a href="#Vibration-API-使裝置震動" class="headerlink" title="Vibration API 使裝置震動"></a>Vibration API 使裝置震動</h3><ul>
<li>Reference：<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL1ZpYnJhdGlvbl9BUEk=">Vibration API - MDN Web Docs<i class="fa fa-external-link-alt"></i></span></li>
</ul>
<p><img src="https://hackmd.io/_uploads/S11Rn6WB2.png"></p>
<p>Safari 沒有懸念不支援 Vibration API，但令人感到意外的是 Firefox 也僅支援較低版本。</p>
<p>此外，需注意在 Safari 瀏覽器下呼叫 vibrate() 時，有可能因出現 error 導致無法進行後續動作，最保險的做法還是加上防呆驗證，確定裝置有支援才執行功能。</p>
<pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">const</span> userAgent <span class="token operator">=</span> window<span class="token punctuation">.</span>navigator<span class="token punctuation">.</span>userAgent<span class="token punctuation">;</span>
<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>userAgent<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">'iOS'</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>userAgent<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">'Mac OS'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> navigator<span class="token punctuation">.</span><span class="token function">vibrate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h2 id="小記"><a href="#小記" class="headerlink" title="小記"></a>小記</h2><p>接續上篇筆記，陸續來回在 Safari 和 Android 裝置進行測試，發現一旦接受「只要遇上 Safari 大多支援度不高」這個事實以後，開發起來就快樂多了，畢竟這也不是工程師煩惱就有用的問題；反而要煩惱不同瀏覽器之間對事件觸發、Web API 支援程度的差異性。</p>
<p>簡言之，該如何從現有的技術去實作近似於目標的功能，先熟悉擁有哪些工具再去談可行性，才是更需要學習的地方。</p>
]]></content>
      <categories>
        <category>Front-End</category>
      </categories>
      <tags>
        <tag>Front-End</tag>
        <tag>iOS</tag>
        <tag>WebAPI</tag>
      </tags>
  </entry>
  <entry>
    <title>【學習筆記】如何在 iOS APP 透過 WKWebView 實現內嵌網頁功能</title>
    <url>/ios-app-webview/</url>
    <content><![CDATA[<p><img src="https://hackmd.io/_uploads/BJXLBiH6n.jpg"></p>
<blockquote>
<p>Photo by <span class="exturl" data-url="aHR0cHM6Ly91bnNwbGFzaC5jb20vQGRhbmllbGtvcnBhaT91dG1fc291cmNlPXVuc3BsYXNoJnV0bV9tZWRpdW09cmVmZXJyYWwmdXRtX2NvbnRlbnQ9Y3JlZGl0Q29weVRleHQ=">Daniel Korpai<i class="fa fa-external-link-alt"></i></span> on <span class="exturl" data-url="aHR0cHM6Ly91bnNwbGFzaC5jb20vcGhvdG9zL1kzTEdXQ3NyZ21nP3V0bV9zb3VyY2U9dW5zcGxhc2gmdXRtX21lZGl1bT1yZWZlcnJhbCZ1dG1fY29udGVudD1jcmVkaXRDb3B5VGV4dA==">Unsplash<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
<h2 id="What-is-Webview？"><a href="#What-is-Webview？" class="headerlink" title="What is Webview？"></a>What is Webview？</h2><p>Webview 其實就是一個精簡的瀏覽器，透過渲染引擎（Webkit）呈現網頁內容，中文又翻作「網頁視圖」。</p>
<span id="more"></span>

<p>和我們所熟悉的瀏覽器（例如：iOS / Safari 和 Android / Chrome）相比，最大差異在於，外觀介面沒有網址列、功能鍵等功能。</p>
<p>透過 Webview 實現的混合模式開發（Hyprid APP），相較於原生開發（Native APP），具備跨平台開發、開發效率高、降低成本、可離線執行等優點；然而，也須考量效能性、安全性與兼容性等問題。</p>
<h2 id="iOS-APP-顯示網頁的三種方式"><a href="#iOS-APP-顯示網頁的三種方式" class="headerlink" title="iOS APP 顯示網頁的三種方式"></a>iOS APP 顯示網頁的三種方式</h2><p>iOS SDK 提供三種方式，讓開發者用來顯示網頁內容：</p>
<h3 id="透過-UIApplication-外開網頁視窗"><a href="#透過-UIApplication-外開網頁視窗" class="headerlink" title="透過 UIApplication 外開網頁視窗"></a>透過 <span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYXBwbGUuY29tL2RvY3VtZW50YXRpb24vdWlraXQvdWlhcHBsaWNhdGlvbi8=">UIApplication<i class="fa fa-external-link-alt"></i></span> 外開網頁視窗</h3><p><code>UIApplication.shared.open</code> 是 Swift 中的一個 API，功能是可暫時離開當前 APP，開啟指定的 URL。</p>
<pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">import</span> <span class="token class-name">SwiftUI</span>
<span class="token keyword">struct</span> <span class="token class-name">ContentView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>
    
    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">Button</span><span class="token punctuation">(</span>action<span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">let</span> url <span class="token operator">=</span> <span class="token function">URL</span><span class="token punctuation">(</span>string<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"https://heidiliu2020.github.io/"</span></span><span class="token punctuation">)</span><span class="token operator">!</span>
            <span class="token class-name">UIApplication</span><span class="token punctuation">.</span>shared<span class="token punctuation">.</span><span class="token keyword">open</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"點我前往連結"</span></span><span class="token punctuation">)</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="WKWebView"><a href="#WKWebView" class="headerlink" title="WKWebView"></a><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYXBwbGUuY29tL2RvY3VtZW50YXRpb24vd2Via2l0L3drd2Vidmlldw==">WKWebView<i class="fa fa-external-link-alt"></i></span></h3><p>和 Android 的 Webview 元件類似，iOS 同樣有 Webview 能用來顯示網頁內容。</p>
<p>而在 iOS 的 WebView 分為 UIWebView 和 iOS 8+ 新增的 WKWebView 兩種類型。</p>
<p>WebKit 框架中的 WKWebView 相較於前者，在於性能與穩定性的提升，具備 Nitro JavaScript 引擎的等優點。並透過 <code>UIViewRepresentable</code> 協定包裝 View，顯示特定的網頁內容。</p>
<pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">import</span> <span class="token class-name">SwiftUI</span>
<span class="token keyword">import</span> <span class="token class-name">WebKit</span>

<span class="token keyword">struct</span> <span class="token class-name">WebView</span><span class="token punctuation">:</span> <span class="token class-name">UIViewRepresentable</span> <span class="token punctuation">&#123;</span>
    
    <span class="token keyword">func</span> <span class="token function-definition function">makeUIView</span><span class="token punctuation">(</span>context<span class="token punctuation">:</span> <span class="token class-name">Context</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token keyword">some</span> <span class="token class-name">UIView</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">// return UIView object</span>
    <span class="token punctuation">&#125;</span>
    
    <span class="token keyword">func</span> <span class="token function-definition function">updateUIView</span><span class="token punctuation">(</span><span class="token omit keyword">_</span> uiView<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">UIView</span><span class="token punctuation">,</span> context<span class="token punctuation">:</span> <span class="token class-name">Context</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">// update UIView</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>使用上需注意 WKWebView 沒有內建的 Back &amp; Forward 按鍵，若需提供返回歷史頁面等功能，必須自行開發一個自訂的網頁瀏覽器。</p>
<h3 id="SFSafariViewController"><a href="#SFSafariViewController" class="headerlink" title="SFSafariViewController"></a><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYXBwbGUuY29tL2RvY3VtZW50YXRpb24vc2FmYXJpc2VydmljZXMvc2ZzYWZhcml2aWV3Y29udHJvbGxlci8=">SFSafariViewController<i class="fa fa-external-link-alt"></i></span></h3><p>相較於 WKWebView 的限制，iOS 9 中導入的控制器 SFSafariViewController，能使用與 Safari 瀏覽器相同的功能，例如切換上下頁。</p>
<p>方法是透過 <code>UIViewControllerRepresentable</code> 協定定義 SwiftUI view 型別，將 SFSafariViewController 包裝成 SwiftUI view，即可顯示網頁內容。</p>
<pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">import</span> <span class="token class-name">SwiftUI</span>
<span class="token keyword">import</span> <span class="token class-name">SafariServices</span>

<span class="token keyword">struct</span> <span class="token class-name">SafariView</span><span class="token punctuation">:</span> <span class="token class-name">UIViewControllerRepresentable</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// TODO...</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="實戰練習"><a href="#實戰練習" class="headerlink" title="實戰練習"></a>實戰練習</h2><h3 id="Step1-環境架設：安裝-XCode"><a href="#Step1-環境架設：安裝-XCode" class="headerlink" title="Step1. 環境架設：安裝 XCode"></a>Step1. 環境架設：安裝 XCode</h3><p>首先進入<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYXBwbGUuY29tL2Rvd25sb2FkL2FwcGxpY2F0aW9ucy8=">官網下載頁面<i class="fa fa-external-link-alt"></i></span>，登入後選擇要下載 XCode 版本。</p>
<p><img src="https://hackmd.io/_uploads/BJ0BxoST3.png"></p>
<p>不同版本的 XCode，在使用上須考慮開發環境、APP 套件與 iOS 版本相容性，若需要安裝特定版本的 XCode，可參考這篇文章：<span class="exturl" data-url="aHR0cHM6Ly9ibG9nLnBveWNoYW5nLm5ldC9tYW51YWxseS1kb3dubG9hZC1tdWx0aXBsZS12ZXJzaW9ucy1vZi14Y29kZS8=">如何手動快速下載不同版本的Xcode - Poy Chang<i class="fa fa-external-link-alt"></i></span>。</p>
<h3 id="Step2-建立新專案"><a href="#Step2-建立新專案" class="headerlink" title="Step2. 建立新專案"></a>Step2. 建立新專案</h3><p>運行 XCode 後，點擊「Create a new Xcode project」建立新專案。</p>
<p><img src="https://hackmd.io/_uploads/B1ST1sB63.png"></p>
<p>接著點選 APP 建立專案範本，內建範本有預設程式碼，能夠協助快速開發：</p>
<p><img src="https://hackmd.io/_uploads/HkRefsBan.png"></p>
<h3 id="Step3-利用-UIViewRepresentable-協定調用-WKWebView"><a href="#Step3-利用-UIViewRepresentable-協定調用-WKWebView" class="headerlink" title="Step3. 利用 UIViewRepresentable 協定調用 WKWebView"></a>Step3. 利用 UIViewRepresentable 協定調用 WKWebView</h3><p>接著透過 <code>UIViewRepresentable</code> 協定包裝 View，顯示指定的網頁內容：</p>
<ul>
<li>ContentView.swift</li>
</ul>
<pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">import</span> <span class="token class-name">SwiftUI</span>

<span class="token keyword">struct</span> <span class="token class-name">ContentView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">WebView</span><span class="token punctuation">(</span>url<span class="token punctuation">:</span> <span class="token function">URL</span><span class="token punctuation">(</span>string<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"https://heidiliu2020.github.io/"</span></span><span class="token punctuation">)</span><span class="token operator">!</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">edgesIgnoringSafeArea</span><span class="token punctuation">(</span><span class="token punctuation">.</span>all<span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">struct</span> <span class="token class-name">ContentView_Previews</span><span class="token punctuation">:</span> <span class="token class-name">PreviewProvider</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">static</span> <span class="token keyword">var</span> previews<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">ContentView</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>SwiftUIView.swift</li>
</ul>
<pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">import</span> <span class="token class-name">SwiftUI</span>
<span class="token keyword">import</span> <span class="token class-name">WebKit</span>

<span class="token keyword">struct</span> <span class="token class-name">WebView</span><span class="token punctuation">:</span> <span class="token class-name">UIViewRepresentable</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">let</span> url<span class="token punctuation">:</span> <span class="token constant">URL</span>

    <span class="token keyword">func</span> <span class="token function-definition function">makeUIView</span><span class="token punctuation">(</span>context<span class="token punctuation">:</span> <span class="token class-name">Context</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">WKWebView</span>  <span class="token punctuation">&#123;</span>
        <span class="token keyword">let</span> wkwebView <span class="token operator">=</span> <span class="token class-name">WKWebView</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        wkwebView<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token class-name">URLRequest</span><span class="token punctuation">(</span>url<span class="token punctuation">:</span> url<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> wkwebView
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">func</span> <span class="token function-definition function">updateUIView</span><span class="token punctuation">(</span><span class="token omit keyword">_</span> uiView<span class="token punctuation">:</span> <span class="token class-name">WKWebView</span><span class="token punctuation">,</span> context<span class="token punctuation">:</span> <span class="token class-name">Context</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="Step4-Building-and-running-an-app"><a href="#Step4-Building-and-running-an-app" class="headerlink" title="Step4. Building and running an app"></a>Step4. <span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYXBwbGUuY29tL2RvY3VtZW50YXRpb24veGNvZGUvYnVpbGRpbmctYW5kLXJ1bm5pbmctYW4tYXBw">Building and running an app<i class="fa fa-external-link-alt"></i></span></h3><p>最後是運行 APP 驗證結果，點選上方的開始鍵執行 Building，點開右側的選單可選擇要運行的裝置版本，或是透過傳輸線連接在實體機上進行測試。</p>
<p><img src="https://hackmd.io/_uploads/BkG1Usrpn.png"></p>
<h2 id="小結"><a href="#小結" class="headerlink" title="小結"></a>小結</h2><p>同樣是因為專案上的測試需求，沒想到這回又再次把 Xcode 安裝回電腦中，也許因為過去曾稍微接觸過一點，這回相對沒那麼迷惘。</p>
<p>能夠直接把 APP Build 到實體手機測試，和透過 XCode 模擬器終究還是有很大區別，雖然要實際上架到 App Store 需要課金，但以現階段而言也已經很夠用了。回顧過去所接觸的知識，似乎明白儘管當初一知半解，只要再多經歷幾次也能夠好好運用這些技術了。</p>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cuYXBwY29kYS5jb20vc3dpZnR1aS10ZXh0dmlldy11aXZpZXdyZXByZXNlbnRhYmxlLw==">使用 UIViewRepresentable 協定　讓你輕鬆建立 SwiftUI TextView<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cuYXBwY29kYS5jb20udHcvc3dpZnR1aS1jYW1lcmEtcGhvdG8tbGlicmFyeS8=">利用 UIViewControllerRepresentable 協定　在 SwiftUI 存取相簿並使用相機<i class="fa fa-external-link-alt"></i></span></li>
</ul>
]]></content>
      <categories>
        <category>Front-End</category>
      </categories>
      <tags>
        <tag>Native</tag>
        <tag>iOS</tag>
        <tag>Webview</tag>
      </tags>
  </entry>
  <entry>
    <title>Google 廣告｜比較 Google Ads、AdSense、AdMob 和 Ad Manager 的區別</title>
    <url>/google-advertising-service/</url>
    <content><![CDATA[<p><img src="https://hackmd.io/_uploads/rkobid-yT.png"></p>
<blockquote>
<p>Ref: <span class="exturl" data-url="aHR0cHM6Ly93d3cudGhpbmt3aXRoZ29vZ2xlLmNvbS9jb2xsZWN0aW9ucy9wcm9kdWN0cy8=">https://www.thinkwithgoogle.com/collections/products/<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在網路資訊爆炸的時代，不論是創業到經營品牌，或是透過副業多媒體賺取分潤，都與廣告產業脫離不了關係。好比外食族必備的 Google 地圖上顯示的推薦店家、佔據 Facebook 等社群大半版面的贊助廣告，或是搜尋引擎名列上位的關鍵字結果等等，廣告早已深深融入我們的生活當中。</p>
<span id="more"></span>

<p>這次負責專案需要研究投放廣告的主題，剛好之前有稍微摸過 Google AdSense，有在部落格試著開通 Google AdSense 服務，雖然目前的成果還微乎其微，一方面觀察流量的同時，也期許未來能夠持續透過知識的累積，為自己賺取額外的零用錢XD</p>
<h2 id="廣告主與發布商"><a href="#廣告主與發布商" class="headerlink" title="廣告主與發布商"></a>廣告主與發布商</h2><p>在網路廣告服務中，主要可分為幾種角色：</p>
<ul>
<li>Advertiser 廣告主：花錢打廣告的人，也就是廣告客戶<ul>
<li>Agency 廣告代理商：幫廣告主的產品或服務投放廣告的人</li>
</ul>
</li>
<li>Publisher 發布商：收費刊登廣告的人</li>
<li>User 用戶：觀看廣告並實際購買商品或服務的人</li>
</ul>
<p>可參考下方關於廣告主、發布商、用戶的關係圖：</p>
<p><img src="https://hackmd.io/_uploads/B1J0dvZJa.png"></p>
<blockquote>
<p>Ref: <span class="exturl" data-url="aHR0cHM6Ly93d3cuZ2Rwci1pbXBhY3QuY29tL292ZXJ2aWV3LW9mLXRoZS1vbmxpbmUtYWR2ZXJ0aXNpbmctaW5kdXN0cnk=">https://www.gdpr-impact.com/overview-of-the-online-advertising-industry<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
<p>以 Google 服務為例：</p>
<ul>
<li>Google Ads、Youtube 是讓廣告主（Advertiser）用來投放廣告的平台</li>
<li>Google AdSense、Google AdMob、Google Ad Manager 則是讓發布商（Publisher）決定要如何刊登廣告的平台</li>
</ul>
<h2 id="各產品的差異"><a href="#各產品的差異" class="headerlink" title="各產品的差異"></a><strong>各產品的差異</strong></h2><p>以下比較幾項 Google 提供廣告相關的服務：</p>
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9hZHMuZ29vZ2xlLmNvbS9pbnRsL3poX1RXL2hvbWUv">Google Ads<i class="fa fa-external-link-alt"></i></span> 廣告服務<ul>
<li>適用類型：網頁、應用程式</li>
<li>讓廣告主付費投放廣告的平台。也就是客戶付錢給 Google 宣傳自家產品</li>
<li>例如：小明在觀看 YouTube 時出現亡國之淚的遊戲廣告</li>
</ul>
</li>
<li><span class="exturl" data-url="aHR0cHM6Ly9hZHNlbnNlLmdvb2dsZS5jb20vc3RhcnQvP3V0bV9zb3VyY2U9aGM5MjM0NjUz">Google AdSense<i class="fa fa-external-link-alt"></i></span> 廣告聯播網<ul>
<li>適用類型：<strong>網頁</strong></li>
<li>用來在自己的數位資源上顯示 Google Ads 的廣告並賺取收益</li>
<li>例如：小明用心經營的部落格，透過網站上廣告的曝光度和點擊率增加額外收益</li>
</ul>
</li>
<li><span class="exturl" data-url="aHR0cHM6Ly9hZG1vYi5nb29nbGUuY29tL2hvbWUvZ2V0LXN0YXJ0ZWQvP3V0bV9tZWRpdW09ZXQmdXRtX3NvdXJjZT1pbnRlcm5hbCZ1dG1fY2FtcGFpZ249MjAxOS1hZG1vYi1nYmwtYWRtYW5hZ2VyYWRzZW5zZWhlbHBjZW50ZXI=">Google AdMob<i class="fa fa-external-link-alt"></i></span> 行動廣告聯播網<ul>
<li>適用類型：應用程式</li>
<li>APP 開發者透過行動應用程式營利</li>
<li>例如：小明在開發的放置遊戲 APP 加上輪播廣告，玩家可以透過觀看廣告取得道具</li>
</ul>
</li>
<li><span class="exturl" data-url="aHR0cHM6Ly9hZG1hbmFnZXIuZ29vZ2xlLmNvbS9ob21lLz91dG1fc291cmNlPWhjOTIzNDY1Mw==">Google Ad Manager<i class="fa fa-external-link-alt"></i></span> 整合式廣告管理平台（GAD）<ul>
<li>適用類型：網頁、<strong>應用程式</strong></li>
<li>讓發布商決定要刊登哪些廣告的平台</li>
<li>例如：小明經營的大型外送平台 foodtogo，可透過 GAD 平台集中管理網頁和應用程式等所有廣告空間類型</li>
</ul>
</li>
</ul>
<h3 id="Google-Ads：提供廣告服務-⇒-廣告客戶"><a href="#Google-Ads：提供廣告服務-⇒-廣告客戶" class="headerlink" title="Google Ads：提供廣告服務 ⇒ 廣告客戶"></a><span class="exturl" data-url="aHR0cHM6Ly9hZHMuZ29vZ2xlLmNvbS9pbnRsL3poX1RXL2hvbWUv">Google Ads<i class="fa fa-external-link-alt"></i></span>：提供廣告服務 ⇒ 廣告客戶</h3><blockquote>
<p>Reach new customers online with Google Ads.（透過 Google Ads 拓展事業）</p>
</blockquote>
<p><img src="https://hackmd.io/_uploads/HyRLsOZ1p.png"></p>
<p>原名 Google AdWords，發布於 2000 年 10 月 23 日，是 <span class="exturl" data-url="aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3dpa2kvR29vZ2xlJUU1JTg1JUFDJUU1JThGJUI4">Google<i class="fa fa-external-link-alt"></i></span> 主要的廣告服務產品。AdWords 包括文本廣告、橫幅廣告和多元媒體廣告提供<span class="exturl" data-url="aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3dpa2kvJUU2JUFGJThGJUU3JTgyJUI5JUU1JTg3JUJCJUU2JTg4JTkwJUU2JTlDJUFD">每點擊成本<i class="fa fa-external-link-alt"></i></span>（CPC）、<span class="exturl" data-url="aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3dpa2kvJUU1JThEJTgzJUU0JUJBJUJBJUU3JTgyJUI5JUU1JTg3JUJCJUU2JTg4JTkwJUU2JTlDJUFD">千人點擊成本<i class="fa fa-external-link-alt"></i></span>（CPM）和指定站點廣告發布服務。</p>
<p>Google Ads 計畫適合<strong>廣告客戶</strong>使用。如果想在網站或應用程式上宣傳自家產品或服務，並拓展業務或提高業績，透過 Google Ads 計畫，即可將廣告會顯示在 Google 搜尋結果和發布商網站聯播網中。</p>
<h3 id="Google-AdSense：廣告聯播網-⇒-發布商"><a href="#Google-AdSense：廣告聯播網-⇒-發布商" class="headerlink" title="Google AdSense：廣告聯播網 ⇒ 發布商"></a><span class="exturl" data-url="aHR0cHM6Ly9hZHNlbnNlLmdvb2dsZS5jb20vc3RhcnQvP3V0bV9zb3VyY2U9aGM5MjM0NjUz">Google AdSense<i class="fa fa-external-link-alt"></i></span>：廣告聯播網 ⇒ 發布商</h3><blockquote>
<p>Creating content takes time, making it profitable shouldn’t.（製作內容耗時費力，靠內容盈利就應該輕鬆便利）</p>
</blockquote>
<p><img src="https://hackmd.io/_uploads/HJ_wjuW16.png"></p>
<p>Google AdSense 是廣告聯播網，適合<strong>發布商</strong>使用。如果擁有或管理網站，網誌或論壇，並希望能透過這些網站營利，透過 Google AdSense 計畫，即可在自己的數位資源上顯示廣告，並根據使用者瀏覽廣告或與廣告互動的次數來賺取收益。</p>
<p>AdSense 適合具有以下需求的發布商：</p>
<ul>
<li>想要透過自家網站營利 (推薦於網誌、論壇和線上服務平台等網站使用)</li>
<li>可迅速導入的廣告放送工具</li>
<li>需要 Google 利用<span class="exturl" data-url="aHR0cHM6Ly9zdXBwb3J0Lmdvb2dsZS5jb20vYWRzZW5zZS9hbnN3ZXIvOTI2MTgwNQ==">自動廣告<i class="fa fa-external-link-alt"></i></span>功能調整廣告空間並盡量提高收益</li>
<li>容易取得的成效報表</li>
</ul>
<h3 id="Google-AdMob：行動廣告聯播網-⇒-發布商"><a href="#Google-AdMob：行動廣告聯播網-⇒-發布商" class="headerlink" title="Google AdMob：行動廣告聯播網 ⇒ 發布商"></a><span class="exturl" data-url="aHR0cHM6Ly9hZG1vYi5nb29nbGUuY29tL2hvbWUvZ2V0LXN0YXJ0ZWQvP3V0bV9tZWRpdW09ZXQmdXRtX3NvdXJjZT1pbnRlcm5hbCZ1dG1fY2FtcGFpZ249MjAxOS1hZG1vYi1nYmwtYWRtYW5hZ2VyYWRzZW5zZWhlbHBjZW50ZXI=">Google AdMob<i class="fa fa-external-link-alt"></i></span>：行動廣告聯播網 ⇒ 發布商</h3><blockquote>
<p>Earn more revenue with your apps.（透過應用程式賺取更多收益）</p>
</blockquote>
<p><img src="https://hackmd.io/_uploads/rkzOsd-kT.png"></p>
<p>AdMob 是行動廣告聯播網，也是一個營利平台。如果 APP 開發人員想要透過廣告營利、取得可行深入分析資料，並且拓展應用程式事業，透過 AdMob 聯播網，能將廣告放送到全球，透過行動應用程式營利。此外，開發人員也可以將 AdMob 當做營利平台，假設與多個廣告聯播網合作，此平台能協助提高所有第三方聯播網夥伴的廣告收益。</p>
<p>AdMob 適合具有以下需求的發布商：</p>
<ul>
<li>想要使用成效良好的行動應用程式廣告格式，且為保障品牌安全，需要有充分的掌控權</li>
<li>需要解決方案，以利透過<span class="exturl" data-url="aHR0cHM6Ly9zdXBwb3J0Lmdvb2dsZS5jb20vYWRtb2IvYW5zd2VyLzMwNjM1NjQ=">刊登序列中介服務<i class="fa fa-external-link-alt"></i></span>和<span class="exturl" data-url="aHR0cHM6Ly9zdXBwb3J0Lmdvb2dsZS5jb20vYWRtb2IvYW5zd2VyLzkyMzQ0ODg=">出價<i class="fa fa-external-link-alt"></i></span>，提升在 Google 和第三方聯播網上的廣告收益</li>
<li>想要使用 Google Analytics for Firebase 全面瞭解廣告成效和使用者參與度</li>
<li>需要能簡化每日例行工作，並且支援廣告聯播網最佳化等功能的自動化工具</li>
<li>需要一套具備<span class="exturl" data-url="aHR0cHM6Ly9zdXBwb3J0Lmdvb2dsZS5jb20vYWRtb2IvYW5zd2VyLzkyMjY1NTI=">智慧分眾<i class="fa fa-external-link-alt"></i></span>功能，可根據使用者行為來平衡應用程式內購與廣告型收益兩者的解決方案</li>
</ul>
<h3 id="Google-Ad-Manager：廣告管理平台-⇒-發布商"><a href="#Google-Ad-Manager：廣告管理平台-⇒-發布商" class="headerlink" title="Google Ad Manager：廣告管理平台 ⇒ 發布商"></a><span class="exturl" data-url="aHR0cHM6Ly9hZG1hbmFnZXIuZ29vZ2xlLmNvbS9ob21lLz91dG1fc291cmNlPWhjOTIzNDY1Mw==">Google Ad Manager<i class="fa fa-external-link-alt"></i></span>：廣告管理平台 ⇒ 發布商</h3><blockquote>
<p>A complete platform to grow ad revenue and protect your brand wherever people are watching, playing or engaging.（無論用戶在哪裡觀看影片、暢玩遊戲或進行互動，這款全方位的平台都可以協助您的廣告收入不斷增長，同時妥善保護您的品牌）</p>
</blockquote>
<p><img src="https://hackmd.io/_uploads/SksOj_-Jp.png"></p>
<p>Google Ad Manager 是一種廣告管理平台，適合具有大量直接銷售廣告的大型發布商使用。Ad Manager 提供精細的廣告控管系統，並支援多種廣告交易平台和聯播網，包括 AdSense、Ad Exchange、第三方聯播網和第三方廣告交易平台，範圍涵蓋網頁與行動應用程式。</p>
<p>Ad Manager 適合具有以下需求的發布商：</p>
<ul>
<li>需要一個能集中處理所有廣告空間類型 (網站、行動應用程式、影片或遊戲) 營利作業的平台</li>
<li>管理透過<span class="exturl" data-url="aHR0cHM6Ly9zdXBwb3J0Lmdvb2dsZS5jb20vYWRtYW5hZ2VyL2Fuc3dlci85MjQ4NDY0">直接交易<i class="fa fa-external-link-alt"></i></span>獲得 (來自買方) 的大量廣告收益</li>
<li>和 AdSense 除了規模差異，最大不同在於使用第三方聯播網競逐廣告空間</li>
<li>需要更複雜的報表以取得更精細的分析資料</li>
</ul>
<h2 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h2><p>最後做個總結：</p>
<ul>
<li>Google Ads 計畫的對象是廣告主，付費宣傳自家產品或服務；Google AdSense 計畫的對象是發布商，透過數位資源顯示廣告以賺取收益。</li>
<li>AdSense、AdMob 和 Ad Manager 這三者是不同的產品，透過這些平台，發布商均能使用同樣的 <span class="exturl" data-url="aHR0cHM6Ly9hZG1hbmFnZXIuZ29vZ2xlLmNvbS9ob21lL3Jlc291cmNlcy9ob3dfYXV0aG9yaXplZF9idXllcnNfd29ya193aXRoX2dvb2dsZS8=">Authorized Buyers<i class="fa fa-external-link-alt"></i></span> 進階功能，並放送同樣品質的廣告。</li>
</ul>
<p>在實際 Survey 之前，不瞭解 Google 為什麼會有這麼多名稱相近的廣告服務，甚至搞混實際負責收錢的發布商和付錢的廣告主。其實只要能釐清對象、使用目的、目標平台，即可針對需求選擇需要的服務。</p>
<h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><ul>
<li>Google 文件<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9zdXBwb3J0Lmdvb2dsZS5jb20vYWRtYW5hZ2VyL2Fuc3dlci85MjM0NjUzP3NqaWQ9MTIzMDMwMzc1NTkyNTYwMzk1MjktQVA=">比較 Ad Manager、AdSense 和 AdMob<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9zdXBwb3J0Lmdvb2dsZS5jb20vYWRzZW5zZS9hbnN3ZXIvNzYyMzE/aGw9emgtSGFudA==">AdSense 與 Google Ads 的差異<i class="fa fa-external-link-alt"></i></span></li>
</ul>
</li>
<li><span class="exturl" data-url="aHR0cHM6Ly9tZWRpdW0uY29tL0B0aGVzYWxseWNob3UvZ29vbGUtZm9yLXB1Ymxpc2hlci1hZG1vYi1hZHMtNjM1NzdhZmFlMmI2">App 與遊戲開發者們也要懂的 AdMob 廣告及變現優化！（上）<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC81MDkzMDE4Njg=">一文搞清楚谷歌广告产品&amp;平台<i class="fa fa-external-link-alt"></i></span></li>
</ul>
]]></content>
      <categories>
        <category>Google</category>
      </categories>
      <tags>
        <tag>Google</tag>
        <tag>Advertising</tag>
        <tag>Ads</tag>
        <tag>AdSense</tag>
        <tag>AdMob</tag>
        <tag>Ad Manager</tag>
      </tags>
  </entry>
  <entry>
    <title>[2023 15th鐵人賽] Day1 - 前言與系列大綱</title>
    <url>/ironman-2023-day-1/</url>
    <content><![CDATA[<p>15th鐵人賽目錄傳送門：<span class="exturl" data-url="aHR0cHM6Ly9pdGhlbHAuaXRob21lLmNvbS50dy91c2Vycy8yMDEzNTU1OC9pcm9ubWFuLzYyOTA=">https://ithelp.ithome.com.tw/users/20135558/ironman/6290<i class="fa fa-external-link-alt"></i></span></p>
<span id="more"></span>

<p>各位好，我是初次參賽的海地。在 2020 年左右，透過線上課程轉職成為前端工程師，目前在一家雲端串流服務公司任職。</p>
<p>儘管到目前累積兩年多的工作經驗，對未來的發展卻仍感到困惑不已，深知自己需要做什麼改變，比如拓展不同領域的技術、或是挖掘現有知識的深度也好，也因為瞭解自己的個性，需要什麼動力催促自己去執行這件事。因此，決定在今年第一次挑戰鐵人賽，訂下的主題是「前端工程師在 Qiita 閱讀的雜食筆記 」。</p>
<h2 id="什麼是-Qiita？"><a href="#什麼是-Qiita？" class="headerlink" title="什麼是 Qiita？"></a>什麼是 <span class="exturl" data-url="aHR0cHM6Ly9xaWl0YS5jb20v">Qiita<i class="fa fa-external-link-alt"></i></span>？</h2><p><img src="https://hackmd.io/_uploads/HkS6XJm1T.png"></p>
<p><span class="exturl" data-url="aHR0cHM6Ly9xaWl0YS5jb20v">Qiita<i class="fa fa-external-link-alt"></i></span> 是個日本軟體開發社群，可以想成是專屬日本人的記錄與分享技術的平台。以下簡單介紹網站提供的功能，依導覽列由左到右分別如下：</p>
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9xaWl0YS5jb20v">ホーム<i class="fa fa-external-link-alt"></i></span>（Home）：網站首頁，顯示追蹤中的主題文章、用戶貢獻排行等資訊</li>
<li><span class="exturl" data-url="aHR0cHM6Ly9xaWl0YS5jb20vdGltZWxpbmU=">タイムライン<i class="fa fa-external-link-alt"></i></span>（Timeline）：類似 <span class="exturl" data-url="aHR0cHM6Ly90d2l0dGVyLmNvbS8=">Twitter<i class="fa fa-external-link-alt"></i></span> 能夠根據喜好的主題，顯示專屬的時間軸</li>
<li><span class="exturl" data-url="aHR0cHM6Ly9xaWl0YS5jb20vdHJlbmQ=">トレンド<i class="fa fa-external-link-alt"></i></span>（Trend）：顯示最近討論度高的文章，以及最新技術趨勢排行</li>
<li><span class="exturl" data-url="aHR0cHM6Ly9xaWl0YS5jb20vcXVlc3Rpb24tZmVlZA==">質問<i class="fa fa-external-link-alt"></i></span>（Question）：類似 <span class="exturl" data-url="aHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS8=">Stack Overflow<i class="fa fa-external-link-alt"></i></span> 提供技術問答的討論區</li>
<li><span class="exturl" data-url="aHR0cHM6Ly9xaWl0YS5jb20vb2ZmaWNpYWwtZXZlbnRz">公式イベント<i class="fa fa-external-link-alt"></i></span>（Event）：官方不定期會舉辦相關活動，例如目前正在進行的「iOS / Android 強化月間」主題徵求投稿活動，也能回顧過去分享的影片與主題文章</li>
<li><span class="exturl" data-url="aHR0cHM6Ly9xaWl0YS5jb20vb2ZmaWNpYWwtY29sdW1ucw==">公式コラム<i class="fa fa-external-link-alt"></i></span>（Column）：官方文章專欄</li>
<li><span class="exturl" data-url="aHR0cHM6Ly9xaWl0YS5jb20vb3Bwb3J0dW5pdGllcw==">募集<i class="fa fa-external-link-alt"></i></span>：可外連到 <span class="exturl" data-url="aHR0cHM6Ly9qb2JzLnFpaXRhLmNvbS9kZXZfdGFsa3MvYWJvdXQ=">Devトーク<i class="fa fa-external-link-alt"></i></span>（Talk），提供能夠讓工程師交換職場相關資訊的平台</li>
<li><span class="exturl" data-url="aHR0cHM6Ly9xaWl0YS5jb20vb3JnYW5pemF0aW9ucw==">Organization<i class="fa fa-external-link-alt"></i></span>：顯示公司貢獻排行與介紹，這點和其他以「個人」為主體的討論社群很不一樣，能夠直接觀察該公司近年關心的技術主題，或公司社員對於技術的討論風氣如何等等</li>
</ul>
<p>之所以會接觸到 Qiita 這個社群平台，主要是看到 2020 年這篇鐵人賽主題：<span class="exturl" data-url="aHR0cHM6Ly9pdGhlbHAuaXRob21lLmNvbS50dy91c2Vycy8yMDEyOTcxMS9pcm9ubWFuLzMyMjQ=">從 Qiita 看日本前端趨勢<i class="fa fa-external-link-alt"></i></span>。雖然這系列很可惜沒有完賽，但也很慶幸因為這個契機，能夠藉這個管道從日本人的角度探索各種技術知識。</p>
<p>自己本身也自學過一點日文，希望能延續這個主題，透過參加這次鐵人賽作為動力，強迫自己累積更多翻譯經驗，同時又能精進前後端等各領域的知識，真是一石三鳥！</p>
<h2 id="主題架構"><a href="#主題架構" class="headerlink" title="主題架構"></a>主題架構</h2><p>雖然標題包含「前端工程師」，但不代表主題會特別著重前端領域。在這為期三十天鐵人挑戰賽，希望能夠根據不同領域，挑選幾篇感興趣的內容進行翻譯，也許領域有點雜，還是希望能發揮工程師的雜食精神（？）把各種知識吞下，即使無法在一開始就全盤理解，先求有個知識背景，或許將來的自己有機會用上也說不定。</p>
<p>內容預計將涵蓋以下主題，後續也可能進行增刪微調：</p>
<h3 id="非程式語言"><a href="#非程式語言" class="headerlink" title="非程式語言"></a>非程式語言</h3><ul>
<li>入門篇</li>
<li>豆知識篇</li>
<li>職涯篇</li>
<li>AI 篇</li>
</ul>
<h3 id="程式語言"><a href="#程式語言" class="headerlink" title="程式語言"></a>程式語言</h3><ul>
<li>前端技術篇</li>
<li>後端技術篇</li>
<li>雲端篇</li>
</ul>
<h2 id="文章列表"><a href="#文章列表" class="headerlink" title="文章列表"></a>文章列表</h2><p>文章類別與連結，整理列表如下：</p>
<blockquote>
<p>本系列文章已同步更新至<a href="https://heidiliu2020.github.io/categories/2023%E9%90%B5%E4%BA%BA%E8%B3%BD/">個人部落格</a>。</p>
</blockquote>
<table>
<thead>
<tr>
<th>Title</th>
<th>Categories</th>
<th>Blog</th>
</tr>
</thead>
<tbody><tr>
<td><span class="exturl" data-url="aHR0cHM6Ly9pdGhlbHAuaXRob21lLmNvbS50dy9hcnRpY2xlcy8xMDMxNTIwNA==">Day1 - 前言與系列大綱<i class="fa fa-external-link-alt"></i></span></td>
<td><code>入門篇</code></td>
<td><a href="https://heidiliu2020.github.io/ironman-2023-day-1/">LINK</a></td>
</tr>
<tr>
<td><span class="exturl" data-url="aHR0cHM6Ly9pdGhlbHAuaXRob21lLmNvbS50dy9hcnRpY2xlcy8xMDMxOTcxOA==">Day2 - 寫給工程師的自我管理入門<i class="fa fa-external-link-alt"></i></span></td>
<td><code>入門篇</code></td>
<td><a href="https://heidiliu2020.github.io/ironman-2023-day-2/">LINK</a></td>
</tr>
<tr>
<td><span class="exturl" data-url="aHR0cHM6Ly9pdGhlbHAuaXRob21lLmNvbS50dy9hcnRpY2xlcy8xMDMyMTI0NQ==">Day3 - 工程師必備技能——Google 之力<i class="fa fa-external-link-alt"></i></span></td>
<td><code>入門篇</code></td>
<td><a href="https://heidiliu2020.github.io/ironman-2023-day-3/">LINK</a></td>
</tr>
<tr>
<td><span class="exturl" data-url="aHR0cHM6Ly9pdGhlbHAuaXRob21lLmNvbS50dy9hcnRpY2xlcy8xMDMyMTM5Nw==">Day4    - 寫給菜鳥工程師有關變數/函數/方法的英文命名規則<i class="fa fa-external-link-alt"></i></span></td>
<td><code>入門篇</code></td>
<td><a href="https://heidiliu2020.github.io/ironman-2023-day-4/">LINK</a></td>
</tr>
<tr>
<td><span class="exturl" data-url="aHR0cHM6Ly9pdGhlbHAuaXRob21lLmNvbS50dy9hcnRpY2xlcy8xMDMyMzEyMA==">Day5 - 解析惡名昭彰的滑動廣告<i class="fa fa-external-link-alt"></i></span></td>
<td><code>豆知識篇</code></td>
<td><a href="https://heidiliu2020.github.io/ironman-2023-day-5/">LINK</a></td>
</tr>
<tr>
<td><span class="exturl" data-url="aHR0cHM6Ly9pdGhlbHAuaXRob21lLmNvbS50dy9hcnRpY2xlcy8xMDMyMzgyMA==">Day6 - 你知道使用免費 Wi-Fi 時可能洩露機密訊息的途徑有哪些嗎<i class="fa fa-external-link-alt"></i></span></td>
<td><code>豆知識篇</code></td>
<td><a href="https://heidiliu2020.github.io/ironman-2023-day-6/">LINK</a></td>
</tr>
<tr>
<td><span class="exturl" data-url="aHR0cHM6Ly9pdGhlbHAuaXRob21lLmNvbS50dy9hcnRpY2xlcy8xMDMyNDY3Ng==">Day7 - 為什麼軟體必須要版本升級<i class="fa fa-external-link-alt"></i></span></td>
<td><code>豆知識篇</code></td>
<td><a href="https://heidiliu2020.github.io/ironman-2023-day-7/">LINK</a></td>
</tr>
<tr>
<td><span class="exturl" data-url="aHR0cHM6Ly9pdGhlbHAuaXRob21lLmNvbS50dy9hcnRpY2xlcy8xMDMyNTQ5MA==">Day8 - 鹽加密的鹽通常會存放在哪裡<i class="fa fa-external-link-alt"></i></span></td>
<td><code>豆知識篇</code></td>
<td><a href="https://heidiliu2020.github.io/ironman-2023-day-8/">LINK</a></td>
</tr>
<tr>
<td><span class="exturl" data-url="aHR0cHM6Ly9pdGhlbHAuaXRob21lLmNvbS50dy9hcnRpY2xlcy8xMDMyNjE5OQ==">Day9 - 有魅力的 Repository 會如何撰寫 README.md<i class="fa fa-external-link-alt"></i></span></td>
<td><code>入門篇</code></td>
<td><a href="https://heidiliu2020.github.io/ironman-2023-day-9/">LINK</a></td>
</tr>
<tr>
<td><span class="exturl" data-url="aHR0cHM6Ly9pdGhlbHAuaXRob21lLmNvbS50dy9hcnRpY2xlcy8xMDMyNjIzMQ==">Day10 - 透過圖文理解 S.O.L.I.D 原則<i class="fa fa-external-link-alt"></i></span></td>
<td><code>入門篇</code></td>
<td><a href="https://heidiliu2020.github.io/ironman-2023-day-10/">LINK</a></td>
</tr>
<tr>
<td><span class="exturl" data-url="aHR0cHM6Ly9pdGhlbHAuaXRob21lLmNvbS50dy9hcnRpY2xlcy8xMDMyODEyMQ==">Day11 - 調查工程師的 alias 設定排行<i class="fa fa-external-link-alt"></i></span></td>
<td><code>豆知識篇</code></td>
<td><a href="https://heidiliu2020.github.io/ironman-2023-day-11/">LINK</a></td>
</tr>
<tr>
<td><span class="exturl" data-url="aHR0cHM6Ly9pdGhlbHAuaXRob21lLmNvbS50dy9hcnRpY2xlcy8xMDMyODEyMA==">Day12 - 外國「為什麼日本無法像硬體時代一樣在軟體方面表現出色？」<i class="fa fa-external-link-alt"></i></span></td>
<td><code>豆知識篇</code></td>
<td><a href="https://heidiliu2020.github.io/ironman-2023-day-12/">LINK</a></td>
</tr>
<tr>
<td><span class="exturl" data-url="aHR0cHM6Ly9pdGhlbHAuaXRob21lLmNvbS50dy9hcnRpY2xlcy8xMDMyOTY1OA==">Day13 - 工程師邁向下一階段的學習方法<i class="fa fa-external-link-alt"></i></span></td>
<td><code>職涯篇</code></td>
<td><a href="https://heidiliu2020.github.io/ironman-2023-day-13/">LINK</a></td>
</tr>
<tr>
<td><span class="exturl" data-url="aHR0cHM6Ly9pdGhlbHAuaXRob21lLmNvbS50dy9hcnRpY2xlcy8xMDMzMDM3Ng==">Day14 - 希望看到的工程師履歷撰寫方式<i class="fa fa-external-link-alt"></i></span></td>
<td><code>職涯篇</code></td>
<td><a href="https://heidiliu2020.github.io/ironman-2023-day-14/">LINK</a></td>
</tr>
<tr>
<td><span class="exturl" data-url="aHR0cHM6Ly9pdGhlbHAuaXRob21lLmNvbS50dy9hcnRpY2xlcy8xMDMzMTE4OA==">Day15 - 面試官在面試工程師時真正想知道的事情 <i class="fa fa-external-link-alt"></i></span></td>
<td><code>職涯篇</code></td>
<td><a href="https://heidiliu2020.github.io/ironman-2023-day-15/">LINK</a></td>
</tr>
<tr>
<td><span class="exturl" data-url="aHR0cHM6Ly9pdGhlbHAuaXRob21lLmNvbS50dy9hcnRpY2xlcy8xMDMzMTgyMQ==">Day16 - Node.js 是什麼？為什麼大家都在使用？<i class="fa fa-external-link-alt"></i></span></td>
<td><code>前端篇</code></td>
<td><a href="https://heidiliu2020.github.io/ironman-2023-day-16/">LINK</a></td>
</tr>
<tr>
<td><span class="exturl" data-url="aHR0cHM6Ly9pdGhlbHAuaXRob21lLmNvbS50dy9hcnRpY2xlcy8xMDMzMjQ2NA==">Day17 - 告別 jQuery：現代開發不可或缺的 JavaScript 方法<i class="fa fa-external-link-alt"></i></span></td>
<td><code>前端篇</code></td>
<td><a href="https://heidiliu2020.github.io/ironman-2023-day-17/">LINK</a></td>
</tr>
<tr>
<td><span class="exturl" data-url="aHR0cHM6Ly9pdGhlbHAuaXRob21lLmNvbS50dy9hcnRpY2xlcy8xMDMzMzE3MA==">Day18 - 推薦給前端工程師的 Chrome 擴充功能<i class="fa fa-external-link-alt"></i></span></td>
<td><code>工具篇</code></td>
<td><a href="https://heidiliu2020.github.io/ironman-2023-day-18/">LINK</a></td>
</tr>
<tr>
<td><span class="exturl" data-url="aHR0cHM6Ly9pdGhlbHAuaXRob21lLmNvbS50dy9hcnRpY2xlcy8xMDMzMzc0NQ==">Day19 - 使用 Visual Studio Code 時絕對要安裝的擴充套件 Top20【2022年最新版】<i class="fa fa-external-link-alt"></i></span></td>
<td><code>工具篇</code></td>
<td><a href="https://heidiliu2020.github.io/ironman-2023-day-19/">LINK</a></td>
</tr>
<tr>
<td><span class="exturl" data-url="aHR0cHM6Ly9pdGhlbHAuaXRob21lLmNvbS50dy9hcnRpY2xlcy8xMDMzNDQ3Mg==">Day20 - 馬上就能使用的免費 Web API 總覽【2023年最新版】<i class="fa fa-external-link-alt"></i></span></td>
<td><code>前端篇</code></td>
<td><a href="https://heidiliu2020.github.io/ironman-2023-day-20/">LINK</a></td>
</tr>
<tr>
<td><span class="exturl" data-url="aHR0cHM6Ly9pdGhlbHAuaXRob21lLmNvbS50dy9hcnRpY2xlcy8xMDMzNDY4MA==">Day21 - 日本數位廳的網站太扯了www<i class="fa fa-external-link-alt"></i></span></td>
<td><code>前端篇</code></td>
<td><a href="https://heidiliu2020.github.io/ironman-2023-day-21/">LINK</a></td>
</tr>
<tr>
<td><span class="exturl" data-url="aHR0cHM6Ly9pdGhlbHAuaXRob21lLmNvbS50dy9hcnRpY2xlcy8xMDMzNTYyNA==">Day22 - 程式設計最難的部分我認為是「估算成本」<i class="fa fa-external-link-alt"></i></span></td>
<td><code>入門篇</code></td>
<td><a href="https://heidiliu2020.github.io/ironman-2023-day-22/">LINK</a></td>
</tr>
<tr>
<td><span class="exturl" data-url="aHR0cHM6Ly9pdGhlbHAuaXRob21lLmNvbS50dy9hcnRpY2xlcy8xMDMzNjM1OQ==">Day23 - ChatGPT 使用方法總整理<i class="fa fa-external-link-alt"></i></span></td>
<td><code>工具篇</code></td>
<td><a href="https://heidiliu2020.github.io/ironman-2023-day-23/">LINK</a></td>
</tr>
<tr>
<td><span class="exturl" data-url="aHR0cHM6Ly9pdGhlbHAuaXRob21lLmNvbS50dy9hcnRpY2xlcy8xMDMzNjg4Mg==">Day24 - 啊？你還在用 ChatGPT 嗎？ Bing 可以免費使用 GPT-4 喔！<i class="fa fa-external-link-alt"></i></span></td>
<td><code>工具篇</code></td>
<td><a href="https://heidiliu2020.github.io/ironman-2023-day-24/">LINK</a></td>
</tr>
<tr>
<td><span class="exturl" data-url="aHR0cHM6Ly9pdGhlbHAuaXRob21lLmNvbS50dy9hcnRpY2xlcy8xMDMzNzQ5Mg==">Day25 - 成為具備需求定義～系統設計能力人才的文章<i class="fa fa-external-link-alt"></i></span></td>
<td><code>後端篇</code></td>
<td><a href="https://heidiliu2020.github.io/ironman-2023-day-25/">LINK</a></td>
</tr>
<tr>
<td><span class="exturl" data-url="aHR0cHM6Ly9pdGhlbHAuaXRob21lLmNvbS50dy9hcnRpY2xlcy8xMDMzNzg4Mw==">Day26 - 擁有 20 多年工程師經驗的我，在撰寫設計規格書時所注意的事情<i class="fa fa-external-link-alt"></i></span></td>
<td><code>入門篇</code></td>
<td><a href="https://heidiliu2020.github.io/ironman-2023-day-26/">LINK</a></td>
</tr>
<tr>
<td><span class="exturl" data-url="aHR0cHM6Ly9pdGhlbHAuaXRob21lLmNvbS50dy9hcnRpY2xlcy8xMDMzODMwNQ==">Day27 - [常有的事]克服「卡住時，請立刻提問」的方法<i class="fa fa-external-link-alt"></i></span></td>
<td><code>入門篇</code></td>
<td><a href="https://heidiliu2020.github.io/ironman-2023-day-27/">LINK</a></td>
</tr>
<tr>
<td><span class="exturl" data-url="aHR0cHM6Ly9pdGhlbHAuaXRob21lLmNvbS50dy9hcnRpY2xlcy8xMDMzODkwNQ==">Day28 - 事到如今問不出口的 Log 基礎和設計指南<i class="fa fa-external-link-alt"></i></span></td>
<td><code>後端篇</code></td>
<td><a href="https://heidiliu2020.github.io/ironman-2023-day-28/">LINK</a></td>
</tr>
<tr>
<td><span class="exturl" data-url="aHR0cHM6Ly9pdGhlbHAuaXRob21lLmNvbS50dy9hcnRpY2xlcy8xMDMzOTQwMw==">Day29 - AWS Engineer Roadmap 2023<i class="fa fa-external-link-alt"></i></span></td>
<td><code>雲端篇</code></td>
<td><a href="https://heidiliu2020.github.io/ironman-2023-day-29/">LINK</a></td>
</tr>
<tr>
<td><span class="exturl" data-url="aHR0cHM6Ly9pdGhlbHAuaXRob21lLmNvbS50dy9hcnRpY2xlcy8xMDMzOTk3Mg==">Day30 - 對技術不感興趣有什麼錯？<i class="fa fa-external-link-alt"></i></span></td>
<td><code>職涯篇</code></td>
<td><a href="https://heidiliu2020.github.io/ironman-2023-day-30/">LINK</a></td>
</tr>
<tr>
<td><span class="exturl" data-url="aHR0cHM6Ly9pdGhlbHAuaXRob21lLmNvbS50dy9hcnRpY2xlcy8xMDMzOTk5OQ==">Day31 - 結語 &amp; 關於翻譯的一點心得<i class="fa fa-external-link-alt"></i></span></td>
<td><code>入門篇</code></td>
<td><a href="https://heidiliu2020.github.io/ironman-2023-day-31/">LINK</a></td>
</tr>
</tbody></table>
<p>自己並非專職翻譯，用詞可能會無法完整傳達原文想表達的意境，若發現文章內有錯誤或需要改進的地方，還請讀者們留言指教，謝謝。</p>
<p>那麼，雖然壓線在最後一天發文，期許自己能夠順利完賽，我們明天見！</p>
]]></content>
      <categories>
        <category>2023鐵人賽</category>
        <category>入門篇</category>
      </categories>
      <tags>
        <tag>ironman2023</tag>
        <tag>Qiita</tag>
      </tags>
  </entry>
  <entry>
    <title>[2023 15th鐵人賽] Day2 - 寫給工程師的自我管理入門</title>
    <url>/ironman-2023-day-2/</url>
    <content><![CDATA[<blockquote>
<p>原文連結：<span class="exturl" data-url="aHR0cHM6Ly9xaWl0YS5jb20vWVVNXzMvaXRlbXMvZTBkNzM0NjkwZDZhYTM3YzUxMjU/dXRtX3NvdXJjZT1RaWl0YSVFMyU4MyU4QiVFMyU4MyVBNSVFMyU4MyVCQyVFMyU4MiVCOSZ1dG1fY2FtcGFpZ249OGZmMmQxMjgwOC1RaWl0YV9uZXdzbGV0dGVyXzU3Nl8wN18yNiZ1dG1fbWVkaXVtPWVtYWlsJnV0bV90ZXJtPTBfZTQ0ZmVhYTA4MS04ZmYyZDEyODA4LTYyODIwNDQ5">エンジニアのための自己管理入門 - Qiita<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
<p>之所以會選擇這篇，是因為自己近期也面臨類似的情景，沒辦法全心投入預計完成的目標。回想過去學習程式語言的經驗，要想完成任何事情的前提，就是必須先建立「良好的心理狀態」，也可能只是「努力用錯了方法」，導致挫折的累積也說不定。</p>
<span id="more"></span>

<p>於是想在開頭找有關自我管理的文章，看看其他人是怎麼做的，有什麼方法能夠參考並套用在自己身上，試著把自己拉出「無法有產出 ⇒ 感到愧疚 ⇒ 想要逃避」這樣的無盡循環。</p>
<p>雖然翻到一半才發現篇幅比預期的要長許多XD 但其實可以發現，有些觀念可能聽過卻不是那麼瞭解，透過這個機會重新學習。</p>
<p>那麼，以下正文開始。</p>
<hr>
<p>[toc]</p>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在公司內部舉辦的 Todo 管理讀書會上，我當時制作了相關資料。我想這是一個整理自己想法的好機會，於是決定用文字記錄下來。</p>
<p>「自我管理」是一個很少在社會上被討論的主題，且往往被視為「理所當然」。我花費半年的時間運用「自我管理」，透過每週持續進行改善，我希望能將這個方法傳達給更多人。</p>
<p>當然，這並不一定就是最佳解，相信每個人都有其認為的最佳方案。我希望能抱持「每個人都是對的，但各有所長」的態度來享受閱讀過程。</p>
<p>之所以選用這個標題，是因為我覺得文章內容較為系統性，假定對象擁有操作能力為前提而制定的標題。</p>
<h2 id="概念篇"><a href="#概念篇" class="headerlink" title="概念篇"></a>概念篇</h2><p>在探討「自我管理」之前，我認為「這部分是不能被忽略的」，因此把概念篇放在介紹如何實踐的章節前面。請務必先閱讀這一章節，再接著閱讀如何實踐的部分。</p>
<p>如果忽略了「事前準備」，很有可能會變成「自我機械化」，反而忘記「我究竟想要做些什麼？」，演變成這樣的情況，因此事前準備非常重要。</p>
<h3 id="什麼是「自我管理」？"><a href="#什麼是「自我管理」？" class="headerlink" title="什麼是「自我管理」？"></a>什麼是「自我管理」？</h3><p>簡單來說，「自我管理」有分各種類型，包括「健康管理」、「時間管理」、「情緒管理」、「動機管理」和「財務管理」等等。</p>
<p>如果想一次處理完所有事情，最終可能只會感到筋疲力盡。因此，這裡討論的「自我管理」主要會關注「時間管理」和「動機管理」這兩個部分。</p>
<h3 id="「自我管理」的目的"><a href="#「自我管理」的目的" class="headerlink" title="「自我管理」的目的"></a>「自我管理」的目的</h3><p>我們進行「自我管理」的目的，是為了透過意志力優先處理真正重要的事情。</p>
<p>這並不僅僅是完成眼前的任務或工作。 「自我管理」是<strong>為了過上更有效率的生活</strong>，確定生活中真正需要做的事情，並選擇不必要做的事情。</p>
<p>對於日常業務繁忙而未能重新審視自己，或對於「我現在的狀況就可以了嗎？」感到疑惑的人，請藉此機會反思看看。</p>
<p><img src="https://hackmd.io/_uploads/B1rlC8Qk6.png"></p>
<p><img src="https://hackmd.io/_uploads/HJ2xALXy6.png"></p>
<h3 id="擁有人生「願景-目標（Vision）」"><a href="#擁有人生「願景-目標（Vision）」" class="headerlink" title="擁有人生「願景 / 目標（Vision）」"></a>擁有人生「願景 / 目標（Vision）」</h3><h4 id="「你想成為怎樣的人？」"><a href="#「你想成為怎樣的人？」" class="headerlink" title="「你想成為怎樣的人？」"></a>「你想成為怎樣的人？」</h4><p>當被問到「目標」時，很多人可能會想「目標到底是什麼⋯⋯」。 「目標」可以用各種詞彙來表達，例如「Mission・Statement（使命宣言）」「Personal Mastery（自我超越）」「Will（意志）」「夢想」等等。 也就是「我到底想要做什麼？」，因為有這個「目標」才賦予了「自我管理」真正的意義。</p>
<p>在產品開發過程中，「產品目標」也同樣重要，因為這是團隊存在的意義與目的，像「北極星」指引所有人的方向。 因此，當你困惑自己該朝哪個方向前進時，「目標」就像是指南針，能讓你專注於要完成的事情。</p>
<p>需要注意的是，<strong>「目標一旦決定後，不論何時都能修改」</strong>。</p>
<p>人生充滿了不確定性，我們也無法預知時代的變遷。在這種情況下，如果「目標一旦決定就絕對不能改變」，可能會和「自己想做的事」互相抵觸， 導致無法好好運作「自我管理」。</p>
<p>實現「自我管理」的出發點，是將「現在」活在當下的我最大程度投射到「目標」中，請一定要考慮這點。</p>
<p><img src="https://hackmd.io/_uploads/HknZRU716.png"></p>
<h4 id="學習組織的「自我超越」"><a href="#學習組織的「自我超越」" class="headerlink" title="學習組織的「自我超越」"></a>學習組織的「自我超越」</h4><blockquote>
<p>參考：<span class="exturl" data-url="aHR0cHM6Ly93d3cuY2hhbmdlLWFnZW50LmpwL2xlYXJuaW5nb3JnYW5pemF0aW9uLzVkaXNjaXBsaW5lcy9wZXJzb25hbF9tYXN0ZXJ5Lmh0bWw=">学習する組織 - 自己マスタリー<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
<p>在學習型組織中，也有「自我超越」的概念。這明確了個人的「目標」，並以內在動機為基礎，積極培養足以實現「目標」的能力和意識。</p>
<h4 id="七個習慣「Mission・Statement（使命宣言）」"><a href="#七個習慣「Mission・Statement（使命宣言）」" class="headerlink" title="七個習慣「Mission・Statement（使命宣言）」"></a>七個習慣「Mission・Statement（使命宣言）」</h4><p><img src="https://hackmd.io/_uploads/SkJRAU71a.png"></p>
<p>如「七個習慣」所言，透過使命宣言，我們能夠適應生活中的變化，不帶偏見地面對現實。即使身處多變的世界中，也能堅實自己的核心去挑戰各種事物。</p>
<p>無論別人如何評價，只要能告訴自己「我擁有這個目標，並為了實現它採取行動」，如此就能減少各種環境因素的干擾。</p>
<p><img src="https://hackmd.io/_uploads/ryKCCIQkp.png"></p>
<p>當思考這個問題時，得到的即是「成功的定義」，這也是「七個習慣」所提及的。</p>
<p><strong>你希望在自己喪禮上聽到什麼樣的評價？</strong></p>
<h4 id="【專欄】Scrum-和自我管理"><a href="#【專欄】Scrum-和自我管理" class="headerlink" title="【專欄】Scrum 和自我管理"></a>【專欄】Scrum 和自我管理</h4><p>在 Scrum 中，建議團隊成為「自我管理型」團隊，以進行產品開發。</p>
<p>為此，首先要讓團隊中的每位成員能夠「自我管理」，透過每個人的「自我管理」，能夠實現衝刺承諾（Sprint Commitment）和創造產品增量（Increment）。</p>
<p>《讓組織從核心開始敏捷（組織を芯からアジャイルにする）》一書也強調了「自我管理」的重要性，有興趣的話可以參考看看。</p>
<h3 id="Getting-Things-Done"><a href="#Getting-Things-Done" class="headerlink" title="Getting Things Done"></a>Getting Things Done</h3><p><img src="https://hackmd.io/_uploads/rkrgJD7kp.png"></p>
<blockquote>
<p><span class="exturl" data-url="aHR0cHM6Ly9ndGQtamFwYW4uanAv">GTD（Getting Things Done）<i class="fa fa-external-link-alt"></i></span>是一種有助於提高個人和組織生產力的方法。 </p>
</blockquote>
<p>GTD 主要由五個步驟組成，非常適合進行任務管理。除了任務管理，也能應用在許多不同的領域。</p>
<p>這五個步驟包括：</p>
<ol>
<li>把握 Capture</li>
<li>理清 Clarify</li>
<li>整理 Organize</li>
<li>更新 Reflect</li>
<li>選擇執行 Engage</li>
</ol>
<p>這裡簡單說明每個階段但不詳細介紹。「把握」階段是立刻將腦中的任務或想法記錄在收件匣中，再透過「理清」步驟決定是否執行這些任務。</p>
<p>「整理」階段會根據任務性質進行分類，而「更新」階段會將行動清單更新到最新狀態，在這裡重新考慮優先順序，刪除隨著時間變得不再必要的任務。</p>
<p>最後是「選擇執行」，根據自己可用的精力、當前狀況、優先順序以及動力來選擇要執行哪些任務。</p>
<p>任務管理就是建立以 GTD 為基礎建構的。</p>
<h3 id="Calendar"><a href="#Calendar" class="headerlink" title="Calendar"></a>Calendar</h3><p><img src="https://hackmd.io/_uploads/HkyX1vQya.png"></p>
<p>這是從書籍《工程管理者的工作（エンジニアリングマネージャー）》中引用的一個章節。</p>
<p>行事曆是用於「時間」管理的工具，以確保休息時間，保留不希望受到干擾的時間。由於行事曆是公開的，使用時必須考慮到這一點。</p>
<p>例如，你是一名管理者。希望自己的下屬在遇到問題時能夠隨意來找你討論。然而，當查看你的 Google 行事曆時，發現從早到晚都被會議或其他安排塞得滿滿的。在這種情況下，你的下屬還能隨時來尋求你的意見嗎？</p>
<p>如果希望下屬能夠向你請教，請確保行事曆中保留足夠的「空白」時間。任務固然重要，但在人際關係中，耽誤可能導致無法挽回的局面，或讓事情變得更棘手。如果能儘早解決，空出處理的時間可能會更明智。</p>
<h3 id="任務拆解入門"><a href="#任務拆解入門" class="headerlink" title="任務拆解入門"></a>任務拆解入門</h3><p><img src="https://hackmd.io/_uploads/ry8EkDXJT.png"></p>
<p>將任務拆分成「可執行的」大小，可以更容易採取行動，避免將任務「加入待辦清單卻未執行」的情況。 在眾多拆解任務的方法當中，最容易理解的是 Teibi さん 在 Zenn 的著作<span class="exturl" data-url="aHR0cHM6Ly96ZW5uLmRldi90YnBnci9ib29rcy84NTYyMjkzZDUxOWI4Yg==">《任務拆解入門（タスクばらし入門）》<i class="fa fa-external-link-alt"></i></span>。</p>
<p>這本書分為幾個章節，包括「簡單的任務拆解」、「依賴其他公司的任務拆解」、「有條件分支的任務拆解」、「重複性任務拆解」和「重新審視任務拆解」。</p>
<p>對於不熟悉任務拆解的人來說，很容易陷入「這任務該如何拆解呢⋯⋯」的情況，而這本書在填補這段差距方面發揮了極大作用。請務必參考這本書。</p>
<p>另外，<strong>任務</strong>通常指的是以動詞為結尾的事項。在建立任務時，有意識地考慮一點將有助於提高效果。當面對沒有動詞的待辦事項清單時，可能會遇到「等等，這個任務是做什麼的來著」的情況，反而需要花更多時間。因為花費更多的時間，可能無意中避免去執行某些任務。如果想要有效率地完成任務，建議有意識地在<strong>任務中盡量使用動詞</strong>。（當然也不能忘記進行拆解）</p>
<h3 id="艾森豪矩陣-Eisenhower-Matrix"><a href="#艾森豪矩陣-Eisenhower-Matrix" class="headerlink" title="艾森豪矩陣 Eisenhower Matrix"></a>艾森豪矩陣 Eisenhower Matrix</h3><p><img src="https://hackmd.io/_uploads/HJUrJv7kp.png"></p>
<p>這是由美國第 34 任總統　<strong>德懷特·D·艾森豪</strong>提倡的概念。</p>
<p>艾森豪矩陣（Eisenhower Matrix）將事項分成以下四個象限：</p>
<ul>
<li>重要且緊急</li>
<li>重要但不緊急</li>
<li>不重要卻緊急</li>
<li>不重要且不緊急</li>
</ul>
<p>一開始我也疑惑該如何使用這四個象限。然而，這個概念其實相當簡單，我在《七個習慣》這本書中找到了答案。</p>
<p>簡單來說，艾森豪矩陣的目的是<strong>增加第二象限（重要但不緊急）的任務</strong>。</p>
<p>通過增加第二象限的任務，人們可以更有效地達到自我實現和目標實現。<br>為什麼增加第二象限的任務能有助於人們達到自我實現和目標實現呢？如果增加其他象限的任務會有什麼後果？</p>
<p><img src="https://hackmd.io/_uploads/r1z8yDmkT.png"></p>
<h4 id="重要且緊急（第一象限）增加時⋯⋯"><a href="#重要且緊急（第一象限）增加時⋯⋯" class="headerlink" title="重要且緊急（第一象限）增加時⋯⋯"></a>重要且緊急（第一象限）增加時⋯⋯</h4><p>重要且緊急的任務意外地常見，首先以這些任務為例：</p>
<ul>
<li>有截止日期的工作</li>
<li>迫在眉睫的問題</li>
<li>對危機的應對</li>
</ul>
<p>當這些事情增加時，可能會引發以下情況：</p>
<ul>
<li>感到筋疲力盡</li>
<li>忙於危機管理</li>
<li>累積壓力</li>
<li>忙著解決問題</li>
</ul>
<p>遇到這種狀況，只用想的也讓人覺得麻煩呢⋯⋯。</p>
<h4 id="不重要卻緊急（第三象限）增加時⋯⋯"><a href="#不重要卻緊急（第三象限）增加時⋯⋯" class="headerlink" title="不重要卻緊急（第三象限）增加時⋯⋯"></a>不重要卻緊急（第三象限）增加時⋯⋯</h4><p>當緊急但不重要的任務增加時，可能會出現以下情況：</p>
<ul>
<li>大量的會議</li>
<li>大量的郵件和報告</li>
<li>有期限的活動</li>
<li>無意義的交際和應酬</li>
</ul>
<p>當這些任務增加時，可能會導致：</p>
<ul>
<li>陷入短期視野</li>
<li>被周圍事物左右</li>
<li>人際關係變得膚淺</li>
<li>覺得目標和計劃毫無意義</li>
</ul>
<p>換句話說，可能只為了處理眼前的任務而忙碌，無法實現設定目標或計劃，反而被眼前的事務所左右，最終感到「毫無意義」。</p>
<h4 id="不重要且不緊急（第四象限）增加時⋯⋯"><a href="#不重要且不緊急（第四象限）增加時⋯⋯" class="headerlink" title="不重要且不緊急（第四象限）增加時⋯⋯"></a>不重要且不緊急（第四象限）增加時⋯⋯</h4><p>當不緊急且不重要的任務增加時，可能會出現以下情況：</p>
<ul>
<li>微不足道的工作或雜務</li>
<li>大量的郵件、電話</li>
<li>只追求快樂的娛樂活動</li>
<li>打發時間</li>
</ul>
<p>當這些任務增加時，可能會導致：</p>
<ul>
<li>不負責任的生活方式</li>
<li>依賴他人或社會生活</li>
<li>工作被解僱</li>
</ul>
<p>意外地，這種情況其實並不少見。</p>
<h4 id="重要但不緊急（第二象限）增加時⋯⋯"><a href="#重要但不緊急（第二象限）增加時⋯⋯" class="headerlink" title="重要但不緊急（第二象限）增加時⋯⋯"></a>重要但不緊急（第二象限）增加時⋯⋯</h4><p>在這裡，試著增加第二象限的任務：</p>
<ul>
<li>建立人際關係</li>
<li>進行準備和計劃</li>
<li>放鬆身心</li>
<li>增強實現夢想的能力</li>
<li>尋找新的機會</li>
</ul>
<p>為了實現夢想去放鬆身心、尋找並嘗試新的機會、建立更堅固的人際關係等等，均屬於這個象限的任務。</p>
<p>但需要注意的是，「加入過多同類型的任務，可能會導致進入第四象限」。例如，「放鬆身心」是非常重要的，但如果這類型任務過多，可能會趨近於「消磨時間」或「僅僅追求快樂的娛樂」。必須避免加入過多這類型的任務，並在適當的象限中保持適當的程度。</p>
<p><img src="https://hackmd.io/_uploads/H1twyDm1p.png"></p>
<p><img src="https://hackmd.io/_uploads/r1yu1wXJT.png"></p>
<h4 id="參考艾森豪矩陣的同時進行「更新」"><a href="#參考艾森豪矩陣的同時進行「更新」" class="headerlink" title="參考艾森豪矩陣的同時進行「更新」"></a>參考艾森豪矩陣的同時進行「更新」</h4><p>還記得 Getting Things Done（GTD）中提到的「更新」步驟嗎？<br>在艾森豪矩陣中，透過進行「更新」，可建立明確的判斷標準。例如對於「緊急但不重要」的任務，可以交給其他人處理；或者對於「不緊急且不重要」的任務，可以選擇不去執行。<br>同時，這個步驟也能幫助自我覺察來了解自身的狀態，例如「我現在正忙於處理緊急又重要的任務，或許需要找個時間來放鬆一下」，或者「如果繼續這樣下去，我的生活將一直被緊急重要的任務所困擾，或許我需要做些改變」，得以從更高的角度審視自己。</p>
<p>如果你之前未曾使用過這種方法，強烈建議你嘗試看看。</p>
<h3 id="時間管理的歷史"><a href="#時間管理的歷史" class="headerlink" title="時間管理的歷史"></a>時間管理的歷史</h3><p>關於時間管理的歷史，可能屬於比較小眾的話題，但在《七個習慣》書中有提到相關內容，這次就來簡要的說明。</p>
<table>
<thead>
<tr>
<th>世代</th>
<th>目的</th>
<th>主要工具</th>
</tr>
</thead>
<tbody><tr>
<td>第一世代</td>
<td>記下要做的事情</td>
<td>備忘錄、檢查清單</td>
</tr>
<tr>
<td>第二世代</td>
<td>嘗試安排未來的事件和活動</td>
<td>行事曆</td>
</tr>
<tr>
<td>第三世代</td>
<td>從長、中、短期目標中制定計劃，安排具體的日程</td>
<td>使用日曆等工具制定分鐘為單位的時間表</td>
</tr>
<tr>
<td>第四世代</td>
<td>不再把重點放在物質和時間上，而是維持人際關係，取得成果</td>
<td>使用艾森豪矩陣等工具</td>
</tr>
</tbody></table>
<p>第三世代最為特殊，以一分鐘為單位來管理日程，就像「<span class="exturl" data-url="aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3poLXR3LyVFNyU4MyU4RiVFOSVCRSU4RCVFNiVCNCVCRSVFNSU4NyVCQSVFNiU4OSU4MCVFOCVBNyU5MiVFOCU4OSVCMiVFNSU4OCU5NyVFOCVBMSVBOCMlRTklOUIlQkIlRTYlQTUlQjUlRTUlQUUlQjY=">電極家<i class="fa fa-external-link-alt"></i></span>」般遵循時間行動。這種安排在前兩天或許還能勉強應付，但最終可能讓人只是「被日程所驅使」，進而失去主觀能動性。<br>在採用這種方式進行管理時，你可能會問自己「我的人生是什麼？」，反而重新回到第二或第一世代的方式。正因如此，以第四世代為基礎進行時間管理，並為了「實現自己想做的事情」進行管理，就顯得十分重要。</p>
<h3 id="Atomic-Scrum"><a href="#Atomic-Scrum" class="headerlink" title="Atomic Scrum"></a>Atomic Scrum</h3><p><span class="exturl" data-url="aHR0cHM6Ly9zcGVha2VyZGVjay5jb20vcmF5a2F0YW9rYS9hdG9taWMtc2NydW0tZ2UtcmVuLWZhbHNlc2hlbmctY2hhbi14aW5nLXdvenVpLWRhLWh1YS1zdXJ1ZmFuZy1mYQ==">Atomic Scrum 個人の生産性を最大化する方法<i class="fa fa-external-link-alt"></i></span></p>
<p>這是由株式會社 YUMEMI 的社長片岡先生公開的自我管理資料（在這份內容中，自我實現也包括自我定義）。<br>根本的思想是一樣的，我個人也是從這份資料開始進行多方面的摸索，建議可以作為參考並更深入地理解。<br>特別是範圍目標的概念非常棒，能夠讓人擺脫「如果不這樣做就無法實現」的僵化想法。</p>
<h2 id="實踐篇"><a href="#實踐篇" class="headerlink" title="實踐篇"></a>實踐篇</h2><h3 id="選擇工具"><a href="#選擇工具" class="headerlink" title="選擇工具"></a>選擇工具</h3><p>接下來的 Todo List 管理（行動管理），我們將採用 <span class="exturl" data-url="aHR0cHM6Ly90aWNrdGljay5jb20v">TickTick<i class="fa fa-external-link-alt"></i></span>。這項工具和 <span class="exturl" data-url="aHR0cHM6Ly90b2RvaXN0LmNvbS96aC1UVw==">Todoist<i class="fa fa-external-link-alt"></i></span> 差異不大，建議使用自己習慣的工具即可。</p>
<p><span class="exturl" data-url="aHR0cHM6Ly90aWNrdGljay5jb20vaG9tZQ==">TickTick: To-do List, Tasks, Calendar, Reminder<i class="fa fa-external-link-alt"></i></span></p>
<p>總之，只要掌握了前面提到的概念，工具並不是最重要的，因為這些概念可以適用於不同的工具。當然，也並非所有事情都必須在 TickTick 上處理。</p>
<p>以下整理我在 TickTick 以外進行的事項，以及使用的替代工具：</p>
<ul>
<li>進行季度、月度和週度回顧 → Miro</li>
<li>庫存型知識、日記（兼回顧）→ Obsidian</li>
<li>保持使命和願景 → Miro</li>
<li>管理日程 → Google 日曆</li>
</ul>
<p><img src="https://hackmd.io/_uploads/Bk89JDmyp.png"></p>
<h3 id="使用-TickTick-製作待辦清單"><a href="#使用-TickTick-製作待辦清單" class="headerlink" title="使用 TickTick 製作待辦清單"></a>使用 TickTick 製作待辦清單</h3><p>如概念篇所述，我們將基於 GTD 原則來建立清單。<br>由於當中包含一些不能公開的內容，因此進行了模糊處理，可將其視為工作的專案名稱。</p>
<p><img src="https://hackmd.io/_uploads/BJgskwQkT.png"></p>
<p>清單的結構如下所示：</p>
<ul>
<li>接下來要做的事項清單（不隸屬於任何專案，可立即完成的事項）</li>
<li>專案（中長期事項）<ul>
<li>工作專案</li>
<li>所屬社群的任務</li>
<li>推進組織發展的待辦事項</li>
<li>願望清單（我想做的、感興趣的事項）</li>
</ul>
</li>
<li>等待回覆清單</li>
<li>Reminder（定期重複執行的任務，或特定時期需要提醒的事項）</li>
</ul>
<p>我準備了這樣的清單架構。另外篩選出「本日待辦事項」和「任務計畫」，每週進行「整理」時使用「任務計畫」，以一週為單位大致選擇要做的事情（不是分鐘級的安排，只是大致選擇本週想完成的事項）。</p>
<p>經過篩選的「本日待辦事項」只會顯示「本週計畫完成」的事項。</p>
<p>透過將「本日待辦事項」列為清單，能夠在一天開始時俯瞰「需要完成的任務」，並大致估算出所需時間。</p>
<h3 id="TickTick-的艾森豪矩陣"><a href="#TickTick-的艾森豪矩陣" class="headerlink" title="TickTick 的艾森豪矩陣"></a>TickTick 的艾森豪矩陣</h3><p>顯示的任務內容已經過模糊處理，付費使用可自定義艾森豪矩陣。</p>
<p><img src="https://hackmd.io/_uploads/Bky3yDX1p.png"></p>
<p>通過將這個艾森豪矩陣限定為「接下來要做的事項清單」和「專案子項目」，能夠更清楚看到「我需要優先處理的事項」。<br>要在 TickTick 上有效使用艾森豪矩陣，必須善用「優先度」的概念。<br>而這個「優先度」可分為「高、中、低」，標準如概念篇中介紹的「第一象限/第二象限/第三象限/第四象限」。<br>例如，自我實現的任務會歸類為「中」，而公司「必需完成的任務」則會歸類為「高」。<br><strong>不隨意標註優先度，而是根據明確的標準來分配優先度這件事非常重要。</strong></p>
<h3 id="TickTick-的習慣"><a href="#TickTick-的習慣" class="headerlink" title="TickTick 的習慣"></a>TickTick 的習慣</h3><p>在前面提到的 Atomic Scrum，認為檢查「習慣」非常重要。TickTick 預設帶有習慣追踪器，能將小事到大事都納入習慣中。<br>最近自己沒達成的習慣有點多，所以不太好意思公開，但通過像圖片的形式，能夠立即顯示「何時執行」和「已經執行了多少天」，讓習慣一目瞭然。</p>
<p><img src="https://hackmd.io/_uploads/HJvp1vmya.png"></p>
<h3 id="TickTick-的行事曆"><a href="#TickTick-的行事曆" class="headerlink" title="TickTick 的行事曆"></a>TickTick 的行事曆</h3><p>透過付費功能，TickTick 可以從Google日曆等日曆工具進行同步。儘管稱作同步，實際上是從 Google 日曆單向同步到 TickTick，因此不必擔心會誤改到計劃，非常易於使用。</p>
<p><img src="https://hackmd.io/_uploads/ByzRkP716.png"></p>
<p>透過右側的圖標可查看任務列表，即可透過日曆視圖，在特定時段進行粗略的任務規劃。<br>若按照分鐘為單位安排日程，則屬於第三代時間管理模式，雖然這種方式較少使用，有時還是會在「這項任務要做到什麼時候」，這類有截止期限的情況下使用。<br>此外，由於可直觀看到個人的空閒和忙碌時段，在早上或前一天就能得知「今天可以花多少時間學習」，這樣就不容易浪費時間了。</p>
<h3 id="執行流程"><a href="#執行流程" class="headerlink" title="執行流程"></a>執行流程</h3><p>以下稍微整理從新增任務到完成的流程：</p>
<ol>
<li>思考任務</li>
<li>在全局操作中，按下「快速新增」的快捷鍵來新增任務</li>
<li>新增任務後，在空閒時從「收件匣」中選擇「優先級」、「拆解任務」和「移動到清單」，然後移動到對應的清單中</li>
<li>在每周任務計劃中，從每個清單中選擇與「為了實現這個目標，必須在本週完成的事項」相關的任務</li>
<li>接著在每週的開始，從「本日待辦事項」中選擇應該專注處理的任務，並開始執行</li>
</ol>
<p>透過遵循這段基本流程，盡可能減少操作成本，調整成「能夠愉快使用的待辦清單」。</p>
<p>當然也可以根據任務的屬性新增標籤，或透過標籤明確表示任務所需的勞力，顯示目前的執行情況，讓其他人也能同步進度。</p>
<p><strong>基本上運用非常簡單。</strong> 透過待辦事項管理這類型的工具，能夠降低操作成本和難度，關鍵是盡可能直觀地呈現想做的事情，並降低執行的門檻。</p>
<p>請務必嘗試看看。</p>
<h2 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h2><p>當我在公司內部的讀書會上分享這篇內容時，被稱作是「Todo List 版的 Clean Architecture（整潔架構） 」。</p>
<p>然而，只需具備基本概念並嘗試運用一次，就會發現操作成本低得驚人。透過「只保留絕對必要的事項，其餘都捨棄」的設計，並持續進行改進，儘管一開始可能看起來有點困難，實際執行起來非常容易運用。<br>但這種操作方法卻很少能夠持續下去。自己本身也因為怠惰，不知不覺就荒廢了許多事情。</p>
<p>但正是在這種時候，「反思」變得非常重要。透過每週進行反思，能夠在「挫折面前進行修正」，逐步進行改進，實現「即使意志薄弱也能持續下去」這件事情。</p>
<p>此外，雖然對自我管理這個主題沒有詳細介紹，但在這次分享中更著重說明「Why 為何」而非「How 如何」。</p>
<p>期許能夠通過這篇文章，激勵更多人說出「我也開始進行自我管理了！」。</p>
<h3 id="参考資料"><a href="#参考資料" class="headerlink" title="参考資料"></a>参考資料</h3><ul>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cuYW1hem9uLmNvLmpwL2RwL0IwMEtGQjVESkM=">完訳 7つの習慣 人格主義の回復: Powerful Lessons in Personal Change<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cuYW1hem9uLmNvLmpwL2RwLzQ1NzYxNTE4Nzg=">全面改訂版 はじめてのGTD ストレスフリーの整理術<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly96ZW5uLmRldi90YnBnci9ib29rcy84NTYyMjkzZDUxOWI4Yg==">タスクばらし入門<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cucnl1emVlLmNvbS9jb250ZW50cy9ibG9nLzE0NTc0">【資料公開】エンジニアリングマネージャーのしごと<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9zcGVha2VyZGVjay5jb20vcmF5a2F0YW9rYS9hdG9taWMtc2NydW0tZ2UtcmVuLWZhbHNlc2hlbmctY2hhbi14aW5nLXdvenVpLWRhLWh1YS1zdXJ1ZmFuZy1mYQ==">Atomic Scrum 個人の生産性を最大化する方法<i class="fa fa-external-link-alt"></i></span></li>
</ul>
<blockquote>
<p>15th鐵人賽目錄傳送門：<span class="exturl" data-url="aHR0cHM6Ly9pdGhlbHAuaXRob21lLmNvbS50dy91c2Vycy8yMDEzNTU1OC9pcm9ubWFuLzYyOTA=">https://ithelp.ithome.com.tw/users/20135558/ironman/6290<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
]]></content>
      <categories>
        <category>2023鐵人賽</category>
        <category>入門篇</category>
      </categories>
      <tags>
        <tag>ironman2023</tag>
        <tag>Qiita</tag>
        <tag>自我管理</tag>
      </tags>
  </entry>
  <entry>
    <title>[2023 15th鐵人賽] Day3 - 工程師必備技能——Google 之力</title>
    <url>/ironman-2023-day-3/</url>
    <content><![CDATA[<blockquote>
<p>原文連結：<span class="exturl" data-url="aHR0cHM6Ly9xaWl0YS5jb20vZG9kb25raTEyMjMvaXRlbXMvOTU1ODE5ODA2Mjk3ZWU1NTRiMzE=">ググり力、それはエンジニアには必須の能力である - Qiita<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
<p>這篇文章介紹如何善用 Google 搜尋，找到想要的答案。根據本文段落標題，整理目錄如下：</p>
<ul>
<li>使用 <code>&amp;lr=-lang_ja</code> 參數排除特定語言結果</li>
<li>用標點符號的英文名稱搜索</li>
<li>善用已定義的符號，提高搜索準確性</li>
<li>搜尋完全相符的結果</li>
<li>在特定網站中搜尋</li>
<li>新增搜尋引擎設定</li>
<li>利用排除搜尋</li>
<li>使用域名搜索</li>
<li>使用關鍵字 vs 進行比較</li>
<li>使用關鍵字 not working 查詢無法運作</li>
<li>使用關鍵字 upgrade 和 migration 查詢版本升級</li>
<li>如何搜尋多個 OSS 程式碼</li>
<li>建立屬於自己的搜尋資料庫</li>
</ul>
<span id="more"></span>

<p>以下是正文。</p>
<hr>
<p><strong>谷歌能力</strong>，對於工程師而言逐漸成為<strong>必備的技能</strong>。</p>
<p>那麼，各位能否靠自己的谷歌能力找到所需的資訊呢？</p>
<p>以下內容出自 <span class="exturl" data-url="aHR0cHM6Ly9xaWl0YS5jb20vWWFtZXRhcm8=">@Yametaro<i class="fa fa-external-link-alt"></i></span> さん的文章。</p>
<pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx">某天，在進行 Code Review 時

我：「好了，今天也來 Review 同事的 Code 啦」

我：「先從新進的 <span class="token constant">T</span> 君寫的 Code 開始吧」

我：「我來看看⋯⋯」

我：「嗯？這個 <span class="token operator">??</span> 是什麼寫法啊？」

我：「試著谷歌一下吧⋯⋯」

我：「輸入 JavaScript <span class="token operator">??</span> ，然後按下搜索按鈕」

我：「⋯⋯奇怪？怎麼沒有相關的搜索結果呢⋯⋯」

我：「可惡，標點符號相關的問題確實有時很難谷歌到答案啊⋯⋯」

我：「這樣的話，今天大概只能喝酒然後躺平了吧⋯⋯」

～喝酒，然後進入夢鄉……～<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>所以 JavaScript?? 究竟該怎麼搜尋才對呢？這裡提供一個解答作為提示！</p>
<p>那就是<strong>搜尋「javascript double question mark」</strong>。</p>
<p><img src="https://hackmd.io/_uploads/HkjRjoVJ6.png"></p>
<p>這篇文章將以切身經驗，介紹如何培養能夠有效搜尋所需資訊的谷歌能力。</p>
<h2 id="不僅限於日本網站，而是從英語網站尋找！"><a href="#不僅限於日本網站，而是從英語網站尋找！" class="headerlink" title="不僅限於日本網站，而是從英語網站尋找！"></a>不僅限於日本網站，而是從英語網站尋找！</h2><p>因為看不懂而對英語網站莫名感到厭惡嗎？</p>
<p>遺憾的是，很有可能因此無法找到真正需要的資訊。</p>
<p>考慮到日本和英語系國家的人口，<strong>英語系國家的人口明顯更多</strong>。</p>
<p>因此，相關資訊在英語網站上自然也會更多。</p>
<p>在進行搜尋時，也考慮參考英語網站上的內容吧！</p>
<h3 id="該如何搜尋英語網站呢？"><a href="#該如何搜尋英語網站呢？" class="headerlink" title="該如何搜尋英語網站呢？"></a>該如何搜尋英語網站呢？</h3><p>雖然有些許差異，但以下是「javascript double question mark」在非日語網站（主要是英語網站）的搜索結果。</p>
<p><img src="https://hackmd.io/_uploads/BJ4xhoN16.png"></p>
<p>與一般搜尋的不同之處，在於 Query Parameter（查詢參數）多了 <strong>「&amp;lr=-lang_ja」</strong> 字串。</p>
<p>通過新增 <strong>「&amp;lr=-lang_ja」</strong> 這段參數，可將搜尋範圍限制在非日語網站。</p>
<ul>
<li>排除日文：<code>&amp;lr=-lang_ja</code></li>
<li>排除繁體中文：<code>&amp;lr=-lang_zh-TW</code></li>
<li>排除簡體中文：<code>&amp;lr=-lang_zh-CN</code></li>
</ul>
<blockquote>
<p>可參考這篇指南：<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXJzLmdvb2dsZS5jb20vY3VzdG9tLXNlYXJjaC9kb2NzL2pzb25fYXBpX3JlZmVyZW5jZT9obD16aC10dw==">Programmable Search Engine
<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
<h3 id="讓加上查詢參數這件事不再麻煩"><a href="#讓加上查詢參數這件事不再麻煩" class="headerlink" title="讓加上查詢參數這件事不再麻煩"></a>讓加上查詢參數這件事不再麻煩</h3><p>每次搜尋都需要加上 <strong>「&amp;lr=-lang_ja」</strong> 參數感覺有點麻煩對吧。</p>
<p>建議可以<strong>調整瀏覽器的搜尋引擎設定</strong>，便能夠直接搜尋英語網站。</p>
<p>一旦調整完成，即可像這樣進行搜尋：</p>
<p><img src="https://i.imgur.com/xnmaTvh.gif"></p>
<h3 id="新增搜尋引擎設定"><a href="#新增搜尋引擎設定" class="headerlink" title="新增搜尋引擎設定"></a>新增搜尋引擎設定</h3><p><img src="https://i.imgur.com/pz5jTxw.gif"></p>
<p>在 Chrome 瀏覽器的網址列中輸入 <code>chrome://settings/searchEngines</code>，並按下 Enter 鍵，即可進入搜尋引擎管理畫面。</p>
<p>點擊其他搜尋引擎的「新增」按鈕，然後分別輸入「搜尋引擎」、「快捷字詞」、「網址（%s=搜尋關鍵字）」即可新增。</p>
<p>「搜尋引擎」和「快捷字詞」可依照個人喜好輸入。接著在「網址（%s=搜尋關鍵字）」欄位中，填入下方的 JavaScript 程式碼：</p>
<pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx">javascript<span class="token operator">:</span> <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  window<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span>
    <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">https://www.google.co.jp/search?q=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token function">decodeURIComponent</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">&amp;lr=-lang_ja</span><span class="token template-punctuation string">`</span></span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>在網址欄輸入的關鍵字將以 <code>%s</code> 的形式傳遞，加上 <code>&amp;lr=-lang_ja</code> 字串產生的網址會顯示新的分頁。</p>
<p>以上操作是透過 JavaScript 實現的，因為 Chrome 的設定頁面並不支援 JavaScript，因此不會在設定頁面中運作。</p>
<p>有了這項功能，即可輕鬆地從非日語網站進行搜尋。只需進行以下三個步驟，就能使用鍵盤進行快速搜索：</p>
<ol>
<li>輸入 <strong>「command + L」</strong>（導引至網址列）</li>
<li>輸入自行設定的 <strong>「快捷字詞」</strong> 後按下空格鍵</li>
<li>輸入想要查詢的 <strong>「關鍵字」</strong> 後按下 Enter 鍵</li>
</ol>
<h2 id="用符號的英文名稱進行相關搜索吧！"><a href="#用符號的英文名稱進行相關搜索吧！" class="headerlink" title="用符號的英文名稱進行相關搜索吧！"></a>用符號的英文名稱進行相關搜索吧！</h2><p>如果在搜尋欄直接輸入符號，搜尋結果可能會不如預期。那該怎麼辦才好呢？</p>
<p>正如開頭的解答所述，可透過輸入符號的英文名稱來搜索。瞭解符號正確的英文名稱將有助於進行更精準的搜索。</p>
<p>儘管也可以用日文名稱進行搜索，理解正確的英文發音仍相當重要。</p>
<h3 id="常見符號的英文名稱"><a href="#常見符號的英文名稱" class="headerlink" title="常見符號的英文名稱"></a>常見符號的英文名稱</h3><p>這裡列出一些常見符號的英文名稱，在進行搜索時可以嘗試省略 mark 或 sign 等字詞。</p>
<p>詳細結果就自己嘗試看看吧！</p>
<table>
<thead>
<tr>
<th>記號</th>
<th>英文</th>
<th>中文</th>
</tr>
</thead>
<tbody><tr>
<td>!</td>
<td>exclamation mark<br>exclamation point</td>
<td>驚嘆號</td>
</tr>
<tr>
<td>@</td>
<td>at sign<br>at symbol</td>
<td>表示「在」的符號<br>又名小老鼠</td>
</tr>
<tr>
<td>#</td>
<td>number sign<br>hash mark</td>
<td>數字記號</td>
</tr>
<tr>
<td>$</td>
<td>dollar sign</td>
<td>貨幣符號</td>
</tr>
<tr>
<td>%</td>
<td>percent sign</td>
<td>百分比符號</td>
</tr>
<tr>
<td>^</td>
<td>circumflex accent<br>caret<br>hat</td>
<td>抑揚符<br>脫字符</td>
</tr>
<tr>
<td>&amp;</td>
<td>ampersand</td>
<td>表示「和」、「與」的符號</td>
</tr>
<tr>
<td>*</td>
<td>asterisk</td>
<td>星號</td>
</tr>
<tr>
<td>/</td>
<td>slash</td>
<td>斜線</td>
</tr>
<tr>
<td>?</td>
<td>question mark</td>
<td>問號</td>
</tr>
<tr>
<td>+</td>
<td>plus sign</td>
<td>加號</td>
</tr>
<tr>
<td>-</td>
<td>minus sign<br>hyphen-minus<br>hyphen</td>
<td>減號</td>
</tr>
<tr>
<td>“</td>
<td>double quotation mark</td>
<td>雙引號</td>
</tr>
<tr>
<td>‘</td>
<td>apostrophe<br>single quotation mark</td>
<td>單引號</td>
</tr>
<tr>
<td>,</td>
<td>comma</td>
<td>逗號</td>
</tr>
<tr>
<td>:</td>
<td>colon</td>
<td>冒號</td>
</tr>
<tr>
<td>;</td>
<td>semicolon</td>
<td>分號</td>
</tr>
<tr>
<td>~</td>
<td>tilde</td>
<td>波浪號</td>
</tr>
<tr>
<td>_</td>
<td>underscore<br>underline<br>low line</td>
<td>下底線</td>
</tr>
<tr>
<td>`</td>
<td>grave accent<br>backquote</td>
<td>重音符<br>反引號</td>
</tr>
<tr>
<td>\</td>
<td>backslash<br>reverse solidus</td>
<td>反斜線</td>
</tr>
<tr>
<td>¥</td>
<td>yen sign</td>
<td>日圓符號</td>
</tr>
<tr>
<td>&lt;</td>
<td>left angle bracket<br>opening angle bracket<br>less-than sign</td>
<td>左角括弧</td>
</tr>
<tr>
<td>&gt;</td>
<td>right angle bracket<br>closing angle bracket<br>greater-than sign</td>
<td>右角括弧</td>
</tr>
<tr>
<td>[</td>
<td>left square bracket<br>opening square bracket</td>
<td>左方括弧</td>
</tr>
<tr>
<td>]</td>
<td>right square bracket<br>closing square bracket</td>
<td>右方括弧</td>
</tr>
<tr>
<td>{</td>
<td>left curly bracket<br>opening curly bracket</td>
<td>左花括弧</td>
</tr>
<tr>
<td>}</td>
<td>right curly bracket<br>closing curly bracket</td>
<td>右花括弧</td>
</tr>
<tr>
<td>(</td>
<td>left round bracket<br>left parenthesis<br>opening parenthesis</td>
<td>左括弧</td>
</tr>
<tr>
<td>)</td>
<td>right round bracket<br>right parenthesis<br>closing parenthesis</td>
<td>右括弧</td>
</tr>
</tbody></table>
<p>參考網站：</p>
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9tZW1vdGVjLm5ldC9ldGMvbWFyay5odG1s">英語の記号・マークの読み方 | 英語＠めもらんだむ<i class="fa fa-external-link-alt"></i></span></li>
</ul>
<h3 id="搜尋-ruby-的-amp-符號"><a href="#搜尋-ruby-的-amp-符號" class="headerlink" title="搜尋 ruby 的 &amp;: 符號"></a>搜尋 <strong>ruby 的 <code>&amp;:</code> 符號</strong></h3><p>試著輸入 <code>ruby ampersand colon</code>，看看搜尋結果如何吧！</p>
<p><img src="https://hackmd.io/_uploads/r1PlAsVyp.png"></p>
<h2 id="使用-Google-搜尋已定義的符號和詞彙以提高搜尋準確性！"><a href="#使用-Google-搜尋已定義的符號和詞彙以提高搜尋準確性！" class="headerlink" title="使用 Google 搜尋已定義的符號和詞彙以提高搜尋準確性！"></a>使用 Google 搜尋已定義的符號和詞彙以提高搜尋準確性！</h2><p>各位在進行搜尋時，是否只有輸入單字而已呢？</p>
<p>在 Google 搜尋中，有方法可以提高搜尋的精準度。這裡介紹幾個常被使用的主要功能。</p>
<p>詳細內容請參考官方網站：</p>
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9zdXBwb3J0Lmdvb2dsZS5jb20vd2Vic2VhcmNoL2Fuc3dlci8yNDY2NDMzP2hsPWph">ウェブ検索の精度を高める - Google 検索 ヘルプ<i class="fa fa-external-link-alt"></i></span></li>
<li>中文版：<span class="exturl" data-url="aHR0cHM6Ly9zdXBwb3J0Lmdvb2dsZS5jb20vd2Vic2VhcmNoL2Fuc3dlci8yNDY2NDMzP2hsPQ==">修正 Google 搜尋結果範圍<i class="fa fa-external-link-alt"></i></span></li>
</ul>
<h3 id="排除含特定字詞的搜尋結果"><a href="#排除含特定字詞的搜尋結果" class="headerlink" title="排除含特定字詞的搜尋結果"></a>排除含特定字詞的搜尋結果</h3><p>Google 搜尋說明頁中寫道，使用 <strong>-（減號）</strong> 可排除特定字詞的搜尋結果。</p>
<blockquote>
<p>在要排除的字詞前加上「-」。例如：Jaguar 速度 -汽車</p>
</blockquote>
<h3 id="搜尋-Rails-的-resource"><a href="#搜尋-Rails-的-resource" class="headerlink" title="搜尋 Rails 的 resource"></a>搜尋 Rails 的 resource</h3><p>在 Rails 的路由管理中，包含 <code>resources</code> 和 <code>resource</code> 兩種設定。接下來試著搜尋有關 <code>resource</code> 的資訊吧。</p>
<p><img src="https://imgur.com/FmoSTIB.png"></p>
<p>可惡，明明只輸入 <code>resource</code> 搜尋，結果卻同時包含了 <code>resources</code> 和 <code>resource</code> 啊。</p>
<p>這裡試著用 <strong>-（減號）</strong> 排除 <code>resources</code> 字詞搜尋看看。</p>
<p><img src="https://imgur.com/2Iv8Ryd.png"></p>
<p>成功排除 <code>resources</code>，只留下 <code>resource</code> 的搜尋結果。</p>
<h2 id="搜尋完全相符的結果"><a href="#搜尋完全相符的結果" class="headerlink" title="搜尋完全相符的結果"></a>搜尋完全相符的結果</h2><p>Google 搜尋說明頁中寫道，使用 <strong>“（雙引號）</strong> 可搜尋完全匹配的結果。</p>
<blockquote>
<p>將單字或詞句用引號括起來。例如：”世界一高い建築物”</p>
</blockquote>
<h3 id="試試完全匹配的搜尋"><a href="#試試完全匹配的搜尋" class="headerlink" title="試試完全匹配的搜尋"></a>試試完全匹配的搜尋</h3><p>試著比較看看 <code>&quot;世界一高い建築物&quot;</code> 和 <code>世界一高い建造物</code> 兩者的搜尋結果。</p>
<p>嘗試用 <code>世界一高い建造物</code> 進行搜尋，會發現即使輸入的是 <code>世界一高い建造物</code>，結果仍然出現了<code>世界で一番高い建物</code>。</p>
<p><img src="https://imgur.com/tbr1ypU.png"></p>
<p>而進行完全匹配的搜尋時，就只會顯示包含 “世界一高い建築物” 的結果。</p>
<p><img src="https://imgur.com/IREabv4.png"></p>
<p>接下來會更具體解釋<strong>如何使用這種完全匹配搜尋方法</strong>。</p>
<h2 id="在特定網站中搜尋"><a href="#在特定網站中搜尋" class="headerlink" title="在特定網站中搜尋"></a>在特定網站中搜尋</h2><p>Google 搜尋說明頁中寫道，使用 <strong>site:</strong> 可在特定網站內進行搜尋。</p>
<blockquote>
<p>在網站或域名前加上「site:」。例如：site:youtube.com 或 site:.gov</p>
</blockquote>
<h3 id="試試在特定網站進行搜尋"><a href="#試試在特定網站進行搜尋" class="headerlink" title="試試在特定網站進行搜尋"></a>試試在特定網站進行搜尋</h3><p>試著只在 qiita 上自己的文章列表中進行搜尋。</p>
<pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx">github site<span class="token operator">:</span>https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>qiita<span class="token punctuation">.</span>com<span class="token operator">/</span>dodonki1223<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p><img src="https://imgur.com/zSFv8dU.png"></p>
<p>只會出現 URL 開頭為 <code>https://qiita.com/dodonki1223</code> 的搜尋結果</p>
<h2 id="新增搜尋引擎的設定"><a href="#新增搜尋引擎的設定" class="headerlink" title="新增搜尋引擎的設定"></a>新增搜尋引擎的設定</h2><p>在「搜尋英文網站」段落也曾提到，可透過在搜尋引擎頁面中設定以下 URL，接著只需要在網址列輸入關鍵字，即可從該網域進行搜尋，也可以在網站內進行搜尋。</p>
<h3 id="網域搜尋"><a href="#網域搜尋" class="headerlink" title="網域搜尋"></a>網域搜尋</h3><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx">javascript<span class="token operator">:</span> <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  window<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span>
    <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">https://www.google.co.jp/search?q=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token function">decodeURIComponent</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> site:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>location<span class="token punctuation">.</span>origin<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="網站中搜尋"><a href="#網站中搜尋" class="headerlink" title="網站中搜尋"></a>網站中搜尋</h3><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx">javascript<span class="token operator">:</span> <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  window<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span>
    <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">https://www.google.co.jp/search?q=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token function">decodeURIComponent</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> site:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>location<span class="token punctuation">.</span>href<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="搜尋錯誤時，利用排除搜尋和完全一致搜尋吧！"><a href="#搜尋錯誤時，利用排除搜尋和完全一致搜尋吧！" class="headerlink" title="搜尋錯誤時，利用排除搜尋和完全一致搜尋吧！"></a>搜尋錯誤時，利用排除搜尋和完全一致搜尋吧！</h2><p>在日常業務中遇到<strong>錯誤（Error）</strong>時，我們可能會想直接搜索錯誤內容，這時使用完全一致搜尋可能會更方便。</p>
<p>但像這樣直接搜索錯誤內容，有時很容易被類似的內容所干擾。</p>
<p>在這種情況下，不妨試著用排除字詞或完全一致搜尋，藉此排除其他干擾的資訊，找到自己需要的內容。</p>
<h3 id="使用完全一致搜尋的時機"><a href="#使用完全一致搜尋的時機" class="headerlink" title="使用完全一致搜尋的時機"></a>使用完全一致搜尋的時機</h3><p>在列舉常見字詞時，部分的詞彙可能導致包含類似詞的搜索結果。像這種情況就很適合完全一致搜尋。</p>
<p>使用完全一致搜尋時，會顯示<strong>與錯誤內容一字不漏完全相符的結果</strong>。</p>
<h3 id="使用排除搜尋的時機"><a href="#使用排除搜尋的時機" class="headerlink" title="使用排除搜尋的時機"></a>使用排除搜尋的時機</h3><p>搜索結果也可能出現相同的錯誤，但是由不同的程式語言所產生。</p>
<p>在這種情況下，可利用<strong>排除字詞的方法過濾掉不需要的程式語言</strong>，只顯示要查詢的語言結果。</p>
<h3 id="搜尋錯誤的技巧"><a href="#搜尋錯誤的技巧" class="headerlink" title="搜尋錯誤的技巧"></a>搜尋錯誤的技巧</h3><p>接著介紹一些搜索問題的小技巧。在進行搜索時，釐清這是產品本身獨有的問題，還是與 Library、特定程式語言的問題有關。</p>
<p>直接搜索顯示的 Error 內容，<strong>如果出現大量匹配的結果</strong>，則可能與 <strong>Library、特定程式語言的問題有關</strong>。另一方面，<strong>如果幾乎沒有相符的結果</strong>，則可能是<strong>產品獨有的問題</strong>。</p>
<p>搜索結果多意味著世界上有許多人遇到相同的問題。相反地，搜索結果少則代表遇到同樣問題的人較少。換句話說，在<strong>處理產品程式碼產生的錯誤訊息時，直接從程式碼內部搜索</strong>可能會更有幫助。</p>
<p>以上只是提供一個參考指標，不一定適用於所有情況，但對大方向上的判斷應該會有所幫助。</p>
<h2 id="如果網站沒有搜索功能，使用域名搜尋！"><a href="#如果網站沒有搜索功能，使用域名搜尋！" class="headerlink" title="如果網站沒有搜索功能，使用域名搜尋！"></a>如果網站沒有搜索功能，使用域名搜尋！</h2><p><img src="https://imgur.com/5usIDXo.png"></p>
<p>在網站沒有內建搜索功能的情況下，可以通過域名搜索來實現簡單的搜索功能。</p>
<h2 id="盡可能搜尋最新資訊！"><a href="#盡可能搜尋最新資訊！" class="headerlink" title="盡可能搜尋最新資訊！"></a>盡可能搜尋最新資訊！</h2><p>由於技術日新月異，幾年前的文章可能已經過時並不再適用。</p>
<p>在搜尋資料時，需考慮內容更新的時間，養成以最新的資料為優先的習慣。</p>
<p>Google 搜尋也提供設定時間範圍的功能。如果在搜尋時發現許多舊文章，可透過調整 <strong>「工具 → 不限時間 → 自訂時間範圍」</strong> 設定搜索的時間範圍。</p>
<p><img src="https://imgur.com/FQTQCud.png"></p>
<h2 id="比較-Service-或-Library-時，使用關鍵字-vs！"><a href="#比較-Service-或-Library-時，使用關鍵字-vs！" class="headerlink" title="比較 Service 或 Library 時，使用關鍵字 vs！"></a>比較 Service 或 Library 時，使用關鍵字 <code>vs</code>！</h2><p><img src="https://imgur.com/3Vj3u1v.png"></p>
<p>在Service 或 Library 名稱後加上關鍵字 <code>vs</code>，會顯示相近的搜尋建議。內容包括自己尚不瞭解的技術，可以在評估技術時提供參考。</p>
<p>這是 @halo1kw さん 提供的資訊！</p>
<p>此外，也能使用關鍵字 <code>alternative</code> 進行搜尋。</p>
<p><img src="https://imgur.com/jh0xegP.png"></p>
<h2 id="引入-Library-卻無法運作的情況，使用關鍵字-not-working-進行搜尋！"><a href="#引入-Library-卻無法運作的情況，使用關鍵字-not-working-進行搜尋！" class="headerlink" title="引入 Library 卻無法運作的情況，使用關鍵字 not working 進行搜尋！"></a>引入 Library 卻無法運作的情況，使用關鍵字 <code>not working</code> 進行搜尋！</h2><p><img src="https://imgur.com/OvsuSLN.png"></p>
<p>明明已經引入了函式庫，卻不曉得為何無法運作。你是否曾遇過這種情況呢？</p>
<p>這時可嘗試使用 not working 進行搜尋，即可在 GitHub 的 issue 頁面或者 stack overflow 上找到相關的結果。藉此找到在這個世界上和自己遇到相同問題的人，因此推薦這個方法。</p>
<h2 id="遇到版本升級的情況，使用關鍵字-upgrade-和-migration-進行搜尋！"><a href="#遇到版本升級的情況，使用關鍵字-upgrade-和-migration-進行搜尋！" class="headerlink" title="遇到版本升級的情況，使用關鍵字 upgrade 和 migration 進行搜尋！"></a>遇到版本升級的情況，使用關鍵字 <code>upgrade</code> 和 <code>migration</code> 進行搜尋！</h2><p>在升級 Library 或 Framework 版本時，使用關鍵字 <code>upgrade</code> 和 <code>migration</code> 進行搜尋，通常會找到相關的文件。官方的 Upgrade Guide 或 Migration Guide 通常會出現在搜尋結果中，建議先參考官方文件升級。</p>
<h3 id="搜尋-upgrade"><a href="#搜尋-upgrade" class="headerlink" title="搜尋 upgrade"></a>搜尋 upgrade</h3><p>以 Next.js 為例，用 <code>upgrade</code> 進行搜尋時，Upgrade Guide 通常會出現在搜尋結果上方。</p>
<p><img src="https://imgur.com/yprDIvi.png"></p>
<h3 id="搜尋-migration"><a href="#搜尋-migration" class="headerlink" title="搜尋 migration"></a>搜尋 migration</h3><p>以 Yarn 為例，用 <code>migration</code> 進行搜尋，Migration Guide 通常會出現在搜尋結果上方。</p>
<p><img src="https://imgur.com/a0dA0sl.png"></p>
<h2 id="如何搜尋多個-OSS-的程式碼！"><a href="#如何搜尋多個-OSS-的程式碼！" class="headerlink" title="如何搜尋多個 OSS 的程式碼！"></a>如何搜尋多個 OSS 的程式碼！</h2><blockquote>
<p>OSS: Open Source Software</p>
</blockquote>
<p>在搜尋 Sample Code 時，建議擴展搜尋範圍至多個開源軟體。除了在 Google 搜尋以外，參考中意的開源軟體程式碼也是不錯的方向。然而，目前可能還沒有一個能夠搜尋多個開源軟體的機制。透過撰寫一個小腳本（OSS 搜尋工具）即可輕鬆地進行搜尋。</p>
<h3 id="OSS-搜尋"><a href="#OSS-搜尋" class="headerlink" title="OSS 搜尋"></a>OSS 搜尋</h3><p>通過執行這個腳本，可自動將開源軟體的 repository clone 到本地端並更新，接著利用 Visual Studio Code 的工作區機制，橫跨這些 repository 進行程式碼搜尋。</p>
<h3 id="製成腳本"><a href="#製成腳本" class="headerlink" title="製成腳本"></a>製成腳本</h3><p>首先建立所需的腳本。</p>
<p><img src="https://imgur.com/cDgdeW9.png"></p>
<p>執行下方所有指令：</p>
<pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx">$ mkdir oss_sample
$ cd oss_sample
$ mkdir list
$ touch <span class="token punctuation">.</span><span class="token operator">/</span>list<span class="token operator">/</span>ssh
$ touch clone_and_update<span class="token punctuation">.</span>bash<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>接著，將下方內容編寫到 bash 檔案。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span>

<span class="token builtin class-name">declare</span> -a <span class="token assign-left variable">cloneList</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token variable"><span class="token variable">$(</span><span class="token function">cat</span> ./list/ssh<span class="token variable">)</span></span><span class="token punctuation">)</span>

<span class="token builtin class-name">echo</span> <span class="token string">'&#123;
	"folders": ['</span> <span class="token operator">></span> oss_sample.code-workspace

<span class="token keyword">for</span> <span class="token variable"><span class="token punctuation">((</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> $&#123;#cloneList[@]&#125;<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">))</span></span> <span class="token punctuation">&#123;</span>
  <span class="token assign-left variable">project_name</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token builtin class-name">echo</span> <span class="token string">"<span class="token variable">$&#123;cloneList<span class="token punctuation">[</span>i<span class="token punctuation">]</span>&#125;</span>"</span> <span class="token operator">|</span> <span class="token function">cut</span> -d <span class="token string">'/'</span> -f2 <span class="token operator">|</span> <span class="token function">sed</span> -e <span class="token string">'s/.git//g'</span><span class="token variable">)</span></span>
  <span class="token assign-left variable">project_dir</span><span class="token operator">=</span><span class="token string">"./<span class="token variable">$&#123;project_name&#125;</span>"</span>

  <span class="token builtin class-name">echo</span> <span class="token string">'		&#123;
			"path": "'</span><span class="token variable">$&#123;project_name&#125;</span><span class="token string">'"
		&#125;,'</span> <span class="token operator">>></span> oss_sample.code-workspace

  <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token operator">!</span> -d <span class="token variable">$project_dir</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>
    <span class="token builtin class-name">echo</span> <span class="token variable">$project_name</span> clone start<span class="token punctuation">..</span>.
    <span class="token function">git</span> clone <span class="token variable">$&#123;cloneList<span class="token punctuation">[</span>i<span class="token punctuation">]</span>&#125;</span>
  <span class="token keyword">else</span>
    <span class="token builtin class-name">echo</span> <span class="token variable">$project_name</span> clone skip<span class="token punctuation">..</span>.
    <span class="token builtin class-name">echo</span> <span class="token variable">$project_name</span> update
    <span class="token builtin class-name">cd</span> <span class="token variable">$project_name</span>
    <span class="token function">git</span> fetch
    <span class="token function">git</span> pull
    <span class="token builtin class-name">cd</span> <span class="token punctuation">..</span>/
  <span class="token keyword">fi</span>
<span class="token punctuation">&#125;</span>

<span class="token builtin class-name">echo</span> <span class="token string">'	],
	"settings": &#123;&#125;
&#125;'</span> <span class="token operator">>></span> oss_sample.code-workspace<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>最後在 ssh 檔案中，分行輸入要 clone 的 repository。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">git@github.com:hashicorp/terraform.git
git@github.com:go-gorm/gorm.git
git@github.com:beego/beego.git<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<h3 id="實際執行"><a href="#實際執行" class="headerlink" title="實際執行"></a>實際執行</h3><p>執行以下指令：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">bash</span> clone_and_update.bash<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>執行後，在 ssh 文件中輸入的 repository 將會被 clone 到本地端，並生成 code-workspace 檔案。</p>
<p><img src="https://imgur.com/q6xfo2K.png"></p>
<h3 id="嘗試檢索"><a href="#嘗試檢索" class="headerlink" title="嘗試檢索"></a>嘗試檢索</h3><p>執行以下指令開啟工作區：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ code oss_sample.code-workspace<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>開啟工作區後，即可橫跨已經 clone 的開源軟體搜尋程式碼。</p>
<p><img src="https://imgur.com/2foFnJU.png"></p>
<h3 id="閱讀開源軟體的好處"><a href="#閱讀開源軟體的好處" class="headerlink" title="閱讀開源軟體的好處"></a>閱讀開源軟體的好處</h3><p>以前在 Zenn 上有篇關於閱讀開源軟體好處的文章，如果有興趣也可以參考閱讀。</p>
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly96ZW5uLmRldi9kb2RvbmtpMTIyMy9hcnRpY2xlcy82NDE4ZGY3MzcxMzMxMw==">OSSノススメ - Zenn<i class="fa fa-external-link-alt"></i></span></li>
</ul>
<h2 id="屬於自己的簡易搜尋資料庫"><a href="#屬於自己的簡易搜尋資料庫" class="headerlink" title="屬於自己的簡易搜尋資料庫"></a>屬於自己的簡易搜尋資料庫</h2><p>這是不受限於 Google 搜尋的搜尋技巧。通過將多個資料來源集結到 Slack 中，以此為基礎進行搜尋的方式。下方截圖是「AppSync」的搜尋結果。</p>
<p><img src="https://imgur.com/sIIIzSl.png"></p>
<h3 id="如何打造屬於自己的簡易搜尋資料庫"><a href="#如何打造屬於自己的簡易搜尋資料庫" class="headerlink" title="如何打造屬於自己的簡易搜尋資料庫"></a>如何打造屬於自己的簡易搜尋資料庫</h3><p>首先，在 Slack 中創建自己的工作區。<br>接著在建立好的工作區設定 RSS 通知功能。RSS 程式可從下方 URL 進行安裝：</p>
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9zbGFjay5jb20vYXBwcy9BMEY4MVI3VTctcnNzP3RhYj1tb3JlX2luZm8=">RSS | Slack App ディレクトリ<i class="fa fa-external-link-alt"></i></span></li>
</ul>
<h3 id="RSS"><a href="#RSS" class="headerlink" title="RSS"></a>RSS</h3><p>屬於自己的簡易搜尋資料庫，基本上會以這些 RSS 作為主要資訊來源。可以將自己關注的部落格等網站進行註冊。</p>
<p>以下是我個人註冊的一些 RSS，提供參考。</p>
<table>
<thead>
<tr>
<th>RSS</th>
<th>説明</th>
</tr>
</thead>
<tbody><tr>
<td><span class="exturl" data-url="aHR0cHM6Ly9iLmhhdGVuYS5uZS5qcC9ob3RlbnRyeS9pdC5yc3M=">https://b.hatena.ne.jp/hotentry/it.rss<i class="fa fa-external-link-alt"></i></span></td>
<td>收集在日本受到關注的 IT 相關文章</td>
</tr>
<tr>
<td><span class="exturl" data-url="aHR0cHM6Ly96ZW5uLmRldi9mZWVk">https://zenn.dev/feed<i class="fa fa-external-link-alt"></i></span></td>
<td>收集 Zenn 上的熱門文章</td>
</tr>
<tr>
<td><span class="exturl" data-url="aHR0cHM6Ly9kZXYuY2xhc3NtZXRob2QuanAvZmVlZC8=">https://dev.classmethod.jp/feed/<i class="fa fa-external-link-alt"></i></span></td>
<td>收集 AWS 相關資訊</td>
</tr>
<tr>
<td><span class="exturl" data-url="aHR0cHM6Ly9hd3MuYW1hem9uLmNvbS9qcC9ibG9ncy9uZXdzL2ZlZWQv">https://aws.amazon.com/jp/blogs/news/feed/<i class="fa fa-external-link-alt"></i></span></td>
<td>收集 AWS 相關資訊</td>
</tr>
<tr>
<td><span class="exturl" data-url="aHR0cHM6Ly9nby5kZXYvYmxvZy9mZWVkLmF0b20=">https://go.dev/blog/feed.atom<i class="fa fa-external-link-alt"></i></span></td>
<td>收集關於 Go 的資訊</td>
</tr>
</tbody></table>
<p>將 podcast 也註冊到 RSS 中，如果未來搜尋時觸及到，可能會因此想起「對了，那個 podcast 中曾提過這件事情呢」，然後重聽一次。個人認為這非常有用。<br>如果有推薦的 RSS 或 podcast，請務必告訴我！</p>
<h3 id="其他資料"><a href="#其他資料" class="headerlink" title="其他資料"></a>其他資料</h3><p>因為有些資訊無法透過 RSS 獲得，在這裡提供其他的收集方法。</p>
<h3 id="在-Slack-顯示-Qiita-趨勢通知"><a href="#在-Slack-顯示-Qiita-趨勢通知" class="headerlink" title="在 Slack 顯示 Qiita 趨勢通知"></a>在 Slack 顯示 Qiita 趨勢通知</h3><p>這是我自己製作的工具，使用 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2RvZG9ua2kxMjIzL3FpaXRhX3RyZW5kX3NsYWNrX25vdGlmaWVy">qiita_trend_slack_notifier<i class="fa fa-external-link-alt"></i></span> 在 Slack 顯示 Qiita 趨勢通知。</p>
<p><img src="https://imgur.com/F9rGZGu.png"></p>
<h3 id="使用-Pocket-顯示書籤的內容通知"><a href="#使用-Pocket-顯示書籤的內容通知" class="headerlink" title="使用 Pocket 顯示書籤的內容通知"></a>使用 Pocket 顯示書籤的內容通知</h3><p>使用 <span class="exturl" data-url="aHR0cHM6Ly9nZXRwb2NrZXQuY29tL2phLw==">pocket<i class="fa fa-external-link-alt"></i></span> 和 <span class="exturl" data-url="aHR0cHM6Ly9pZnR0dC5jb20v">IFTTT<i class="fa fa-external-link-alt"></i></span>，將書籤頁面通知到 Slack。</p>
<p>透過 <span class="exturl" data-url="aHR0cHM6Ly9pZnR0dC5jb20v">IFTTT<i class="fa fa-external-link-alt"></i></span> 的以下設定，可以讓 pocket 儲存的內容顯示在 Slack：</p>
<p><img src="https://imgur.com/N0CsxSn.png"></p>
<p>在 Chrome 瀏覽器的擴充功能，加入 <span class="exturl" data-url="aHR0cHM6Ly9jaHJvbWUuZ29vZ2xlLmNvbS93ZWJzdG9yZS9kZXRhaWwvc2F2ZS10by1wb2NrZXQvbmlsb2NjZW1vYWRjZGtkamxpbmtnZGZla2VhaG1mbGo/aGw9amE=">Save to Pocket<i class="fa fa-external-link-alt"></i></span>，即可將感興趣的頁面存到 pocket，再彙整到 Slack 中。</p>
<h2 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h2><p>以上內容各位覺得如何呢？希望這些資訊能夠幫上忙。</p>
<p>也歡迎各位留言分享正在使用的搜索方法！</p>
<blockquote>
<p>15th鐵人賽目錄傳送門：<span class="exturl" data-url="aHR0cHM6Ly9pdGhlbHAuaXRob21lLmNvbS50dy91c2Vycy8yMDEzNTU1OC9pcm9ubWFuLzYyOTA=">https://ithelp.ithome.com.tw/users/20135558/ironman/6290<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
]]></content>
      <categories>
        <category>2023鐵人賽</category>
        <category>入門篇</category>
      </categories>
      <tags>
        <tag>Google</tag>
        <tag>ironman2023</tag>
        <tag>Qiita</tag>
      </tags>
  </entry>
  <entry>
    <title>[2023 15th鐵人賽] Day4 - 寫給菜鳥工程師有關變數/函數/方法的英文命名規則</title>
    <url>/ironman-2023-day-4/</url>
    <content><![CDATA[<blockquote>
<p>原文連結：<span class="exturl" data-url="aHR0cHM6Ly9xaWl0YS5jb20vWXV0YU1hbmFrYS9pdGVtcy82MmRkYTI1NmJiN2JhNmMwODM5OQ==">初心者プログラマーのための変数/関数/メソッドの英語命名規則 - Qiita<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
<p>這篇文章是介紹英文命名規則，根據命名對象、使用情境、狀態等進行分類，並舉出使用範例。</p>
<span id="more"></span>

<p>以下是正文。</p>
<hr>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>「每次 review 的時候，好像總是被指正變數名稱⋯⋯」<br>「作為日本人，用英文命名還是有點困難⋯⋯」</p>
<p>您有這樣的煩惱嗎？</p>
<p>本文將以流程圖的形式，說明「當工程師在英文命名遇到困難時該怎麼辦」！學成後也許就能從菜鳥工程師畢業了！？</p>
<p>※本文根據 Laravel, Vue.js 專案規則為基礎進行解說。內容也包括專案的內部規則，請注意這點。</p>
<h2 id="適用對象"><a href="#適用對象" class="headerlink" title="適用對象"></a>適用對象</h2><p>本文適合以下對象：</p>
<ul>
<li>菜鳥工程師</li>
<li>程式語言初學者</li>
<li>對 PHP(Laravel), JavaScript(Vue.js) 英文命名陷入苦戰</li>
</ul>
<h2 id="必備知識"><a href="#必備知識" class="headerlink" title="必備知識"></a>必備知識</h2><p>以下內容是基於瞭解中學和高中學習內容的前提下進行說明。請知悉。</p>
<ul>
<li>三單現（第三人稱單數現在式）的 s 是什麼？</li>
<li>五大句型(SV/SVC/SVO/SVOO/SVOC)是什麼？</li>
<li>詞性（名詞/形容詞/動詞）是什麼？</li>
<li>什麼是以 ~ing 或 ~ed 結尾的形容詞？</li>
</ul>
<h2 id="總覽"><a href="#總覽" class="headerlink" title="總覽"></a>總覽</h2><p>可參考下方流程圖進行命名：</p>
<p><img src="https://hackmd.io/_uploads/Hyy5k-81a.png"></p>
<p>上圖流程意思大致如下：</p>
<ul>
<li>變數、常數、Table、Column 命名<ul>
<li>是否顯示日期 =&gt; 是：(A) 動詞+at/on</li>
<li>是否為布林值 =&gt; 是：(B) 形容詞+名詞</li>
<li>是否為切換顯示/隱藏的 flag =&gt; 是：(C) show+名詞</li>
<li>是否為功能ON/OFF的 flag =&gt; 是：(D) 名詞+enabled</li>
<li>是否為表示存在的 flag =&gt; 是：(E) 名詞+exists</li>
<li>是否擁有/包含某物的 flag =&gt; 是：(F) has/contains+名詞</li>
<li>=&gt; 否：(G) is+形容詞</li>
</ul>
</li>
<li>函數、類別命名<ul>
<li>是否為事件函數 =&gt; 是：(H) on+名詞+形容詞</li>
<li>是否表示轉換某物 =&gt; 是：(I) to+名詞</li>
<li>是否想改變什麼狀態 =&gt; 是：(J) 動詞+受詞+形容詞</li>
<li>=&gt; 否：(K) 動詞+受詞</li>
</ul>
</li>
</ul>
<p>接下來會依序介紹各種命名使用情境與範例。</p>
<h2 id="A-動詞-at-on"><a href="#A-動詞-at-on" class="headerlink" title="(A)動詞+at/on"></a>(A)動詞+at/on</h2><p>表示日期和時間時，參照以下方式：</p>
<pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token comment">// 使用 at 表示時日</span>
updatedAt  <span class="token comment">// 更新時日</span>
importedAt <span class="token comment">// 匯入時日</span>

<span class="token comment">// 使用 on 表示時日</span>
deletedOn <span class="token comment">// 刪除時日</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="B-形容詞-名詞"><a href="#B-形容詞-名詞" class="headerlink" title="(B)形容詞+名詞"></a>(B)形容詞+名詞</h2><p>當賦予非 boolean 值的變數時，通常會依照以下規則：</p>
<pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token comment">// 例</span>

<span class="token comment">// 形容詞+名詞</span>
specialCategory <span class="token comment">// 特殊類別</span>

<span class="token comment">// 形容詞可以是動詞的被動式(~ed)或 ing 形式</span>
importedPlayerNames <span class="token comment">// 匯入的多個選手名稱</span>
deletedPlayers <span class="token comment">// 刪除的多個選手</span>
payingPlayer   <span class="token comment">// 付款的選手</span>

<span class="token comment">// 若沒有形容詞，僅使用名詞或「名詞+名詞」表示也可以</span>
errorCode <span class="token comment">// 錯誤代碼</span>
centerImageFilePath <span class="token comment">// 中央圖片檔案路徑</span>
terminalIdsArray    <span class="token comment">// 包含多個終端 ID 的陣列</span>

<span class="token comment">// 也可使用 名詞+without/before/after~ 的結構</span>
userWithoutPermission <span class="token comment">// 無權限的使用者</span>
itemTypeBeforeUpdate  <span class="token comment">// 更新前的商品類型</span>
quantityAfterOrder    <span class="token comment">// 訂單的數量</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>更多詳細內容請參閱<span class="exturl" data-url="aHR0cHM6Ly9xaWl0YS5jb20vWXV0YU1hbmFrYS9pdGVtcy82MmRkYTI1NmJiN2JhNmMwODM5OSMlRTUlQkQlQTIlRTUlQUUlQjklRTglQTklOUUlRTMlODElQUIlRTklOTYlQTIlRTMlODElOTklRTMlODIlOEIlRTMlODMlODYlRTMlODIlQUYlRTMlODMlOEIlRTMlODMlODMlRTMlODIlQUY=">形容詞<i class="fa fa-external-link-alt"></i></span>、<span class="exturl" data-url="aHR0cHM6Ly9xaWl0YS5jb20vWXV0YU1hbmFrYS9pdGVtcy82MmRkYTI1NmJiN2JhNmMwODM5OSMlRTUlOTAlOEQlRTglQTklOUUlRTMlODElQUIlRTklOTYlQTIlRTMlODElOTklRTMlODIlOEIlRTMlODMlODYlRTMlODIlQUYlRTMlODMlOEIlRTMlODMlODMlRTMlODIlQUY=">名詞的技巧<i class="fa fa-external-link-alt"></i></span>。</p>
<h2 id="C-show-名詞"><a href="#C-show-名詞" class="headerlink" title="(C)show+名詞"></a>(C)show+名詞</h2><p>需要切換顯示/隱藏的 flag 時，可依照以下方式：</p>
<pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token comment">// 例</span>
showConfirmationModal
<span class="token comment">// true: 顯示確認視窗</span>
<span class="token comment">// false: 隱藏確認視窗</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>名詞的部分也可放入形容詞+名詞，如(A)所示。</p>
<h2 id="D-名詞-enabled"><a href="#D-名詞-enabled" class="headerlink" title="(D)名詞+enabled"></a>(D)名詞+enabled</h2><p>當需要切換某個功能ON/OFF 的 flag 時，可依照以下方式：</p>
<pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token comment">// 例</span>
autoScrollEnabled
<span class="token comment">// true: 自動滾動 ON</span>
<span class="token comment">// false: 自動滾動 OFF</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>雖然也可以使用 disabled，但雙重否定可能較不容易理解，因此最好避免使用。</p>
<p>名詞的部分也可放入形容詞+名詞，如(A)所示。</p>
<h2 id="E-名詞-exists"><a href="#E-名詞-exists" class="headerlink" title="(E)名詞+exists"></a>(E)名詞+exists</h2><p>當需要表示存在與否的 flag 時，可按以下方式，需注意詞序的不同：</p>
<pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token comment">// 例</span>
soldOutItemExists
<span class="token comment">// true: 完售的商品存在</span>
<span class="token comment">// false: 完售的商品不存在</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>名詞的部分也可放入形容詞+名詞，如(A)所示。</p>
<h2 id="F-has-contains-名詞"><a href="#F-has-contains-名詞" class="headerlink" title="(F)has/contains+名詞"></a>(F)has/contains+名詞</h2><p>當需要表示是否擁有/包含某物的 flag 時，可依照以下方式：</p>
<pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token comment">// 例</span>
containsCheckedOutPlayers
<span class="token comment">// true: 包含已經 checkout 的選手</span>
<span class="token comment">// false: 不包含已經 checkout 的選手</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>名詞的部分也可放入形容詞+名詞，如(A)所示。</p>
<h2 id="G-is-形容詞"><a href="#G-is-形容詞" class="headerlink" title="(G)is+形容詞"></a>(G)is+形容詞</h2><p>以下是表示 boolean flag 的基本形式：</p>
<pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token comment">// 例</span>
isNew
isImported  <span class="token comment">// 是否已經匯入。動詞的被動式(~ed)也是形容詞的一種</span>
isOrderable <span class="token comment">// 是否可訂購。也可使用 動詞+able</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="is-的-is-前綴可以省略嗎？"><a href="#is-的-is-前綴可以省略嗎？" class="headerlink" title="is~ 的 is 前綴可以省略嗎？"></a>is~ 的 is 前綴可以省略嗎？</h3><p>由於形容詞本身即可表達意義，因此也有人認為 is 應該可以被省略，這取決於專案內統一的慣例。</p>
<pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token comment">// 例</span>
imported <span class="token comment">// 是否已匯入</span>
deleted  <span class="token comment">// 是否已刪除</span>
updated  <span class="token comment">// 是否已更新</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="H-on-名詞-形容詞"><a href="#H-on-名詞-形容詞" class="headerlink" title="(H)on+名詞+形容詞"></a>(H)on+名詞+形容詞</h2><p>這種命名方式在前端開發中較頻繁使用，常用於事件相關的函數命名。</p>
<pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx">onRowClicked <span class="token comment">// 當行被點擊時</span>
onPaginationChanged   <span class="token comment">// 當分頁改變時</span>
onDeleteButtonClicked <span class="token comment">// 當刪除按鈕被點擊時</span>
onItemDisabled <span class="token comment">// 當物品被禁用時</span>

<span class="token comment">// 對象明確的情況，也可使用「on+動詞」的被動式(~ed)</span>
onClicked   <span class="token comment">// 當被點擊時</span>
onSubmitted <span class="token comment">// 當提交時</span>

<span class="token comment">// 也有一派認為使用「on+動詞」更好</span>
onClick  <span class="token comment">// 當被點擊時</span>
onSubmit <span class="token comment">// 當提交時</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="I-to-名詞"><a href="#I-to-名詞" class="headerlink" title="(I)to+名詞"></a>(I)to+名詞</h2><p>當需要表示轉換某物時，也可以簡化命名：</p>
<pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token comment">// NG...雖然不是不行，但太長了... </span>
<span class="token keyword">const</span> <span class="token function-variable function">convertTimeFromSecondsToMinutes</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">time</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span><span class="token operator">...</span><span class="token punctuation">&#125;</span>

<span class="token comment">// OK. 由於參數明確指定為秒數，因此能夠理解這是一個轉換秒→分鐘的函數。</span>
<span class="token keyword">const</span> <span class="token function-variable function">toMinutes</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">seconds</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span><span class="token operator">...</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="J-動詞-受詞-形容詞"><a href="#J-動詞-受詞-形容詞" class="headerlink" title="(J)動詞+受詞+形容詞"></a>(J)動詞+受詞+形容詞</h2><p>當需要表示改變對象狀態的函數時使用：</p>
<pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token comment">// 設定收據已印刷</span>
<span class="token comment">// 表示 receipt = printed</span>
setReceiptPrinted<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<h2 id="K-動詞-受詞"><a href="#K-動詞-受詞" class="headerlink" title="(K)動詞+受詞"></a>(K)動詞+受詞</h2><p>最常見的函數命名方式：</p>
<pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx">joinStrings <span class="token comment">// 串接字串</span>
switchTableWidth <span class="token comment">// 切換表格寬度</span>
sortCategories   <span class="token comment">// 排序類別</span>
toggleArchivedItems <span class="token comment">// 切換在庫商品</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>受詞可以是名詞、名詞+名詞、形容詞+名詞，與(A)相似。</p>
<h2 id="按詞性的技巧"><a href="#按詞性的技巧" class="headerlink" title="按詞性的技巧"></a>按詞性的技巧</h2><p>接下來，將根據詞性提供一些命名技巧。</p>
<h3 id="名詞相關的技巧"><a href="#名詞相關的技巧" class="headerlink" title="名詞相關的技巧"></a>名詞相關的技巧</h3><h3 id="名詞-名詞"><a href="#名詞-名詞" class="headerlink" title="名詞+名詞"></a>名詞+名詞</h3><p>儘管文法上應該以「名詞 of 名詞」方式書寫才對，但這會讓名稱變得過於冗長。</p>
<p>只需將名詞以 2 到 3 個單詞的方式聯接，同樣也能夠傳達意思。</p>
<pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token comment">// 雖然不算 NG 但太長了...</span>
codeOfError
pathOfFileOfCenterImage

<span class="token comment">// OK</span>
errorCode
centerImageFilePath<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>建議將 id, name, code, response, request, path, url 等單詞放在句尾，開頭接別的名詞，這是很常見的命名方式！</p>
<h3 id="注意單數和複數形式"><a href="#注意單數和複數形式" class="headerlink" title="注意單數和複數形式"></a>注意單數和複數形式</h3><p>光是單數或複數形式的名詞，就能傳達不同的名稱含義。</p>
<pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token comment">// 例1</span>
getSystemConfigs   <span class="token comment">// 取得多個系統設定</span>
updateSystemConfig <span class="token comment">// 更新一個系統設定</span>

<span class="token comment">// 例2</span>
playerCount   <span class="token comment">// 玩家數量固定為 1，是常數嗎？</span>
playersCount  <span class="token comment">// 玩家數量以整數存取，代表一個玩家人數</span>
playersCounts <span class="token comment">// 玩家數量以數組形式存取，代表多個玩家人數，是物件嗎？</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="盡量避免使用不可數名詞"><a href="#盡量避免使用不可數名詞" class="headerlink" title="盡量避免使用不可數名詞"></a>盡量避免使用不可數名詞</h3><p>由於單數型和複數型有助於名詞的表達，因此不建議使用沒有複數型的名詞（不可數名詞）。</p>
<p>請儘量替換為可數名詞。</p>
<pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token comment">// 不可數名詞</span>
data<span class="token punctuation">,</span> code<span class="token punctuation">,</span> information<span class="token punctuation">,</span> software

getData <span class="token comment">// NG. 無法確定取得的資料是一個還是多個。</span>
getTexts <span class="token comment">// OK. 明確表示可取得多個資料，且能夠知道資料類型</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="使用資料型別表示"><a href="#使用資料型別表示" class="headerlink" title="使用資料型別表示"></a>使用資料型別表示</h3><p>使用 ~Array, ~Object, ~String, ~Collection 等表示資料型別的名詞，也是推薦的做法。</p>
<pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx">terminalIdsArray <span class="token comment">// 包含多個終端 ID 的陣列</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h3 id="避免太過詳細"><a href="#避免太過詳細" class="headerlink" title="避免太過詳細"></a>避免太過詳細</h3><p>您是否曾經為了更容易理解，使命名變得過長呢？</p>
<p>使用名詞的單數/複數型已經能充分傳達訊息，因此也可以省略部分名稱。</p>
<pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token comment">// 雖然不算 NG，但太長了...</span>
someItems
allItems
individualItem

<span class="token comment">// OK. 使用單數/複數型即可表達</span>
items
item<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="善用-without-before-after"><a href="#善用-without-before-after" class="headerlink" title="善用 without, before, after"></a>善用 <strong>without, before, after</strong></h3><p>透過在名詞後加上這些詞語，能夠更詳細地表達情境或條件。</p>
<p>能夠掌握這些原則，基本上就已經沒問題了。</p>
<pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx">userWithoutPermission  <span class="token comment">// 「沒有權限的」用戶</span>
itemTypeBeforeUpdate   <span class="token comment">// 「更新前的」項目類型</span>
itemQuantityAfterOrder <span class="token comment">// 「下單後的」庫存數量</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<h3 id="形容詞相關的技巧"><a href="#形容詞相關的技巧" class="headerlink" title="形容詞相關的技巧"></a>形容詞相關的技巧</h3><h3 id="用動詞的被動式-ed-表示形容詞也-OK"><a href="#用動詞的被動式-ed-表示形容詞也-OK" class="headerlink" title="用動詞的被動式 (~ed) 表示形容詞也 OK"></a>用動詞的被動式 (~ed) 表示形容詞也 OK</h3><p>表達「被～」、「已經完成～」的情況時，使用動詞的被動式 (~ed) 作為形容詞是個不錯的做法。</p>
<pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx">importedPlayerNames <span class="token comment">// 被導入的玩家名稱 = 已導入的玩家名稱</span>
deletedPlayers <span class="token comment">// 被刪除的玩家 = 已刪除的玩家</span>
disabledItem   <span class="token comment">// 被禁用的商品 = 已禁用的商品</span>
limitedQuantity <span class="token comment">// 被限定的數量 = 已限定數量</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="ing-形也屬於形容詞的一種"><a href="#ing-形也屬於形容詞的一種" class="headerlink" title="ing 形也屬於形容詞的一種"></a>ing 形也屬於形容詞的一種</h3><p>表達「正在做～」的情況時，使用動詞的 ing 形作為形容詞是個不錯的做法。</p>
<pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx">payingPlayer <span class="token comment">// 正在支付的玩家 = 付費者</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h3 id="ing-和-ed-之間的差異"><a href="#ing-和-ed-之間的差異" class="headerlink" title="~ing 和 ~ed 之間的差異"></a>~ing 和 ~ed 之間的差異</h3><p>~ing 的情況，表示「名詞正在做某個動作」或「即將進行某事」。</p>
<p>~ed 的情況，表示「名詞已經被做了某事」或「已經完成某事」。</p>
<pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx">payingPlayer <span class="token comment">// 支付 = 付款的玩家 or 即將付款的玩家</span>
PaidPlayer   <span class="token comment">// 被支付 = 被付款的玩家 or 已付款的玩家</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h3 id="善用否定型的形容詞"><a href="#善用否定型的形容詞" class="headerlink" title="善用否定型的形容詞"></a>善用否定型的形容詞</h3><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token comment">// NG (不建議在開頭接 Not)</span>
notCategorized
notCompleted

<span class="token comment">// OK (搜尋即可找到相關資訊)</span>
uncategorized
incomplete<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="避免使用雙重否定"><a href="#避免使用雙重否定" class="headerlink" title="避免使用雙重否定"></a>避免使用雙重否定</h2><p>否定形容詞通常容易理解，但如果和 if 語句結合使用，可能導致程式碼變得難以理解。</p>
<p>當否定形容詞和否定條件組合在一起時，容易混淆 true 和 false，使程式碼變得不易閱讀且容易造成誤解。</p>
<pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token comment">// NG</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>disabled<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token operator">...</span><span class="token punctuation">&#125;</span>

<span class="token comment">// OK</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>enabled<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token operator">...</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>請根據下方表格中形容詞的肯定型/否定型，試著撰寫 if 語句。</p>
<table>
<thead>
<tr>
<th>肯定型</th>
<th>否定型</th>
</tr>
</thead>
<tbody><tr>
<td>visible</td>
<td>hidden</td>
</tr>
<tr>
<td>public</td>
<td>secret</td>
</tr>
<tr>
<td>active</td>
<td>inactive</td>
</tr>
<tr>
<td>enabled</td>
<td>disabled</td>
</tr>
<tr>
<td>~</td>
<td>in~</td>
</tr>
<tr>
<td>~</td>
<td>im~</td>
</tr>
<tr>
<td>~</td>
<td>dis~</td>
</tr>
<tr>
<td>~</td>
<td>un~</td>
</tr>
</tbody></table>
<h3 id="動詞相關的技巧"><a href="#動詞相關的技巧" class="headerlink" title="動詞相關的技巧"></a>動詞相關的技巧</h3><h3 id="動詞只有一個！"><a href="#動詞只有一個！" class="headerlink" title="動詞只有一個！"></a>動詞只有一個！</h3><p>Be 動詞不會和普通動詞一起使用。</p>
<p>請注意像是「isExists~」的寫法並不正確！</p>
<h3 id="PHP-和-JS-的常見動詞"><a href="#PHP-和-JS-的常見動詞" class="headerlink" title="PHP 和 JS 的常見動詞"></a>PHP 和 JS 的常見動詞</h3><p>經常使用的動詞(PHP)</p>
<ul>
<li>delete(刪除)</li>
<li>filter(篩選)</li>
<li>get(取得)</li>
<li>store(保存)</li>
<li>update(更新)</li>
</ul>
<p>偶爾使用的動詞(PHP)</p>
<ul>
<li>archive(歸檔)</li>
<li>bulkUpdate(批量更新)</li>
<li>cancel(取消)</li>
<li>count(計數)</li>
<li>download(下載)</li>
<li>duplicate(複製)</li>
<li>export(匯出)</li>
<li>hide(隱藏)</li>
<li>import(匯入)</li>
<li>reset(重置)</li>
<li>start(開始)</li>
<li>set(改變狀態。動詞+形容詞：setDisabled。動詞+受詞+形容詞：setReceiptPrinted)</li>
</ul>
<p>經常使用的動詞(JS)</p>
<ul>
<li>change(改變狀態)</li>
<li>click(點擊)</li>
<li>join(連接字串)</li>
<li>show(表示)</li>
<li>sort(分類)</li>
<li>submit(提交)</li>
<li>switch(改變狀態)</li>
<li>toggle(切換 ON↔︎OFF)</li>
</ul>
<h2 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h2><p>以上總結程式語言初學者常見的英文命名規則。</p>
<h2 id="參考文章"><a href="#參考文章" class="headerlink" title="參考文章"></a>參考文章</h2><ul>
<li><span class="exturl" data-url="aHR0cHM6Ly96ZW5uLmRldi9jY2NjYy9hcnRpY2xlcy81YTYwMzM2ZjU0ZjQyOQ==">英語できない人が変数名の命名を完璧にできるようになる方法を教えようと思ったけどめんどくさくて途中で投げ出すも結構長々といいこと書いてる記事<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9xaWl0YS5jb20veXNrc3prL2l0ZW1zLzVhN2Y5OWM5NzQ3NzNmMDNhODJh">真偽値を返す関数のネーミング<i class="fa fa-external-link-alt"></i></span></li>
</ul>
<blockquote>
<p>15th鐵人賽目錄傳送門：<span class="exturl" data-url="aHR0cHM6Ly9pdGhlbHAuaXRob21lLmNvbS50dy91c2Vycy8yMDEzNTU1OC9pcm9ubWFuLzYyOTA=">https://ithelp.ithome.com.tw/users/20135558/ironman/6290<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
]]></content>
      <categories>
        <category>2023鐵人賽</category>
        <category>入門篇</category>
      </categories>
      <tags>
        <tag>ironman2023</tag>
        <tag>Qiita</tag>
        <tag>Naming Conventions</tag>
      </tags>
  </entry>
  <entry>
    <title>[2023 15th鐵人賽] Day5 - 解析惡名昭彰的滑動廣告</title>
    <url>/ironman-2023-day-5/</url>
    <content><![CDATA[<p>原文連結：<span class="exturl" data-url="aHR0cHM6Ly9xaWl0YS5jb20vaHV6aXN1a2UvaXRlbXMvY2RjNjNiNGJmOWQyZGVkNWI1Y2E/dXRtX3NvdXJjZT1RaWl0YSVFMyU4MyU4QiVFMyU4MyVBNSVFMyU4MyVCQyVFMyU4MiVCOSZ1dG1fY2FtcGFpZ249NWYzNWVhNTYxNi1RaWl0YV9uZXdzbGV0dGVyXzU3OV8wOF8xNiZ1dG1fbWVkaXVtPWVtYWlsJnV0bV90ZXJtPTBfZTQ0ZmVhYTA4MS01ZjM1ZWE1NjE2LTYyODIwNDQ5">悪名高きスワイプ広告を解析する - Qiita<i class="fa fa-external-link-alt"></i></span></p>
<hr>
<h2 id="本文摘要"><a href="#本文摘要" class="headerlink" title="本文摘要"></a>本文摘要</h2><p>在被使用者厭惡的廣告當中，有一種叫做「滑動廣告」。</p>
<p>容易誤觸是原因之一，但經過調查發現，這個廣告似乎是故意將使用者轉移到廣告頁面，而非單純的誤觸。</p>
<span id="more"></span>

<p><img src="https://i.imgur.com/wSOiSRO.png"></p>
<p><em>滑動廣告是一種藉由左右滑動顯示圖片的廣告類型。</em></p>
<h2 id="什麼是滑動廣告"><a href="#什麼是滑動廣告" class="headerlink" title="什麼是滑動廣告"></a>什麼是滑動廣告</h2><p>滑動廣告是在廣告聯盟網站上常見的廣告形式。</p>
<p>使用者可以用手指在螢幕上左右滑動，藉此切換廣告圖片。</p>
<p>特徵是利用滑動的互動性，使用多個訊息和媒體，提供引人入勝的廣告體驗。</p>
<h2 id="為什麼會惡名昭彰"><a href="#為什麼會惡名昭彰" class="headerlink" title="為什麼會惡名昭彰"></a>為什麼會惡名昭彰</h2><p>然而，滑動廣告並不受使用者歡迎。原因是它容易引發誤觸，一不小心點擊廣告導致頁面跳轉的機會非常高。</p>
<p>當然，從使用者的角度來看，可能會以為是自己誤觸了廣告，或是滑動的手指太早移開螢幕，才會導致跳轉到廣告頁面。</p>
<p>然而，根據本次調查結果，滑動廣告似乎是一種設計，即便使用者並未實際誤觸到，也會模擬誤觸的行為。</p>
<p>以下動畫展示當時的行為：</p>
<p><img src="https://imgur.com/opkAgHk.gif"></p>
<p><em>只有思慕昔（スムージー）的廣告，在上下滑動時會跳轉到廣告頁面。</em></p>
<p>這明顯和<em>漫畫廣告的行為不同。</em></p>
<p><em>此外，我們還注意到，左右滑動時也不會造成畫面跳轉。</em></p>
<h2 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h2><p>通過追蹤程式碼，發現滑動廣告只要符合以下條件，就會被視為點擊廣告：</p>
<ul>
<li>點擊起始位置在廣告區域內</li>
<li>點擊持續時間不超過 250ms</li>
<li>點擊起始和結束位置的 X 坐標差不超過 50pix</li>
</ul>
<p>換句話說，</p>
<p><strong>從廣告位置開始的垂直滑動，這動作將會被視為強制點擊廣告。</strong></p>
<p>所以，至今為止您感受到的「啊、糟糕」，</p>
<p>這絕對不是您的錯，而是廣告的運作方式。</p>
<h2 id="相關程式碼"><a href="#相關程式碼" class="headerlink" title="相關程式碼"></a>相關程式碼</h2><p>以下是使用 Developer Tools 仔細分析過的內容，其中名為 <code>swipegallery_layout.js</code> 的導案負責管理點擊位置等內容。</p>
<h3 id="點擊開始時-touchstart-event"><a href="#點擊開始時-touchstart-event" class="headerlink" title="點擊開始時 (touchstart event)"></a>點擊開始時 (touchstart event)</h3><p>第 1051 行～第 1061 行</p>
<p>重點如下：</p>
<ul>
<li>b.time = Date.now(); … 記錄點擊開始時間</li>
<li>b.p = 0 … 記錄點擊開始座標，初始值為 0</li>
</ul>
<p>由於 Source code 基本上經過了混淆處理，因此僅供參考。</p>
<pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token class-name">Y</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">Ba</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">a</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token constant">V</span> <span class="token operator">||</span> a<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token constant">W</span> <span class="token operator">&amp;&amp;</span> <span class="token number">0</span> <span class="token operator">!=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>b<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token constant">T</span><span class="token punctuation">;</span>
        b<span class="token punctuation">.</span><span class="token constant">U</span> <span class="token operator">=</span> <span class="token operator">!</span><span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token constant">V</span> <span class="token operator">?</span> <span class="token punctuation">(</span>b<span class="token punctuation">.</span>pageX <span class="token operator">=</span> a<span class="token punctuation">.</span>e<span class="token punctuation">.</span>touches<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>pageX<span class="token punctuation">,</span> b<span class="token punctuation">.</span><span class="token constant">G</span> <span class="token operator">=</span> a<span class="token punctuation">.</span>e<span class="token punctuation">.</span>touches<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>pageX<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token punctuation">(</span>b<span class="token punctuation">.</span>pageX <span class="token operator">=</span> a<span class="token punctuation">.</span>e<span class="token punctuation">.</span>pageX<span class="token punctuation">,</span> b<span class="token punctuation">.</span><span class="token constant">G</span> <span class="token operator">=</span> a<span class="token punctuation">.</span>e<span class="token punctuation">.</span>pageX<span class="token punctuation">)</span><span class="token punctuation">;</span>
        b<span class="token punctuation">.</span>time <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        b<span class="token punctuation">.</span><span class="token constant">A</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        b<span class="token punctuation">.</span>p <span class="token operator">=</span> <span class="token number">0</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="當手指在點擊時移動-touchmove-event"><a href="#當手指在點擊時移動-touchmove-event" class="headerlink" title="當手指在點擊時移動 (touchmove event)"></a>當手指在點擊時移動 (touchmove event)</h3><p>第 1061 行～第 1089 行</p>
<p>重點如下：</p>
<ul>
<li>a.preventDefault(); … 這段語句將禁用垂直滾動時的畫面移動</li>
<li>b.p = a.e.touches[0].pageX - b.pageX; … 將初始點擊位置和目前點擊位置的 X 軸座標值相減並代入</li>
</ul>
<pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token class-name">Y</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">Aa</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">a</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token constant">W</span> <span class="token operator">&amp;&amp;</span> <span class="token number">0</span> <span class="token operator">!=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>b<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token constant">T</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token constant">V</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            a<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;</span> a<span class="token punctuation">.</span>e<span class="token punctuation">.</span>touches<span class="token punctuation">.</span>length <span class="token operator">||</span> a<span class="token punctuation">.</span>e<span class="token punctuation">.</span>scale <span class="token operator">&amp;&amp;</span> <span class="token number">1</span> <span class="token operator">!==</span> a<span class="token punctuation">.</span>e<span class="token punctuation">.</span>scale<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
            b<span class="token punctuation">.</span>p <span class="token operator">=</span> a<span class="token punctuation">.</span>e<span class="token punctuation">.</span>touches<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>pageX <span class="token operator">-</span> b<span class="token punctuation">.</span>pageX<span class="token punctuation">;</span>
            b<span class="token punctuation">.</span><span class="token constant">A</span> <span class="token operator">=</span> a<span class="token punctuation">.</span>e<span class="token punctuation">.</span>touches<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>pageX <span class="token operator">-</span> b<span class="token punctuation">.</span><span class="token constant">G</span><span class="token punctuation">;</span>
            b<span class="token punctuation">.</span><span class="token constant">G</span> <span class="token operator">=</span> a<span class="token punctuation">.</span>e<span class="token punctuation">.</span>touches<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>pageX
        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>b<span class="token punctuation">.</span><span class="token constant">U</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
            b<span class="token punctuation">.</span>p <span class="token operator">=</span> a<span class="token punctuation">.</span>e<span class="token punctuation">.</span>pageX <span class="token operator">-</span> b<span class="token punctuation">.</span>pageX<span class="token punctuation">;</span>
            b<span class="token punctuation">.</span><span class="token constant">A</span> <span class="token operator">=</span> a<span class="token punctuation">.</span>e<span class="token punctuation">.</span>pageX <span class="token operator">-</span> b<span class="token punctuation">.</span><span class="token constant">G</span><span class="token punctuation">;</span>
            b<span class="token punctuation">.</span><span class="token constant">G</span> <span class="token operator">=</span> a<span class="token punctuation">.</span>e<span class="token punctuation">.</span>pageX
        <span class="token punctuation">&#125;</span>
        b<span class="token punctuation">.</span>ea <span class="token operator">=</span> <span class="token operator">!</span><span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">var</span> c <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>b<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>d<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">h</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>Ma <span class="token operator">=</span> <span class="token number">0</span> <span class="token operator">></span> b<span class="token punctuation">.</span>p <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">;</span>
        a <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span>p <span class="token operator">/</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token constant">P</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">var</span> d <span class="token operator">=</span> <span class="token operator">!</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token number">0</span> <span class="token operator">==</span> <span class="token keyword">this</span><span class="token punctuation">.</span>Ma <span class="token operator">?</span> <span class="token punctuation">(</span><span class="token function">$</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token constant">H</span> <span class="token operator">*</span> a<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token constant">I</span> <span class="token operator">*</span> a<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token constant">J</span> <span class="token operator">*</span> a<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token constant">K</span> <span class="token operator">*</span> a<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>d <span class="token operator">!=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>b<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">?</span> <span class="token punctuation">(</span>c <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>b<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>d <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">h</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token function">$</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token constant">H</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">-</span> a<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token constant">I</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">-</span> a<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token constant">J</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">-</span> a<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token constant">K</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">-</span> a<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">:</span> d <span class="token operator">=</span> <span class="token operator">!</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token punctuation">(</span><span class="token function">$</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token constant">H</span> <span class="token operator">*</span> <span class="token operator">-</span>a<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token constant">I</span> <span class="token operator">*</span> <span class="token operator">-</span>a<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token constant">J</span> <span class="token operator">*</span> a<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token constant">K</span> <span class="token operator">*</span> a<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span> <span class="token operator">!=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>d <span class="token operator">?</span> <span class="token punctuation">(</span>c <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>b<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>d <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">h</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">$</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token constant">H</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">-</span> a<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token constant">I</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">-</span> a<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token constant">J</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">-</span> a<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token constant">K</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">-</span> a<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">:</span> d <span class="token operator">=</span> <span class="token operator">!</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        d <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>b<span class="token punctuation">.</span><span class="token constant">A</span> <span class="token operator">/=</span> Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span><span class="token constant">A</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token constant">P</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>La<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token constant">A</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>f<span class="token punctuation">.</span>style<span class="token punctuation">,</span> <span class="token function">Eb</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token constant">B</span> <span class="token operator">+=</span> b<span class="token punctuation">.</span><span class="token constant">A</span><span class="token punctuation">;</span>
        <span class="token constant">A</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>f<span class="token punctuation">.</span>style<span class="token punctuation">,</span> <span class="token function">Fb</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token constant">B</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="結束點擊時-touchend-event"><a href="#結束點擊時-touchend-event" class="headerlink" title="結束點擊時 (touchend event)"></a>結束點擊時 (touchend event)</h3><p>第 1090 行～第 1097 行</p>
<p>重點如下：</p>
<pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">50</span> <span class="token operator">></span> Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span>p<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// 點擊初始位置和結束位置的 X 座標值差小於 50pix</span>
	<span class="token operator">&amp;&amp;</span> <span class="token number">250</span> <span class="token operator">></span> a <span class="token operator">-</span> b<span class="token punctuation">.</span>time<span class="token punctuation">)</span> <span class="token comment">// 且點擊持續時間小於 250ms</span>
		<span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">dispatchEvent</span><span class="token punctuation">(</span><span class="token string">"tap"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">dispatchEvent</span><span class="token punctuation">(</span><span class="token string">"tap-"</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>d<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// 發生點擊廣告的事件</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>請注意下方敘述，從第 4 行開始的 <code>b.U &amp;&amp; ...</code> 這段程式碼實現了上述功能。</p>
<pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token class-name">Y</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">la</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">a</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token constant">W</span> <span class="token operator">&amp;&amp;</span> <span class="token number">0</span> <span class="token operator">!=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>b<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token constant">T</span><span class="token punctuation">;</span>
        b<span class="token punctuation">.</span><span class="token constant">U</span> <span class="token operator">&amp;&amp;</span> <span class="token string">"mouseout"</span> <span class="token operator">!=</span> a<span class="token punctuation">.</span>type <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>a <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">500</span> <span class="token operator">&lt;</span> a <span class="token operator">-</span> <span class="token keyword">this</span><span class="token punctuation">.</span>ua <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token number">50</span> <span class="token operator">></span> Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span>p<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token number">250</span> <span class="token operator">></span> a <span class="token operator">-</span> b<span class="token punctuation">.</span>time<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">dispatchEvent</span><span class="token punctuation">(</span><span class="token string">"tap"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">dispatchEvent</span><span class="token punctuation">(</span><span class="token string">"tap-"</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>d<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>ua <span class="token operator">=</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>
        b<span class="token punctuation">.</span><span class="token constant">U</span> <span class="token operator">=</span> <span class="token operator">!</span><span class="token number">1</span><span class="token punctuation">;</span>
        b<span class="token punctuation">.</span>ea <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>a <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>d<span class="token punctuation">,</span> Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span>p<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token keyword">this</span><span class="token punctuation">.</span>Na <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">></span> b<span class="token punctuation">.</span>p <span class="token operator">?</span> a <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>d <span class="token operator">==</span> <span class="token keyword">this</span><span class="token punctuation">.</span>b<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">?</span> <span class="token keyword">this</span><span class="token punctuation">.</span>d <span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>d <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token number">0</span> <span class="token operator">&lt;</span> b<span class="token punctuation">.</span>p <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>a <span class="token operator">=</span> <span class="token number">0</span> <span class="token operator">==</span> <span class="token keyword">this</span><span class="token punctuation">.</span>d <span class="token operator">?</span> <span class="token keyword">this</span><span class="token punctuation">.</span>d <span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>d <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token constant">Q</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">,</span> b<span class="token punctuation">.</span>ea <span class="token operator">=</span> <span class="token operator">!</span><span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="換言之，這些操作代表什麼"><a href="#換言之，這些操作代表什麼" class="headerlink" title="換言之，這些操作代表什麼"></a>換言之，這些操作代表什麼</h3><p>當使用者誤以為「在滑動螢幕時，手指卻意外觸摸到廣告」，這種所謂的誤觸實際上是經過精心編寫的「設計」。</p>
<p>當偵測到快速的垂直滑動時，會觸發跳轉到廣告頁面，此時畫面呈現靜止狀態，進而讓使用戶以為是自己「誤點擊」所導致。</p>
<p>反之，如果滑動速度較慢，不論垂直或橫向滑動都不會跳轉廣告頁面。</p>
<p>此外，由於圖像會跟著手指移動，即使被禁止滑動也不容易察覺。</p>
<h2 id="誤觸廣告不僅損害使用者體驗，也降低廣告主的品牌價值"><a href="#誤觸廣告不僅損害使用者體驗，也降低廣告主的品牌價值" class="headerlink" title="誤觸廣告不僅損害使用者體驗，也降低廣告主的品牌價值"></a>誤觸廣告不僅損害使用者體驗，也降低廣告主的品牌價值</h2><p>每當看到滑動廣告時，最明顯的感受就是，誤觸廣告對使用者並沒有任何好處。不僅損害所在網站的使用者體驗，對於那些被意外點擊的廣告主也不會產生良好印象。</p>
<p>雖然這只是我的猜測，可能存在一些公司利用這種誤觸廣告系統，藉此虛報展示給廣告主看的廣告曝光率。</p>
<p>雖然這次廣告主的產品我也實際使用過，今後也想繼續使用這個品牌，但看到透過這種方式展示廣告真的感覺非常遺憾。</p>
<p>希望廣告主能夠意識到，展示這類型的廣告只會降低品牌價值，並進一步採取相關措施，以確保未來不再出現這種形式的廣告。</p>
<p>從根本上來說，滑動廣告的廣告頁面跳轉絕不是使用者誤觸或程式錯誤造成，而是經過明確設計過的跳頁效果。</p>
<p>我不曉得這是公司的方針或單一工程師想出的壞主意，但比起使用者優先考慮個人利益的態度，同樣作為一名工程師實在令人感到遺憾。</p>
<h2 id="Release-Note"><a href="#Release-Note" class="headerlink" title="Release Note"></a>Release Note</h2><h3 id="2023-08-7"><a href="#2023-08-7" class="headerlink" title="2023/08/7"></a>2023/08/7</h3><ul>
<li>修正錯誤</li>
<li>新增說明</li>
</ul>
<h3 id="2023-08-08"><a href="#2023-08-08" class="headerlink" title="2023/08/08"></a>2023/08/08</h3><ul>
<li>新增 <em>syntax</em> highlighting 語法高亮效果<ul>
<li>感謝 <span class="exturl" data-url="aHR0cHM6Ly9xaWl0YS5jb20vZ2V0dHkxMDQ=">@getty104<i class="fa fa-external-link-alt"></i></span> 様</li>
</ul>
</li>
</ul>
<h3 id="2023-08-10"><a href="#2023-08-10" class="headerlink" title="2023/08/10"></a>2023/08/10</h3><ul>
<li>新增 Release Note</li>
<li>刪除廣告主的名稱<ul>
<li>滑動廣告是由刊登網站設定所引起，無法確定廣告主是否得知這件事情。因此考慮品牌名聲，在此選擇不公開廣告主的名稱。</li>
</ul>
</li>
</ul>
<blockquote>
<p>15th鐵人賽目錄傳送門：<span class="exturl" data-url="aHR0cHM6Ly9pdGhlbHAuaXRob21lLmNvbS50dy91c2Vycy8yMDEzNTU1OC9pcm9ubWFuLzYyOTA=">https://ithelp.ithome.com.tw/users/20135558/ironman/6290<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
]]></content>
      <categories>
        <category>2023鐵人賽</category>
        <category>豆知識篇</category>
      </categories>
      <tags>
        <tag>Advertising</tag>
        <tag>ironman2023</tag>
        <tag>Qiita</tag>
      </tags>
  </entry>
  <entry>
    <title>[2023 15th鐵人賽] Day6 - 你知道使用免費 Wi-Fi 時可能洩露機密訊息的途徑有哪些嗎</title>
    <url>/ironman-2023-day-6/</url>
    <content><![CDATA[<blockquote>
<p>原文連結：<span class="exturl" data-url="aHR0cHM6Ly9xaWl0YS5jb20vb2NrZWdoZW0vaXRlbXMvYzZhMzYwMmQyYzI0MDlmODlmYmI=">フリーWi-Fiを使ったら秘密情報を抜かれる経路にはどのようなものがあるか - Qiita<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
<p>常聽聞免費 Wi-Fi 可能暗藏資安危機，究竟原理是如何、可能造成什麼影響，又該如何預防等等，本文將針對這個主題進行介紹。</p>
<span id="more"></span>

<p>以下正文開始！</p>
<hr>
<p>這是在黃金週的開始（4月29日）發布的推文，截至 5 月 7 日晚上 8 點，已經累積 1938.8 萬次觀看次數，顯然引起很大的關注。</p>
<p><img src="https://imgur.com/Y6fmxhU.png"></p>
<blockquote>
<p>我叫阿席達卡！我在星巴克使用免費 Wi-Fi 處理公司的機密資訊時，結果訊息全部外洩了。我該怎麼辦才好！（<span class="exturl" data-url="aHR0cHM6Ly90d2l0dGVyLmNvbS9NYWNvcGVuaW5TVVRBQkEvc3RhdHVzLzE2NTIzMTUzNjYzNzMzNjM3MTI/cmVmX3NyYz10d3NyYyU1RXRmdyU3Q3R3Y2FtcCU1RXR3ZWV0ZW1iZWQlN0N0d3Rlcm0lNUUxNjUyMzE1MzY2MzczMzYzNzEyJTdDdHdnciU1RTJjMTZhNWYyYjRjZTFlODAzOTQ0Y2U5NjI2YjVjZDAxODcyYzI2OTYlN0N0d2NvbiU1RXMxXyZyZWZfdXJsPWh0dHBzOi8vcHVibGlzaC50d2l0dGVyLmNvbS8/cXVlcnk9aHR0cHMzQTJGMkZ0d2l0dGVyLmNvbTJGTWFjb3BlbmluU1VUQUJBMkZzdGF0dXMyRjE2NTIzMTUzNjYzNzMzNjM3MTJ3aWRnZXQ9VHdlZXQ=">原推文連結<i class="fa fa-external-link-alt"></i></span>）</p>
</blockquote>
<p>對此，我發布了以下的推文，同樣也吸引不少關注，累積 124.1 萬次的觀看次數。雖然收到了許多反饋，但卻是出乎意料的難題，我打算在黃金週結束後，接著介紹幾種可能的訊息洩漏途徑。</p>
<p><img src="https://imgur.com/HfFt9JH.jpg"></p>
<blockquote>
<p>應該把這當作入職考試題目嗎？請說明「在星巴克使用免費 Wi-Fi 處理公司機密資訊時，導致所有訊息外洩的情況」在現實中可能導致的威脅。我認為這問題相當具有挑戰性。（<span class="exturl" data-url="aHR0cHM6Ly90d2l0dGVyLmNvbS9vY2tlZ2hlbS9zdGF0dXMvMTY1MjY3MzE3Njg1MjM4MTY5Nj9yZWZfc3JjPXR3c3JjJTVFdGZ3JTdDdHdjYW1wJTVFdHdlZXRlbWJlZCU3Q3R3dGVybSU1RTE2NTI2NzMxNzY4NTIzODE2OTYlN0N0d2dyJTVFOTNkYmNlNDFkYzNmNjUwZmE2MzNiMWJhMjFjMmM0MmNkMDIyYmFhMyU3Q3R3Y29uJTVFczFfJnJlZl91cmw9aHR0cHM6Ly9xaWl0YS5jb20vb2NrZWdoZW0vaXRlbXMvYzZhMzYwMmQyYzI0MDlmODlmYmI=">原推文連結<i class="fa fa-external-link-alt"></i></span>）</p>
</blockquote>
<h2 id="針對無線區域網路的攻擊"><a href="#針對無線區域網路的攻擊" class="headerlink" title="針對無線區域網路的攻擊"></a>針對無線區域網路的攻擊</h2><p>由於背景是以「在星巴克使用免費 Wi-Fi 時」為前提，這裡會解釋有關無線區域網路（Wireless LAN）所帶來的威脅。一般來說，當提到無線 LAN 的威脅時，多數人會先想到「未加密的無線 LAN」，然而實際上，許多免費 Wi-Fi 也存在「即使有加密也能被竊聽」的問題。原因是無線 LAN 的密碼（預共享金鑰 PSK、密碼短語 Passphrase）已經被公開。以下文章可作為參考：</p>
<p><span class="exturl" data-url="aHR0cHM6Ly94dGVjaC5uaWtrZWkuY29tL2l0L2F0Y2wvY29sdW1uLzE3LzA5MDYwMDM3MC8wOTExMDAwMDgv">パスワードが公開された公衆無線LAN、暗号化されていても盗聴できる？ | 日経クロステック（xTECH）<i class="fa fa-external-link-alt"></i></span></p>
<p>此外，還存在偽造存取點（Fake Access Point）的威脅，意即攻擊者偽裝成咖啡廳的 Wi-Fi 存取點。設置與真正存取點相同的 SSID 和密碼的偽造存取點，被稱作孿生惡魔（Evil Twin, <span class="exturl" data-url="aHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvRXZpbF90d2luXyh3aXJlbGVzc19uZXR3b3Jrcyk=">英語版WikiPedia<i class="fa fa-external-link-alt"></i></span>），對使用者來說難以區分真偽，因此構成嚴重的威脅。以下是以咖啡廳 Wi-Fi 為例，說明偽造存取點帶來的威脅（見下圖）。</p>
<p><img src="https://imgur.com/7jip5n8.png" alt="Fake AP"></p>
<p>在偽造存取點的情況，可在上圖中的有線 LAN 區段進行竊聽，因此與無線加密無關。此外，也可能出現<span class="exturl" data-url="aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3poLXR3LyVFNCVCOCVBRCVFOSU5NyVCNCVFNCVCQSVCQSVFNiU5NCVCQiVFNSU4NyVCQg==">中間人攻擊<i class="fa fa-external-link-alt"></i></span>（man-in-the-middle attack; MITM），使攻擊的種類更加多樣。</p>
<p>在任何情況下，如果通訊路徑是透過 HTTPS（TLS）加密的話，通訊內容就不容易被竊聽。但如果網站存在漏洞，或使用者的使用方式不正確，仍有可能會洩露通訊內容。</p>
<h2 id="未使用-HTTPS-進行連線"><a href="#未使用-HTTPS-進行連線" class="headerlink" title="未使用 HTTPS 進行連線"></a>未使用 HTTPS 進行連線</h2><p>如果使用的網站不支援 HTTPS，或即便網站支援 HTTPS，但使用者仍使用 HTTP 進行連線，那通訊內容還是會透過上述方法被全部竊聽。</p>
<p>現今已經很少有網站不使用 HTTPS，但仍有可能被引導至 HTTP 以進行中間人攻擊。在下方影片中，展示了某家<span class="exturl" data-url="aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3poLXR3LyVFNSVCNyVBOCVFNSU5RSU4QiVFOSU4QSU4MCVFOCVBMSU4Qw==">巨型銀行<i class="fa fa-external-link-alt"></i></span>的線上銀行網站，被進行中間人攻擊漏洩了通訊內容。雖然該網站將 HTTP 通訊重新轉向至 HTTPS，但攻擊者仍避開並進行攻擊。即使網站關閉了 TCP 80 port，仍有機會進行此攻擊。詳細內容請信請參考下方影片。</p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/k0xBCjWPqcU?si=B_eV6MZo-8uELjAG" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen></iframe>

<p>針對這種攻擊的防範措施，如下所示：</p>
<ul>
<li>網站端：通過設定 <span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSFRUUC9IZWFkZXJzL1N0cmljdC1UcmFuc3BvcnQtU2VjdXJpdHk=">HSTS（Strict-Transport-Security）<i class="fa fa-external-link-alt"></i></span>以強制使用HTTPS</li>
<li>使用者端：確認使用 HTTPS 進行連線</li>
</ul>
<h2 id="已連接-https-URL-卻忽略瀏覽器的警告"><a href="#已連接-https-URL-卻忽略瀏覽器的警告" class="headerlink" title="已連接 https URL 卻忽略瀏覽器的警告"></a>已連接 https URL 卻忽略瀏覽器的警告</h2><p>即便使用者透過 HTTPS 進行連線，如果攻擊者使用類似 <span class="exturl" data-url="aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3poLXR3L0J1cnBfc3VpdGU=">Burp Suite<i class="fa fa-external-link-alt"></i></span> 的 MITM Proxy 的情況，則可透過 Burp Suite 將 HTTPS 解密再重新加密，藉此盜取通訊內容。但在這種情況下，瀏覽器將會顯示錯誤，除非使用者強制忽略警告，否則通訊無法進行。在上述影片中，也展示了這種情況。 </p>
<p>針對這種攻擊的防範措施，如下所示：</p>
<ul>
<li>網站端：透過設定 <span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSFRUUC9IZWFkZXJzL1N0cmljdC1UcmFuc3BvcnQtU2VjdXJpdHk=">HSTS（Strict-Transport-Security）<i class="fa fa-external-link-alt"></i></span>使憑證錯誤無法被忽略</li>
<li>使用者端：當瀏覽器出現憑證錯誤時即停止使用</li>
</ul>
<p>在上述影片所介紹的巨型銀行就未設定 HSTS。</p>
<p><img src="https://imgur.com/R6Q9t8C.jpg"></p>
<h2 id="使用特定-APP-而非瀏覽器，但該-APP-存在漏洞並且未經過憑證授權"><a href="#使用特定-APP-而非瀏覽器，但該-APP-存在漏洞並且未經過憑證授權" class="headerlink" title="使用特定 APP 而非瀏覽器，但該 APP 存在漏洞並且未經過憑證授權"></a>使用特定 APP 而非瀏覽器，但該 APP 存在漏洞並且未經過憑證授權</h2><p>在透過手機 APP 而非瀏覽器使用服務的情況，檢驗憑證將成為 APP 方的責任。有時 APP 方檢驗憑證不夠嚴謹，可能導致訊息被竊取。以下是筆者發現的一個例子。</p>
<p><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLnRva3VtYXJ1Lm9yZy8yMDE0LzA5L2FuZHJvaWRraW5kbGVzc2xjdmUtMjAxNC0zOTA4Lmh0bWw=">Android版KindleにおけるSSLサーバ証明書の検証不備の脆弱性CVE-2014-3908 | 徳丸浩の日記<i class="fa fa-external-link-alt"></i></span></p>
<p>針對這種情況的防範措施，如下所示：</p>
<ul>
<li>提供者端：透過對手機 APP 掃描是否存在漏洞，確保檢驗憑證</li>
<li>使用者端：使用可信賴的 APP，或在使用 APP 時改用行動數據通訊</li>
</ul>
<h2 id="在伺服器允許使用脆弱的加密演算法可能造成漏洞"><a href="#在伺服器允許使用脆弱的加密演算法可能造成漏洞" class="headerlink" title="在伺服器允許使用脆弱的加密演算法可能造成漏洞"></a>在伺服器允許使用脆弱的加密演算法可能造成漏洞</h2><p>TLS/SSL 的規格或實作上有時存在著脆弱性。其中代表性的例子是 POODLE 弱點。詳細請參考はるぷさん的文章說明。</p>
<p><span class="exturl" data-url="aHR0cHM6Ly9lbmdpbmVlcmluZy5kZW5hLmNvbS9ibG9nLzIwMTQvMTAvcG9vZGxlLw==">SSL v3.0の脆弱性「POODLE」ってかわいい名前だけど何？？ | BLOG - DeNA Engineering<i class="fa fa-external-link-alt"></i></span></p>
<p>正如這篇文章提及，POODLE 攻擊是藉由 MITM，透過咖啡廳的偽造存取點攻擊是典型案例。換句話說，在沒有 MITM 風險的環境中，就不存在 POODLE 的實際威脅，因此針對 POODLE 的威脅，SSL 協議已被停用。</p>
<p>以下是應對措施：</p>
<ul>
<li>網站端：僅允許 TLS 1.2 以上版本，實作 SSL （OpenSSL 等）並隨時更新至最新狀態</li>
<li>使用者端：使用最新版的瀏覽器（最新的瀏覽器已停用 SSL）</li>
</ul>
<h2 id="Cookie-缺少-Secure-屬性"><a href="#Cookie-缺少-Secure-屬性" class="headerlink" title="Cookie 缺少 Secure 屬性"></a>Cookie 缺少 Secure 屬性</h2><p>由於 Web 應用程式的存在弱點，可能在通訊過程中被竊取內容。其中代表性的例子是 Cookie 缺少的 Secure 屬性的情況。換句話說，若 Set-Cookie 未添加 Secure 屬性，可能會使 Cookie 在明文通訊時被竊聽。</p>
<p>詳細內容請參考下方部落格文章和影片：</p>
<p><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLnRva3VtYXJ1Lm9yZy8yMDEzLzA5L2Nvb2tpZS1tYW5pcHVsYXRpb24taXMtcG9zc2libGUtZXZlbi1vbi1zc2wuaHRtbA==">HTTPSを使ってもCookieの改変は防げないことを実験で試してみた | 徳丸浩の日記<i class="fa fa-external-link-alt"></i></span></p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/yXNOJE9kGK8?si=UXFoHFJWZoBDWaal" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen></iframe>

<p>網站端的應對措施如下，Cookie 缺少的 Secure 屬性經常在弱點檢測中被診斷出。</p>
<ul>
<li>在 Cookie 設定 Secure 屬性（根本解決方案）</li>
<li>設定 HSTS（緩解措施）</li>
</ul>
<p>使用者端的應對措施較為困難，以下提供一些可用措施：</p>
<ul>
<li>使用可信任的網站</li>
<li>避免使用公共無線網絡</li>
</ul>
<h2 id="Session-ID-固定攻擊（Session-Fixation）"><a href="#Session-ID-固定攻擊（Session-Fixation）" class="headerlink" title="Session ID 固定攻擊（Session Fixation）"></a>Session ID 固定攻擊（Session Fixation）</h2><p>有一種攻擊手法被稱為「Session ID 固定攻擊」。詳細內容請參考下方文章：</p>
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cuaXBhLmdvLmpwL3NlY3VyaXR5L3Z1bG4vd2Vic2VjdXJpdHkvc2Vzc2lvbi1tYW5hZ2VtZW50Lmh0bWw=">安全なウェブサイトの作り方 - 1.4 セッション管理の不備 | 情報セキュリティ | IPA<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLnRva3VtYXJ1Lm9yZy8yMDA5LzAxL2ludHJvZHVjdGlvbi10by1zZXNzaW9uLWZpeGF0aW9uLWF0dGFjay5odG1s">とくまるひろしのSession Fixation攻撃入門 | 徳丸浩の日記<i class="fa fa-external-link-alt"></i></span></li>
</ul>
<p>在這種攻擊中，必須達成「攻擊者預先透過某種方法，將準備好的 Session ID 傳送給使用者」這項步驟。也就是說，攻擊者必須將準備好的 Cookie 傳給使用者。可能有不少人會認為「這種事有可能嗎」，透過 MITM 是有可能實現的。以下文章和影片將會進行說明：</p>
<p><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLnRva3VtYXJ1Lm9yZy8yMDEzLzA5L2Nvb2tpZS1tYW5pcHVsYXRpb24taXMtcG9zc2libGUtZXZlbi1vbi1zc2wuaHRtbA==">HTTPSを使ってもCookieの改変は防げないことを実験で試してみた | 徳丸浩の日記<i class="fa fa-external-link-alt"></i></span>（再發表）</p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/GP1eEit1quY?si=8MYCJXMnPYxe6Z3z" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen></iframe>

<p>網站端的應對措施如下：</p>
<ul>
<li>為防止 Session ID 固定，可在登入後立即更改 Session ID（根本解決方案）</li>
<li>使用 Cookie 的前綴詞（參考 <span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSFRUUC9Db29raWVz">MDN<i class="fa fa-external-link-alt"></i></span>）（緩解措施）</li>
<li>設定 HSTS（緩解措施）</li>
</ul>
<p>另一方面，一般使用者較難發現 Session ID 固定這項弱點，因此使用者端的應對措施較為有限：</p>
<ul>
<li>使用可信任的網站</li>
<li>避免使用公共無線網絡</li>
</ul>
<p>雖然 Session ID 固定這項弱點近來較少見，但在弱點分析中偶爾會被診斷出。</p>
<h2 id="設定檔案共享"><a href="#設定檔案共享" class="headerlink" title="設定檔案共享"></a>設定檔案共享</h2><p>Windows 有項名為 <span class="exturl" data-url="aHR0cHM6Ly9zdXBwb3J0Lm1pY3Jvc29mdC5jb20vemgtdHcvd2luZG93cy8lRTUlOUMlQTgtd2luZG93cy0lRTQlQjglQUQlRTUlQjAlODctd2ktZmktJUU3JUI2JUIyJUU4JUI3JUFGJUU4JUE4JUFEJUU3JTgyJUJBJUU1JTg1JUFDJUU3JTk0JUE4JUU2JTg4JTk2JUU3JUE3JTgxJUU0JUJBJUJBLTA0NjAxMTdkLThkM2UtYTdhYy1mMDAzLTdhMGRhNjA3NDQ4ZA==">Network Profile（網路配置文件）<i class="fa fa-external-link-alt"></i></span>的功能，可設定為 Public 或 Private。在使用公共無線網絡時，必須將其設定為 Public。若誤設為 Private，可能存在以下威脅：</p>
<blockquote>
<p>在公共場所使用無線網絡時，如果啟用這個檔案共享功能，電腦或智慧型手機內的檔案就有可能被他人讀取，或被發送病毒等惡意檔案。因此在公共場所使用無線網絡時，請務必停用檔案共享功能。<br>引用自<span class="exturl" data-url="aHR0cHM6Ly93d3cuc291bXUuZ28uanAvbWFpbl9zb3Npa2kvam9ob190c3VzaW4vc2VjdXJpdHkvZW5kdXNlci9zZWN1cml0eTAxLzA3Lmh0bWw=">無線LANの安全な利用｜基本的な対策｜一般利用者の対策｜国民のための情報セキュリティサイト<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
<p>雖然感染病毒不一定是經由公共無線網絡這條途徑，但透過連接偽造的存取點，就有機會提高感染病毒的可能性。有個典型的例子是 <span class="exturl" data-url="aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3poLXR3L1dhbm5hQ3J5">WannaCry<i class="fa fa-external-link-alt"></i></span>。WannaCry 透過 tcp/445 port 進行攻擊，受到防火牆保護的網路通常不會受到感染，但如果連接到偽造的存取點，並將網路配置文件設定為 Private 時，就可能增加被感染的可能性。</p>
<p>在以下影片中，模擬使用偽造的存取點，展示 WannaCry 利用 Windows 的漏洞 MS17-010 進行攻擊，以及透過文件共享洩露資訊的情況。</p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/qMbB9DUkz-k?si=Fd4IhdCYhBUNKrxB" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen></iframe>

<p>使用者的防護措施如下：</p>
<ul>
<li>連接到公共無線網絡時，將網路配置文件設定為 Public</li>
<li>保持軟體更新至最新狀態</li>
</ul>
<p>此外，這類攻擊通常無法透過 VPN 來預防（已在 Norton Secure VPN 驗證），即便使用 VPN，也不能忽略上述的防護措施。</p>
<h2 id="肩窺攻擊"><a href="#肩窺攻擊" class="headerlink" title="肩窺攻擊"></a>肩窺攻擊</h2><p>肩窺攻擊（Shoulder Hacking）是指旁人在附近窺視螢幕或鍵盤操作的行為，在這種情況，給人「越過肩膀偷看」的感覺，因此被稱作肩窺攻擊，實際上不一定侷限於越過肩膀偷看。</p>
<p>可參考： <span class="exturl" data-url="aHR0cHM6Ly93d3cuc291bXUuZ28uanAvbWFpbl9zb3Npa2kvam9ob190c3VzaW4vc2VjdXJpdHkvYnVzaW5lc3Mvc3RhZmYvMTIuaHRtbA==">ソーシャルエンジニアリングの対策｜社員・職員全般の情報セキュリティ対策｜企業・組織の対策｜国民のための情報セキュリティサイト<i class="fa fa-external-link-alt"></i></span></p>
<p>防範措施如下：</p>
<ul>
<li>使用防窺螢幕保護貼</li>
<li>當周圍有人時，避免輸入密碼或信用卡資訊</li>
</ul>
<p>肩窺攻擊與原始推文中的 「在星巴克使用免費 Wi-Fi」無關，因此可能稍微偏離了主題。</p>
<h2 id="離席時的攻擊"><a href="#離席時的攻擊" class="headerlink" title="離席時的攻擊"></a>離席時的攻擊</h2><p>在咖啡廳等場所，有些人會把筆記型電腦放在座位上然後離席一陣子。在咖啡廳如果想去廁所，即使隨身攜帶貴重物品和筆電，飲料還是會留在原位，畢竟不太會想帶著飲料去廁所，這的確是有點棘手的問題。像我這樣比較膽小的人，可能會選擇「在咖啡廳忍住不去廁所」，但這麽做對健康（可能）不太好。</p>
<p>那麼，如果把筆電留在座位上離開，除了筆電可能被偷走，如果畫面還繼續開著，很容易被偷偷瀏覽已登入的網站或筆電中的文件。</p>
<p>此外，即使筆電沒有被偷，也可能在離席這段時間，在筆電安裝「<span class="exturl" data-url="aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3poLXR3LyVFOSU5NCVBRSVFNyU5QiU5OCVFOCVBRSVCMCVFNSVCRCU5NQ==">鍵盤側錄（Keylogger）<i class="fa fa-external-link-alt"></i></span>」或其他惡意軟體⋯⋯但這種情況非常可疑，直接把整台筆電偷走還比較乾脆省事。<br>這種攻擊方式也和「使用星巴克的免費 Wi-Fi」主題無關，因此可能稍微偏離了主題。</p>
<p>防範對策如下所示：</p>
<ul>
<li>在咖啡廳等地，不要把筆電留在座位上離開</li>
</ul>
<h2 id="那該怎麼做呢"><a href="#那該怎麼做呢" class="headerlink" title="那該怎麼做呢"></a>那該怎麼做呢</h2><p>近來工作型態改變，傾向推薦在咖啡廳等開放空間工作，又因為裝載 Apple 晶片的 MacBook 電池使用時間非常長，因此想在咖啡廳使用的心情也能夠理解。但由於存在上述的威脅，在使用時應該注意以下事項較為妥當：</p>
<ul>
<li>確認是否使用 HTTPS 連線</li>
<li>透過預先加入的書籤使用網站</li>
<li>不忽視 TLS 憑證的錯誤訊息</li>
<li>軟體隨時更新至最新版本</li>
<li>在使用 Windows 作業系統時，將網路配置文件設定為 Public</li>
<li>在咖啡廳等地點，避免使用高度機密的網站</li>
<li>使用可信賴的（已針對漏洞進行防範）網站</li>
<li>使用網路共享等其他通訊方式</li>
<li>使用防窺螢幕保護貼</li>
<li>在咖啡廳等地點，避免輸入密碼或信用卡號碼</li>
<li>不把筆電等物品留在座位上離席</li>
</ul>
<blockquote>
<p>15th鐵人賽目錄傳送門：<span class="exturl" data-url="aHR0cHM6Ly9pdGhlbHAuaXRob21lLmNvbS50dy91c2Vycy8yMDEzNTU1OC9pcm9ubWFuLzYyOTA=">https://ithelp.ithome.com.tw/users/20135558/ironman/6290<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
]]></content>
      <categories>
        <category>2023鐵人賽</category>
        <category>豆知識篇</category>
      </categories>
      <tags>
        <tag>Security</tag>
        <tag>ironman2023</tag>
        <tag>Qiita</tag>
      </tags>
  </entry>
  <entry>
    <title>[2023 15th鐵人賽] Day7 - 為什麼軟體必須要版本升級</title>
    <url>/ironman-2023-day-7/</url>
    <content><![CDATA[<blockquote>
<p>原文連結：<span class="exturl" data-url="aHR0cHM6Ly9xaWl0YS5jb20vYXV0b3Rha2VyMTk4NC9pdGVtcy9hMzA5MTc3MmRiYjBmYjkxNDczZA==">ソフトウェアはなぜバージョンアップしなければならないのか - Qiita<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
<p>有時在一些官網下載軟體時（例如 <span class="exturl" data-url="aHR0cHM6Ly9ub2RlanMub3JnL2Vu">node.js<i class="fa fa-external-link-alt"></i></span> 或 <span class="exturl" data-url="aHR0cHM6Ly91YnVudHUuY29tL2Rvd25sb2FkL2Rlc2t0b3A=">Ubuntu<i class="fa fa-external-link-alt"></i></span> ），會發現官方有提供兩種版本，分別是「LTS」和「Current」，其中 LTS 代表 Long Term Support（長期支援），穩定版本確保程式的安全性與可靠性，避免更新可能造成的風險。</p>
<p>軟體除了新增需求、修復 BUG 以外，是否就不需要再進行版本更新了？這篇文章將會介紹為何軟體需要版本更新，以及更新頻率可能帶來不同的結果。</p>
<span id="more"></span>

<p>那麼，以下正文開始！</p>
<hr>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>對公司內部基礎設施的運營人員來說，軟體更新雖然看似不起眼，實際卻是相當繁重的工作。</p>
<p>特別是在公司內部署伺服器上運行的軟體，版本升級必須和各個使用該軟體的部門進行調整。</p>
<p>在這種情況下，經常會聽到各個部門傳來這樣的聲音「我們現在很忙，希望延遲更新」或「是否可以跳過這個版本？」。要讓每個部門理解版本升級的價值並不是件容易的事。</p>
<p>本篇文章的目的，就是為了讓上司和各個部門的經理們，明白為什麼我們必須進行版本升級。</p>
<h2 id="軟體的有效期限是-2-5-年"><a href="#軟體的有效期限是-2-5-年" class="headerlink" title="軟體的有效期限是 2-5 年"></a>軟體的有效期限是 2-5 年</h2><p>首先必須了解，軟體並不是一套使用到永遠，而是存在一定的有效期限，一旦過了這個期限，它們就會漸漸停止運行。也就是俗稱「什麼都沒做卻停止運作的問題」。</p>
<p>為什麼軟體會停止運作可能有各種各樣的原因。支援軟體運作的中介軟體（Middleware）、編程語言的執行環境（Runtime）、容器（Container）、操作系統（OS），甚至外部伺服器的 API 和認證服務，這些都不斷在變化，如果持續使用舊版本，最終會有某個環節停止運作。</p>
<p>多數軟體都有 Long Term Support（LTS）版本，長期版本通常會提供小型修補程式以支援這些改變，但不會永遠支援舊版本。通常保守支援期限最短 2 年至最長 5 年。因此，版本至少每兩年就必須需要更新一次。</p>
<p>IT 行業是一個流動性較高的行業，但以 2 年頻率為例，對許多員工來說，在職期間至少會經歷一次以上的軟體更新，<strong>這是無法逃避的責任</strong>。</p>
<h2 id="版本升級越是拖延，難度越會上升"><a href="#版本升級越是拖延，難度越會上升" class="headerlink" title="版本升級越是拖延，難度越會上升"></a>版本升級越是拖延，難度越會上升</h2><p>現在，我們已經瞭解到更新版本是無法避免的，但應該以多久的頻率更新才好？更新版本這件事很麻煩，那是否應該拖到 LTS 結束前再執行就好？</p>
<h3 id="為什麼版本升級很麻煩"><a href="#為什麼版本升級很麻煩" class="headerlink" title="為什麼版本升級很麻煩"></a>為什麼版本升級很麻煩</h3><p>在討論這個問題之前，可以先思考為什麼版本升級會讓人感到麻煩。</p>
<p>「是因為 UI 改變讓人難以適應嗎？」這確實是一個原因，但人類是能夠適應變化的生物，因此 UI 的變化並不會導致業務停滯不前。雖然多少會有些不滿的聲音，但適應一個月後通常不會有什麼大問題。</p>
<p>實際上，讓人困擾的是「當功能發生變化，使<strong>以往的業務無法正常運作</strong>」或是「API 規格改變，使<strong>協作工具或插件無法使用</strong>」的情況。針對這些情況，需要額外花費時間尋找替代功能、調整業務流程、修復協作工具或版本升級等。</p>
<p>一般來說，運行的業務軟體不太可能單獨使用，通常會與其他協作軟體串接數據，或用於業務自動化的 API。</p>
<p>以大規模的軟體而言，想要事先瞭解哪些業務會受到影響是不切實計的。即使試著更新版本，若出現問題，就必須拼命解決以確保不會長時間中斷業務；若無法解決，就只能土法煉鋼，退回到上一個的版本。</p>
<p>像這樣<strong>有機會大幅提高工作時數</strong>的情況，是版本升級讓人感到麻煩的原因。</p>
<p><img src="https://imgur.com/boLEH1c.png"></p>
<blockquote>
<p>版本升級導致業務中斷</p>
</blockquote>
<h3 id="版本升級頻率低將導致更新失敗"><a href="#版本升級頻率低將導致更新失敗" class="headerlink" title="版本升級頻率低將導致更新失敗"></a>版本升級頻率低將導致更新失敗</h3><p>那麼，維護所需工時會因版本升級頻率而有何變化呢？如果某個業務在版本升級中出現問題，下一個版本並不會自動回復到原本的設計，故障點依然存在。請務必考慮到這一點。</p>
<ul>
<li><strong>版本升級頻率較低</strong>：維護工作的發生頻率較低，但每次會影響到多個業務運作，使工作量大幅增加。由於維護人力並不一定充足，可能無法應付大規模的升版工作，導致更新失敗的風險較高。</li>
<li><strong>版本升級頻率較高</strong>：維護工作的發生頻率較高，但每次影響到的業務量較小，產生的工作量也較少。能夠在較短的時間內修復故障，更新失敗的風險較低。</li>
</ul>
<p><img src="https://imgur.com/XyCNIOy.png"></p>
<blockquote>
<p>左圖代表版本升級頻率高的情況，失敗風險較低<br>右圖代表版本升級頻率低的情況，失敗風險較高</p>
</blockquote>
<p>也就是說，如果版本升級頻率較低，將提高更新失敗的機率，反而需要執行多次相同的版本升級。更糟糕的是，在反覆處理更新時，可能又推出了下一個版本，造成另一個故障點，形成一個惡化的循環。若這種情況持續下去，LTS 終將到期，形成任誰也無法維護的軟體化石。</p>
<h3 id="軟體的-LTS-到期將會形成地下城"><a href="#軟體的-LTS-到期將會形成地下城" class="headerlink" title="軟體的 LTS 到期將會形成地下城"></a>軟體的 LTS 到期將會形成地下城</h3><blockquote>
<p>補充：<span class="exturl" data-url="aHR0cHM6Ly96aC5tb2VnaXJsLm9yZy5jbi96aC10dy8lRTUlOUMlQjAlRTQlQjglOEIlRTUlOUYlOEU=">地下城（Dungeon）<i class="fa fa-external-link-alt"></i></span>在歐美遊戲中已經不僅僅如字面意思一樣指地下的城市或地區，而泛指玩家探險的地區，更接近於迷宮或副本的概念。</p>
</blockquote>
<p>若軟體版本升級頻率較低，可能會發生 LTS 支援到期的情況。一旦發生這種情況，將帶來令人沮喪的事實：</p>
<ul>
<li>首先，軟體將停止修復安全漏洞。為了降低安全風險，必須在伺服器外部建立防火牆，由於處於封閉狀態，要進入伺服器進行維護將會變得困難。</li>
<li>接下來，其他協作軟體將逐漸停止支援該版本。不但無法新增協作軟體，也無法更新現有的協作軟體版本。當其他軟體的 LTS 到期時，情況將變得更加混亂。</li>
<li>很快的，負責維護內部協作工具的人員將不存在。這是因為「不更新 = 幾乎沒有維護工作 = 不需要這份工作」，因此人員會進行調職或者轉職。結果來說，軟體將會變得無法預測的狀態，意即成為地下城。</li>
<li>老舊軟體不佳的使用體驗，大量數據導致運作變得緩慢。許多為此感到厭煩的冒險者，曾設法攻克這個地下城，但九成左右都會被黑暗所吞噬，白白浪費寶貴的時間和動力。</li>
</ul>
<p><img src="https://imgur.com/8tFS2tv.png"></p>
<p>最終的結果，可能是由某位大人物一聲令下，展開地下城攻略任務（= Replace Project 取代專案）。這將投入大量工時，包括釐清業務流程、選擇下一個軟體、重新安裝協作工具等等，克服重重問題並進行替換。<strong>只要能定期更新，本來是不需投入這些工時的。</strong></p>
<h2 id="為了避免創造地下城"><a href="#為了避免創造地下城" class="headerlink" title="為了避免創造地下城"></a>為了避免創造地下城</h2><p>現在，既然已經明白推遲更新可能帶來的風險，接下來讓我們思考該如何避免這種可怕的未來。</p>
<h3 id="每年至少升級一次"><a href="#每年至少升級一次" class="headerlink" title="每年至少升級一次"></a>每年至少升級一次</h3><p>首先最重要的，是能夠定期更新。理想情況下，應該每三個月更新一次，最長不超過一年更新一次。提高更新頻率，可有效減少更新時可能出現的問題，並提高更新的成功率。定期更新將更新流程標準化，也會使各部門熟悉操作，知道應該從什麼部分開始檢查。<br>一旦熟練流程，建議在環境中建立部署協作工具和驗證操作的流程，以便進行操作測試。</p>
<h3 id="統計版本升級所需工時並進行檢視"><a href="#統計版本升級所需工時並進行檢視" class="headerlink" title="統計版本升級所需工時並進行檢視"></a>統計版本升級所需工時並進行檢視</h3><p>如果版本升級變成固定工作內容，接下來，應該試著統計與更新相關的工時。如果能預測更新需要多少工時，就能事先向各部門申請工時分配。令人意外的是，若能夠提前預測工時需求，在實際操作時各部門可能會更容易接受。</p>
<p>如果能夠持續進行版本升級，那更新這份工作幾乎不成問題。工時需求主要來自協作工具的維護。由於不能夠無限推遲更新，這些工時需求來源並不是因為更新頻率高，而是由於軟體本身的品質問題，或協作工具的維護與穩定性問題。</p>
<p>如果工時需求過高，建議重新審視協作系統和業務自動化。可將基於 <span class="exturl" data-url="aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3poLXR3LyVFNiVBOSU5RiVFNSU5OSVBOCVFNCVCQSVCQSVFNiVCNSU4MSVFNyVBOCU4QiVFOCU4NyVBQSVFNSU4QiU5NSVFNSU4QyU5Ng==">RPA<i class="fa fa-external-link-alt"></i></span> 的自動化工具轉換為基於 API，停止過度的業務自動化，如果軟體本身的穩定性不佳或不重視兼容性，那麼考慮轉移到 SaaS 或進行替換可能也是一種方法。</p>
<h2 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h2><ul>
<li>更新軟體版本的原因<strong>並不是</strong>因為「有推出新功能」。</li>
<li>軟體存在 2-5 年的有效期限，超過這個期限，軟體會逐漸<strong>地下城化</strong>。</li>
<li>更新的頻率較低會提升更新的難度，並提高失敗的風險。</li>
<li>進行每年至少一次的版本升級，規範版本升級流程，並持續檢視業務，以提供穩定的價值。</li>
</ul>
<h3 id="最後一點"><a href="#最後一點" class="headerlink" title="最後一點"></a>最後一點</h3><p>相較於引入新軟體或進行替換，軟體更新通常被視為一項平凡的工作。</p>
<p>然而，確保軟體更新能夠順利執行，避免軟體地下城化或面臨大規模替換，實際上是非常重要的工作。請負責執行軟體更新的人員應該為這份工作感到自豪。</p>
<p>軟體能夠持續運作並不是理所當然的事情，必須仰賴運營人員持續各種維護工作。希望現場的各位能夠了解，即使沒有釋出所需的新功能，這個業務仍有持續運作的價值。</p>
<blockquote>
<p>15th鐵人賽目錄傳送門：<span class="exturl" data-url="aHR0cHM6Ly9pdGhlbHAuaXRob21lLmNvbS50dy91c2Vycy8yMDEzNTU1OC9pcm9ubWFuLzYyOTA=">https://ithelp.ithome.com.tw/users/20135558/ironman/6290<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
]]></content>
      <categories>
        <category>2023鐵人賽</category>
        <category>豆知識篇</category>
      </categories>
      <tags>
        <tag>ironman2023</tag>
        <tag>Qiita</tag>
        <tag>軟體開發</tag>
        <tag>版本升級</tag>
      </tags>
  </entry>
  <entry>
    <title>[2023 15th鐵人賽] Day8 - 鹽加密的鹽通常會存放在哪裡</title>
    <url>/ironman-2023-day-8/</url>
    <content><![CDATA[<blockquote>
<p>原文連結：<span class="exturl" data-url="aHR0cHM6Ly9xaWl0YS5jb20vb2NrZWdoZW0vaXRlbXMvZDczMjRkMzgzZmI3YzEwNGFmNTg/dXRtX3NvdXJjZT1RaWl0YSVFMyU4MyU4QiVFMyU4MyVBNSVFMyU4MyVCQyVFMyU4MiVCOSZ1dG1fY2FtcGFpZ249MzhiNjQ5Mzc3Yy1RaWl0YV9uZXdzbGV0dGVyXzU4MF8wOF8yMyZ1dG1fbWVkaXVtPWVtYWlsJnV0bV90ZXJtPTBfZTQ0ZmVhYTA4MS0zOGI2NDkzNzdjLTYyODIwNDQ5">ソルト付きハッシュのソルトはどこに保存するのが一般的か - Qiita<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
<hr>
<p>對於 pictBLand 和 pictSQUARE 受到非法訪問，且將密碼儲存在未加鹽的 MD5 Hash 中的事件，近來已成話題。</p>
<blockquote>
<p>2023 年 8 月 16 日，有篇投稿聲稱持有從 pictSQUARE 竊取的數據，並將這些資料銷售給外部論壇（部分略）。該投稿指出，雖然密碼已進行 MD5 HASH，由於未進行加鹽，因此已取得 29 萬 4512 組簡單密碼的原始字串（剩餘 26 萬 8172 組仍保持 MD5 HASH 值）。<br>內容引用自 <span class="exturl" data-url="aHR0cHM6Ly9waXlvbG9nLmhhdGVuYWRpYXJ5LmpwL2VudHJ5LzIwMjMvMDgvMTcvMDMwMTQx">不正アクセスによるpictBLand、pictSQUAREの情報流出の可能性についてまとめてみた - piyolog<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
<span id="more"></span>

<p>在這段期間，觀察有關 MD5 HASH 和 salt 的推文（post），似乎有許多人對 salt 的理解是錯誤的。因此，我提出了以下的「測試問題」。收到許多回答，對此十分感謝。</p>
<p><img src="https://imgur.com/57Y0JjG.png"></p>
<blockquote>
<p>【問題】在儲存密碼 HASH 值時，通常會將鹽存放在哪裡呢？<br>(1) 將鹽儲存在高度機密的文件中，並透過環境變數傳遞<br>(2) 與 HASH 值一起存放在資料庫中<br>(3) 儲存在硬體安全模組（HSM）中<br>(4) 不進行儲存，每次都生成隨機的鹽<br>（ <span class="exturl" data-url="aHR0cHM6Ly90d2l0dGVyLmNvbS9vY2tlZ2hlbS9zdGF0dXMvMTY5MTk2Njk2NjExNzEyMjQ2Mj9yZWZfc3JjPXR3c3JjJTVFdGZ3JTdDdHdjYW1wJTVFdHdlZXRlbWJlZCU3Q3R3dGVybSU1RTE2OTE5NjY5NjYxMTcxMjI0NjIlN0N0d2dyJTVFNjVlOGFhZjViOTQ4MTMxNzdlYTNkZWJmYTUyOTNiMzllMWM1MDcyZSU3Q3R3Y29uJTVFczFfYzEwJnJlZl91cmw9aHR0cHM6Ly9xaWl0YS5jb20vb2NrZWdoZW0vaXRlbXMvZDczMjRkMzgzZmI3YzEwNGFmNTg=">原推文連結<i class="fa fa-external-link-alt"></i></span>）</p>
</blockquote>
<p>正確答案是「與 HASH 值一起存放在資料庫中」，結果發現正確率非常低，只有 33.9%。我的「擔憂」似乎已成現實。</p>
<p>那麼，讓我們來檢討答案吧。</p>
<h2 id="使用-HASH-值保存密碼的原因"><a href="#使用-HASH-值保存密碼的原因" class="headerlink" title="使用 HASH 值保存密碼的原因"></a>使用 HASH 值保存密碼的原因</h2><p>首先來談談，使用 HASH 值保存密碼的目的：</p>
<ul>
<li>即使密碼訊息外洩，仍希望盡量延遲密碼的濫用</li>
<li>即使是管理員，若知道用戶的密碼也會提高被濫用的可能性</li>
<li>若伺服器遭受入侵，加密密鑰也可能會被竊取</li>
</ul>
<p>基於上述理由，通常會以 HASH 值保存密碼，而非採用可解密的加密密鑰管理。如同 Unix/Linux/Windows 等系統，也是將用戶的密碼以 HASH 值的形式保存，網頁應用程序也會要求避免以明碼形式，而是使用 HASH 值保存。</p>
<h2 id="加鹽的目的"><a href="#加鹽的目的" class="headerlink" title="加鹽的目的"></a>加鹽的目的</h2><ul>
<li>若僅使用單純的 HASH 值，那麼設定相同密碼的用戶之間，其 HASH 值也會相同，這種情況將會提高風險</li>
<li>透過<span class="exturl" data-url="aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3dpa2kvJUU1JUJEJUE5JUU4JTk5JUI5JUU4JUExJUE4">彩虹表<i class="fa fa-external-link-alt"></i></span>等方法，對於約 8 個字符的英數字密碼，可在幾秒～幾分鐘內還原成明碼，因此加鹽是為了使「看起來的密碼長度」更長</li>
</ul>
<p>下圖是以 SHA-256 保存密碼的範例，顯示設定相同密碼「password」的用戶，其 HASH 值將完全一致的情況。一旦被發現擁有相同密碼，將成為非法登錄的途徑。即使計算雜湊公式（Hash Function）為未知，一旦被發現「擁有相同的密碼，很有可能是簡單的密碼」，並且攻擊者能夠遠程進行<span class="exturl" data-url="aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3poLXR3LyVFNSVBRCU5NyVFNSU4NSVCOCVFNiU5NCVCQiVFNiU5MyU4QQ==">字典攻擊<i class="fa fa-external-link-alt"></i></span>，或是透過故意註冊簡單的密碼，從而一網打盡這些用戶的密碼。</p>
<p><img src="https://imgur.com/iVxqlvU.png"></p>
<p>為了避免這種情況，通常會生成一個稱為鹽的短字串，並附加到密碼的前後來計算 HASH 值。由於每個使用者的鹽都不同，即使是密碼相同，也會產生不同的 HASH 值。</p>
<h2 id="鹽通常會存放在哪"><a href="#鹽通常會存放在哪" class="headerlink" title="鹽通常會存放在哪"></a>鹽通常會存放在哪</h2><p>如上文所述，即使在 Unix 中，也曾使用 HASH 值儲存密碼，但由於每個系統和版本會有不同的 HASH 值儲存格式，因此存在互通性問題。為了解決這個問題，設計出 Modular Crypt Format（MCF，模組加密格式），並廣泛應用於現今的 Linux 等系統（<span class="exturl" data-url="aHR0cHM6Ly9wYXNzbGliLnJlYWR0aGVkb2NzLmlvL2VuL3N0YWJsZS9tb2R1bGFyX2NyeXB0X2Zvcm1hdC5odG1s">參考<i class="fa fa-external-link-alt"></i></span>）。以下是以鹽 = SALT（實際是用隨機字串），密碼 = pokemon，以 SHA-512 格式計算密碼 HASH 值的結果：</p>
<pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx">$ openssl passwd <span class="token operator">-</span><span class="token number">6</span> <span class="token operator">-</span>salt<span class="token operator">=</span><span class="token constant">SALT</span> pokemon
$<span class="token number">6</span>$<span class="token constant">SALT</span>$ULXzhDaWogf6Q3KHTtpYdqKKEIaFPML8gl5wpHpvPJVkGgiKGubqkogwvqoVn3eDsrJuRB22w<span class="token punctuation">.</span>RPWzAdEu1xD<span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>這是 Linux 的 /etc/shadow 儲存密碼 HASH 值的格式。上方內容有以下含義：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token variable">$6</span>$  雜湊方式（在這個範例是用 SHA-512）
SALT 鹽（在實際操作中使用隨機字串）
ULX<span class="token punctuation">..</span>以下是 HASH 值<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>HASH 值、鹽和雜湊方式會「一起」儲存在文件的一行中。由於密碼驗證需要這些訊息，因此會需要儲存在一起。</p>
<p>MCF 最初是為 Unix/Linux 的密碼儲存而設計的，但目前在 Web 應用程式中也被廣泛使用於需要儲存密碼的情況。以下是使用 PHP 的 password_hash 函數，將密碼 = pokemon 轉換的範例：</p>
<pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx">$ php <span class="token operator">-</span>r <span class="token string">"echo password_hash('pokemon', PASSWORD_DEFAULT), PHP_EOL;"</span>
$<span class="token number">2</span>y$<span class="token number">10</span>$<span class="token number">5</span>MLO1PPVHzUiW<span class="token operator">/</span>mggn8kAOkF<span class="token operator">/</span>aoRk0RaLBSH3CwU47jmacYoGtrFa<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>上述範例代表的涵意如下：</p>
<pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token number">2</span>y algorithm<span class="token operator">=</span>bcrypt
<span class="token number">10</span> Steching 次數的指標（不代表 <span class="token number">10</span> 次）
<span class="token number">5</span>MLO1PPVHzUiW<span class="token operator">/</span>mggn8kAO Salt
kF<span class="token operator">/</span>aoRk0RaLBSH3CwU47jmacYoGtrFa <span class="token constant">HASH</span> 值<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>不只是 PHP，主要的 Library 和 Framework 都使用 MCF 格式，應用程序通常會將密碼資訊以 MCF 格式儲存在資料庫中。</p>
<p>因此，對於上述問題的解答是（鹽）「應該與 HASH 值一起保存在資料庫中」。透過使用MCF，即可在 PHP 開發的 Web 應用程式移植到 Ruby on Rails 等框架的情況，仍保持同樣的密碼資訊直接移植。</p>
<h2 id="若-HASH-值和鹽一起儲存，是否會在洩露時被濫用？"><a href="#若-HASH-值和鹽一起儲存，是否會在洩露時被濫用？" class="headerlink" title="若 HASH 值和鹽一起儲存，是否會在洩露時被濫用？"></a>若 HASH 值和鹽一起儲存，是否會在洩露時被濫用？</h2><p>這裡許多人會抱持著疑問，若把 HASH 值和鹽一起儲存，那麼密碼在洩露後是否會輕易被破解？</p>
<p>確實「若花費足夠的時間，是可以被破解的」，但這並不容易。由於雜湊函數是單向的，因此無法從 HASH 值和鹽，透過數學公式等方式計算出明文密碼，而需使用字典攻擊或暴力破解。在儲存密碼時，應使用避免使用常見的高速雜湊函數（如 MD5 或 SHA-2），而是為密碼保護而設計出「緩慢的」算法，如 bcrypt、scrypt、Argon2 等。除了改良算法，還包括重複進行雜湊計算的延伸步驟（Stretching，Linux 用來保存密碼的 <code>$6$</code> 格式也有執行延伸）。透過這些措施，能夠使密碼的 HASH 值在短時間內無法被濫用，為密碼變更提供緩衝時間。</p>
<p>另一方面，若原始密碼本身就很簡單，像是 password 或 123456 等，容易被字典攻擊破解。這是使用 HASH 值儲存密碼時的限制，為了解決這個問題，開始出現了所謂的<span class="exturl" data-url="aHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvUGVwcGVyXyhjcnlwdG9ncmFwaHkp">胡椒（pepper）<i class="fa fa-external-link-alt"></i></span>。pepper 是一個單一的秘密字串，通過與密碼進行混合，可提升密碼的機密性。pepper 若是外洩，那將失去其意義，因此建議將 pepper 儲存在具高度機密性的<span class="exturl" data-url="aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3poLXR3LyVFNyVBMSVBQyVFNCVCQiVCNiVFNSVBRSU4OSVFNSU4NSVBOCVFNiVBOCVBMSVFNSU5RCU5Nw==">硬體安全模組（HSM）<i class="fa fa-external-link-alt"></i></span>等儲存設備中。”</p>
<h2 id="錯誤的答案有何問題"><a href="#錯誤的答案有何問題" class="headerlink" title="錯誤的答案有何問題"></a>錯誤的答案有何問題</h2><p>以下是有關錯誤答案的重點解釋：</p>
<h3 id="將鹽儲存在高度機密的文件中，並透過環境變數傳遞"><a href="#將鹽儲存在高度機密的文件中，並透過環境變數傳遞" class="headerlink" title="將鹽儲存在高度機密的文件中，並透過環境變數傳遞"></a>將鹽儲存在高度機密的文件中，並透過環境變數傳遞</h3><p>這種實作方式無法滿足鹽的要求，因為必須達到「每個使用者都不同」。雖然這種方法可能適用於 pepper，但若以可能被入侵為前提，透過環境變數傳遞並不安全。</p>
<h3 id="儲存在硬體安全模組（HSM）中"><a href="#儲存在硬體安全模組（HSM）中" class="headerlink" title="儲存在硬體安全模組（HSM）中"></a>儲存在<span class="exturl" data-url="aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3poLXR3LyVFNyVBMSVBQyVFNCVCQiVCNiVFNSVBRSU4OSVFNSU4NSVBOCVFNiVBOCVBMSVFNSU5RCU5Nw==">硬體安全模組（HSM）<i class="fa fa-external-link-alt"></i></span>中</h3><p>這種實作也難以滿足「每個使用者都不同」的需求，特別是考慮到使用者數量可能超過數十萬的情況。另一方面，這種方法更適用於儲存 pepper。但如果已經選擇使用 HSM，就不應該把加密金鑰移出 HSM，而是善用 HSM 的特性，直接在內部加密密碼 HASH 值。</p>
<h3 id="不進行儲存，每次都生成隨機的鹽"><a href="#不進行儲存，每次都生成隨機的鹽" class="headerlink" title="不進行儲存，每次都生成隨機的鹽"></a>不進行儲存，每次都生成隨機的鹽</h3><p>雖然可以在每次都生成隨機的鹽，但若不儲存鹽，將無法進行密碼驗證。</p>
<h2 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h2><p>本文首先以問答形式，提出有關如何儲存鹽的問題，並進行了解說。目前主流儲存鹽的方法，是透過 Modular Crypt Format（MCF），被廣泛使用於 Linux 和 Web 應用程式的密碼儲存。但即使不知道這一點，只要使用高安全性的密碼儲存 Library，也非常有機會在未知的部分使用到 MCF 格式。<br>通常情況下，鹽會和 HASH 一起儲存，如前文所述，但如果不放心，則可以考慮使用 pepper（有時稱作 Secret Salt）。在這種情況下，如何安全管理 pepper 將是一項挑戰，例如考慮使用 HSM 或 Cloud HSM 作為選項。</p>
<h2 id="宣傳"><a href="#宣傳" class="headerlink" title="宣傳"></a>宣傳</h2><p>更多內容可參考作者的 YouTube 頻道，提供許多有關密碼保護的影片說明。</p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/p_2tiP0qclQ?si=-vF4yboyoc4jwH1n" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen></iframe>

<p><span class="exturl" data-url="aHR0cHM6Ly93d3cuc2VjdXJpdHktY2FtcHVzLmNvbS9lc3NlbnRpYWw=">エッセンシャルコース詳細 | Security Campus<i class="fa fa-external-link-alt"></i></span></p>
<blockquote>
<p>15th鐵人賽目錄傳送門：<span class="exturl" data-url="aHR0cHM6Ly9pdGhlbHAuaXRob21lLmNvbS50dy91c2Vycy8yMDEzNTU1OC9pcm9ubWFuLzYyOTA=">https://ithelp.ithome.com.tw/users/20135558/ironman/6290<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
]]></content>
      <categories>
        <category>2023鐵人賽</category>
        <category>豆知識篇</category>
      </categories>
      <tags>
        <tag>hash</tag>
        <tag>Security</tag>
        <tag>ironman2023</tag>
        <tag>Qiita</tag>
      </tags>
  </entry>
  <entry>
    <title>[2023 15th鐵人賽] Day9 - 有魅力的 Repository 會如何撰寫 README.md</title>
    <url>/ironman-2023-day-9/</url>
    <content><![CDATA[<blockquote>
<p>原文連結：<span class="exturl" data-url="aHR0cHM6Ly9xaWl0YS5jb20vYXV0b3Rha2VyMTk4NC9pdGVtcy9iY2U3MGM4YzY3YThmNmZiMWI5ZA==">イケてるレポジトリのREADME.mdには何を書くべきか - Qiita<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
<hr>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在 GitHub 新建 Repository 時，首先會建立 <code>README.md</code> 這個檔案。您是否會將文件維持預設狀態，而不做任何修改呢？</p>
<p><code>README.md</code> 是 Repository 的門面。通過編輯這份文件，能夠大幅提升 Repository 的質量。然而，可能有許多人不知道應該在 <code>README.md</code> 中寫些什麼。</p>
<span id="more"></span>

<p>本文將會整理一些建議的架構內容。</p>
<h2 id="README-md-的讀者是誰？"><a href="#README-md-的讀者是誰？" class="headerlink" title="README.md 的讀者是誰？"></a><code>README.md</code> 的讀者是誰？</h2><p>首先，需要考慮這份 <code>README.md</code> 是為誰而寫開始。</p>
<p><code>README.md</code> 的讀者主要分為兩大類：使用者和開發人員。根據預期 Repository 的瀏覽對象主要是使用者或開發人員，決定以哪一方為主體來撰寫。</p>
<h3 id="README-md必須用英文撰寫嗎？"><a href="#README-md必須用英文撰寫嗎？" class="headerlink" title="README.md必須用英文撰寫嗎？"></a><code>README.md</code>必須用英文撰寫嗎？</h3><p>由於知名的 OSS（開源軟體）通常以英文撰寫 <code>README.md</code>，因此可能產生應該要使用英文撰寫的認知。然而，如果主要觀眾是懂日語的人，那 <code>README.md</code> 就應該以日語撰寫。</p>
<p>此外，若堅持用英文撰寫使內容變得薄弱，反而得不償失。近年來，因為翻譯技術有飛躍的進步，可嘗試先使用自己擅長的語言撰寫，然後再進行翻譯，也是另一種方法。</p>
<h2 id="使用者想知道的事情"><a href="#使用者想知道的事情" class="headerlink" title="使用者想知道的事情"></a>使用者想知道的事情</h2><h3 id="Getting-Started-入門指南"><a href="#Getting-Started-入門指南" class="headerlink" title="Getting Started 入門指南"></a>Getting Started 入門指南</h3><p>首先介紹使用者在試用工具所需的前置作業。基本架構如下：</p>
<ul>
<li>安裝步驟</li>
<li>工具的基本使用方法</li>
</ul>
<p>如果缺少這些內容，使用者將不知道該如何使用工具。因此請務必寫上說明。</p>
<p>此外，Getting Started 的長度通常反應使用該工具的門檻高低。理想情況下，安裝應該能透過一行指令完成，使用步驟也應該盡量簡化。</p>
<p>若撰寫時發現步驟太長，試著思考如何簡化；若難以簡化安裝步驟，可以考慮準備 Web 環境的 Playground，或建立 Docker Image。</p>
<h2 id="Manual-使用手冊"><a href="#Manual-使用手冊" class="headerlink" title="Manual 使用手冊"></a>Manual 使用手冊</h2><p>在 <code>README.md</code> 中，提供 Manual 和 API Reference 相關連結將對使用者非常有幫助。</p>
<p>需注意這些文件包括 <strong>Tutorial</strong> 和 <strong>Reference</strong> 兩種類型，請盡可能使其保持平衡。</p>
<h3 id="Tutorial-教程"><a href="#Tutorial-教程" class="headerlink" title="Tutorial 教程"></a>Tutorial 教程</h3><p>描述工具典型的使用範例。盡可能附上使用截圖，以 Step By Step 的方式詳細說明。推薦使用 <span class="exturl" data-url="aHR0cHM6Ly9yZWFkdGhlZG9jcy5vcmcv">Read the Docs<i class="fa fa-external-link-alt"></i></span> 等工具來撰寫。</p>
<h4 id="Reference-參考資料"><a href="#Reference-參考資料" class="headerlink" title="Reference 參考資料"></a>Reference 參考資料</h4><p>詳細且全面性描述工具的規格。</p>
<p>若是在建立 Library 的情況，多數程式語言都附帶自動生成 Reference 的功能，因此建議透過工具從 Source Code 中的文檔註釋自動生成 Reference。</p>
<p>可搭配使用 <span class="exturl" data-url="aHR0cHM6Ly9yZWFkdGhlZG9jcy5vcmcv">Read the Docs<i class="fa fa-external-link-alt"></i></span> 等工具，盡量透過自動生成，以確保 Reference 和 Source Code 之間的一致性。</p>
<h3 id="Release-Note-發版紀錄"><a href="#Release-Note-發版紀錄" class="headerlink" title="Release Note 發版紀錄"></a>Release Note 發版紀錄</h3><p>撰寫發版紀錄，可在使用者升級工具版本時提供幫助。</p>
<p>雖然這在 Beta 版本或其他預發布版本並非必要，但在版本 1.0 以後發布的版本，請務必留下紀錄。由於回溯過去的版本以查找資訊並不容易，請務必在每次發布後追加紀錄。</p>
<p>發版紀錄應該放在 <code>CHANGELOG.md</code> 或 GitHub Releases 等地方，而非直接寫在 <code>README.md</code> 中，並且應該附上相關鏈接。</p>
<p>建議依照以下網站的格式撰寫發版紀錄：</p>
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9rZWVwYWNoYW5nZWxvZy5jb20vemgtVFcvMS4wLjAv">如何維護更新日誌<i class="fa fa-external-link-alt"></i></span></li>
</ul>
<p>在撰寫發版紀錄時，可能會希望詳細介紹新發布的功能，但需注意一點，發版紀錄是用於版本更新的文檔，若寫得過於詳細，<strong>對於實際閱讀這些文檔的人來說，可能不是那麼感興趣</strong>。</p>
<p>至於新功能，可另外在 Release Highlights 或 Blog 等地方進行宣傳。</p>
<p>在發版紀錄中，請確保提供以下兩點信息：</p>
<ul>
<li>需要升級到哪個版本？<ul>
<li>哪個版本修復了安全漏洞？</li>
<li>支援的 Runtime 和 Middleware 是否有變更？</li>
</ul>
</li>
<li>升級版本時需要採取哪些措施？<ul>
<li>是否存在破壞性變更？（請遵循<span class="exturl" data-url="aHR0cHM6Ly9zZW12ZXIub3JnL2xhbmcvemgtVFcv">語義版本控制<i class="fa fa-external-link-alt"></i></span>）</li>
<li>哪些功能被標記為不推薦，並提供了替代方案？</li>
</ul>
</li>
</ul>
<h3 id="支援窗口・錯誤回報方式"><a href="#支援窗口・錯誤回報方式" class="headerlink" title="支援窗口・錯誤回報方式"></a>支援窗口・錯誤回報方式</h3><p>在 <code>README.md</code> 中明確列出支援窗口，有助於收集到使用者的反饋。支援和錯誤管理雖然有些類似，實際上是不同的東西。兩者皆可在 Issues 中進行管理，但支援包含使用郵件列表、Slack、Discord 等方法。此外，透過舉出常見問題，提供疑難排解的文件也是不錯的做法。</p>
<p>無論使用哪種方法，重要的是明確列出支援窗口。<br>使用者在提問之前，應該先仔細閱讀提問方法，並依循相關的規範。</p>
<h2 id="開發者想知道的事情"><a href="#開發者想知道的事情" class="headerlink" title="開發者想知道的事情"></a>開發者想知道的事情</h2><p>開發者文件可以寫在 <code>CONTRIBUTING.md</code> 中，但也經常會記錄在 README。若寫在 <code>CONTRIBUTING.md</code> 時，請確保能夠從 README 連結到相關內容。</p>
<h3 id="開發環境設定指南"><a href="#開發環境設定指南" class="headerlink" title="開發環境設定指南"></a>開發環境設定指南</h3><p>開發者文件的 Getting Started。</p>
<ul>
<li>安裝所需工具的方法</li>
<li>如何 Build</li>
<li>（如有需要）取得和設定驗證資訊的方法</li>
<li>在 Local 端執行的方法</li>
</ul>
<p>同樣的，這裡也請盡量簡化步驟，讓開發者可以輕鬆建立開發環境。<br>也可提供 <code>devcontainer.json</code> 或雲端開發環境進行開發，但必須寫下需安裝的工具清單，避免環境設定成為一個<span class="exturl" data-url="aHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvQmxhY2tib3hpbmc=">黑盒子<i class="fa fa-external-link-alt"></i></span>。</p>
<h2 id="測試方法"><a href="#測試方法" class="headerlink" title="測試方法"></a>測試方法</h2><p>在開發者文件中，最重要的部分是測試方法。至少需記錄 Unit Testi 和 <span class="exturl" data-url="aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3poLXR3LyVFNSU4NiU5MiVFNyU4MyU5RiVFNiVCNSU4QiVFOCVBRiU5NV8oJUU4JUJEJUFGJUU0JUJCJUI2KQ==">Smoke Test<i class="fa fa-external-link-alt"></i></span> 的執行方法。有了這些資訊，開發者即可在自己的環境設定發生問題時進行分析。</p>
<p>測試環境的連接訊息和驗證資訊，雖然無法直接在 Repository 中進行管理，但可在過程中記錄取得方式和位置。</p>
<h3 id="部署・發布方法"><a href="#部署・發布方法" class="headerlink" title="部署・發布方法"></a>部署・發布方法</h3><p>接著是記錄在 Local 端開發後需要執行的步驟。舉例來說，若開發的是服務器端應用，則會記錄如何在 Staging 環境部署並進行整合測試。另一方面，若開發的是客戶端應用，則會記錄如何打包並建立 Release Candidates 以進行整合測試。</p>
<p>在文件中正確記錄這些步驟非常重要，否則可能導致過度依賴特定人員或缺漏工作步驟的問題。即使使用 CI/CD 自動化，也應該記錄哪些地方執行什麼操作，以及如何檢查結果。</p>
<h3 id="設計資料・編碼規範等連結"><a href="#設計資料・編碼規範等連結" class="headerlink" title="設計資料・編碼規範等連結"></a>設計資料・編碼規範等連結</h3><p>建議製作像是伺服器架構圖與程式碼封裝架構，能夠總覽整體系統架構的資料（例如   <code>ARCHITECTURE.md</code>），這些資料將有助於開發人員進行除錯及思考如何修正。同樣的，編碼規範將有助於確保程式碼品質。</p>
<h3 id="開發流程"><a href="#開發流程" class="headerlink" title="開發流程"></a>開發流程</h3><p>最後是記錄程式碼以外的開發規則，像是如何提出工作項目、分支策略、建立 PR 的方法等等。</p>
<p>透過整合開發流程，將有助於提升該 Repository 的「秩序」。若缺乏規則管理如何提出工作項目，將使編寫開發技術路線和發版紀錄變得困難。若缺乏明確的分支策略，將使得開發分支變得不穩定，進而降低開發速度。此外，若不為 PR 制定規則，將會增加會經過測試的程式碼數量，降低程式碼品質，或導致使用手冊過時。</p>
<h2 id="如何使-README-md-更吸引人"><a href="#如何使-README-md-更吸引人" class="headerlink" title="如何使 README.md 更吸引人"></a>如何使 <code>README.md</code> 更吸引人</h2><p>前面已經介紹該如何充實 <code>README.md</code> 的內容，但外觀也同樣重要。<br>通過調整 <code>README.md</code> 的外觀，能夠讓整個 Repository 看起來更具有吸引力。</p>
<h3 id="建立-LOGO"><a href="#建立-LOGO" class="headerlink" title="建立 LOGO"></a>建立 LOGO</h3><p>在 README 中加入專案的 LOGO 可以使 <code>README.md</code> 更加引人注目。有了 LOGO 之後，除了能夠幫助識別該 Repository，也能提升親和力。<br>一開始可以先選擇使用簡單的 LOGO，選定 LOGO 將會有所幫助。</p>
<h3 id="新增-Badge"><a href="#新增-Badge" class="headerlink" title="新增 Badge"></a>新增 Badge</h3><p>許多知名開源軟體的 README 都有附上像是 <code>build: passing</code>, <code>npm: 2.7.3</code> 這類的 Badge。</p>
<p>透過查看程式碼，可以瞭解到這些 Badge 實際上只是圖片連結，是使用根據 Repository 狀態來動態生成圖片的服務。對於 Public Repository，經常會使用 <span class="exturl" data-url="aHR0cHM6Ly9zaGllbGRzLmlvLw==">shields.io<i class="fa fa-external-link-alt"></i></span> 等的服務，使 Badge 看起來更加吸引人。</p>
<p>對於 Private Repository，可能就不適用這種服務，但 GitHub 本身就會根據 Work Flow 的成功與否生成 Badge，像這樣簡單的 Badge 就很足夠使用了。</p>
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9kb2NzLmdpdGh1Yi5jb20vZW4vYWN0aW9ucy9tb25pdG9yaW5nLWFuZC10cm91Ymxlc2hvb3Rpbmctd29ya2Zsb3dzL2FkZGluZy1hLXdvcmtmbG93LXN0YXR1cy1iYWRnZQ==">Adding a workflow status badge - GitHub Docs<i class="fa fa-external-link-alt"></i></span></li>
</ul>
<h2 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h2><p>本文介紹了應該記錄在 <code>README.md</code> 中的內容。</p>
<p>透過充實 <code>README.md</code> 內容，能夠讓 Repository 更易於使用和開發。當然，撰寫程式碼也同樣重要，但也記得時常更新自己 Repository 的 <code>README.md</code> 吧。</p>
<blockquote>
<p>15th鐵人賽目錄傳送門：<span class="exturl" data-url="aHR0cHM6Ly9pdGhlbHAuaXRob21lLmNvbS50dy91c2Vycy8yMDEzNTU1OC9pcm9ubWFuLzYyOTA=">https://ithelp.ithome.com.tw/users/20135558/ironman/6290<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
]]></content>
      <categories>
        <category>2023鐵人賽</category>
        <category>入門篇</category>
      </categories>
      <tags>
        <tag>GitHub</tag>
        <tag>ironman2023</tag>
        <tag>Qiita</tag>
      </tags>
  </entry>
  <entry>
    <title>[2023 15th鐵人賽] Day10 - 透過圖文理解 S.O.L.I.D 原則</title>
    <url>/ironman-2023-day-10/</url>
    <content><![CDATA[<p><img src="https://imgur.com/yemjbew.png"></p>
<blockquote>
<p>原文連結：<span class="exturl" data-url="aHR0cHM6Ly9tZWRpdW0uY29tL2JhY2t0aWNrcy10aWxkZXMvdGhlLXMtby1sLWktZC1wcmluY2lwbGVzLWluLXBpY3R1cmVzLWIzNGNlMmYxZTg5OA==">The S.O.L.I.D Principles in Pictures<i class="fa fa-external-link-alt"></i></span><br>本文所刊登的圖片，皆屬原作者 Ugonna Thelma 所有。</p>
</blockquote>
<p>這篇比較特別一點，是從「<span class="exturl" data-url="aHR0cHM6Ly9xaWl0YS5jb20vYmFieS1kZWd1L2l0ZW1zL2QwNThhNjJmMTQ1MjM1YTBmMDA3">イラストで理解するSOLID原則 - Qiita<i class="fa fa-external-link-alt"></i></span>」這篇翻譯得知英文原文，因此會以英翻中為主。</p>
<p>本文將以圖解方式，依序說明 SOLID 原則：</p>
<ul>
<li>Single Responsibility 單一職責原則</li>
<li>Open-Closed 開放封閉原則</li>
<li>Liskov Substitution 里氏替換原則</li>
<li>Interface Segregation 介面分離原則</li>
<li>Dependency Inversion 依賴反向原則</li>
</ul>
<span id="more"></span>

<p>以下正文開始。</p>
<hr>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>若您熟悉<span class="exturl" data-url="aHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvT2JqZWN0LW9yaWVudGVkX3Byb2dyYW1taW5n">物件導向程式設計<i class="fa fa-external-link-alt"></i></span>，那麼您應該聽過 <a href="https://en.wikipedia.org/wiki/SOLID"><strong>SOLID</strong></a> 原則。</p>
<p>這五個軟體開發原則，是在建立軟體時應遵循的指南，使軟體更容易擴展和維護。這些原則是由軟體工程師 <span class="exturl" data-url="aHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvUm9iZXJ0X0MuX01hcnRpbg==">Robert C. Martin<i class="fa fa-external-link-alt"></i></span> 所推廣。</p>
<p>網路上雖然有許多關於 <strong>SOLID</strong> 的優秀文章，但我很少看到有附圖片的範例。這對於像我這樣的視覺學習者來說，想要參與學習是有點困難的。</p>
<p>因此，本文的主要目的就是通過插圖來幫助理解這些原則，並強調每個原則的目標。</p>
<p>其中一些原則可能看起來很類似，但其實並不針對<strong>相同的目標</strong>。即使看起來相似，也可能滿足一個原則並違反另一個原則。</p>
<p>為了使本篇內容簡單易懂，將使用詞語「<strong>Class（類別）</strong>」，但請注意這個詞語在本文也適用於 <strong>Function（函數）、Method（方法）或</strong> <strong>Module（模組）</strong>。</p>
<blockquote>
<p>*<em>更新**</em></p>
<p>有留言在本文中提到，「開放封閉原則 OCP」可能違反了「單一職責原則 SRP」，但需注意本文目的是單獨解釋每一個原則。</p>
<p>此外，責任（或角色）並不同於行動。在「單一職責原則」中，使用 “I am Painter”，而在「開放封閉原則」中，則使用 “I can Paint”。</p>
<p>這一點非常重要，為了履行一個責任（或角色）可以執行多個動作。Class 應該具備一個責任（SRP），但實現該責任的功能應該能夠擴展的（OCP）。</p>
</blockquote>
<p>現在，讓我們開始吧！</p>
<h2 id="SOLID-原則"><a href="#SOLID-原則" class="headerlink" title="SOLID 原則"></a>SOLID 原則</h2><h3 id="S（Single-Responsibility）單一職責原則"><a href="#S（Single-Responsibility）單一職責原則" class="headerlink" title="S（Single Responsibility）單一職責原則"></a>S（Single Responsibility）單一職責原則</h3><blockquote>
<p>類別應該具備單一職責。</p>
</blockquote>
<p><img src="https://imgur.com/2B0SHkw.png" alt="S"></p>
<p>如果一個類別有多個職責，將提高錯誤的可能性。因為修改其中一個職責，可能會連帶影響其他職責。</p>
<h4 id="目標"><a href="#目標" class="headerlink" title="目標"></a>目標</h4><p>這個原則的目標是確保操作分離，即使變更可能導致錯誤發生，也不會對其他無關的操作產生影響。</p>
<h3 id="O（Open-Closed）開放封閉原則"><a href="#O（Open-Closed）開放封閉原則" class="headerlink" title="O（Open-Closed）開放封閉原則"></a>O（Open-Closed）開放封閉原則</h3><blockquote>
<p>類別應該對擴展開放，但對修改封閉。</p>
</blockquote>
<p><img src="https://imgur.com/psDnV2O.png" alt="S"></p>
<p>修改一個類別的當前行為，將會對使用該類別的所有系統造成影響。</p>
<p>若希望類別執行更多功能，理想的方法是添加功能到既有的函數，而<strong>不是</strong>進行修改。</p>
<h4 id="目標-1"><a href="#目標-1" class="headerlink" title="目標"></a>目標</h4><p>這個原則的目標是擴展類別功能，而不改變該類別現有行為。藉此避免在使用該類別的地方出現錯誤。</p>
<h3 id="L（Liskov-Substitution）里氏替換原則"><a href="#L（Liskov-Substitution）里氏替換原則" class="headerlink" title="L（Liskov Substitution）里氏替換原則"></a>L（Liskov Substitution）里氏替換原則</h3><blockquote>
<p>若 S 是 T 的子類別（subtype），則程式中 T 型的 Object 可被 S 型的 Object 替換，且不改變程式的任何屬性。</p>
</blockquote>
<p><img src="https://imgur.com/M13Yu5F.png" alt="L"></p>
<p>當一個<strong>子</strong>類別無法與其<strong>父</strong>類別執行相同的操作時，這可能會引發錯誤。</p>
<p>若由一個類別建立另一個類別，該類別會成為<strong>父</strong>，新的類別成為<strong>子</strong>。<strong>子</strong>類別必須能夠執行<strong>父</strong>類別能夠執行的所有操作。這個過程稱作<strong>繼承</strong>。</p>
<p><strong>子</strong>類別在處理與<strong>父</strong>類別相同的請求時，將會產生相同的結果，或相同類型的結果。</p>
<p>圖片顯示<strong>父</strong>類別可提供咖啡（任何種類的咖啡），而<strong>子</strong>類別提供卡布奇諾是可接受的，因爲卡布奇諾屬於咖啡的一種，但提供水則是不可接受的。</p>
<p>當<strong>子</strong>類別不符合這些要求時，代表著<strong>子</strong>類別完全改變，如此即違反了這個原則。</p>
<h4 id="目標-2"><a href="#目標-2" class="headerlink" title="目標"></a>目標</h4><p>這個原則的目標是強制一致性，確保父類別或其子類別能夠以相同的方式使用，而不會出現任何錯誤。</p>
<h3 id="I（Interface-Segregation）介面分離原則"><a href="#I（Interface-Segregation）介面分離原則" class="headerlink" title="I（Interface Segregation）介面分離原則"></a>I（Interface Segregation）介面分離原則</h3><blockquote>
<p>客戶端不應被強迫依賴於未使用的方法。</p>
</blockquote>
<p><img src="https://imgur.com/60jZFbY.png" alt="I"></p>
<p>在類別中執行不必要的操作將造成許多浪費，若該類別無法執行這些操作，則可能導致意外的錯誤。</p>
<p>類別應該只執行履行其職責所需的操作。其他操作應該完全刪除，或如果將來可能被其他類別使用，則應該移至其他地方。</p>
<h4 id="目標-3"><a href="#目標-3" class="headerlink" title="目標"></a>目標</h4><p>這個原則的目標是將操作的集合分割成更小，以確保類別僅執行所需的功能。</p>
<h3 id="D（Dependency-Inversion）依賴反向原則"><a href="#D（Dependency-Inversion）依賴反向原則" class="headerlink" title="D（Dependency Inversion）依賴反向原則"></a>D（Dependency Inversion）依賴反向原則</h3><blockquote>
<p>高層模組不應該依賴於低層模組。兩者都應依賴於抽象化。<br>抽象化不應該依賴於細節。細節應該依賴於抽象化。</p>
</blockquote>
<p><img src="https://imgur.com/jJG3QQb.png" alt="D"></p>
<p>首先，簡單定義這裡使用到的術語。</p>
<p><strong>高層模組（或類別）</strong>：使用工具執行動作的類別</p>
<p><strong>低層模組（或類別）</strong>：執行動作所需的工具</p>
<p><strong>抽象</strong>：表示連接兩個類別的介面</p>
<p><strong>細節</strong>：工具的操作方式</p>
<p>在這個原則中，類別不應該與執行動作的工具混合在一起。相反地，工具應該與可以連接類別的介面融為一體。</p>
<p>此外，類別和介面都不應該知道工具的操作方式，但工具必須符合介面的規範。</p>
<h4 id="目標-4"><a href="#目標-4" class="headerlink" title="目標"></a>目標</h4><p>這個原則的目標是透過引入一個介面，以減少高層類別對低層類別的依賴。</p>
<h2 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h2><p>本篇針對這五個原則進行說明，並強調其目標。這些原則的目標是降低發生問題的可能，使程式碼易於調整、擴展及測試。<br>非常感謝您的閱讀。希望您對這個主題有更深的瞭解，並且在閱讀本文的過程能像我寫作的過程一樣愉快。<br>若有任何問題或建議，歡迎留下評論。</p>
<blockquote>
<p>15th鐵人賽目錄傳送門：<span class="exturl" data-url="aHR0cHM6Ly9pdGhlbHAuaXRob21lLmNvbS50dy91c2Vycy8yMDEzNTU1OC9pcm9ubWFuLzYyOTA=">https://ithelp.ithome.com.tw/users/20135558/ironman/6290<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
]]></content>
      <categories>
        <category>2023鐵人賽</category>
        <category>入門篇</category>
      </categories>
      <tags>
        <tag>OOP</tag>
        <tag>ironman2023</tag>
        <tag>Qiita</tag>
        <tag>SOLID</tag>
      </tags>
  </entry>
  <entry>
    <title>[2023 15th鐵人賽] Day11 - 調查工程師的 alias 設定排行</title>
    <url>/ironman-2023-day-11/</url>
    <content><![CDATA[<blockquote>
<p>原文連結：<span class="exturl" data-url="aHR0cHM6Ly9xaWl0YS5jb20vcmVpcmVpYXMvaXRlbXMvZDkwNmFiMDg2YzNiYzRjMjIxNDc=">世の中のエンジニアのalias設定 - Qiita<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
<p>alias 是什麼？文章中也有稍微介紹到，簡單來說，就是「設定命令別名」，通常用於慣用指令特別長的情況，或是增設預設屬性在一些慣用指令，避免發生誤刪等憾事。</p>
<blockquote>
<p>詳細可以參考鳥哥的文章：<span class="exturl" data-url="aHR0cHM6Ly9saW51eC52YmlyZC5vcmcvbGludXhfYmFzaWMvbWFuZHJha2U5LzAzMjBiYXNoLnBocA==">第十章、認識與學習BASH<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
<span id="more"></span>

<p>以下正文開始！</p>
<hr>
<p>前幾天，我和同事們進行一次討論，內容是關於「工程師都在終端機上設置什麼樣的 alias？」，因此我試著從 GitHub 上的 <strong>1000 個 Repository</strong> 程式碼中進行調查。</p>
<p>2019/04/10 根據評論進行微幅修改。感謝所有留下評論的人。<br>2019/04/11 嘗試寫了這篇文章： <span class="exturl" data-url="aHR0cHM6Ly9xaWl0YS5jb20vcmVpcmVpYXMvaXRlbXMvMjMwYzc3YjNmZjU1NzU4MzI2NTQ=">常用的 vimrc 設置排名<i class="fa fa-external-link-alt"></i></span><br>2019/04/15 也寫了插件版本：<span class="exturl" data-url="aHR0cHM6Ly9xaWl0YS5jb20vcmVpcmVpYXMvaXRlbXMvNTM2NGRjYWFkYTFhNWI4OGEyMDY=">最常用的 vim 插件 top20<i class="fa fa-external-link-alt"></i></span></p>
<h2 id="什麼是-alias"><a href="#什麼是-alias" class="headerlink" title="什麼是 alias"></a>什麼是 alias</h2><p>根據 wikipedia：</p>
<blockquote>
<p>在 UNIX 等系統中，註冊指令的替代名稱。也就是指令的別名。</p>
</blockquote>
<p>每次都要輸入冗長的指令，或輸入經常使用的選項，感覺很麻煩對吧？<br>透過在終端機的設定檔中編寫 alias，即可定義指令的別名。</p>
<h2 id="調査方法"><a href="#調査方法" class="headerlink" title="調査方法"></a>調査方法</h2><ul>
<li>使用 GitHub API</li>
<li>依照星星數排序，選出標有 <code>dotfiles</code> 主題標籤的 Repository 前 1000 個</li>
<li>在 Repository 中搜索名稱為 <code>.bashrc</code>、<code>.bash_profile</code>、<code>.zshrc</code>、<code>.zsh_profile</code> 的檔案<ul>
<li>開頭有無句點均可</li>
</ul>
</li>
<li>從檔案中提取包含 <code>alias</code> 的行數</li>
<li>共有 <strong>1602 個檔案</strong>符合條件</li>
</ul>
<p>用來執行 API 的 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3JlaXJlaWFzL2RvdHNlZWtlcg==">Source Code<i class="fa fa-external-link-alt"></i></span></p>
<h2 id="結果"><a href="#結果" class="headerlink" title="結果"></a>結果</h2><p>我將調查結果分別依照「出現頻率」和「字母順序」列在 gist 中。</p>
<h3 id="依出現頻率排序"><a href="#依出現頻率排序" class="headerlink" title="依出現頻率排序"></a>依出現頻率排序</h3><ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXN0LmdpdGh1Yi5jb20vcmVpcmVpYXMvYjk4NmFmMzM4MmQ0MWM5NjJjYTZlOGE3ODY2NGM2NTE=">reireias/alias_ranking.md<i class="fa fa-external-link-alt"></i></span></li>
</ul>
<h3 id="依字母排序"><a href="#依字母排序" class="headerlink" title="依字母排序"></a>依字母排序</h3><ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXN0LmdpdGh1Yi5jb20vcmVpcmVpYXMvMjUzYmE0MTAyNDRlOTk5YTE1MDAyZWZiMTczMTFkMzQ=">reireias/alias.md<i class="fa fa-external-link-alt"></i></span></li>
</ul>
<h2 id="介紹"><a href="#介紹" class="headerlink" title="介紹"></a>介紹</h2><p>當初雖然想以排名的形式撰寫這篇文章，但只根據出現次數來排名感覺不太有趣，因此決定以分組結果和較被關注的 alias 進行介紹。</p>
<h2 id="ls-系"><a href="#ls-系" class="headerlink" title="ls 系"></a>ls 系</h2><p>在出現次數方面，這個系列的排名相當高。</p>
<p>嗯，這結果準沒錯。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">alias</span> <span class="token assign-left variable">ls</span><span class="token operator">=</span><span class="token string">'ls --color=auto'</span>
<span class="token builtin class-name">alias</span> <span class="token assign-left variable">ls</span><span class="token operator">=</span><span class="token string">'ls -G'</span>
<span class="token builtin class-name">alias</span> <span class="token assign-left variable">ll</span><span class="token operator">=</span><span class="token string">'ls -alF'</span>
<span class="token builtin class-name">alias</span> <span class="token assign-left variable">ll</span><span class="token operator">=</span><span class="token string">'ls -lh'</span>
<span class="token builtin class-name">alias</span> <span class="token assign-left variable">ll</span><span class="token operator">=</span><span class="token string">'ls -l'</span>
<span class="token builtin class-name">alias</span> <span class="token assign-left variable">la</span><span class="token operator">=</span><span class="token string">'ls -A'</span>
<span class="token builtin class-name">alias</span> <span class="token assign-left variable">la</span><span class="token operator">=</span><span class="token string">'ls -a'</span>
<span class="token builtin class-name">alias</span> <span class="token assign-left variable">l</span><span class="token operator">=</span><span class="token string">'ls -CF'</span>
<span class="token comment"># 也有這種</span>
<span class="token builtin class-name">alias</span> <span class="token assign-left variable">l</span><span class="token operator">=</span><span class="token string">'clear &amp;&amp; ll'</span>
<span class="token builtin class-name">alias</span> <span class="token assign-left variable">l</span><span class="token operator">=</span><span class="token string">'clear &amp;&amp; ls'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="cd-系列"><a href="#cd-系列" class="headerlink" title="cd 系列"></a>cd 系列</h2><p>目錄移動系列的相關操作如下，有許多指令可用來快速移動到常用目錄：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 和常用目錄的字母首結合使用</span>
<span class="token builtin class-name">alias</span> <span class="token assign-left variable">abc</span><span class="token operator">=</span><span class="token string">'cd ~/aaa/bbb/ccc'</span>

<span class="token comment"># 即使都是 'd'，也可能代表各種路徑</span>
<span class="token builtin class-name">alias</span> <span class="token assign-left variable">d</span><span class="token operator">=</span><span class="token string">'cd ~/.dotfiles'</span>
<span class="token builtin class-name">alias</span> <span class="token assign-left variable">d</span><span class="token operator">=</span><span class="token string">'cd ~/Desktop'</span>
<span class="token builtin class-name">alias</span> <span class="token assign-left variable">d</span><span class="token operator">=</span><span class="token string">'cd ~/Documents/Dropbox'</span>
<span class="token builtin class-name">alias</span> <span class="token assign-left variable">d</span><span class="token operator">=</span><span class="token string">'cd ~/Dropbox'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>意外地大家都有定義這樣的別名。</p>
<p>使用數字來表示的方法似乎非常方便。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 用點的數目表示</span>
<span class="token builtin class-name">alias</span> <span class="token punctuation">..</span><span class="token operator">=</span><span class="token string">'cd ..'</span>
<span class="token builtin class-name">alias</span> <span class="token punctuation">..</span>.<span class="token operator">=</span><span class="token string">'cd ../..'</span>
<span class="token builtin class-name">alias</span> <span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token operator">=</span><span class="token string">'cd ../../..'</span>

<span class="token comment"># 用數字表示</span>
<span class="token builtin class-name">alias</span> <span class="token punctuation">..</span><span class="token number">2</span><span class="token operator">=</span><span class="token string">'cd ../..'</span>
<span class="token builtin class-name">alias</span> <span class="token punctuation">..</span><span class="token number">3</span><span class="token operator">=</span><span class="token string">'cd ../../..'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="git-系列"><a href="#git-系列" class="headerlink" title="git 系列"></a>git 系列</h2><p>將 git 指令依照使用多寡排序結果如下，我也有設定幾乎相同的 alias：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">alias</span> <span class="token assign-left variable">g</span><span class="token operator">=</span><span class="token string">'git'</span>
<span class="token builtin class-name">alias</span> <span class="token assign-left variable">ga</span><span class="token operator">=</span><span class="token string">'git add'</span>
<span class="token builtin class-name">alias</span> <span class="token assign-left variable">gd</span><span class="token operator">=</span><span class="token string">'git diff'</span>
<span class="token builtin class-name">alias</span> <span class="token assign-left variable">gs</span><span class="token operator">=</span><span class="token string">'git status'</span>
<span class="token builtin class-name">alias</span> <span class="token assign-left variable">gp</span><span class="token operator">=</span><span class="token string">'git push'</span>
<span class="token builtin class-name">alias</span> <span class="token assign-left variable">gb</span><span class="token operator">=</span><span class="token string">'git branch'</span>
<span class="token builtin class-name">alias</span> <span class="token assign-left variable">gst</span><span class="token operator">=</span><span class="token string">'git status'</span>
<span class="token builtin class-name">alias</span> <span class="token assign-left variable">gco</span><span class="token operator">=</span><span class="token string">'git checkout'</span>
<span class="token builtin class-name">alias</span> <span class="token assign-left variable">gf</span><span class="token operator">=</span><span class="token string">'git fetch'</span>
<span class="token builtin class-name">alias</span> <span class="token assign-left variable">gc</span><span class="token operator">=</span><span class="token string">'git commit'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="dotfiles-相關"><a href="#dotfiles-相關" class="headerlink" title="dotfiles 相關"></a>dotfiles 相關</h2><p>接著介紹有關設定 alias 的 dotfiles（點文件，指各種程式的配置文件）相關指令。</p>
<p>編輯系列感覺相當方便，之後也來設定看看吧。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 縮寫因人而異</span>
<span class="token builtin class-name">alias</span> <span class="token assign-left variable">d</span><span class="token operator">=</span><span class="token string">'/path/to/dotfiles'</span>
<span class="token builtin class-name">alias</span> <span class="token assign-left variable">dot</span><span class="token operator">=</span><span class="token string">'/path/to/dotfiles'</span>
<span class="token builtin class-name">alias</span> <span class="token assign-left variable">dotfiles</span><span class="token operator">=</span><span class="token string">'/path/to/dotfiles'</span>
<span class="token comment"># 編輯系列</span>
<span class="token builtin class-name">alias</span> <span class="token assign-left variable">zshrc</span><span class="token operator">=</span><span class="token string">'vi /path/to/dotfiles/.zshrc'</span>
<span class="token builtin class-name">alias</span> <span class="token assign-left variable">zshconfig</span><span class="token operator">=</span><span class="token string">'vi /path/to/dotfiles/.zshrc'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="apt-系列"><a href="#apt-系列" class="headerlink" title="apt 系列"></a>apt 系列</h2><p>主要是針對 ubuntu 的設定。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># apt</span>
<span class="token builtin class-name">alias</span> <span class="token assign-left variable">agi</span><span class="token operator">=</span><span class="token string">'sudo apt install'</span>
<span class="token builtin class-name">alias</span> <span class="token assign-left variable">agr</span><span class="token operator">=</span><span class="token string">'sudo apt remove'</span>
<span class="token builtin class-name">alias</span> <span class="token assign-left variable">agu</span><span class="token operator">=</span><span class="token string">'sudo apt update'</span>

<span class="token comment"># apt-get</span>
<span class="token builtin class-name">alias</span> <span class="token assign-left variable">ag</span><span class="token operator">=</span><span class="token string">'sudo apt-get'</span>
<span class="token builtin class-name">alias</span> <span class="token assign-left variable">agi</span><span class="token operator">=</span><span class="token string">'sudo apt-get install'</span>
<span class="token builtin class-name">alias</span> <span class="token assign-left variable">agr</span><span class="token operator">=</span><span class="token string">'sudo apt-get remove'</span>
<span class="token builtin class-name">alias</span> <span class="token assign-left variable">agu</span><span class="token operator">=</span><span class="token string">'sudo apt-get update'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>順帶一提，使用 <code>apt</code> 指令比 <code>apt-get</code> 更好。</p>
<p>可參考：<span class="exturl" data-url="aHR0cHM6Ly9saW51eGZhbi5pbmZvL3BhY2thZ2UtbWFuYWdlbWVudC11YnVudHU=">「apt-get」已過時？使用新的「apt」指令進行 Ubuntu 套件管理<i class="fa fa-external-link-alt"></i></span></p>
<h2 id="bundle-系列"><a href="#bundle-系列" class="headerlink" title="bundle 系列"></a>bundle 系列</h2><p>這是 Ruby on Rails 中熟悉的 <code>bundle</code>。</p>
<p>這裡分成幾種流派。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">alias</span> <span class="token assign-left variable">b</span><span class="token operator">=</span><span class="token string">'bundle'</span>
<span class="token builtin class-name">alias</span> <span class="token assign-left variable">be</span><span class="token operator">=</span><span class="token string">'bundle exec'</span>
<span class="token builtin class-name">alias</span> <span class="token assign-left variable">bx</span><span class="token operator">=</span><span class="token string">'bundle exec'</span>
<span class="token builtin class-name">alias</span> <span class="token assign-left variable">bi</span><span class="token operator">=</span><span class="token string">'bundle install'</span>
<span class="token builtin class-name">alias</span> <span class="token assign-left variable">bo</span><span class="token operator">=</span><span class="token string">'bundle outdated'</span>
<span class="token builtin class-name">alias</span> <span class="token assign-left variable">bu</span><span class="token operator">=</span><span class="token string">'bundle update'</span>
<span class="token builtin class-name">alias</span> <span class="token assign-left variable">rc</span><span class="token operator">=</span><span class="token string">'bundle exec rails c'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="top-系列"><a href="#top-系列" class="headerlink" title="top 系列"></a>top 系列</h2><p>意外と定義されていた系その2。</p>
<p><code>cpu</code>や<code>mem</code>は忘れっぽい人にはいいかもしれないです。</p>
<p>出奇不意地定義了第二類。對於健忘的人來說，<code>cpu</code>和<code>mem</code>可能很有用。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 人それぞれ</span>
<span class="token builtin class-name">alias</span> <span class="token assign-left variable">top</span><span class="token operator">=</span><span class="token string">'htop'</span>
<span class="token builtin class-name">alias</span> <span class="token assign-left variable">top</span><span class="token operator">=</span><span class="token string">'gtop'</span>
<span class="token builtin class-name">alias</span> <span class="token assign-left variable">top</span><span class="token operator">=</span><span class="token string">'vtop'</span>
<span class="token builtin class-name">alias</span> <span class="token assign-left variable">top</span><span class="token operator">=</span><span class="token string">'gotop'</span>
<span class="token comment"># 別名</span>
<span class="token builtin class-name">alias</span> <span class="token assign-left variable">mem</span><span class="token operator">=</span><span class="token string">'top -o rsize'</span>
<span class="token builtin class-name">alias</span> <span class="token assign-left variable">cpu</span><span class="token operator">=</span><span class="token string">'top -o cpu'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="安全策略"><a href="#安全策略" class="headerlink" title="安全策略"></a>安全策略</h2><ul>
<li>指令加上 <code>-interactive</code>（<code>-i</code>）參數時，將會在發生覆寫時以互動形式詢問。</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">alias</span> <span class="token assign-left variable">cp</span><span class="token operator">=</span><span class="token string">'cp -i'</span>
<span class="token builtin class-name">alias</span> <span class="token assign-left variable">mv</span><span class="token operator">=</span><span class="token string">'mv -i'</span>
<span class="token builtin class-name">alias</span> <span class="token assign-left variable">rm</span><span class="token operator">=</span><span class="token string">'rm -i'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<h2 id="宗教戰爭系列"><a href="#宗教戰爭系列" class="headerlink" title="宗教戰爭系列"></a>宗教戰爭系列</h2><p>使用某些 alias 也可能被視為宣戰。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 對異教徒的攻撃</span>
<span class="token builtin class-name">alias</span> <span class="token assign-left variable">atom</span><span class="token operator">=</span><span class="token string">'code'</span>
<span class="token builtin class-name">alias</span> <span class="token assign-left variable">v</span><span class="token operator">=</span><span class="token string">'code'</span>
<span class="token builtin class-name">alias</span> <span class="token assign-left variable">emacs</span><span class="token operator">=</span><span class="token string">'vi'</span>
<span class="token comment"># 激烈的 edit 之爭</span>
<span class="token builtin class-name">alias</span> <span class="token assign-left variable">ed</span><span class="token operator">=</span><span class="token string">'atom .'</span>
<span class="token builtin class-name">alias</span> <span class="token assign-left variable">ed</span><span class="token operator">=</span><span class="token string">'emacs --daemon'</span>
<span class="token builtin class-name">alias</span> <span class="token assign-left variable">ed</span><span class="token operator">=</span><span class="token string">'vim'</span>
<span class="token builtin class-name">alias</span> <span class="token assign-left variable">edit</span><span class="token operator">=</span><span class="token string">"emacs -nw"</span>
<span class="token builtin class-name">alias</span> <span class="token assign-left variable">edit</span><span class="token operator">=</span><span class="token string">'subl'</span>
<span class="token builtin class-name">alias</span> <span class="token assign-left variable">edit</span><span class="token operator">=</span><span class="token string">'subl3'</span>
<span class="token builtin class-name">alias</span> <span class="token assign-left variable">edit</span><span class="token operator">=</span><span class="token string">'vim'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="一字別名系列"><a href="#一字別名系列" class="headerlink" title="一字別名系列"></a>一字別名系列</h2><p>可能有些激進，但熟悉後感覺很容易使用。</p>
<p>由於篇幅太長，僅附上提供參考或有趣的部分。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># a</span>
<span class="token builtin class-name">alias</span> <span class="token assign-left variable">a</span><span class="token operator">=</span><span class="token string">'alias'</span>
<span class="token builtin class-name">alias</span> <span class="token assign-left variable">a</span><span class="token operator">=</span><span class="token string">'ansible'</span>
<span class="token builtin class-name">alias</span> <span class="token assign-left variable">a</span><span class="token operator">=</span><span class="token string">'apt'</span>
<span class="token builtin class-name">alias</span> <span class="token assign-left variable">a</span><span class="token operator">=</span><span class="token string">'apt-get'</span>
<span class="token builtin class-name">alias</span> <span class="token assign-left variable">a</span><span class="token operator">=</span><span class="token string">'atom'</span>

<span class="token comment"># b</span>
<span class="token builtin class-name">alias</span> <span class="token assign-left variable">b</span><span class="token operator">=</span><span class="token string">'brew'</span>
<span class="token builtin class-name">alias</span> <span class="token assign-left variable">b</span><span class="token operator">=</span><span class="token string">'bundle exec'</span>
<span class="token builtin class-name">alias</span> <span class="token assign-left variable">b</span><span class="token operator">=</span><span class="token string">'bundle'</span>
<span class="token builtin class-name">alias</span> <span class="token assign-left variable">b</span><span class="token operator">=</span><span class="token string">'bundler'</span>
<span class="token builtin class-name">alias</span> <span class="token assign-left variable">b</span><span class="token operator">=</span><span class="token string">'cd ..'</span>

<span class="token comment"># c</span>
<span class="token builtin class-name">alias</span> <span class="token assign-left variable">c</span><span class="token operator">=</span><span class="token string">'curl'</span>
<span class="token builtin class-name">alias</span> <span class="token assign-left variable">c</span><span class="token operator">=</span><span class="token string">'cd'</span>
<span class="token builtin class-name">alias</span> <span class="token assign-left variable">c</span><span class="token operator">=</span><span class="token string">'clear'</span>
<span class="token builtin class-name">alias</span> <span class="token assign-left variable">c</span><span class="token operator">=</span><span class="token string">'cat'</span>
<span class="token builtin class-name">alias</span> <span class="token assign-left variable">c</span><span class="token operator">=</span><span class="token string">'rails console'</span>
<span class="token builtin class-name">alias</span> <span class="token assign-left variable">c</span><span class="token operator">=</span><span class="token string">'pbcopy'</span> <span class="token comment"># 這感覺很方便</span>

<span class="token comment"># d</span>
<span class="token builtin class-name">alias</span> <span class="token assign-left variable">d</span><span class="token operator">=</span><span class="token string">'cd ~/.dotfiles'</span>
<span class="token builtin class-name">alias</span> <span class="token assign-left variable">d</span><span class="token operator">=</span><span class="token string">'cd ~/Desktop'</span>
<span class="token builtin class-name">alias</span> <span class="token assign-left variable">d</span><span class="token operator">=</span><span class="token string">'cd ~/Dropbox'</span>
<span class="token builtin class-name">alias</span> <span class="token assign-left variable">d</span><span class="token operator">=</span><span class="token string">'date +%Y%m%d'</span>
<span class="token builtin class-name">alias</span> <span class="token assign-left variable">d</span><span class="token operator">=</span><span class="token string">'docker'</span> <span class="token comment"># 這個有在使用</span>
<span class="token builtin class-name">alias</span> <span class="token assign-left variable">d</span><span class="token operator">=</span><span class="token string">'du -h -d=1'</span>
<span class="token builtin class-name">alias</span> <span class="token assign-left variable">d</span><span class="token operator">=</span><span class="token string">'git diff'</span>
<span class="token builtin class-name">alias</span> <span class="token assign-left variable">d</span><span class="token operator">=</span><span class="token string">'less'</span>   <span class="token comment"># display?</span>
<span class="token builtin class-name">alias</span> <span class="token assign-left variable">d</span><span class="token operator">=</span><span class="token string">'pwd'</span>

<span class="token comment"># e</span>
<span class="token builtin class-name">alias</span> <span class="token assign-left variable">e</span><span class="token operator">=</span><span class="token string">'atom'</span>
<span class="token builtin class-name">alias</span> <span class="token assign-left variable">e</span><span class="token operator">=</span><span class="token string">'emacs'</span>
<span class="token builtin class-name">alias</span> <span class="token assign-left variable">e</span><span class="token operator">=</span><span class="token string">'emacsclient'</span>
<span class="token builtin class-name">alias</span> <span class="token assign-left variable">e</span><span class="token operator">=</span><span class="token string">'exit'</span>  <span class="token comment"># 有點過激了吧？</span>
<span class="token builtin class-name">alias</span> <span class="token assign-left variable">e</span><span class="token operator">=</span><span class="token string">'vim'</span>

<span class="token comment"># f</span>
<span class="token builtin class-name">alias</span> <span class="token assign-left variable">f</span><span class="token operator">=</span><span class="token string">'fg'</span>
<span class="token builtin class-name">alias</span> <span class="token assign-left variable">f</span><span class="token operator">=</span><span class="token string">'file'</span>
<span class="token builtin class-name">alias</span> <span class="token assign-left variable">f</span><span class="token operator">=</span><span class="token string">'find . -name'</span>
<span class="token builtin class-name">alias</span> <span class="token assign-left variable">f</span><span class="token operator">=</span><span class="token string">'finger'</span>
<span class="token builtin class-name">alias</span> <span class="token assign-left variable">f</span><span class="token operator">=</span><span class="token string">'fuck'</span>
<span class="token builtin class-name">alias</span> <span class="token assign-left variable">f</span><span class="token operator">=</span><span class="token string">'open -a Finder ./'</span>

<span class="token comment"># g</span>
<span class="token builtin class-name">alias</span> <span class="token assign-left variable">g</span><span class="token operator">=</span><span class="token string">'git status'</span>
<span class="token builtin class-name">alias</span> <span class="token assign-left variable">g</span><span class="token operator">=</span><span class="token string">'git'</span> <span class="token comment"># 一定會有的之 1</span>
<span class="token builtin class-name">alias</span> <span class="token assign-left variable">g</span><span class="token operator">=</span><span class="token string">'googleit'</span> <span class="token comment"># google</span>
<span class="token builtin class-name">alias</span> <span class="token assign-left variable">g</span><span class="token operator">=</span><span class="token string">'googler'</span>  <span class="token comment"># google</span>
<span class="token builtin class-name">alias</span> <span class="token assign-left variable">g</span><span class="token operator">=</span><span class="token string">'grep --color=auto'</span>
<span class="token builtin class-name">alias</span> <span class="token assign-left variable">g</span><span class="token operator">=</span><span class="token string">'grep'</span> <span class="token comment"># 一定會有的之 2</span>

<span class="token comment"># h</span>
<span class="token builtin class-name">alias</span> <span class="token assign-left variable">h</span><span class="token operator">=</span><span class="token string">'cd ~'</span> <span class="token comment"># home</span>
<span class="token builtin class-name">alias</span> <span class="token assign-left variable">h</span><span class="token operator">=</span><span class="token string">'git reset HEAD'</span> <span class="token comment"># head</span>
<span class="token builtin class-name">alias</span> <span class="token assign-left variable">h</span><span class="token operator">=</span><span class="token string">'heroku'</span>
<span class="token builtin class-name">alias</span> <span class="token assign-left variable">h</span><span class="token operator">=</span><span class="token string">'history | grep'</span>
<span class="token builtin class-name">alias</span> <span class="token assign-left variable">h</span><span class="token operator">=</span><span class="token string">'history'</span>
<span class="token builtin class-name">alias</span> <span class="token assign-left variable">h</span><span class="token operator">=</span><span class="token string">'tldr'</span> <span class="token comment"># 這感覺也蠻方便的。help?</span>

<span class="token comment"># i</span>
<span class="token builtin class-name">alias</span> <span class="token assign-left variable">i</span><span class="token operator">=</span><span class="token string">'sudo apt install --yes'</span>

<span class="token comment">#j</span>
<span class="token builtin class-name">alias</span> <span class="token assign-left variable">j</span><span class="token operator">=</span><span class="token string">'jobs'</span>
<span class="token builtin class-name">alias</span> <span class="token assign-left variable">j</span><span class="token operator">=</span><span class="token string">'jump'</span>

<span class="token comment"># k</span>
<span class="token builtin class-name">alias</span> <span class="token assign-left variable">k</span><span class="token operator">=</span><span class="token string">'kill -9'</span>
<span class="token builtin class-name">alias</span> <span class="token assign-left variable">k</span><span class="token operator">=</span><span class="token string">'kubectl'</span> <span class="token comment"># 有在使用</span>
<span class="token builtin class-name">alias</span> <span class="token assign-left variable">k</span><span class="token operator">=</span><span class="token string">'kwrapper'</span>
<span class="token builtin class-name">alias</span> <span class="token assign-left variable">k</span><span class="token operator">=</span><span class="token string">'tree'</span>    <span class="token comment"># 因為在 l 的旁邊嗎?</span>

<span class="token comment"># l</span>
<span class="token comment"># 大多為 ls 系列因此割愛</span>

<span class="token comment"># m</span>
<span class="token builtin class-name">alias</span> <span class="token assign-left variable">m</span><span class="token operator">=</span><span class="token string">'cd ~/Music &amp;&amp; ls -a'</span> <span class="token comment"># music 的 m!!!</span>
<span class="token builtin class-name">alias</span> <span class="token assign-left variable">m</span><span class="token operator">=</span><span class="token string">'make'</span>
<span class="token builtin class-name">alias</span> <span class="token assign-left variable">m</span><span class="token operator">=</span><span class="token string">'man'</span>
<span class="token builtin class-name">alias</span> <span class="token assign-left variable">m</span><span class="token operator">=</span><span class="token string">'mkdir'</span> <span class="token comment"># 就個人來說也是這個吧</span>
<span class="token builtin class-name">alias</span> <span class="token assign-left variable">m</span><span class="token operator">=</span><span class="token string">'rake db:migrate db:rollback &amp;&amp; rake db:migrate db:test:prepare'</span> <span class="token comment"># 感覺有點超過</span>
<span class="token builtin class-name">alias</span> <span class="token assign-left variable">m</span><span class="token operator">=</span><span class="token string">'mv'</span>
<span class="token builtin class-name">alias</span> <span class="token assign-left variable">m</span><span class="token operator">=</span><span class="token string">'mvn'</span>

<span class="token comment"># n</span>
<span class="token builtin class-name">alias</span> <span class="token assign-left variable">n</span><span class="token operator">=</span><span class="token string">'git checkout -b'</span> <span class="token comment"># new branch</span>
<span class="token builtin class-name">alias</span> <span class="token assign-left variable">n</span><span class="token operator">=</span><span class="token string">'nano'</span>
<span class="token builtin class-name">alias</span> <span class="token assign-left variable">n</span><span class="token operator">=</span><span class="token string">'npm run'</span>
<span class="token builtin class-name">alias</span> <span class="token assign-left variable">n</span><span class="token operator">=</span><span class="token string">'npm'</span> <span class="token comment"># 實際上比 node 還要常使用？</span>
<span class="token builtin class-name">alias</span> <span class="token assign-left variable">n</span><span class="token operator">=</span><span class="token string">'nvim'</span>
<span class="token builtin class-name">alias</span> <span class="token assign-left variable">n</span><span class="token operator">=</span><span class="token string">'sudo netctl'</span>
<span class="token builtin class-name">alias</span> <span class="token assign-left variable">n</span><span class="token operator">=</span><span class="token string">'node'</span>

<span class="token comment"># o</span>
<span class="token builtin class-name">alias</span> <span class="token assign-left variable">o</span><span class="token operator">=</span><span class="token string">'open'</span> <span class="token comment"># 大多是這個的衍生</span>

<span class="token comment"># p</span>
<span class="token builtin class-name">alias</span> <span class="token assign-left variable">p</span><span class="token operator">=</span><span class="token string">'cd ~/Documents/projects'</span>
<span class="token builtin class-name">alias</span> <span class="token assign-left variable">p</span><span class="token operator">=</span><span class="token string">'cd ~/Dropbox/Projects'</span>
<span class="token builtin class-name">alias</span> <span class="token assign-left variable">p</span><span class="token operator">=</span><span class="token string">'cd ~/Pictures &amp;&amp; ls -a'</span>
<span class="token builtin class-name">alias</span> <span class="token assign-left variable">p</span><span class="token operator">=</span><span class="token string">'cd ~/Projects'</span>
<span class="token builtin class-name">alias</span> <span class="token assign-left variable">p</span><span class="token operator">=</span><span class="token string">'ping'</span> <span class="token comment"># 意外的激戰區？</span>
<span class="token builtin class-name">alias</span> <span class="token assign-left variable">p</span><span class="token operator">=</span><span class="token string">'popd'</span> <span class="token comment"># 和 zsh 的 AUTO_PUSHD 是一組的？</span>
<span class="token builtin class-name">alias</span> <span class="token assign-left variable">p</span><span class="token operator">=</span><span class="token string">'pwd'</span>
<span class="token builtin class-name">alias</span> <span class="token assign-left variable">p</span><span class="token operator">=</span><span class="token string">'python'</span>
<span class="token builtin class-name">alias</span> <span class="token assign-left variable">p</span><span class="token operator">=</span><span class="token string">'python3'</span>
<span class="token builtin class-name">alias</span> <span class="token assign-left variable">p</span><span class="token operator">=</span><span class="token string">'pacman'</span> <span class="token comment"># 不是 game 唷</span>

<span class="token comment"># q</span>
<span class="token builtin class-name">alias</span> <span class="token assign-left variable">q</span><span class="token operator">=</span><span class="token string">'exit'</span> <span class="token comment"># 幾乎只有這個</span>

<span class="token comment"># r</span>
<span class="token builtin class-name">alias</span> <span class="token assign-left variable">r</span><span class="token operator">=</span><span class="token string">'cd / &amp;&amp; ls -a'</span> <span class="token comment"># root 的 r</span>
<span class="token builtin class-name">alias</span> <span class="token assign-left variable">r</span><span class="token operator">=</span><span class="token string">'rails'</span> <span class="token comment"># r 對於 rails 開發者可能會感到迷惘?</span>
<span class="token builtin class-name">alias</span> <span class="token assign-left variable">r</span><span class="token operator">=</span><span class="token string">'rake'</span>
<span class="token builtin class-name">alias</span> <span class="token assign-left variable">r</span><span class="token operator">=</span><span class="token string">'ranger'</span>
<span class="token builtin class-name">alias</span> <span class="token assign-left variable">r</span><span class="token operator">=</span><span class="token string">'rgrep'</span>
<span class="token builtin class-name">alias</span> <span class="token assign-left variable">r</span><span class="token operator">=</span><span class="token string">'rm -i'</span>
<span class="token builtin class-name">alias</span> <span class="token assign-left variable">r</span><span class="token operator">=</span><span class="token string">'rspec'</span>
<span class="token builtin class-name">alias</span> <span class="token assign-left variable">r</span><span class="token operator">=</span><span class="token string">'screen -D -R'</span>
<span class="token builtin class-name">alias</span> <span class="token assign-left variable">r</span><span class="token operator">=</span><span class="token string">'source ~/.zshrc'</span> <span class="token comment"># reload?</span>
<span class="token builtin class-name">alias</span> <span class="token assign-left variable">r</span><span class="token operator">=</span><span class="token string">'radian'</span>

<span class="token comment"># s</span>
<span class="token builtin class-name">alias</span> <span class="token assign-left variable">s</span><span class="token operator">=</span><span class="token string">'cd ~/src'</span>
<span class="token builtin class-name">alias</span> <span class="token assign-left variable">s</span><span class="token operator">=</span><span class="token string">'git status'</span>
<span class="token builtin class-name">alias</span> <span class="token assign-left variable">s</span><span class="token operator">=</span><span class="token string">'ls'</span> <span class="token comment"># 避免錯誤</span>
<span class="token builtin class-name">alias</span> <span class="token assign-left variable">s</span><span class="token operator">=</span><span class="token string">'screen'</span>
<span class="token builtin class-name">alias</span> <span class="token assign-left variable">s</span><span class="token operator">=</span><span class="token string">'spring'</span>
<span class="token builtin class-name">alias</span> <span class="token assign-left variable">s</span><span class="token operator">=</span><span class="token string">'ssh -l root'</span>
<span class="token builtin class-name">alias</span> <span class="token assign-left variable">s</span><span class="token operator">=</span><span class="token string">'ssh'</span>
<span class="token builtin class-name">alias</span> <span class="token assign-left variable">s</span><span class="token operator">=</span><span class="token string">'sudo su'</span>
<span class="token builtin class-name">alias</span> <span class="token assign-left variable">s</span><span class="token operator">=</span><span class="token string">'sudo'</span>
<span class="token builtin class-name">alias</span> <span class="token assign-left variable">s</span><span class="token operator">=</span><span class="token string">'svn'</span>

<span class="token comment"># t</span>
<span class="token builtin class-name">alias</span> <span class="token assign-left variable">t</span><span class="token operator">=</span><span class="token string">'date +"%H%M%S"'</span> <span class="token comment"># time</span>
<span class="token builtin class-name">alias</span> <span class="token assign-left variable">t</span><span class="token operator">=</span><span class="token string">'telnet'</span>
<span class="token builtin class-name">alias</span> <span class="token assign-left variable">t</span><span class="token operator">=</span><span class="token string">'terraform'</span>
<span class="token builtin class-name">alias</span> <span class="token assign-left variable">t</span><span class="token operator">=</span><span class="token string">'tig'</span>
<span class="token builtin class-name">alias</span> <span class="token assign-left variable">t</span><span class="token operator">=</span><span class="token string">'tmux -2'</span>
<span class="token builtin class-name">alias</span> <span class="token assign-left variable">t</span><span class="token operator">=</span><span class="token string">'tmux attach'</span>
<span class="token builtin class-name">alias</span> <span class="token assign-left variable">t</span><span class="token operator">=</span><span class="token string">'tmux new-session -A -s main'</span>
<span class="token builtin class-name">alias</span> <span class="token assign-left variable">t</span><span class="token operator">=</span><span class="token string">'tmux'</span>
<span class="token builtin class-name">alias</span> <span class="token assign-left variable">t</span><span class="token operator">=</span><span class="token string">'tree -C'</span>
<span class="token builtin class-name">alias</span> <span class="token assign-left variable">t</span><span class="token operator">=</span><span class="token string">'tree -Cfh'</span>
<span class="token builtin class-name">alias</span> <span class="token assign-left variable">t</span><span class="token operator">=</span><span class="token string">'tree -I "node_modules"'</span> <span class="token comment"># 感覺是我的？</span>
<span class="token builtin class-name">alias</span> <span class="token assign-left variable">t</span><span class="token operator">=</span><span class="token string">'tree -a --ignore ".git|node_modules|bower_components|.DS_Store" -l 3'</span> <span class="token comment"># 強化版</span>

<span class="token comment"># u</span>
<span class="token builtin class-name">alias</span> <span class="token assign-left variable">u</span><span class="token operator">=</span><span class="token string">'cd ..'</span> <span class="token comment"># up</span>

<span class="token comment"># v</span>
<span class="token builtin class-name">alias</span> <span class="token assign-left variable">v</span><span class="token operator">=</span><span class="token string">'code'</span> <span class="token comment"># VSCode</span>
<span class="token builtin class-name">alias</span> <span class="token assign-left variable">v</span><span class="token operator">=</span><span class="token string">'vagrant'</span>
<span class="token comment"># vim 的一族</span>
<span class="token builtin class-name">alias</span> <span class="token assign-left variable">v</span><span class="token operator">=</span><span class="token string">'mvim'</span>
<span class="token builtin class-name">alias</span> <span class="token assign-left variable">v</span><span class="token operator">=</span><span class="token string">'nvim'</span>
<span class="token builtin class-name">alias</span> <span class="token assign-left variable">v</span><span class="token operator">=</span><span class="token string">'vi'</span>
<span class="token builtin class-name">alias</span> <span class="token assign-left variable">v</span><span class="token operator">=</span><span class="token string">'vim'</span>

<span class="token comment"># w 沒什麼特別</span>

<span class="token comment"># x</span>
<span class="token builtin class-name">alias</span> <span class="token assign-left variable">x</span><span class="token operator">=</span><span class="token string">'exit'</span>
<span class="token builtin class-name">alias</span> <span class="token assign-left variable">x</span><span class="token operator">=</span><span class="token string">'screen -A -x'</span>
<span class="token builtin class-name">alias</span> <span class="token assign-left variable">x</span><span class="token operator">=</span><span class="token string">'startx'</span> <span class="token comment"># IBM?</span>
<span class="token builtin class-name">alias</span> <span class="token assign-left variable">x</span><span class="token operator">=</span><span class="token string">'/mnt/c/Windows/explorer.exe'</span> <span class="token comment"># 是 cygwin 嗎?</span>

<span class="token comment"># y</span>
<span class="token builtin class-name">alias</span> <span class="token assign-left variable">y</span><span class="token operator">=</span><span class="token string">'yarn'</span> <span class="token comment"># 來使用這個吧</span>
<span class="token builtin class-name">alias</span> <span class="token assign-left variable">y</span><span class="token operator">=</span><span class="token string">'yaourt'</span> <span class="token comment"># ArcLinux</span>

<span class="token comment"># z</span>
<span class="token builtin class-name">alias</span> <span class="token assign-left variable">z</span><span class="token operator">=</span><span class="token string">'zathura'</span> <span class="token comment"># 好像是 PDF Viewer</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 雖然很短...</span>
<span class="token builtin class-name">alias</span> <span class="token assign-left variable">_</span><span class="token operator">=</span><span class="token string">'sudo'</span>

<span class="token comment"># 可能是參數很難記的情況？</span>
<span class="token builtin class-name">alias</span> <span class="token assign-left variable">allps</span><span class="token operator">=</span><span class="token string">'ps aux'</span>

<span class="token comment"># 當前目錄的 path 複製到剪貼簿(cpwd, copypath 等)</span>
<span class="token builtin class-name">alias</span> <span class="token assign-left variable">pwdc</span><span class="token operator">=</span><span class="token string">'pwd | tr -d "\n" | pbcopy'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="番外編"><a href="#番外編" class="headerlink" title="番外編"></a>番外編</h2><h3 id="global-alias-全域別名"><a href="#global-alias-全域別名" class="headerlink" title="global alias 全域別名"></a>global alias 全域別名</h3><ul>
<li>zsh 功能</li>
<li>只在指令開頭有效，但使用定義帶有 <code>g</code> 的參數時，也可以在指令中途展開</li>
<li>常用於 pipe 等經常呼叫的指令</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 有幾個感覺蠻方便的</span>
<span class="token builtin class-name">alias</span> -g <span class="token assign-left variable">A</span><span class="token operator">=</span><span class="token string">'| awk'</span>
<span class="token builtin class-name">alias</span> -g <span class="token assign-left variable">C</span><span class="token operator">=</span><span class="token string">'| pbcopy'</span> <span class="token comment"># copy</span>
<span class="token builtin class-name">alias</span> -g <span class="token assign-left variable">C</span><span class="token operator">=</span><span class="token string">'| wc -l'</span>  <span class="token comment"># count</span>
<span class="token builtin class-name">alias</span> -g <span class="token assign-left variable">G</span><span class="token operator">=</span><span class="token string">'| grep --color=auto'</span> <span class="token comment"># 總是會有</span>
<span class="token builtin class-name">alias</span> -g <span class="token assign-left variable">H</span><span class="token operator">=</span><span class="token string">'| head'</span>   <span class="token comment"># 當然 tail 也是</span>
<span class="token builtin class-name">alias</span> -g <span class="token assign-left variable">L</span><span class="token operator">=</span><span class="token string">'| less -R'</span>
<span class="token builtin class-name">alias</span> -g <span class="token assign-left variable">X</span><span class="token operator">=</span><span class="token string">'| xargs'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="suffix-alias-後綴別名"><a href="#suffix-alias-後綴別名" class="headerlink" title="suffix alias 後綴別名"></a>suffix alias 後綴別名</h3><ul>
<li>zsh 的功能</li>
<li>根據指令的結尾執行相應操作</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">alias</span> -s <span class="token assign-left variable">gz</span><span class="token operator">=</span><span class="token string">'tar -xzvf'</span> <span class="token comment"># 可用 ./hoge.tar.gz 展開</span>
<span class="token builtin class-name">alias</span> -s <span class="token assign-left variable">html</span><span class="token operator">=</span><span class="token string">'open'</span> <span class="token comment"># ./index.html 可在瀏覽器開啟</span>
<span class="token builtin class-name">alias</span> -s <span class="token punctuation">&#123;</span>mp3,mp4,wav,mkv,m4v,m4a,wmv,avi,mpeg,mpg,vob,mov,rm<span class="token punctuation">&#125;</span><span class="token operator">=</span><span class="token string">'mplayer'</span> <span class="token comment"># 也可以這麼定義</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<h2 id="感想"><a href="#感想" class="headerlink" title="感想"></a>感想</h2><ul>
<li>很少 aws 系列的別名<ul>
<li>在 CLI 感覺這種 sub command 結構相當理想？</li>
<li>或因為有自動補完，所以不需要 alias？</li>
</ul>
</li>
<li>Docker 和 kubectl 的部分比預期中少</li>
<li>也學到許多不熟悉的指令</li>
</ul>
<blockquote>
<p>15th鐵人賽目錄傳送門：<span class="exturl" data-url="aHR0cHM6Ly9pdGhlbHAuaXRob21lLmNvbS50dy91c2Vycy8yMDEzNTU1OC9pcm9ubWFuLzYyOTA=">https://ithelp.ithome.com.tw/users/20135558/ironman/6290<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
]]></content>
      <categories>
        <category>2023鐵人賽</category>
        <category>豆知識篇</category>
      </categories>
      <tags>
        <tag>ironman2023</tag>
        <tag>Qiita</tag>
        <tag>alias</tag>
        <tag>terminal</tag>
      </tags>
  </entry>
  <entry>
    <title>[2023 15th鐵人賽] Day12 - 外國「為什麼日本無法像硬體時代一樣在軟體方面表現出色？」</title>
    <url>/ironman-2023-day-12/</url>
    <content><![CDATA[<blockquote>
<p>原文連結：<span class="exturl" data-url="aHR0cHM6Ly9xaWl0YS5jb20vZTk5aDIxMjEvaXRlbXMvNDE5YzNiZDM5ZDhkZWE0MGYyMWE=">海外「なぜ日本はハードウェアの時代と同じようにソフトウェアに秀でることができない？」 - Qiita<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
<p>常聽聞日本軟體界的各種評價，而這篇文章主要整理國外論壇針對此議題進行分析。</p>
<span id="more"></span>

<p>以下正文開始。</p>
<hr>
<p>在英語問答網站 <span class="exturl" data-url="aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3poLXR3L1F1b3Jh">Quora<i class="fa fa-external-link-alt"></i></span> 上看到關於 <span class="exturl" data-url="aHR0cHM6Ly93d3cucXVvcmEuY29tL1doeS1kb2Vzbi10LUphcGFuLWV4Y2VsLWluLXNvZnR3YXJlLWFzLXRoZXktZGlkLWluLWhhcmR3YXJl">Why doesn’t Japan excel in software as they did in hardware? (為什麼日本無法像硬體時代一樣在軟體方面表現出色？)<i class="fa fa-external-link-alt"></i></span> 的討論，對底下的分析有點興趣，因此整理了這篇內容。</p>
<h2 id="假設1：追求完美的日本"><a href="#假設1：追求完美的日本" class="headerlink" title="假設1：追求完美的日本"></a>假設1：追求完美的日本</h2><blockquote>
<p>有位法國友人經營一家擁有 10 名工程師的軟體開發公司，他和路易·威登日本分公司的電腦系統經理達成了共識：軟體不同於硬體，也不屬於工業應用。不能像 <span class="exturl" data-url="aHR0cHM6Ly93d3cudG95b3RhLmNvbS50dy9zaG93cm9vbS9DT1JPTExBX1NQT1JULw==">Toyota Corolla（豐田卡羅拉）<i class="fa fa-external-link-alt"></i></span>在 50 年內經由精雕細琢、不斷改進並達到完美。想要達到 Zero bug（零錯誤）以追求「完美」是不可能的，因此，這違背了追求「Zero default（零缺陷）」的整體品質和持續改進的日本文化精神。</p>
</blockquote>
<ul>
<li>日本是職人之國，不論是漢字書寫、摺紙技術、烹飪與機械工藝等各種藝術，均能完美掌握並發揮到淋漓盡致。然而，這種文化對軟體開發而言可能是反效果：人們不會琢磨軟體直到完美，競爭對手如 <span class="exturl" data-url="aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3poLXR3LyVFNSVCRSVBRSVFOCVCRCVBRg==">Microsoft<i class="fa fa-external-link-alt"></i></span>，則會儘早將產品投入市場。</li>
<li><span class="exturl" data-url="aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3poLXR3LyVFNSVCOCU5NSVFNyVCNCVBRiVFNiU4OSU5OCVFNiVCMyU5NSVFNSU4OCU5OQ==">帕雷托法則<i class="fa fa-external-link-alt"></i></span>：「最後的 20% 需要耗費 80% 的時間。」 日本人可能會耗費 80% 的時間，來改進類似 Corolla 的舊型  <span class="exturl" data-url="aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3poLXR3L0RPUw==">DOS<i class="fa fa-external-link-alt"></i></span> 軟體；而美國人可能會花 80% 的時間，投資於類似 <span class="exturl" data-url="aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3dpa2kvJUU3JTg5JUI5JUU2JTk2JUFGJUU2JThCJTg5XyglRTUlODUlQUMlRTUlOEYlQjgp">Tesla（特斯拉）<i class="fa fa-external-link-alt"></i></span> 擁有新設計的 <span class="exturl" data-url="aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3poLXR3L1dpbmRvd3NfTlQ=">Windows NT<i class="fa fa-external-link-alt"></i></span>。不論 Corolla 如何改良，仍是 Tesla 勝出。不論是哪種 DOS 軟體，仍被 Windows APP 擊敗。不論是 <span class="exturl" data-url="aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3dpa2kvJUU3JUI0JUEyJUU1JUIwJUJD">Sony<i class="fa fa-external-link-alt"></i></span>、<span class="exturl" data-url="aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3dpa2kvJUU2JTlEJUJFJUU0JUI4JThCJUU5JTlCJUJCJUU1JTk5JUE4">Panasonic<i class="fa fa-external-link-alt"></i></span>、<span class="exturl" data-url="aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3dpa2kvJUU0JUJBJUFDJUU3JTkzJUI3">京セラ（京瓷）<i class="fa fa-external-link-alt"></i></span>、<span class="exturl" data-url="aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3poLXR3LyVFNSVBNCU4RiVFNiU5OSVBRQ==">SHARP<i class="fa fa-external-link-alt"></i></span>、<span class="exturl" data-url="aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3dpa2kvJUU1JThEJUExJUU4JUE1JUJGJUU2JUFEJTkw">Casio<i class="fa fa-external-link-alt"></i></span>⋯⋯這些品牌旗下所有類型的「攜帶型手機」，在市占率仍不敵 Android 和 iOS 等觸控智能手機。</li>
<li>日本人受傳統的階層教育與工作制度所束縛。</li>
<li>Microsoft、Apple、Google、Facebook 等公司均由天才所創辦，且幾乎是在大學階段建立的。然而，在日本的大學中，學生可能不會像美國的大學生一樣，被允許在自己的系統上「玩耍」，日本學生可能沒有時間能夠像<span class="exturl" data-url="aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3poLXR3LyVFNiVBRiU5NCVFNSVCMCU5NCVDMiVCNyVFNyU5QiU5NiVFOCU4QyVBOA==">比爾·蓋茲<i class="fa fa-external-link-alt"></i></span>一樣，去建立基本演算法或像 Google 最初的演算法這樣的「副業」，也不曾考慮去做像大學的「Facebook」這樣華麗的事業。</li>
<li>軟體必須具備非常快速的創新，由於費用遠比硬體便宜，因此即使是 Apple 或 Microsoft 這樣的小型企業也足以威脅 <span class="exturl" data-url="aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3poLXR3L0lCTQ==">IBM<i class="fa fa-external-link-alt"></i></span>。創新伴隨著風險。但日本的優秀學生可能普遍會以大公司為目標。更令人沮喪的是，他們可能無法在大公司充分發揮自己的才華。</li>
<li>軟體的高效率、速度和創新，必須由 Agile（敏捷）的小型團隊來執行。這絕不是日本文化，而是美國文化。當年歐洲的小型冒險家離開了舊歐洲，由那些靈魂所建立的文化。</li>
<li>另一方面是中國：雖然孔子和共產主義可能和日本文化一樣，在某種程度上制約或塑造了他們的文化，但因為他們是小型家庭的國家，有可能建立小型軟體公司，並在龐大的市場上銷售成功。並且，中國人不會像日本人一樣追求整體品質。相較之下，日本公司在軟體時代之前，就存在著機械工業等傳統產業，這些產業網羅了許多優秀的工程師；現代中國的產業雖然起步較晚，比起傳統的機械產業，軟體產業反而更容易發展。造成這樣的結果可能也是時機的問題。</li>
</ul>
<h2 id="假設2：日本的軟體開發職與其他技術職不同"><a href="#假設2：日本的軟體開發職與其他技術職不同" class="headerlink" title="假設2：日本的軟體開發職與其他技術職不同"></a>假設2：日本的軟體開發職與其他技術職不同</h2><blockquote>
<p>在日本，每年都有大學畢業生參加規模數千人的大型職業博覽會，這些人都穿著全新的黑色西裝配純白襯衫，在會場中行進尋找工作，我將這個景象稱為「企鵝遊行」。</p>
</blockquote>
<ul>
<li>這些畢業生會提交履歷表給企業，進行面試，也許有機會收到下一輪面試的邀請函。這些企業並不關心你學過什麼，對什麼充滿熱情。只要提到來自一流大學（例如東大、慶應、早稻田、東工大等），可能就會讓企業感到興奮。</li>
<li>在工作中所需要知道的一切都可以教給你。</li>
<li>在 Mercari 和 Rakuten（日本的 eBay 和 Amazon）等國際企業工作的人們可能會說，這並不是科技公司的招聘方式。可悲的是，即使這些企業雇用並訓練這些無知的新畢業生，期望在國際企業中培育更有能力的軟體開發者，他們也做不到。也許有眾多的外國人能夠承受考驗，但大多數軟體開發公司並不會這麼運作。</li>
<li>結果不言而喻，許多日本的軟體開發公司擁有質量低落的工程團隊。軟體開發被視為能在幾個月到一年內掌握的技能，一如會計、秘書、專案管理和經營分析等職位。</li>
</ul>
<h2 id="假設3：不會說英語"><a href="#假設3：不會說英語" class="headerlink" title="假設3：不會說英語"></a>假設3：不會說英語</h2><blockquote>
<p>顯然，如果讀不懂英語，無法進行交流的情況，那麼用於軟體開發的工具和開發方法，將取決於那些自願花時間，翻譯英語原文文件和文章的人。</p>
</blockquote>
<ul>
<li>與世界相比，日本的軟體開發處於落後半年到七年不等的狀態。且軟體開發方式呈現倒金字塔的結構。</li>
<li>在大多數的技術諮詢公司，實際上並沒有開發者，或只佔極少數。他們會將工作分包給其他公司，或是和トーテムポール這類型的外包公司簽約合作。從事產品製作的實際開發者，可能位於第五層承包合同，無法管理業務需求變更。而實際處理合同提案的人，也對技術方面的知識一無所知。</li>
<li>消費者的喜好也偏向保守。至今你是否見過日本公司使用極具前衛風格的網站設計呢？例如日本最大的線上旅行代理網站：<span class="exturl" data-url="aHR0cDovL3d3dy5qYWxhbi5uZXQuLw==">www.jalan.net<i class="fa fa-external-link-alt"></i></span>。日本的網站之所以看起來像「垃圾」，並不是因為設計師想要這麽做，而是因為日本的使用者喜歡這類型的網站。他們喜歡巨大且分散注意力的閃爍橫幅，喜歡大量的文本內容，喜歡網站上那些被你我稱之為未經精心設計的廣告。</li>
</ul>
<p><img src="https://i.imgur.com/U8tst9n.png"></p>
<ul>
<li>因此，在受到國際關注的同時，最終是選擇製作可能疏遠國內使用者的現代化設計，還是像幾十年前一樣繼續為現有的顧客提供服務。選擇後者是不言而喻的。</li>
</ul>
<h2 id="假設4：與國際標準的兼容性"><a href="#假設4：與國際標準的兼容性" class="headerlink" title="假設4：與國際標準的兼容性"></a>假設4：與國際標準的兼容性</h2><blockquote>
<p>1984 年，我在一家名為 SORD 的日本公司工作，當時商業週刊稱之為「日本的 Apple」。這家公司是日本發展最快的公司，開發了自家的個人電腦、自家的作業系統以及電子試算表。</p>
</blockquote>
<ul>
<li>幾乎在同一時期，IBM 開發了自家的個人電腦，Apple 則開發了 <span class="exturl" data-url="aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3poLXR3L0FwcGxlX0xpc2E=">Lisa<i class="fa fa-external-link-alt"></i></span>，Mac 也即將隨之推出。SORD 的總裁派我前往美國進行市場調查。根據我的報告，美國正在關注 IBM 的 PC，對於不具兼容的日本電腦似乎沒有任何興趣。SORD 的策略是由自家開發所有應用程式，因此無法跟上 IBM PC 開發的第三方軟體。</li>
<li>於是我建議總裁，除非將自家的電腦改為 IBM 兼容，否則不該嘗試進入美國市場。然而，這讓總裁感到不安，於是雇用他人，試圖以現有產品進入美國市場。最終導致失敗，SORD 被東芝收購，總裁則利用收購款成立 IBM 兼容的個人電腦製造商。</li>
<li>在這之後，SHARP、<span class="exturl" data-url="aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3poLXR3LyVFNiU5NyVBNSVFNiU5QyVBQyVFOSU5QiVCQiVFNiVCMCVBMw==">NEC<i class="fa fa-external-link-alt"></i></span>、<span class="exturl" data-url="aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3dpa2kvJUU3JUIyJUJFJUU1JUI3JUE1JUU2JTg0JTlCJUU2JTk5JUFFJUU3JTk0JTlG">Epson<i class="fa fa-external-link-alt"></i></span> 等公司，開始製造 IBM 兼容且支援日語的個人電腦，卻已經浪費了寶貴的時間。IBM 兼容軟體的文檔一開始是英語，直到很久以後才出現日語版本。軟體工程師雖然可以查看文檔進行工作，但需付出相當大的努力。</li>
</ul>
<h2 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h2><p>與從內部視角看我們的業界不同，而是從外部以及國際視角來進行分析，是非常有趣的議題，對部分觀點有同感，其中也能窺見辛辣的評論。<br>作為日本的軟體開發者，對此有何感想呢？</p>
<h2 id="更多討論"><a href="#更多討論" class="headerlink" title="更多討論"></a>更多討論</h2><ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9iLmhhdGVuYS5uZS5qcC9lbnRyeS9zL25vdGUuZGlnaXRhbC5nby5qcC9uL24zNjkwNDgyYjk2NzY=">デジタル庁は「行政の透明化」を掲げ、noteでの発信を始めます。｜デジタル庁（準備中）<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9ub3RlLmNvbS9pcHNqL24vbmU5ZWViODhhZGI2NA==">接触確認アプリCOCOAからの教訓<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cDovL3RhbWFraW5vLmhhdGVuYWJsb2cuY29tL2VudHJ5LzIwMjEvMDQvMjMvMDYwMDAw">日本のソフトウェア開発はなぜ世界から落伍したのか。中国人エンジニアの見方<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cuc2xpZGVzaGFyZS5uZXQvbm9yaXN1a2VoaXJhaS9keGR4LTI0Mjk5Nzc4NQ==">エンジニアから都庁へ～中の人が語る街のDX、都庁のDX～<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cuNGdhbWVyLm5ldC9nYW1lcy85OTkvRzk5OTkwNS8yMDIxMDgyNjA4MS8=">［CEDEC 2021］フランス人開発者が，日本のゲーム業界の常識を斬る。「日本で世界規模の競争力のあるゲーム開発は可能なのか？」聴講レポート<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9iLmhhdGVuYS5uZS5qcC9lbnRyeS9zL2NvbWVtby5uaWtrZWkuY29tL24vbmYyZTVkYjZmNWRhZg==">GitHubでの業務ソースコード流出 背景にIT業界の二極化と多重下請け構造｜楠 正憲（デジタル庁統括官）<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9xaWl0YS5jb20vZTk5aDIxMjEvaXRlbXMvNDE5YzNiZDM5ZDhkZWE0MGYyMWE=">(W09) 海外「なぜ日本はハードウェアの時代と同じようにソフトウェアに秀でることができない？」-1 (2021.8.28） by @e99h2121 より抜粋加筆しました。<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9xaWl0YS5jb20vbW9uc29vblRyb3BpY2FsQmlyZC9pdGVtcy9jODNhN2I2MDY5MzEwMzliOTI0YQ==">日は沈む。考える事を放棄した日本産UIの日没 - Qiita<i class="fa fa-external-link-alt"></i></span></li>
</ul>
<blockquote>
<p>15th鐵人賽目錄傳送門：<span class="exturl" data-url="aHR0cHM6Ly9pdGhlbHAuaXRob21lLmNvbS50dy91c2Vycy8yMDEzNTU1OC9pcm9ubWFuLzYyOTA=">https://ithelp.ithome.com.tw/users/20135558/ironman/6290<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
]]></content>
      <categories>
        <category>2023鐵人賽</category>
        <category>豆知識篇</category>
      </categories>
      <tags>
        <tag>ironman2023</tag>
        <tag>Qiita</tag>
        <tag>軟體開發</tag>
        <tag>業界分析</tag>
      </tags>
  </entry>
  <entry>
    <title>[2023 15th鐵人賽] Day13 - 工程師邁向下一階段的學習方法</title>
    <url>/ironman-2023-day-13/</url>
    <content><![CDATA[<blockquote>
<p>原文連結：<span class="exturl" data-url="aHR0cHM6Ly9xaWl0YS5jb20vbmV3dGEvaXRlbXMvZjRhZmY4Y2RkODcwNmQ1ZDA4YzU=">エンジニアの次のステップへの勉強法 - Qiita<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
<p>接下來會針對職涯部分，依序介紹學習方法、履歷撰寫方式、以及面試準備方向等文章。即便是從日本環境的角度撰寫，道理還是大致相通。</p>
<p>本篇首先介紹的是「學習方法」，技能方面較偏向後端技術，未來求職可以作為參考。</p>
<span id="more"></span>

<p>以下正文開始。</p>
<hr>
<p>那些能夠根據指示完成工作，對不同程式語言大多能夠上手的工程師，有時會發現他們在這種環境下，反而成長停滯不前。<br>他們熱愛技術，也熱愛創造，卻發現自己的成長受制於環境。<br>在這些的環境中，將可能導致成長停滯：</p>
<ul>
<li>缺乏互相討論新技術資訊的工程師</li>
<li>工作對於技術水平需求不高</li>
<li>改善週期緩慢</li>
<li>缺乏整合開發流程的人</li>
</ul>
<p>簡而言之，這是一個能夠穩定工作，但停滯不前的職場環境。<br>由於業務上已經能足夠獲利，因此不需要追求更多的成長。<br>當然，這種生活方式也是一種選擇，如果認為這樣過也不錯，那就不需要再繼續往下閱讀。</p>
<p>本文將提供一些方向，給喜歡拓展技術，並且樂於創造的工程師，同時卻也對現狀感到困惑的人。</p>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>以下內容，基本上是目前我所身處的環境中，經常會談論的 <code>基礎</code> 內容。<br>雖然不能說是完全理解，但這些詞彙和概念，都是經常出現在對話中的內容。<br>作為一名工程師，不能只是瞭解框架和追求趨勢，更需要的是強化基礎能力。</p>
<h2 id="如何提升工程師的基礎能力"><a href="#如何提升工程師的基礎能力" class="headerlink" title="如何提升工程師的基礎能力"></a>如何提升工程師的基礎能力</h2><h3 id="學習設計模式"><a href="#學習設計模式" class="headerlink" title="學習設計模式"></a>學習設計模式</h3><p>有些以 <span class="exturl" data-url="aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3poLXR3LyVFOCVBRSVCRSVFOCVBRSVBMSVFNiVBOCVBMSVFNSVCQyU4RiVFRiVCQyU5QSVFNSU4RiVBRiVFNSVBNCU4RCVFNyU5NCVBOCVFOSU5RCVBMiVFNSU5MCU5MSVFNSVBRiVCOSVFOCVCMSVBMSVFOCVCRCVBRiVFNCVCQiVCNiVFNyU5QSU4NCVFNSU5RiVCQSVFNyVBMSU4MA==">GoF<i class="fa fa-external-link-alt"></i></span> 為代表的設計模式，如多線程編程模式，函數式編程模式。不論是哪種物件導向的語言，都可以應用 GoF 的設計模式。</p>
<p>如果是多線程編程，可以試著了解 CyclicBarrier、CountDownLatch 等。<br>如果是 Java，那麼參考 java.util.concurrent 套件中的實作應該會有所幫助。<br>如果是函數式編程，可以學習 LoanPattern 或在 Scala 中使用 mixin 的 CakePattern，以及 Monad 等。</p>
<p>依循這些模式的程式碼，不僅能夠實現預期功能，也能寫出更好的風格，同時提高靈活性和穩健性。</p>
<h3 id="理解基礎架構和網路知識"><a href="#理解基礎架構和網路知識" class="headerlink" title="理解基礎架構和網路知識"></a>理解基礎架構和網路知識</h3><p>在當今的時代，即便是開發應用程式，通常也需要處理網路連線相關問題。瞭解協議的特點，以及 HTTP（瀏覽器）的規範，並優雅地完成實作。</p>
<ul>
<li>TCP</li>
<li>HTTP Protocol</li>
<li>DNS</li>
<li>Routing</li>
<li>Middleware</li>
</ul>
<p>此外，還有近期不斷發展的 Immutable Infrastructure（不可變基礎設施）和虛擬化技術。 學習 docker、kubernetes 和 CloudFormation 等工具，例如錯誤監視系統、統計訊息管理等中介軟體和服務。</p>
<p>藉由理解這些領域的知識，將有助於提升開發速度，並加強穩健性。 一旦能構思出理想的基礎設施配置，對於建構在這之上的應用程式也會有不同的見解。</p>
<h3 id="閱讀開源軟體的程式碼"><a href="#閱讀開源軟體的程式碼" class="headerlink" title="閱讀開源軟體的程式碼"></a>閱讀開源軟體的程式碼</h3><p>現今，有許多優秀的工程師選擇公開程式碼。（真是美好的時代啊⋯⋯）<br>GitHub 上許多知名框架的程式碼，也是以開源方式進行開發。<br>透過閱讀我們熟悉的框架程式碼，瞭解其中的機制、思維，以及程式碼風格。<br>如果是 Java，試著閱讀 JDK 類別的程式碼也是不錯的選擇。<br>和至今所寫的程式碼相比，說不定能發現更好的寫法，此外也有機會學習到，符合框架理念的類別分割方法等內容。</p>
<h3 id="體驗雲端環境服務"><a href="#體驗雲端環境服務" class="headerlink" title="體驗雲端環境服務"></a>體驗雲端環境服務</h3><p>使用雲端系統以迅速啟動服務，已經變成常態。<br>根據不同情況，可能需要具備雲端系統相關的知識。試著瞭解有哪些可利用的服務，並實際動手使用看看吧。<br>由於能夠以小時為單位租借，投資知識的費用只需要數百日幣，能以相當低的成本取得新知識。<br>如果連這筆金額都無法投資，那對工程師自身的成長又能投注多少熱情呢？<br>不論哪種雲端服務， AWS、GCP 或 Azure 都可以。<br>如果可以，除了基本的 EC2 等伺服器實例，也可以試著使用特定功能的雲端服務。</p>
<p>以 AWS 為例，還有像是 CodeBuild 和 CodeDeploy 等的 CI 環境，以及 CloudFormation 等服務。並且提供了多個儲存選項。為什麼提供多個選項呢？在什麼情況下，使用這些服務能夠提升開發速度？為了成為能夠提供建議的工程師，瞭解這些知識是有必要的。</p>
<p>如果能夠深入瞭解，這將成為一種優勢。<br>在這個時代，使用雲端服務已成為常態，並且將會是工程師必備的基本知識。</p>
<h3 id="學習架構模式"><a href="#學習架構模式" class="headerlink" title="學習架構模式"></a>學習架構模式</h3><p>在 GoF 等設計模式中，定義每個類別的角色，如果想實作成一個應用程式，將會在程式中產生大規模的數據流動。</p>
<ul>
<li>Layered Model（階層型架構）</li>
<li>DDD（Domain-driven design = 領域驅動模型）</li>
<li>Clean Architecture 整潔架構</li>
<li>Cloud Architecture 雲計算架構</li>
<li>Microservices Architecture 微服務架構</li>
</ul>
<p>過去主要關注應用程式中的封裝結構，但最近開始思考伺服器以外的架構。架構是程式碼的基礎，如果基礎穩固，即使是尚未成熟的工程師，也能夠編寫易於維護的程式碼。</p>
<p>在建立應用程式系統的過程中，為了擁有更廣的視野，開始學習架構模式吧。</p>
<h3 id="學習開發流程"><a href="#學習開發流程" class="headerlink" title="學習開發流程"></a>學習開發流程</h3><p>在公司開發，通常需要多人合作進行。<br>若希望能最大化開發團隊的產出，和提高個人開發能力相比，更重要的應該是改善團隊流程。雖然不是必備知識，但學習敏捷開發以及思考如何應用，將有助於提高團隊和自身的表現。</p>
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3dpa2kvJUU2JTk1JThGJUU2JThEJUI3JUU4JUJEJUFGJUU0JUJCJUI2JUU1JUJDJTgwJUU1JThGJTkx">Agile 敏捷式開發<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3dpa2kvU2NydW0=">Scrum 開發<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3dpa2kvJUU2JTlFJTgxJUU5JTk5JTkwJUU3JUJDJTk2JUU3JUE4JThC">XP = Extreme programming 極限開發<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3poLXR3LyVFNyVCMiVCRSVFNyU5QiU4QSVFOCVCRCVBRiVFNCVCQiVCNiVFNSVCQyU4MCVFNSU4RiU5MQ==">Lean Software Development 精實軟體開發<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3poLXR3LyVFNyVCQiU5MyVFNSVBRiVCOSVFNyVCQyU5NiVFNyVBOCU4Qg==">Pair programming 結對程式設計<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvVGVhbV9wcm9ncmFtbWluZw==">Mob Programming 群體程式設計<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3poLXR3LyVFOSU5NyU5QyVFOSU4RCVCNSVFNyVCOCVCRSVFNiU5NSU4OCVFNiU4QyU4NyVFNiVBOCU5OQ==">KPT = Key Performance Indicators 關鍵績效指標<i class="fa fa-external-link-alt"></i></span></li>
</ul>
<h3 id="學習大數據處理"><a href="#學習大數據處理" class="headerlink" title="學習大數據處理"></a>學習大數據處理</h3><p>面對每天增加數十億件數據的系統，至今為止的傳統架構可能已無法應對這種情況。雖然這取決於業務需求，但瞭解大數據處理，將能夠帶來一些優勢。</p>
<p>多數情況下，使用 <span class="exturl" data-url="aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3poLXR3L0JpZ1F1ZXJ5">BigQuery<i class="fa fa-external-link-alt"></i></span> 或 <span class="exturl" data-url="aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3poLXR3L0FtYXpvbl9SZWRzaGlmdA==">RedShift<i class="fa fa-external-link-alt"></i></span> 等工具可能就已足夠，但對於 Web 應用程式伺服器來說，必須注意延遲的問題。解決延遲並實現可擴展的架構，將使系統更為突出。</p>
<p>此外，瞭解專門用於大規模處理的環境，如 <span class="exturl" data-url="aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3poLXR3L0FwYWNoZV9IYWRvb3A=">Hadoop<i class="fa fa-external-link-alt"></i></span>、<span class="exturl" data-url="aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3poLXR3L0FwYWNoZV9IaXZl">HIVE<i class="fa fa-external-link-alt"></i></span>、<span class="exturl" data-url="aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3poLWNuLyVFOSU5QiVCMiVFNyVBQiVBRiVFOSU4MSU4QiVFNyVBRSU5Nw==">ECS<i class="fa fa-external-link-alt"></i></span>、<span class="exturl" data-url="aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3poLXR3L0FwYWNoZV9TcGFyaw==">Spark<i class="fa fa-external-link-alt"></i></span> 等框架，也將有所幫助。</p>
<p>儘管也能自行操作來驗證，但要進行大規模數據實驗仍有一定難度。因此，透過學習來改變環境，尋找能夠提供這些設備的公司，或許是提高自身工程師水平的一條近路。</p>
<h3 id="通過機器學習獲取額外知識"><a href="#通過機器學習獲取額外知識" class="headerlink" title="通過機器學習獲取額外知識"></a>通過機器學習獲取額外知識</h3><p>在雲端服務中，提供能夠輕鬆使用機器學習數據的服務。<br>此外，還有可執行機器學習的基礎設施，這些也能夠自行建立。<br>視情況也會使用到 GPU 處理或 FPGA 等技術。</p>
<p>雖然統計和機器學習，可能不同於工程師具備的技能，但我認為這是目前流行的技術組合之一。<br>順帶一提，我自己本身不太會這些（&gt;_&lt;）。</p>
<h3 id="瞭解技術以外的趨勢，尋找能發揮技術的機會"><a href="#瞭解技術以外的趨勢，尋找能發揮技術的機會" class="headerlink" title="瞭解技術以外的趨勢，尋找能發揮技術的機會"></a>瞭解技術以外的趨勢，尋找能發揮技術的機會</h3><p>利用<span class="exturl" data-url="aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3dpa2kvJUU1JThDJUJBJUU1JTlEJTk3JUU5JTkzJUJF">區塊鏈<i class="fa fa-external-link-alt"></i></span>技術的虛擬貨幣，如 <span class="exturl" data-url="aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3poLXR3LyVFNiVBRiU5NCVFNyU4OSVCOSVFNSVCOCU4MQ==">Bitcoin（比特幣）<i class="fa fa-external-link-alt"></i></span>、<span class="exturl" data-url="aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3poLXR3LyVFOSU4NyU5MSVFOCU5RSU4RCVFNyVBNyU5MSVFNiU4QSU4MA==">Fintech（金融科技）<i class="fa fa-external-link-alt"></i></span>等，以及個人化廣告技術、EC 電子商務和各種媒體的推薦引擎、搜索引擎等。</p>
<p>技術水平 + 商業應用，對於工程師來說，是一個充滿挑戰的環境。這有助於提升工程師的技術水平，瞭解哪些環境能夠最大化個人技術價值，對於自身成長是有必要的。</p>
<h2 id="追尋新技術的五種方法"><a href="#追尋新技術的五種方法" class="headerlink" title="追尋新技術的五種方法"></a>追尋新技術的五種方法</h2><p>由於技術不斷在進化，光是提升基礎知識，可能還是會有不足的部分。</p>
<p>為了成為更強大的工程師，我們需要擴展技術的視野，以下提供一些追蹤資訊的方法。</p>
<h3 id="參加研討會"><a href="#參加研討會" class="headerlink" title="參加研討會"></a>參加研討會</h3><p>研討會可能不會深入探討技術細節，通常會提供一些使用案例。<br>透過這個場合，能夠建立對未知領域的基本概念，有機會瞭解之前不曾聽過的知識內容。<br>若想要更深入瞭解，就必須自己動手操作，但參加研討會對於獲得新知識和技能來說，也是一個不錯的機會。</p>
<p>此外，有些研討會可能設有交流會，可以和平時不會接觸到的工程師進行交流，甚至找到轉職的機會。人脈關係是非常重要的。</p>
<h3 id="在-Twitter-上關注最新資訊"><a href="#在-Twitter-上關注最新資訊" class="headerlink" title="在 Twitter 上關注最新資訊"></a>在 Twitter 上關注最新資訊</h3><p>一些知名人士經常會在 Twitter 上發布訊息，這些訊息通常會談論到最新技術。<br>因此透過關注這些 Twitter 帳戶，即可掌握最新的技術動態。每個領域都有一些知名的人，可以一點一點累積，慢慢擴大關注人數。</p>
<h3 id="查看官方文文件"><a href="#查看官方文文件" class="headerlink" title="查看官方文文件"></a>查看官方文文件</h3><p>最新資訊通常會記錄在官方網站上。包括 AWS 的新服務、GCP 的新服務、其他框架的開發進展、ISSUE、Pull Request 的處理情況、未來的願景等等。</p>
<p>也許不會馬上導入這些最新服務，不確定什麼時候會需要使用，但定期查看官方文件將有助於累積知識。<br>此外，Google、AWS、Microsoft 等公司網站上，還提供雲架構的相關解釋，構成管理的概念說明，以及開發流程和管理方面的資訊。不僅提供有關雲服務的知識，還提供提高基本知識的文章，因此有空時也可以翻閱看看。</p>
<h3 id="查看-GitHub"><a href="#查看-GitHub" class="headerlink" title="查看 GitHub"></a>查看 GitHub</h3><p>這部分與閱讀開源程式碼有關，但 GitHub 有個頁面能夠查看趨勢。</p>
<p>不一定是閱讀開源程式碼，也能透過查看星數多的專案，閱讀 README 等內容，瞭解有哪些產品正在被開發，以及掌握目前的趨勢，這將有助於提高對技術的構想與感知能力。<br>頻率不用很高，偶爾查看或許就會有有趣的發現。</p>
<h3 id="查看-Qiita-的文章"><a href="#查看-Qiita-的文章" class="headerlink" title="查看 Qiita 的文章"></a>查看 Qiita 的文章</h3><p>最近的趨勢頁面，經常會出現受到大眾歡迎的文章內容，這導致探討核心且有趣的文章不容易排行在上位，但可以透過追蹤自己喜歡的作者，即可在時間軸頁面查看更新的文章。<br>我自己也有在 Qiita 上寫文章，建議可以試試看w</p>
<h2 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h2><p>我一直希望能夠為有幹勁的工程師，創造一個有利於成長的環境。<br>建立一個能讓有幹勁和實力的工程師，充分發揮其價值的系統。<br>如果有任何問題、評論或需要提供方向，歡迎隨時留言，我會進行答覆。<br>希望提供這些想法給願意實際執行，而非只停留在空想的人，讓他們在學習上有個方向。<br>此外，如果有其他方法或想法，請在評論或引用等方式分享！</p>
<blockquote>
<p>15th鐵人賽目錄傳送門：<span class="exturl" data-url="aHR0cHM6Ly9pdGhlbHAuaXRob21lLmNvbS50dy91c2Vycy8yMDEzNTU1OC9pcm9ubWFuLzYyOTA=">https://ithelp.ithome.com.tw/users/20135558/ironman/6290<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
]]></content>
      <categories>
        <category>2023鐵人賽</category>
        <category>職涯篇</category>
      </categories>
      <tags>
        <tag>ironman2023</tag>
        <tag>Qiita</tag>
        <tag>Learning</tag>
      </tags>
  </entry>
  <entry>
    <title>[2023 15th鐵人賽] Day14 - 希望看到的工程師履歷撰寫方式</title>
    <url>/ironman-2023-day-14/</url>
    <content><![CDATA[<blockquote>
<p>原文連結：<span class="exturl" data-url="aHR0cHM6Ly9xaWl0YS5jb20vbmV3dGEvaXRlbXMvNzdlYjE0YjFkNjdiYzdlZjE5ODA=">見たいエンジニアの職務経歴書の書き方 - Qiita<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
<p>接下來這篇文章，是從面試官的角度說明「履歷撰寫方式」。</p>
<p>在閱讀本文前需要先注意，日文履歷通常分為兩個部份，與我們一般認知的履歷不太相同：</p>
<ul>
<li><strong>履歷書</strong>：通常為制式的條列表格，填寫基本資料、在學/職經歷、擁有證照、自我 PR、對工作期許等</li>
<li><strong>職務經歷書</strong>：格式不固定，主要功能是延伸履歷書提到的項目，針對個人工作經驗、工作負責項目、展現工作成果等進行詳細說明</li>
</ul>
<p>為了不搞混兩者，本文中出現的履歷書會以「個人簡歷」表示，而文章主要談論的「職務經歷書」則以「工作履歷」來表示。</p>
<span id="more"></span>

<p>那麼，以下正文開始。</p>
<hr>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>我在某個上市的 Web 企業，負責書面審核和面試官等招聘相關工作，負責面試中途聘用的伺服器端工程師。過程中也曾轉職過，但從事面試等招聘工作已經有五年的時間。</p>
<p>以前我曾寫過一篇關於面試的文章：</p>
<p><span class="exturl" data-url="aHR0cHM6Ly9xaWl0YS5jb20vbmV3dGEvaXRlbXMvNjNhMDY1MTY1MjE5OThkZGQ5ZjA=">エンジニアを面接するときに面接官が本当に知りたいこと（工程師在面試時，面試官真正想知道的事情）<i class="fa fa-external-link-alt"></i></span></p>
<p>參與書面審核的工作時，有時候會發現申請者提供的資訊不足。不禁思考「或許他們的實際能力其實更強？」因此，這次我想從招聘方的角度，來談談希望看到什麼形式的工作履歷撰寫方式</p>
<p>這些建議並不適用於所有情況，主要是基於我在相對大型 Web 企業的經驗，從中提出的觀點。</p>
<p>因此這次的內容，可能也更適用於希望應徵大型 Web 企業的工作履歷。</p>
<h2 id="常見到資訊不足的工作履歷"><a href="#常見到資訊不足的工作履歷" class="headerlink" title="常見到資訊不足的工作履歷"></a>常見到資訊不足的工作履歷</h2><p>當招聘經理並非工程師，或本身對技術不太了解的情況，他們很難針對技術方面做出近一步評價。<br>由於不懂技術，因此只能依照過濾出以下項目進行評估：</p>
<ul>
<li>程式語言</li>
<li>參與的專案項目</li>
<li>負責工作階段</li>
<li>工作經驗年數</li>
</ul>
<p>因此，對 SI（系統整合）領域的人來說，這種工作經歷的格式並不理想，因為制式的框架會限制如何表達自己的技術能力。<br>然而，工作履歷的格式並不是固定的！！ 而是可以根據需求，設計一個能充分展示自我能力的格式。不論使用 Word、Excel，或 GitHub 都可以。 （個人是使用 Google SpreadSheet 製作）<br>請自行設計一個能夠充分展現自己，身為一名工程師的工作履歷。<br>作為一名工程師，我也希望能看到求職者們，能更加自豪地展示對技術知識的深入理解與思考能力！</p>
<h2 id="真正想看的履歷表"><a href="#真正想看的履歷表" class="headerlink" title="真正想看的履歷表"></a>真正想看的履歷表</h2><p>我幾乎不會看個人簡歷內容。（※這只是個人見解）<br>但會仔細閱讀自我 PR 欄位，因為這部分有時能顯示面試者的思考過程。</p>
<p>主要還是透過工作履歷來評估實力。<br>其中，會特別檢視這兩個部分：<strong>技術能力</strong>和<strong>人際軟實力</strong>。</p>
<h2 id="技術能力"><a href="#技術能力" class="headerlink" title="技術能力"></a>技術能力</h2><p>首先是多數人都會寫的內容，如程式語言、數據庫、框架等等。</p>
<p>接著查看這些技能曾在哪些專案中使用。</p>
<p>除此之外，也會從另一個角度，觀察他們對技術理解的深度，以及思考如何應用。</p>
<p>像程式語言這些技術只是工具，重要的是能運用到什麼程度，這取決於對技術的熟練程度。</p>
<p>僅僅寫下技術名稱，並不足以表達使用情形。究竟是單純「使用過」，還是真正掌握並且能根據使用情境「提出建議」，兩者之間是截然不同的。</p>
<p>因此，除了技術名稱，希望這裡能夠表達：</p>
<ul>
<li>在專案中擔任什麼樣的<strong>角色</strong></li>
<li>對使用的技術有什麼樣的<strong>理解</strong></li>
</ul>
<p>在業務關係與開發過程中，經常會陷入兩難的局面。<br>過程中，在面對需求時會如何思考，並針對期限作出抉擇？<br>在考慮到短期、中期和長期的運營和維護等方面，會如何選擇使用的技術？<br>對於挑戰的機會，將提出什麼樣的技術建議？選擇根據是什麼？</p>
<p>針對來自業務方的需求，以工程師的角度提出技術建議與說明，這也是評量實力的最佳指標。<br>原因在於，提出建議必須仰賴個人收集、理解和執行訊息的能力。這與遵照他人制定的架構不同，需要對技術有更深的理解和行動力。</p>
<p>舉例來說，你應該對於正在使用的程式語言，或是框架的版本有充分的理解，有哪些改進或缺點，是否有其他地方需要注意的？你應該抱持自己的觀點來看待這些事情。<br>這麽一來，如果履歷中沒有列出版本，將直接反應你對該技術的理解程度。<br>雖然不需要涵蓋所有領域，但我認為對自己擅長的技術應該要有更深入的理解。</p>
<h3 id="兩種技術能力"><a href="#兩種技術能力" class="headerlink" title="兩種技術能力"></a>兩種技術能力</h3><p>我認為技術能力可分為兩種主要類型：</p>
<ul>
<li>基本技能：即使程式語言或 DB 發生改變也能應用，基本上變化較少但始終必要的技能</li>
<li>趨勢技能：新趨勢或新出現的技術，由於變化較大，在業務中應用需要一些時間</li>
</ul>
<p>雖然沒有明確的分界，但這就像基本能力和知識廣度。</p>
<p>並且兩者都需要執行力和行動力。</p>
<h4 id="基本技能"><a href="#基本技能" class="headerlink" title="基本技能"></a>基本技能</h4><ul>
<li>Design Pattern 設計模式（GoF、多線程設計模式等）</li>
<li>Architectural Pattern 架構模式（OOP、DDD、Cloud 架構）</li>
<li>DB 資料庫特性（<span class="exturl" data-url="aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3poLXR3LyVFNSU4NSVCMyVFNyVCMyVCQiVFNiU5NSVCMCVFNiU4RCVBRSVFNSVCQSU5Mw==">RDB 關聯式資料庫<i class="fa fa-external-link-alt"></i></span>、<span class="exturl" data-url="aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3poLXR3LyVFOSU5NCVBRS0lRTUlODAlQkMlRTUlQUQlOTglRTUlODIlQTg=">KVS 鍵-值資料庫<i class="fa fa-external-link-alt"></i></span>、<span class="exturl" data-url="aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3poLXR3LyVFNSU4OCU5NyVFNSVCQyU4RiVFNiU5NSVCMCVFNiU4RCVBRSVFNSVCQSU5Mw==">Columnar 列式資料庫<i class="fa fa-external-link-alt"></i></span>等）</li>
<li>對程式語言的深入理解（擅長的語言風格）</li>
<li>演算法（數學、數據結構模式）</li>
</ul>
<p>總體而言，我想知道對<strong>技術理解的深度</strong>如何。</p>
<h5 id="趨勢技能"><a href="#趨勢技能" class="headerlink" title="趨勢技能"></a>趨勢技能</h5><ul>
<li>流行的程式語言、框架、中介軟體、使用工具</li>
<li>對新語言概念的理解</li>
<li>考慮實用點和仍未導入的情況</li>
</ul>
<p>總體而言，我想知道<strong>執行力、反應速度和視野的廣度</strong>。</p>
<p>有些人可能只寫了許多趨勢技能，卻無法從中看出技術深度，我認為最好的情況是在這兩者之間取得平衡。</p>
<h3 id="軟實力"><a href="#軟實力" class="headerlink" title="軟實力"></a>軟實力</h3><p>不太了解什麼是軟實力的人，請自行 Google 查詢。 → <span class="exturl" data-url="aHR0cHM6Ly93d3cuZ29vZ2xlLmNvbS9zZWFyY2g/cT0lRTglQkIlOUYlRTUlQUYlQTYlRTUlOEElOUI=">Google: 軟實力<i class="fa fa-external-link-alt"></i></span><br>即使是工程師，只要加入公司就會成為一名員工，不會是獨自完成工作。<br>若想要單獨工作，那就沒有必要加入公司。<br>這也意味著，技術的應用也包括對周圍的影響力，這是作為工程師能力的一部分。</p>
<p>可經由在專案中擔任的角色，以及思考方式來進行評估：</p>
<ul>
<li>在團隊中的協作能力</li>
<li>透過技術和管理引導團隊的領導力</li>
<li>在團隊內外產生的影響力</li>
<li>不僅能發現並指出問題所在，並獨立解決問題的能力</li>
</ul>
<p>透過這些角度將有助於理解。</p>
<p>在撰寫履歷時需注意，避免過於抽象的描述，這將無法深入瞭解對方。</p>
<p>建議以事實為基礎，具體描述數據和改變的事項。</p>
<p>例如，並非因為成為領導者而表現突出，而是當成為領導者時，能夠展現身為領導者的行動和思維，這些結果才是更重要的。</p>
<h2 id="自我-PR"><a href="#自我-PR" class="headerlink" title="自我 PR"></a>自我 PR</h2><p>若是因為目前工作的關係，沒有機會使用感興趣的技術，建議可以把這些想做的事情，或已經進行的嘗試記錄下來。例如發表在 Blog 或 Qiita 等的文章，或參加研討會時準備的資料，也可以是面對專案的態度和注重的部分。</p>
<p>我認為在自我 PR 欄位，寫得正是自己想表達的內容，因此這是我最喜歡的部分。</p>
<p>如果可以的話，建議根據每次應徵的公司修改內容。藉由調查公司的情況，瞭解使用的技術與公司文化，並寫下自己想要做的事情和能有什麼貢獻，即使只有幾句話，也有助於評估與公司的契合程度。</p>
<p>此外需要注意，基本上<strong>「想做」==「採取某種行動」</strong>。 如果「想要」學習 Go 語言，可以前往 Go 的官方網站下載並開始寫程式，這並不受任何限制。只有<strong>在能力範圍內做出實際行動</strong>，才能表現出對某件想做的事情的強烈渴望。</p>
<p>請不要寫下「明明沒有做任何事情」卻稱之為想要做的內容。而是透過自己的方式，用實際行動追求進步以面對工作上的挑戰。想要完全依靠公司賦予的工作和機會來實現自我成長是很困難的。</p>
<p>招聘活動並不是為了淘汰而舉行，而是為了吸引更多的工作夥伴。我們需要更多的工程師！！！但我們不能因此降低質量，而是希望建立公司和個人之間的互利關係。</p>
<h2 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h2><p>希望寫在履歷中，面試官想知道的重點：</p>
<ul>
<li>展現應用系統的技術能力</li>
<li>如何選擇技術，使用該技術的考量與思維</li>
<li>評估商業和技術之間最合適的方案</li>
<li>在技術評估過程如何參與團隊討論</li>
<li>預期未來的成長方向和目前的行動計劃</li>
</ul>
<p>我們想知道的，不只是曾使用過的技術，也不僅止於參與過的專案，而是面對這些過程所經歷的思考和行動。請把這些經歷都寫在工作履歷上！</p>
<p>若是覺得難以深入描述，可以先試著思考看看，目前使用的框架或套件的優點和缺點。</p>
<p>完成之後，或許可以考慮下一步成長方向。在工作履歷中列出具有優勢的部分，將會更有吸引力。也可以參考這篇文章：<span class="exturl" data-url="aHR0cHM6Ly9xaWl0YS5jb20vbmV3dGEvaXRlbXMvZjRhZmY4Y2RkODcwNmQ1ZDA4YzU=">エンジニアの次のステップへの勉強法（工程師邁向下一階段的學習方法）<i class="fa fa-external-link-alt"></i></span>。如果不知道該如何撰寫履歷，這裡也可以提供諮詢。</p>
<p>希望有助於寫出更能表現自己實力的履歷，並得以在能夠實現工程師夢想的環境工作！</p>
<blockquote>
<p>可參考上一篇翻譯：<span class="exturl" data-url="aHR0cHM6Ly9oYWNrbWQuaW8vQEhlaWRpLUxpdS9pcm9ubWFuLTIwMjMtZGF5LTEz">[Day13] 工程師邁向下一階段的學習方法<i class="fa fa-external-link-alt"></i></span><br>15th鐵人賽目錄傳送門：<span class="exturl" data-url="aHR0cHM6Ly9pdGhlbHAuaXRob21lLmNvbS50dy91c2Vycy8yMDEzNTU1OC9pcm9ubWFuLzYyOTA=">https://ithelp.ithome.com.tw/users/20135558/ironman/6290<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
]]></content>
      <categories>
        <category>2023鐵人賽</category>
        <category>職涯篇</category>
      </categories>
      <tags>
        <tag>ironman2023</tag>
        <tag>Qiita</tag>
        <tag>resume</tag>
        <tag>日本求職</tag>
      </tags>
  </entry>
  <entry>
    <title>[2023 15th鐵人賽] Day15 - 面試官在面試工程師時真正想知道的事情</title>
    <url>/ironman-2023-day-15/</url>
    <content><![CDATA[<blockquote>
<p>原文連結：<span class="exturl" data-url="aHR0cHM6Ly9xaWl0YS5jb20vbmV3dGEvaXRlbXMvNjNhMDY1MTY1MjE5OThkZGQ5ZjA=">エンジニアを面接するときに面接官が本当に知りたいこと - Qiita<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
<p>接下來這篇文章，也同樣是從面試官的角度，說明「面試關注的幾項重點」。</p>
<span id="more"></span>

<p>以下正文開始。</p>
<hr>
<h2 id="寫這篇文章的動機"><a href="#寫這篇文章的動機" class="headerlink" title="寫這篇文章的動機"></a>寫這篇文章的動機</h2><p>有時候我會感覺，工程師的面試官需要的資訊，和應徵者提供的資訊之間存在些許差距，因此我決定寫下這些想法。<br>對於工程師來說，如果不知道該如何準備好的自我 PR，在面試時可能會比較吃虧。因此，希望這些內容，能夠對不擅長這部分的人有所幫助。</p>
<h2 id="我是誰？"><a href="#我是誰？" class="headerlink" title="我是誰？"></a>我是誰？</h2><p>我是在某個上市 Web 公司任職的工程師。<br>基本上是在現場工作，但也會以工程師身份，和人事參與面試相關的工作。<br>擁有兩年以上的招聘面試經驗。</p>
<h2 id="注意事項"><a href="#注意事項" class="headerlink" title="注意事項"></a>注意事項</h2><ul>
<li>這些是以我目前所在公司的立場來看，因此觀察的視角有限</li>
<li>內容僅是我的個人見解，與所屬公司的立場無關</li>
</ul>
<h2 id="在面試時我的個人感受"><a href="#在面試時我的個人感受" class="headerlink" title="在面試時我的個人感受"></a>在面試時我的個人感受</h2><ul>
<li>我並不是為了淘汰人而來的，如果可以，我希望能讓每個人都通過！</li>
<li>我想找到你的優勢！（請告訴我你的長處！）</li>
<li>我想評價你的努力（表現對技術的熱情！）</li>
</ul>
<p>希望能為公司和到來的面試者，創造一個良好的環境和機會。</p>
<h2 id="面試是能瞭解你，和瞭解公司的機會"><a href="#面試是能瞭解你，和瞭解公司的機會" class="headerlink" title="面試是能瞭解你，和瞭解公司的機會"></a>面試是能瞭解你，和瞭解公司的機會</h2><ul>
<li>這並不僅止於公司或面試者任何一方</li>
<li>若能談論 30 分鐘，就能夠瞭解對技術的熱愛程度</li>
<li>是否有理解問題，並回答我們想知道的事情</li>
</ul>
<h2 id="瞭解三大關鍵點"><a href="#瞭解三大關鍵點" class="headerlink" title="瞭解三大關鍵點"></a>瞭解三大關鍵點</h2><ul>
<li>動機匹配</li>
<li>文化匹配</li>
<li>技能匹配</li>
</ul>
<p>再來，我想分別談談這三個重點。</p>
<h2 id="動機匹配"><a href="#動機匹配" class="headerlink" title="動機匹配"></a>動機匹配</h2><ul>
<li>我想知道你想做什麼，或希望獲得什麼知識</li>
<li>公司將考慮是否有與之相關的工作</li>
<li>在工作表現方面，動機會是你最強大的武器</li>
</ul>
<p>能清楚表達自己想做的事情。即使有許多想嘗試的事情也可以。</p>
<p>但必須能夠解釋自己為何想做，以及為此付諸了什麼行動。<br>基本上，我們不會評價尚未行動的事情，因為停留在想做的階段，也就代表該動機的程度。</p>
<h3 id="「我也想從事管理工作」在大多數情況下，這是一個死亡-FLAG"><a href="#「我也想從事管理工作」在大多數情況下，這是一個死亡-FLAG" class="headerlink" title="「我也想從事管理工作」在大多數情況下，這是一個死亡 FLAG"></a>「我也想從事管理工作」在大多數情況下，這是一個死亡 FLAG</h3><ul>
<li>是否有為了獲得管理技能，採取相應的行動？</li>
<li>是否需要像學習程式語言或基礎設施一樣，去深入研究技術？</li>
</ul>
<p>這包括如何正確定義敏捷開發，以及從自身角度的理解。</p>
<p>在服務事業中，展現如何進行產品管理和提出想法。</p>
<p>在專案管理中，處理時間表、預算、產品範疇、品質之間的關係，以及對利益相關者採取的行動等。</p>
<p>若無法清楚表達這些想法，那我們並不希望聽到「我也想做管理工作」之類的話。這就像聽到有人說「我從來沒有寫過程式，但我想成為一名程式設計師」，我們也不會考慮錄取他們一樣。</p>
<p>買書並準備好開發環境，這些即使不是工作，還是可以靠自己去實踐的吧？</p>
<p>如果真的想要從事管理工作，我們會希望你能夠談論自己具備了哪些知識。</p>
<h3 id="動機是最大的力量"><a href="#動機是最大的力量" class="headerlink" title="動機是最大的力量"></a>動機是最大的力量</h3><p>無論從事什麼工作，動力都是最重要的。</p>
<p>如果能展現動力並實際行動，我們將全力支持，尋找能相匹配的工作。</p>
<p>因為這樣的人一旦踏入工作崗位，很快就能夠適應環境。</p>
<h2 id="文化匹配"><a href="#文化匹配" class="headerlink" title="文化匹配"></a>文化匹配</h2><ul>
<li>公司有自己的文化</li>
<li>文化的塑造，可能與公司規模、公司歷史，以及商業模式的影響等多項因素有關</li>
<li>文化是由參與其中的每一位成員所共同創建的</li>
</ul>
<p>就個人立場而言，我喜歡那些為了提升技能，或為了提供有自信的服務，而毫不畏懼加班的人。這並非強制要求加班，只是希望能感受到那種程度的熱情。當我不想加班時，我是不會加班的。</p>
<p>對其他公司來說，可能會認為只需在規定時間內完成工作，即可在自己的時間做想做的事情，例如進行技術提升等，這取決於公司的立場。</p>
<p>也可能取決於讀書會的頻率，以及開發過程的週期等因素。重要的不僅是參加的意願，還有是否有意願登台分享，是否希望透過行動來改變，而非只停留在思考階段等等。若傾向於參與組織，而不是自己建立架構，那麼最好選擇一家已經具備完整體制的公司。</p>
<p>此外，工程師與企劃規劃者之間的距離，以及計畫的詳細程度也有所差異。以 SIer（System Integration 系統整合員）來說，通常只需按照規格開發；而在 Web 領域，大多認為工程師應該多參與規劃。在這種情況，可透過研究公司提供的服務和體制，提出與服務相關的深入問題，這將有機會提高好感度。</p>
<p>在這裡，不建議對服務本身提出過多批判和提案。作為經營事業的公司，即使有 100 件想做的事情，由於開發資源有限，只能優先考慮價值高的部分進行開發。外部人士發現的事情，內部往往也早已理解。不懂裝懂的態度，在開發過程可能導致溝通上不一致，進而產生負面影響。</p>
<p>當然還是可以指出明顯的錯誤，但這通常會是把雙面刃，不一定能夠帶來正面的評價。</p>
<p>如果對下一代產品有什麼想法，比起建議，不如試著分享自己的願景。</p>
<p><strong>是追求穩定，還是為了成長追求挑戰</strong></p>
<h2 id="技術匹配"><a href="#技術匹配" class="headerlink" title="技術匹配"></a>技術匹配</h2><p>身為工程師，累積的經驗和學習將塑造成技術組合。相對於前兩項，優先級較低。因為即使缺乏某些技能，只要保持動力並事先進行準備，即可在初期補足。</p>
<p>但作為同團隊的一員，仍必須能夠展現自己的價值。不論是公司或個人，雙方都無法單方面享受知識和經驗。</p>
<p>如果使用的程式語言與專案中的完全匹配，將會是加分項目。即使不完全匹配，也不會對造成太大的負面影響。</p>
<p>只要能夠深入理解一種程式語言，相信也能夠很快掌握其他語言的特性。</p>
<p>相反地，我們會確認對方是否真正掌握這些語言，能夠以自己的角度，清楚說明語言的優劣勢、特點、特性等知識和想法。</p>
<p>同時也會進行確認，面試者所認為的自身優勢，是否能在專案中發揮作用。</p>
<p>此時掌握的技能，大多取決於工作環境，工作需求和擔任的角色。因此不僅僅是工作，也與個人學習有關，動機的強度往往是關鍵所在。</p>
<p>關於如何發展自己的優勢技能，建議可以參考以下文章。</p>
<ul>
<li>原文連結：<span class="exturl" data-url="aHR0cHM6Ly9xaWl0YS5jb20vbmV3dGEvaXRlbXMvZjRhZmY4Y2RkODcwNmQ1ZDA4YzU=">エンジニアの次のステップへの勉強法<i class="fa fa-external-link-alt"></i></span></li>
<li>翻譯：<span class="exturl" data-url="aHR0cHM6Ly9pdGhlbHAuaXRob21lLmNvbS50dy9hcnRpY2xlcy8xMDMyOTY1OA==">[Day13] 工程師邁向下一階段的學習方法<i class="fa fa-external-link-alt"></i></span> </li>
</ul>
<h2 id="實際面試指南"><a href="#實際面試指南" class="headerlink" title="實際面試指南"></a>實際面試指南</h2><p>大致方針：整體來說，以闡述自身優勢、具備技能和思考方式為中心</p>
<h3 id="說明自身經歷"><a href="#說明自身經歷" class="headerlink" title="說明自身經歷"></a>說明自身經歷</h3><ul>
<li>經歷部分，選出 2 至 3 個能夠清楚描述自身優勢和技能的專案，以約 5 分鐘的時間進行說明<ul>
<li>不需從學生時代開始詳細說明</li>
<li>不需談論與工作技能和思考無關的興趣（但破冰時可以）</li>
<li>如果在專案中無法表現自己的特點，可以加入自我學習相關的項目</li>
</ul>
</li>
<li>如果是轉職的情況，請說明轉職動機<ul>
<li>能夠在 1 分鐘內，針對轉職說明「公司概況和動機」</li>
</ul>
</li>
<li>講述自己對技術的態度和思考方式，以及自我 PR<ul>
<li>擅長的程式語言（技術），以及為何擅長或喜歡該語言</li>
<li>是否有參加工作以外的研討會或演講經驗等（並非工作強制）</li>
</ul>
</li>
</ul>
<p>著重於面試官可能感興趣的內容，並附上索引：</p>
<ul>
<li>若對轉職動機感興趣，將會提出相關問題</li>
<li>若對技能或專案中的角色感興趣，將會提出相關問題</li>
<li>對於某個行為，希望更深入瞭解思考方式時</li>
<li>表達有想做的事情，希望瞭解有哪些實際行動時</li>
</ul>
<h3 id="回答問題"><a href="#回答問題" class="headerlink" title="回答問題"></a>回答問題</h3><ul>
<li>無法理解問題意圖的情況，請確認意圖後再回答</li>
<li>不要假裝會，或假裝知道不懂的事情<ul>
<li>多數情況下，很容易被發現並讓場面尷尬</li>
</ul>
</li>
<li>遇到較深的技術問題，若是擅長的部分要積極回答<ul>
<li>談話應該是愉快的</li>
<li>但不要過於冗長，最多 2 到 3 分鐘，最長不超過 5 分鐘，聽 10 分鐘以上單方面的談話會有點難受</li>
<li>只有當面試官提出更深入的問題時，才能夠超過 10 分鐘以上，必須保持雙向交流</li>
</ul>
</li>
</ul>
<h3 id="反問問題"><a href="#反問問題" class="headerlink" title="反問問題"></a>反問問題</h3><ul>
<li>如何趕上技術發展</li>
<li>工程師的行為準則</li>
<li>職業生涯和工程師的角色</li>
<li>公司特有的制度和活動</li>
<li>企業的前景和挑戰</li>
</ul>
<p>建議針對文化相關內容提問，因為這些問題通常不容易在網路上找到資訊。</p>
<p>相反地，如果被問到在網路上能夠找到的資訊，可能會被認為對該公司不太感興趣。</p>
<p>（因為只要在面試前一天，查看公司官網就可以得知的事情，被認為是不願花費這數小時的時間做出努力的人）</p>
<h2 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h2><ul>
<li>招聘是一種匹配過程，並不是為了淘汰而進行面試</li>
<li>明確瞭解自己的優勢，若沒有優勢，應該花半年以上的時間來培養</li>
<li>若在面試中提到想做的事情，應該在能力範圍內先進行嘗試</li>
<li>文化匹配有時會受到時機和部門差異影響，因此不需要感到沮喪</li>
<li>能夠說明自己的優勢、技能和思考方式，並且能用行動來應證</li>
</ul>
<p>不論遇到什麼樣的面試官，或打算準備轉職時，希望這篇文章也能夠有所幫助：</p>
<p><span class="exturl" data-url="aHR0cHM6Ly9xaWl0YS5jb20vbmV3dGEvaXRlbXMvOTYyMDA1NmJiOTkxZjRiMGYwM2Q=">エンジニアが転職する時に考えることを採用面接官をしてる立場から書いてみた（從面試官的角度談談工程師在轉職時需要考慮的事項）<i class="fa fa-external-link-alt"></i></span></p>
<blockquote>
<p>15th鐵人賽目錄傳送門：<span class="exturl" data-url="aHR0cHM6Ly9pdGhlbHAuaXRob21lLmNvbS50dy91c2Vycy8yMDEzNTU1OC9pcm9ubWFuLzYyOTA=">https://ithelp.ithome.com.tw/users/20135558/ironman/6290<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
]]></content>
      <categories>
        <category>2023鐵人賽</category>
        <category>職涯篇</category>
      </categories>
      <tags>
        <tag>ironman2023</tag>
        <tag>Qiita</tag>
        <tag>日本求職</tag>
        <tag>interview</tag>
      </tags>
  </entry>
  <entry>
    <title>[2023 15th鐵人賽] Day16 - Node.js 是什麼？為什麼大家都在使用？</title>
    <url>/ironman-2023-day-16/</url>
    <content><![CDATA[<blockquote>
<p>原文連結：<span class="exturl" data-url="aHR0cHM6Ly9xaWl0YS5jb20vbm9uX2NhbC9pdGVtcy9hOGZlZTBiN2FkOTZlNjc3MTNlYg==">Node.jsとはなにか？なぜみんな使っているのか？ - Qiita<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
<hr>
<p>這篇文章的目的，主要是為了解答以下疑問：</p>
<p>「我們在學習 JavaScript 時，總是以已經瞭解 Node.js 為前提。但 Node.js 不是 Web Server 嗎？為什麼必須安裝？又為什麼大家都在使用呢？」</p>
<span id="more"></span>

<h2 id="基礎：JavaScript-的特點"><a href="#基礎：JavaScript-的特點" class="headerlink" title="基礎：JavaScript 的特點"></a>基礎：JavaScript 的特點</h2><p>首先，必須瞭解 JavaScript 與其他程式語言的差別。</p>
<p><strong>JavaScript</strong> 是一種在 Chrome 或 Firefox 等「<strong>瀏覽器上</strong>」運行的程式語言；而一般的程式語言，例如 <strong>Python</strong> 和 <strong>Ruby</strong>，通常是在「<strong>電腦上</strong>」運行。<code>[註1]</code></p>
<p><img src="https://imgur.com/6eP6NKJ.png"></p>
<p>執行環境的區別，在於<strong>是否能夠訪問 OS（作業系統）的功能</strong>。</p>
<p>「作業系統的功能」指的是檔案讀寫、以及網路通信等功能。在電腦上運行的應用程式（包括 Python 和 Ruby 等語言）就可以處理這些功能。<code>[註2]</code></p>
<p><img src="https://i.imgur.com/M1CR0Eg.png"></p>
<p>然而，如果在瀏覽器上運行的程式（JavaScript），擁有作業系統的功能權限，這將存在安全風險。<code>[註3]</code> 舉例來說，只要進到某個網站，就可能被人未經允許讀寫電腦上的檔案，或刪除部分檔案內容，這會是很嚴重的問題。 <code>[註4]</code></p>
<p>也因為如此，在瀏覽器上運行的 JavaScript，被設計成沒有權限使用作業系統的功能。</p>
<p>但如果完全沒有權限，還是會有些不便，因此瀏覽器會限制性允許 JavaScript 請求作業系統的功能權限。<code>[註5]</code> 近年來，瀏覽器也允許 JavaScript 對相機和麥克風的權限，這讓在瀏覽器上進行網路會議變得更加方便。</p>
<p><img src="https://i.imgur.com/6M0deBc.png"></p>
<blockquote>
<p>關於前端與瀏覽器之間的關係，推薦閱讀 Huli 撰寫的資安系列文章：<span class="exturl" data-url="aHR0cHM6Ly9pdGhlbHAuaXRob21lLmNvbS50dy9hcnRpY2xlcy8xMDMxNDEyNQ==">[Day2] 瀏覽器的安全模型<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
<h2 id="Node-js-是什麼？"><a href="#Node-js-是什麼？" class="headerlink" title="Node.js 是什麼？"></a>Node.js 是什麼？</h2><p>「<strong>Node.js</strong>」是能夠讓 JavaScript 在電腦上運行的工具，就像 Python 或 Ruby 一樣，而不只受限於瀏覽器環境。</p>
<p><img src="https://i.imgur.com/bwSylYh.png"></p>
<p>儘管受到許多誤解，但 Node.js 既不是 Web Server，也不是像 Rails 或 Django 的 Web 框架，而是 <strong>JavaScript 的執行環境</strong>。</p>
<p>在 Windows 安裝 Python 時，會得到「python.exe」；同樣地，在安裝 Node.js 時，也會得到「node.exe」。<br>就像「python.exe」是用於執行 Python 程式碼的應用程式，「node.exe」是用於執行 JavaScript 程式碼的應用程式 = JavaScript 的執行環境。</p>
<p>在 Node.js 中，可編寫 JavaScript 程式來請求作業系統的功能權限。<code>[註6]</code> 意即能夠處理在瀏覽器上無法執行的操作，像是自由讀寫檔案，以及網路通信等作業系統功能。</p>
<p><img src="https://i.imgur.com/hu0sgZY.png"></p>
<p>因此，Node.js 能夠像使用 Python 或 Ruby 一樣建立 Web 應用程式，但 Node.js 也可用於各種其他用途。</p>
<h3 id="Node-js-是伺服器端的-JavaScript-執行環境嗎？"><a href="#Node-js-是伺服器端的-JavaScript-執行環境嗎？" class="headerlink" title="Node.js 是伺服器端的 JavaScript 執行環境嗎？"></a>Node.js 是伺服器端的 JavaScript 執行環境嗎？</h3><p>在與 Node.js 相關的文章中，經常會看到 Node.js 被描述為「伺服器端的 JavaScript 執行環境」。這是 Node.js 的設計目標，是為了<strong>構築能夠處理大量同時連線的網路應用程式</strong>，而被設計出的 JavaScript 環境。<code>[註7]</code></p>
<p>因為具備「可使用 JavaScript 建立 Web 應用程式（Web Server）」的特點，因此經常被描述「Node.js 是伺服器端的 JavaScript 執行環境」。</p>
<p>而在當今的 Web 業界中，Node.js 也廣泛用於<strong>客戶端 JavaScript 的開發環境</strong>。此外，Node.js 也經常用於在本地端電腦上開發「在瀏覽器中運行的 JavaScript」的環境。</p>
<p>這是因為開發者發現，Node.js 具備「能夠在電腦（作業系統）上運行 JavaScript」的特點，因此出現越來越多方便客戶端 JavaScript 進行開發的 Library，這部分稍後也會詳細說明。</p>
<p><strong>不論其歷史發展如何，目前實際的情況是「Node.js 作為伺服器端的 JavaScript 執行環境，也應用於客戶端 JavaScript 的開發環境」。</strong></p>
<h2 id="npm-是什麼？"><a href="#npm-是什麼？" class="headerlink" title="npm 是什麼？"></a>npm 是什麼？</h2><p>稍微偏離主題，這裡先解釋一下什麼是 <strong>npm</strong>。</p>
<p>npm 是 Node.js 的套件管理工具。大致如同 Python 中的 pip、Ruby 中的 gem（RubyGems）、Debian 中的 apt、Mac 中的 Homebrew、Rust 中的 cargo。</p>
<p>偶爾會出現 <strong>yarn</strong>，但不必擔心，yarn 基本上可以和 npm 做相同的事情。</p>
<p>這裡的「套件」是指 Library 或 Framework，例如 Vue、React、webpack、jQuery 等等。如果想要在 Node.js 中使用某個 Library，可透過 npm 來安裝，而不需手動下載 js 檔案，並加上 <code>&lt;script src=&quot;xxx.js&quot;&gt;&lt;/script&gt;</code> 標籤。</p>
<h2 id="為什麼大家都在使用-Node-js？"><a href="#為什麼大家都在使用-Node-js？" class="headerlink" title="為什麼大家都在使用 Node.js？"></a>為什麼大家都在使用 Node.js？</h2><p>Node.js 解放 JavaScript 的束縛，使其能夠做到許多事情。</p>
<p>雖然有各式各樣的用途，但目前使用 Node.js 的人，基本上依照目的可歸納為以下三種（至少筆者是這麼認為）：</p>
<ol>
<li>想要使用<strong>新的 JavaScript 或 TypeScript 規範</strong>來編寫客戶端程式</li>
<li>想要建立 <strong>Web 應用程式</strong></li>
<li>想要建立 <strong>Mobile/Desktop 應用程式</strong></li>
</ol>
<h3 id="目標-1-想要使用新的-JavaScript-或-TypeScript-規範來編寫客戶端程式"><a href="#目標-1-想要使用新的-JavaScript-或-TypeScript-規範來編寫客戶端程式" class="headerlink" title="目標 1.  想要使用新的 JavaScript 或 TypeScript 規範來編寫客戶端程式"></a>目標 1.  想要使用新的 JavaScript 或 TypeScript 規範來編寫客戶端程式</h3><p><img src="https://i.imgur.com/fEvrqwL.png"></p>
<p>JavaScript 的新規範（ES2015以後），有關詳細內容與發展的介紹已經隨處可見，因此這裡只會簡短說明。對於 TypeScript，這裡將不會進行探討。</p>
<p>JavaScript每年都會更新規範，不斷加入新功能。特別是在 <strong>ES2015</strong> 版本中，加入許多以往沒有的實用功能。</p>
<p>然而，即使JavaScript更新了規範，也可能發生現有的瀏覽器無法跟上這些規範的問題。為了解決這個問題，出現一種將「以新規範編寫的 JavaScript 檔案」自動轉換（編譯）為「舊規範（ES5）的 JavaScript 檔案」的方法。</p>
<p>目前的主流，用來執行轉換的工具（編譯器）是 <strong>Babel</strong>，而經常用來執行的<strong>環境</strong>則是選擇 <strong>Node.js</strong>。</p>
<h3 id="目標-2-想要建立-Web-應用程式"><a href="#目標-2-想要建立-Web-應用程式" class="headerlink" title="目標 2. 想要建立 Web 應用程式"></a>目標 2. 想要建立 Web 應用程式</h3><p>就像 Ruby + Rails 或 Python + Django 等工具一樣，同樣能使用 Node.js 建立 <strong>Web 應用程式</strong>。</p>
<p>以下是對應的項目列表：</p>
<table>
<thead>
<tr>
<th>執行環境</th>
<th>語言</th>
<th>Web 框架</th>
</tr>
</thead>
<tbody><tr>
<td>Ruby</td>
<td>Ruby</td>
<td>Ruby on Rails 等</td>
</tr>
<tr>
<td>Python</td>
<td>Python</td>
<td>Django 等</td>
</tr>
<tr>
<td>Node.js</td>
<td>JavaScript</td>
<td>Express, Next.js 等</td>
</tr>
</tbody></table>
<p>此外，Node.js 的特點之一是「Node.js 能夠擔任 Web Server 的角色」。（以 Node.js 的設計目的來說，主要就是作為 Web Server）</p>
<p>最初 Node.js 的設計，是用來<strong>構建能夠處理大量同時連接的網路應用程式</strong>，因此同時擔任 Web Server 的功能，能夠有效率的處理請求。</p>
<p>總歸而言，不同於 <strong>Apache</strong> 或 <strong>Nginx</strong> 這類常規的 Web Server，Node.js  能直接接收並處理 HTTP 請求。（實際上，單獨使用 Node.js 作為 Web Server 功能稍嫌不足，因此通常會搭配 Apache 或 Nginx 作為反向代理。）</p>
<h3 id="目標-3-想要建立-Mobile-Desktop-應用程式"><a href="#目標-3-想要建立-Mobile-Desktop-應用程式" class="headerlink" title="目標 3.  想要建立 Mobile/Desktop 應用程式"></a><strong>目標 3.</strong>  想要建立 Mobile/Desktop 應用程式</h3><p>Node.js 可用於開發 <strong>Mobile 或 Desktop 應用程式</strong>。Mobile 應用程式通常會使用 <strong>React Native</strong>，而 Desktop 應用程式，則較多使用 <strong>Electron</strong>。因為沒有使用過 React Native 所以知識有限，這部分只介紹 Electron，還請見諒。</p>
<p><strong>Electron</strong> 是個使用 <strong>JavaScript + HTML + CSS</strong> 開發 Desktop 應用程式的框架。</p>
<p><strong>Electron</strong></p>
<p><span class="exturl" data-url="aHR0cHM6Ly93d3cuZWxlY3Ryb25qcy5vcmcv">https://www.electronjs.org/<i class="fa fa-external-link-alt"></i></span></p>
<p><img src="https://i.imgur.com/r9NnL0p.png"></p>
<p>JavaScript 最初是為網頁設計的語言，常用於處理使用者介面（UI），擁有許多經過洗鍊且成熟的 Library 和 Framework。利用這些資源，可以像 Web 網站一樣，快速建立使用者界面，這是一大優勢。</p>
<p>由 Electron ****建立的應用程式，具備作業系統的功能權限，與瀏覽器中的 JavaScript 相比，能夠更廣泛的應用。此外，Electron 具備跨平台開發（Cross-Platform）的特性，能夠以相同的程式碼，在 Windows、Mac 和 Linux 建立應用程式。</p>
<p>許多像是 Visual Studio Code、Slack、Discord、Twitch、Skype 等的 Desktop 應用程式，均是使用 <strong>Electron</strong> 開發。</p>
<h3 id="目標-4-其他"><a href="#目標-4-其他" class="headerlink" title="目標 4. 其他"></a>目標 4. 其他</h3><p>此外，Node.js 也用於各種用途，例如<strong>打包網頁的 assets</strong>（webpack），<strong>將 Sass 轉換為 CSS</strong>（node-sass），使用<strong>測試工具</strong>（Jest）和<strong>程式碼規範檢查工具</strong>（ESLint），在本地端建立<strong>開發用的簡易 Web Server</strong>（webpack-dev-server），以及<strong>建置靜態網頁</strong>（Gatsby）等功能。</p>
<h2 id="最後"><a href="#最後" class="headerlink" title="最後"></a>最後</h2><p>Node.js 將會像其他程式語言一樣，為 JavaScript 帶來巨大的潛力。（這也歸功於 V8 JavaScript 引擎的貢獻，由於話題可能變得復雜，因此本文避免提及相關內容）</p>
<p>正如人們所言，與其他語言相比，JavaScript 確實有些設計上的不足（部分原因在於其起源），即使在相同條件下也會有所質疑⋯⋯但我能理解這些看法。然而，沒有哪種程式語言能夠像 JavaScript 一樣，擁有如此眾多的年輕用戶，包含 Library 等在內，以驚人的速度發展，趨勢變化莫測。</p>
<p>jQuery 等技術現今已被當作歷史文物，但這些卻是在 Rails 和 Django 之後才誕生的（雖然比較起來有點微妙），發展節奏極為快速。我認為，在這個時代誕生，能夠參與並享受像這樣激動人心的 JavaScript 演進浪潮，是非常令人興奮且愉快的事情。</p>
<p>最後，如開頭所述，希望能在本文中解答一些常見疑問，像是「Node.js 不是 Web Server 嗎？只是想用 ES2015 編寫程式碼，為什麼必須安裝呢？」等問題。</p>
<hr>
<p><code>[註1]</code>: 原本應該用「作業系統上」表達，為了更簡單明瞭，使用「電腦上」的表達方式。<del>其實沒有這回事，單純是因為之前製作的圖中寫著「電腦」</del><br><code>[註2]</code>: 近年來，由於作業系統的安全性有所提升，即使是安裝的應用程式，也無法任意操作系統的所有功能，當應用程式嘗試使用特定功能時，通常需要經過使用者授權。<br><code>[註3]</code>: ActiveX 這類的技術能夠實現這一點。<br><code>[註4]</code>: 雖然與 JavaScript 無關，但我想起很久以前某個遊戲更新，導致包括作業系統等無關數據也被刪除的 HDD BURST 事件，瞭解到程式在某種程度上是能夠任意操作的。<br><code>[註5]</code>: 瀏覽器是經由安裝的應用程式，因此當然有作業系統的功能權限。<br><code>[註6]</code>: 我曾寫過「JavaScript 有操作作業系統的功能權限」，但這其實是很微妙的表達方式，要實際獲得操作系統的功能權限，必須透過 C++ 編寫 Node.js 的擴充功能，通常會提供 Standard Library 或 Third party Library 使用。<br><code>[註7]</code>: 有一種名為 CommonJS（ServerJS）用於伺服器端的規範，設計在瀏覽器之外的環境中運行 JavaScript，Node.js 從初期就遵循此規範。</p>
<blockquote>
<p>15th鐵人賽目錄傳送門：<span class="exturl" data-url="aHR0cHM6Ly9pdGhlbHAuaXRob21lLmNvbS50dy91c2Vycy8yMDEzNTU1OC9pcm9ubWFuLzYyOTA=">https://ithelp.ithome.com.tw/users/20135558/ironman/6290<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
]]></content>
      <categories>
        <category>2023鐵人賽</category>
        <category>Front-End</category>
      </categories>
      <tags>
        <tag>Node.js</tag>
        <tag>ironman2023</tag>
        <tag>Qiita</tag>
      </tags>
  </entry>
  <entry>
    <title>[2023 15th鐵人賽] Day17 - 告別 jQuery：現代開發不可或缺的 JavaScript 方法</title>
    <url>/ironman-2023-day-17/</url>
    <content><![CDATA[<blockquote>
<p>原文連結：<span class="exturl" data-url="aHR0cHM6Ly9xaWl0YS5jb20vZmlndWVpcmVkb2x1aXovaXRlbXMvMGU1MWMxYWVjNzkwZjA1M2ZkOWM=">jQueryへの別れ：現代的な開発のための必須JavaScriptメソッド - Qiita<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
<p>有時在工作上，需要維護一些比較早期的專案，或開發小型不需使用到框架的案子，jQuery 提供的功能與便利性，通常能快速滿足各種需求。但自從 ES6 的出現，引入箭頭函數、模組化、非同步操作等語法功能，考慮到性能優化、行動裝置開發、可維護性等因素，原生 JavaScript 已逐漸取代 jQuery 。</p>
<p>透過這篇文章，除了複習 jQuery 中常用的方法，同時對照原生 JavaScript 對應的方法，以達成相同目的。</p>
<span id="more"></span>

<p>以下正文開始。</p>
<hr>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>長期以來，我一直與遺留程式碼（Legacy Code）共事，但 jQuery 的重要性仍是經常被討論的話題之一。雖然這個 Library 本身依舊方便，完美地滿足不同時代的需求。<br>現今大多在談論的是 ES2023，但過去 jQuery 所涵蓋的大部分功能，早已被納入 2015 年發布的 ES6 版本中。</p>
<p>ES6 的標準已經得到廣泛支援，支援度達到 96％（來源：<span class="exturl" data-url="aHR0cDovL2Nhbml1c2UuY29tLw==">caniuse.com<i class="fa fa-external-link-alt"></i></span>）。因此，針對像是元素選擇、樣式設定、動畫和數據取得等的基本任務，現在或許是重新審視使用這個 Library 的好時機。</p>
<p>以下主題將舉出一些標準的 jQuery 使用模式，以及相對應的原生 JavaScript 方法，希望能作為參考資料。</p>
<h2 id="元素選取"><a href="#元素選取" class="headerlink" title="元素選取"></a>元素選取</h2><p>透過 CSS Selector，能夠選取一個或多個 DOM 元素。</p>
<p>在 JavaScript 中，有許多方法可以用於選擇元素，其中一個常用的方法是 Query Selector。透過 Query Selector，可基於 CSS Selector 模式選取 Document 中的特定元素。</p>
<pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token comment">// jQuery 和原生 JavaScript: 選擇所有具有 .item 的實例</span>
<span class="token function">$</span><span class="token punctuation">(</span><span class="token string">".item"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">".item"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>上方程式碼，展示使用 jQuery 和原生 JavaScript 方法，選取具有 <code>.item</code> 類別的所有元素。在jQuery 中，使用 <code>$</code> 函數並將 CSS Selector 作為參數。在原生 JavaScript 中，使用 <code>document.querySelectorAll</code> 方法，返回與指定 Selector 匹配的元素集合。</p>
<p>以下是使用不同 Selector 來選取元素的範例：</p>
<pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token comment">// 基於類別查詢</span>
<span class="token function">$</span><span class="token punctuation">(</span><span class="token string">".item"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">".item"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
document<span class="token punctuation">.</span><span class="token function">getElementsByClassName</span><span class="token punctuation">(</span><span class="token string">"item"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 基於 ID 查詢</span>
<span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#item"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">"#item"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"item"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 基於屬性查詢</span>
<span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'a[target=_blank]'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">'a[target=_blank]'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>上述範例中，透過不同的 Selector，基於類別、ID 和屬性條件來選取元素。使用 jQuery 和原生 JavaScript 提供的方法，均得到相同的結果。</p>
<p>透過這些選取元素的技巧，能夠有效選取 DOM 中所需的元素，並進行更進一步操作和互動。</p>
<h2 id="對元素執行函數的方法"><a href="#對元素執行函數的方法" class="headerlink" title="對元素執行函數的方法"></a>對元素執行函數的方法</h2><p>在 jQuery 中，可以很容易對選取的所有元素執行某個函數，但原生 JavaScript 的步驟則略有不同。在原生 JavaScript 中，為了迭代處理 <code>NodeList</code> 中的元素，需要使用 <code>NodeList.forEach()</code> 方法。</p>
<p>以下程式碼，是使用 jQuery 和原生 JavaScript 來隱藏元素的範例：</p>
<pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token comment">// jQuery: 隱藏所有 .item 的實例</span>
<span class="token function">$</span><span class="token punctuation">(</span><span class="token string">".item"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hide</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// JavaScript: 迭代處理 NodeList 中的元素，隱藏所有 .item 的實例</span>
document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">".item"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  item<span class="token punctuation">.</span>style<span class="token punctuation">.</span>display <span class="token operator">=</span> <span class="token string">"none"</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>上述程式碼中，在 jQuery 使用 <code>hide()</code> 方法來隱藏所有 <code>.item</code> 的實例。另一方面，在原生 JavaScript 使用 <code>document.querySelectorAll(&quot;.item&quot;)</code> 來選取所有 <code>.item</code> 的實例，接著使用<code>NodeList.forEach()</code> 方法，在每個元素加上隱藏的樣式。</p>
<p>在原生 JavaScript 中，使用 <code>NodeList.forEach()</code> 方法，可以輕鬆對 NodeList 中的元素執行函數。透過這個步驟，即使是原生 JavaScript 也能對元素執行操作和處理。</p>
<h2 id="選取元素內的元素的方法"><a href="#選取元素內的元素的方法" class="headerlink" title="選取元素內的元素的方法"></a>選取元素內的元素的方法</h2><p>當需要在特定範圍內選取元素時，在 jQuery 通常會使用 <code>.find()</code> 方法；而在 JavaScript 則可以使用 <code>querySelector</code> 或 <code>querySelectorAll</code> 方法選取元素的子元素，以達到相同的效果。</p>
<p>以下程式碼，示範如何在 jQuery 和 JavaScript 中選取 <code>.container</code> 內的第一個 <code>.item</code> 元素。在 jQuery 會先將 <code>.container</code> 元素儲存在變數中，接著使用 <code>.find(&quot;.item&quot;)</code> 來查找子元素。在 JavaScript 則是使用 <code>document.querySelector(&quot;.container&quot;)</code> 選取 <code>.container</code> 元素，接著使用 <code>querySelector(&quot;.item&quot;)</code> 來查找子元素。</p>
<pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token comment">// jQuery: 選取 .container 內的第一個 .item</span>
<span class="token keyword">var</span> container <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">".container"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
container<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">".item"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// JavaScript: 選取 .container 內的第一個 .item</span>
<span class="token keyword">var</span> container <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">".container"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
container<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">".item"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// JavaScript: 選取 .container 內的所有 .link</span>
<span class="token keyword">var</span> container <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">".container"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
container<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">".link"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="父元素和相鄰元素的遍歷"><a href="#父元素和相鄰元素的遍歷" class="headerlink" title="父元素和相鄰元素的遍歷"></a>父元素和相鄰元素的遍歷</h2><p>接著介紹如何根據元素的階層結構，從目標元素選取父元素或相鄰元素。在 JavaScript 中，可以使用以下屬性：<code>nextElementSibling</code>、<code>previousElementSibling</code> 和 <code>parentElement</code>。</p>
<p>以下程式碼，示範如何使用 jQuery 和 JavaScript 來選取元素的相鄰元素或父元素。</p>
<pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token comment">// jQuery: 選取 .item 的下一個元素、前一個元素、父元素</span>
<span class="token function">$</span><span class="token punctuation">(</span><span class="token string">".item"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">$</span><span class="token punctuation">(</span><span class="token string">".item"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">prev</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">$</span><span class="token punctuation">(</span><span class="token string">".item"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">parent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// JavaScript: 選取 .item 的下一個元素、前一個元素、父元素</span>
<span class="token keyword">var</span> item <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">".item"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
item<span class="token punctuation">.</span>nextElementSibling<span class="token punctuation">;</span>
item<span class="token punctuation">.</span>previousElementSibling<span class="token punctuation">;</span>
item<span class="token punctuation">.</span>parentElement<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>這個範例，是以具有 <code>.item</code>  類別的元素作為目標。在 jQuery 中，使用 <code>.next()</code> 方法選取下一個元素，使用 <code>.prev()</code> 方法選取前一個元素，使用 <code>.parent()</code> 方法選取父元素。在 JavaScript 中，使用 <code>nextElementSibling</code> 屬性選取下一個元素，使用 <code>previousElementSibling</code> 屬性選取前一個元素，使用 <code>parentElement</code> 屬性選取父元素。</p>
<p>透過這些方法，使元素之間的遍歷成為可能，實現靈活的 DOM 操作。</p>
<h2 id="事件處理"><a href="#事件處理" class="headerlink" title="事件處理"></a>事件處理</h2><p>在 jQuery 可使用 <code>.on()</code>、<code>.bind()</code>、<code>.live()</code>、<code>.click()</code> 等多種方法來監聽事件，而在 JavaScript 則使用 <code>.addEventListener()</code> 方法來實現相同的功能。</p>
<pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token comment">// jQuery: 處理 click、moustenter 和 keyup 事件</span>
<span class="token function">$</span><span class="token punctuation">(</span><span class="token string">".button"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">/* 處理 click 事件 */</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">$</span><span class="token punctuation">(</span><span class="token string">".button"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">mouseenter</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">/* 處理 mouseenter 事件 */</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">$</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">keyup</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">/* 處理 keyup 事件 */</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// JavaScript: 處理 click、moustenter 和 keyup 事件</span>
document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">".button"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span> <span class="token comment">/* ... */</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">".button"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"mouseenter"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span> <span class="token comment">/* ... */</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"keyup"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span> <span class="token comment">/* ... */</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="Click-事件"><a href="#Click-事件" class="headerlink" title="Click 事件"></a>Click 事件</h2><p>使用 jQuery 的 <code>.on()</code> 方法，可以為動態新增的元素註冊事件處理（EventHandler）。在 JavaScript 中，想要實現事件委派（Delegation），可透過事件冒泡（Bubbling）在父元素上捕獲事件（Capture），並判別目標元素。</p>
<pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token comment">// jQuery: 處理 .container 内 .active 元素的 click 事件</span>
<span class="token function">$</span><span class="token punctuation">(</span><span class="token string">".container"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">,</span> <span class="token string">".active"</span><span class="token punctuation">,</span> handleClick<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// JavaScript: 處理 .container 内 .active 元素的 click 事件</span>
document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">".container"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>event<span class="token punctuation">.</span>target<span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span><span class="token string">".active"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token function">handleClick</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="動態新增元素的監聽事件"><a href="#動態新增元素的監聽事件" class="headerlink" title="動態新增元素的監聽事件"></a>動態新增元素的監聽事件</h2><p>使用 jQuery 的 <code>.on()</code> 方法，可以為動態新增到 DOM 的元素進行事件處理。即使不使用 jQuery，也可以在將元素新增到 DOM 時，將事件處理新增到元素，以實現相同的功能。</p>
<pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token comment">// jQuery: 處理動態新增的 .active 元素的 click 事件</span>
<span class="token function">$</span><span class="token punctuation">(</span><span class="token string">".search-container"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">,</span> <span class="token string">".active"</span><span class="token punctuation">,</span> handleClick<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// JavaScript: 建立元素，放入 DOM 並加上 eventListener</span>
<span class="token keyword">var</span> searchElement <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">".search-container"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>searchElement<span class="token punctuation">)</span><span class="token punctuation">;</span>
searchElement<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">,</span> handleClick<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="觸發和建立事件"><a href="#觸發和建立事件" class="headerlink" title="觸發和建立事件"></a>觸發和建立事件</h2><p>觸發和建立事件，可使用 JavaScript 的 <code>dispatchEvent()</code> 方法。<code>dispatchEvent()</code> 方法可在任何元素上調用，並且以 <code>Event</code> 作為第一個參數。</p>
<pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token comment">// jQuery: 在 document 以及 .item 上觸發 myEvent</span>
<span class="token function">$</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">trigger</span><span class="token punctuation">(</span><span class="token string">"myEvent"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">$</span><span class="token punctuation">(</span><span class="token string">".item"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">trigger</span><span class="token punctuation">(</span><span class="token string">"myEvent"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// JavaScript: 建立 myEvent 並 dispatch event</span>
document<span class="token punctuation">.</span><span class="token function">dispatchEvent</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Event</span><span class="token punctuation">(</span><span class="token string">"myEvent"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">".item"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">dispatchEvent</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Event</span><span class="token punctuation">(</span><span class="token string">"myEvent"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="元素的樣式設定"><a href="#元素的樣式設定" class="headerlink" title="元素的樣式設定"></a>元素的樣式設定</h2><p>在 jQuery 中，要改變元素的 Inline CSS，可使用 <code>.css()</code> 方法，而在 JavaScript 中，可使用 <code>.style</code> 將值分配給不同的屬性，以實現相同的效果。</p>
<pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token comment">// jQuery: 將 .item 的文字顏色設為 #000</span>
<span class="token function">$</span><span class="token punctuation">(</span><span class="token string">".item"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">"color"</span><span class="token punctuation">,</span> <span class="token string">"#000"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// JavaScript: 將第一個 .item 的文字顏色設為 #000</span>
document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">".item"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>style<span class="token punctuation">.</span>color <span class="token operator">=</span> <span class="token string">"#000"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>若是想要設定多個屬性的情況：</p>
<pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token comment">// jQuery: 設定多個樣式</span>
<span class="token function">$</span><span class="token punctuation">(</span><span class="token string">".item"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
  <span class="token string">"color"</span><span class="token operator">:</span> <span class="token string">"#000"</span><span class="token punctuation">,</span>
  <span class="token string">"background-color"</span><span class="token operator">:</span> <span class="token string">"red"</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// JavaScript: 設定 color 為 #000，background 為 red</span>
<span class="token keyword">var</span> item <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">".item"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
item<span class="token punctuation">.</span>style<span class="token punctuation">.</span>color <span class="token operator">=</span> <span class="token string">"#000"</span><span class="token punctuation">;</span>
item<span class="token punctuation">.</span>style<span class="token punctuation">.</span>backgroundColor <span class="token operator">=</span> <span class="token string">"red"</span><span class="token punctuation">;</span>

<span class="token comment">// 一次設定所有樣式（覆蓋現有樣式）</span>
item<span class="token punctuation">.</span>style<span class="token punctuation">.</span>cssText <span class="token operator">=</span> <span class="token string">"color: #000; background-color: red"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="fadeIn-與-fadeOut"><a href="#fadeIn-與-fadeOut" class="headerlink" title="fadeIn() 與 fadeOut()"></a>fadeIn() 與 fadeOut()</h2><p>在 jQuery 中使用 <code>.fadeIn()</code> 方法，能使具有 <code>.item</code> 類別的元素實現淡入效果。</p>
<pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token comment">// jQuery: 將 .item 淡入</span>
<span class="token function">$</span><span class="token punctuation">(</span><span class="token string">".item"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fadeIn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>為了在 JavaScript 中實現相同效果，這裡建立一個名為 <code>fadeIn()</code> 的函數，該函數以元素作為參數，透過修改元素樣式來實現淡入效果。</p>
<p>在函數中，設定 <code>transition</code> 屬性，並將 <code>opacity</code> 屬性改為 <code>1</code> 使元素可見，透過動態調整元素的不透明度，實現淡入效果。</p>
<pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token comment">// JavaScript: 透過樣式實現 .item 淡入效果</span>
<span class="token keyword">function</span> <span class="token function">fadeIn</span><span class="token punctuation">(</span><span class="token parameter">element</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  element<span class="token punctuation">.</span>style<span class="token punctuation">.</span>transition <span class="token operator">=</span> <span class="token string">"opacity 1s"</span><span class="token punctuation">;</span>
  element<span class="token punctuation">.</span>style<span class="token punctuation">.</span>opacity <span class="token operator">=</span> <span class="token string">"1"</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token function">fadeIn</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">".item"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="hide-與-show"><a href="#hide-與-show" class="headerlink" title="hide() 與 show()"></a>hide() 與 show()</h2><p><code>.hide()</code> 和 <code>.show()</code>，可透過設定元素的 <code>display</code> 屬性為 <code>none</code> 和 <code>block</code> 的方法來實現。</p>
<pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token comment">// jQuery: 隱藏或顯示元素</span>
<span class="token function">$</span><span class="token punctuation">(</span><span class="token string">".item"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hide</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">$</span><span class="token punctuation">(</span><span class="token string">".item"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// JavaScript: 隱藏或顯示元素（修改 display 屬性）</span>
document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">".item"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>style<span class="token punctuation">.</span>display <span class="token operator">=</span> <span class="token string">"none"</span><span class="token punctuation">;</span>
document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">".item"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>style<span class="token punctuation">.</span>display <span class="token operator">=</span> <span class="token string">"block"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="等待-DOM-完成加載"><a href="#等待-DOM-完成加載" class="headerlink" title="等待 DOM 完成加載"></a>等待 DOM 完成加載</h2><p>若需要等待 DOM 完全加載的情況（例如：要附加事件到 DOM 上的對象時），通常會使用 jQuery 的  <code>$(document).ready()</code> 或簡寫 <code>$()</code>。而在 JavaScript 中，可透過監聽 <code>DOMContentLoaded</code> 事件來實現相同的功能。</p>
<pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token comment">// jQuery: 在 DOM 完全加載後執行某些操作</span>
<span class="token function">$</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ready</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">/* todo... */</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// JavaScript: 在 DOM 完全加載後執行某些操作</span>
document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"DOMContentLoaded"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token comment">/* todo... */</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="操作類別"><a href="#操作類別" class="headerlink" title="操作類別"></a>操作類別</h2><p>在 jQuery 中，可使用 <code>.addClass()</code>、<code>.removeClass()</code>、<code>.toggleClass()</code> 等方法來操作類別。在 JavaScript 中，可使用 <code>classList</code> 屬性來實現相同的功能。</p>
<pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token comment">// jQuery: 新增、移除、切換 "active" 類別</span>
<span class="token function">$</span><span class="token punctuation">(</span><span class="token string">".item"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addClass</span><span class="token punctuation">(</span><span class="token string">"active"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">$</span><span class="token punctuation">(</span><span class="token string">".item"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">removeClass</span><span class="token punctuation">(</span><span class="token string">"active"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">$</span><span class="token punctuation">(</span><span class="token string">".item"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toggleClass</span><span class="token punctuation">(</span><span class="token string">"active"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// JavaScript: 新增、移除、切換 "active" 類別</span>
<span class="token keyword">var</span> item <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">".item"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
item<span class="token punctuation">.</span>classList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"active"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
item<span class="token punctuation">.</span>classList<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token string">"active"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
item<span class="token punctuation">.</span>classList<span class="token punctuation">.</span><span class="token function">toggle</span><span class="token punctuation">(</span><span class="token string">"active"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>若要新增或移除多個類別的情況：</p>
<pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token comment">// 新增或移除 "active" 和 "highlighted" 類別</span>
<span class="token keyword">var</span> item <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">".item"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
item<span class="token punctuation">.</span>classList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"active"</span><span class="token punctuation">,</span> <span class="token string">"highlighted"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
item<span class="token punctuation">.</span>classList<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token string">"active"</span><span class="token punctuation">,</span> <span class="token string">"highlighted"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>當需要切換兩個不同類別時，可透過 <code>classList</code> 屬性並調用 <code>.replace()</code> 方法，將一個類別替換為另一個類別。</p>
<pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token comment">// 刪除 "active1" 類別，並將其替換為 "active2"</span>
document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">".item"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>classList<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">"active1"</span><span class="token punctuation">,</span> <span class="token string">"active2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h2 id="檢查類別是否存在"><a href="#檢查類別是否存在" class="headerlink" title="檢查類別是否存在"></a>檢查類別是否存在</h2><p>若要檢查元素是否具有特定類別，可使用 JavaScript 的 <code>.classList.contains()</code> 方法。</p>
<pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token comment">// jQuery: 檢查 .item 是否具有 "active" 類別，並執行某些操作</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">".item"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hasClass</span><span class="token punctuation">(</span><span class="token string">"active"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// 執行某些操作...</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// JavaScript: 檢查 .item 是否具有 "active" 類別，並執行某些操作</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">".item"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>classList<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">"active"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// 執行某些操作...</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="透過-get-或-ajax-進行網路請求"><a href="#透過-get-或-ajax-進行網路請求" class="headerlink" title="透過 .get() 或 .ajax() 進行網路請求"></a>透過 .get() 或 .ajax() 進行網路請求</h2><p>在 jQuery 中，可使用 <code>.get()</code> 或 <code>.ajax()</code> 進行網路請求。在 JavaScript 中，可使用具有相似功能的 <code>fetch()</code>，這個方法將會返回 Promise 以處理 Response。</p>
<pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token comment">// jQuery: 進行 AJAX 請求</span>
$<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
    url<span class="token operator">:</span> <span class="token string">"data.json"</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">done</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// ...</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fail</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// 錯誤處理</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// JavaScript: 使用 fetch 進行網路請求</span>
<span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">"data.json"</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">data</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// 資料處理</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">error</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// 錯誤處理</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="建立元素"><a href="#建立元素" class="headerlink" title="建立元素"></a>建立元素</h2><p>若要在 JavaScript 動態建立元素，可使用 <code>document</code> 物件的 <code>createElement()</code> 方法。</p>
<pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token comment">// jQuery: 建立 div 元素和 span 元素</span>
<span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"&lt;div/>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"&lt;span/>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// JavaScript: 建立 div 元素和 span 元素</span>
document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"span"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="更新-DOM"><a href="#更新-DOM" class="headerlink" title="更新 DOM"></a>更新 DOM</h2><p>當需要更改元素的文字，或將新元素放到 DOM 時，通常會使用 <code>.innerHTML</code> 屬性，但這可能會面臨跨網站指令碼攻擊（XSS）的風險，以下介紹更安全的替代方法。</p>
<p>若要讀取或更新元素文字，可使用 <code>textContent</code> 屬性。</p>
<pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token comment">// jQuery: 更新 .item 的文字</span>
<span class="token function">$</span><span class="token punctuation">(</span><span class="token string">".item"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token string">"新しいテキスト"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 讀取 .item 的文字</span>
<span class="token function">$</span><span class="token punctuation">(</span><span class="token string">".item"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 返回 "新的文字"</span>

<span class="token comment">// JavaScript: 更新 .item 的文字</span>
document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">".item"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>textContent <span class="token operator">=</span> <span class="token string">"新しいテキスト"</span><span class="token punctuation">;</span>
<span class="token comment">// 讀取 .item 的文字</span>
document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">".item"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>textContent<span class="token punctuation">;</span> <span class="token comment">// 返回 "新的文字"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>若要將元素新增到 DOM，可透過 <code>appendChild</code>：</p>
<pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token comment">// jQuery: 建立 div 元素並新增到 .container</span>
<span class="token function">$</span><span class="token punctuation">(</span><span class="token string">".container"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"&lt;div/>"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// JavaScript: 建立 div 元素並新增到 .container</span>
<span class="token keyword">var</span> element <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">".container"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h2><p>以上只是概略介紹方法，未提及 jQuery 的負面影響，或轉移到原生 JavaScript 的好處。</p>
<p>可將本篇文章，作為轉移到原生 JavaScript 時的參考。此外，注意這並不是全面的指南，建議參考官方文件，並搭配這裡介紹的原生 JavaScript 方法。</p>
<h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><p>可閱讀 Mozilla Web 文檔，以更深入瞭解 JavaScript：</p>
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvamEvZG9jcy9XZWIvSmF2YVNjcmlwdA==">https://developer.mozilla.org/ja/docs/Web/JavaScript<i class="fa fa-external-link-alt"></i></span></li>
</ul>
<p>從 jQuery 轉移到原生 JavaScript 的相關資訊，可參考下方連結：</p>
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly95b3VtaWdodG5vdG5lZWRqcXVlcnkuY29tLw==">https://youmightnotneedjquery.com/<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly90b2JpYXNhaGxpbi5jb20vYmxvZy9tb3ZlLWZyb20tanF1ZXJ5LXRvLXZhbmlsbGEtamF2YXNjcmlwdC8=">https://tobiasahlin.com/blog/move-from-jquery-to-vanilla-javascript/<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9kZXYudG8vcmZvcm5hbC8tcmVwbGFjaW5nLWpxdWVyeS13aXRoLXZhbmlsbGEtamF2YXNjcmlwdC0xazJn">https://dev.to/rfornal/-replacing-jquery-with-vanilla-javascript-1k2g<i class="fa fa-external-link-alt"></i></span></li>
</ul>
<blockquote>
<p>15th鐵人賽目錄傳送門：<span class="exturl" data-url="aHR0cHM6Ly9pdGhlbHAuaXRob21lLmNvbS50dy91c2Vycy8yMDEzNTU1OC9pcm9ubWFuLzYyOTA=">https://ithelp.ithome.com.tw/users/20135558/ironman/6290<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
]]></content>
      <categories>
        <category>2023鐵人賽</category>
        <category>Front-End</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>jQuery</tag>
        <tag>ironman2023</tag>
        <tag>Qiita</tag>
      </tags>
  </entry>
  <entry>
    <title>[2023 15th鐵人賽] Day18 - 推薦給前端工程師的 Chrome 擴充功能</title>
    <url>/ironman-2023-day-18/</url>
    <content><![CDATA[<blockquote>
<p>原文連結：<span class="exturl" data-url="aHR0cHM6Ly9xaWl0YS5jb20vWVNhc2Fnby9pdGVtcy9lMjk4MDNmZjQ2MGYzYTVhNmRhND91dG1fc291cmNlPVFpaXRhJUUzJTgzJThCJUUzJTgzJUE1JUUzJTgzJUJDJUUzJTgyJUI5JnV0bV9jYW1wYWlnbj04MzVhZWZkNDg2LVFpaXRhX25ld3NsZXR0ZXJfNTc3XzA4XzAyJnV0bV9tZWRpdW09ZW1haWwmdXRtX3Rlcm09MF9lNDRmZWFhMDgxLTgzNWFlZmQ0ODYtNjI4MjA0NDk=">フロントエンドエンジニアにおすすめchrome拡張機能 - Qiita<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
<p>在閱讀 Qiita 時，發現有不少統整系列的文章，可能是對於某技術、指令、學習方法或書籍相關的總整理，例如：</p>
<ul>
<li>XXX 設計方法 OO 選</li>
<li>XXX 研修資料まとめ</li>
<li>XXX Top10</li>
</ul>
<p>這篇文章則是介紹六種 Chrome 擴充功能，對前端開發而言很實用的工具：</p>
<ul>
<li>UI Build Assistant</li>
<li>Responsive Viewer</li>
<li>Take Webpage Screenshots Entirely - FireShot</li>
<li>WhatFont</li>
<li>Talend API Tester - Free Edition</li>
<li>CSSViewer</li>
</ul>
<span id="more"></span>

<p>這幾項自己試用之後，也覺得蠻方便，或許之後開發有機會考慮使用，推薦實際安裝用看看！</p>
<p>那麼，以下正文開始。</p>
<hr>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>各位好，我是在都內從事軟體工程師的 <span class="exturl" data-url="aHR0cHM6Ly9xaWl0YS5jb20vWVNhc2Fnbw==">YSasago<i class="fa fa-external-link-alt"></i></span>，經常會使用 <span class="exturl" data-url="aHR0cHM6Ly93d3cuZ29vZ2xlLmNvbS9pbnRsL3poLVRXL2Nocm9tZS8=">Chrome<i class="fa fa-external-link-alt"></i></span> 瀏覽器來進行前端開發。<br>Chrome 擁有許多能夠協助開發的 <span class="exturl" data-url="aHR0cHM6Ly9jaHJvbWUuZ29vZ2xlLmNvbS93ZWJzdG9yZS9jYXRlZ29yeS9leHRlbnNpb25z">Chrome 擴充功能<i class="fa fa-external-link-alt"></i></span>，我想在本篇文章，介紹自己在前端開發時，常使用到的擴充功能。</p>
<h2 id="UI-Build-Assistant"><a href="#UI-Build-Assistant" class="headerlink" title="UI Build Assistant"></a><span class="exturl" data-url="aHR0cHM6Ly9jaHJvbWUuZ29vZ2xlLmNvbS93ZWJzdG9yZS9kZXRhaWwvdWktYnVpbGQtYXNzaXN0YW50L2NsYmhpZWFtYWpsYWtqb2Jjb2loZWtsYW9sZGNqaGpm">UI Build Assistant<i class="fa fa-external-link-alt"></i></span></h2><p>雖然 ICON 是 IT 大學，看起來蠻有趣的：</p>
<p><img src="https://hackmd.io/_uploads/ryO-NDdea.png"></p>
<p>但透過這個擴充功能，能夠一鍵將背景和線條著色，即可清楚看到佈局方式，方便進行 margin 邊距等樣式調整。</p>
<p><img src="https://i.imgur.com/PLhPIu0.png"></p>
<p>此外，作者<span class="exturl" data-url="aHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj1DWHJXNXJxUC1XWQ==">しまぶーさん<i class="fa fa-external-link-alt"></i></span> 的 YouTube 影片，對前端學習非常有幫助，我自己也經常作為參考。</p>
<h2 id="Responsive-Viewer"><a href="#Responsive-Viewer" class="headerlink" title="Responsive Viewer"></a><span class="exturl" data-url="aHR0cHM6Ly9jaHJvbWUuZ29vZ2xlLmNvbS93ZWJzdG9yZS9kZXRhaWwvcmVzcG9uc2l2ZS12aWV3ZXIvaW5tb3BlaWVwZ2Zsamtwa2lkY2xmZ2JnYm1mY2VubmI=">Responsive Viewer<i class="fa fa-external-link-alt"></i></span></h2><p>接下來，要介紹的是 <span class="exturl" data-url="aHR0cHM6Ly9jaHJvbWUuZ29vZ2xlLmNvbS93ZWJzdG9yZS9kZXRhaWwvcmVzcG9uc2l2ZS12aWV3ZXIvaW5tb3BlaWVwZ2Zsamtwa2lkY2xmZ2JnYm1mY2VubmI=">Responsive Viewer<i class="fa fa-external-link-alt"></i></span>。</p>
<p>使用這個擴充功能，可以一鍵檢視開發界面在不同大小下的呈現狀態。<br>在進行響應式設計時，經常在最後檢查時使用。</p>
<p><img src="https://i.imgur.com/ETuO6LN.png"></p>
<h2 id="Take-Webpage-Screenshots-Entirely-FireShot"><a href="#Take-Webpage-Screenshots-Entirely-FireShot" class="headerlink" title="Take Webpage Screenshots Entirely - FireShot"></a><span class="exturl" data-url="aHR0cHM6Ly9jaHJvbWUuZ29vZ2xlLmNvbS93ZWJzdG9yZS9kZXRhaWwvdGFrZS13ZWJwYWdlLXNjcmVlbnNob3RzL21jYnBibG9jZ21nZm5wampwcG5kamttZ2phb2dmY2Vn">Take Webpage Screenshots Entirely - FireShot<i class="fa fa-external-link-alt"></i></span></h2><p><span class="exturl" data-url="aHR0cHM6Ly9jaHJvbWUuZ29vZ2xlLmNvbS93ZWJzdG9yZS9kZXRhaWwvdGFrZS13ZWJwYWdlLXNjcmVlbnNob3RzL21jYnBibG9jZ21nZm5wampwcG5kamttZ2phb2dmY2Vn">FireShot<i class="fa fa-external-link-alt"></i></span> 是能夠輕鬆截取網頁截圖的擴充功能，對自己來說也是使用率最高的。<br>因為可以輕鬆截取整個頁面，經常會在請別人 Review 開發內容時使用。</p>
<p><img src="https://hackmd.io/_uploads/SkmKVPugp.png"></p>
<h2 id="WhatFont"><a href="#WhatFont" class="headerlink" title="WhatFont"></a><span class="exturl" data-url="aHR0cHM6Ly9jaHJvbWUuZ29vZ2xlLmNvbS93ZWJzdG9yZS9kZXRhaWwvd2hhdGZvbnQvamFib3BvYmdjcGptZWRsanBiY2FhYmxwbWxtZmNvZ20/aGw9amE=">WhatFont<i class="fa fa-external-link-alt"></i></span></h2><p>接下來要介紹的 <span class="exturl" data-url="aHR0cHM6Ly9jaHJvbWUuZ29vZ2xlLmNvbS93ZWJzdG9yZS9kZXRhaWwvd2hhdGZvbnQvamFib3BvYmdjcGptZWRsanBiY2FhYmxwbWxtZmNvZ20=">WhatFont<i class="fa fa-external-link-alt"></i></span>，是能夠查看使用字體的擴充功能。</p>
<p>啟用此擴充功能後，只需將游標移動到想要知道的網頁字體上，即可顯示字體風格。<br>在開發過程中，字體風格經常會因為數字和文字而改變，透過使用這項功能，能夠確保自己不會忘記字體有所更改。</p>
<p><img src="https://i.imgur.com/5mgXpiX.png"></p>
<h2 id="Talend-API-Tester-Free-Edition"><a href="#Talend-API-Tester-Free-Edition" class="headerlink" title="Talend API Tester - Free Edition"></a><span class="exturl" data-url="aHR0cHM6Ly9jaHJvbWUuZ29vZ2xlLmNvbS93ZWJzdG9yZS9kZXRhaWwvdGFsZW5kLWFwaS10ZXN0ZXItZnJlZS1lZC9hZWpvZWxhb2dnZW1iY2FoYWdpbWRpbGlhbWxjZG1mbQ==">Talend API Tester - Free Edition<i class="fa fa-external-link-alt"></i></span></h2><p>使用 <span class="exturl" data-url="aHR0cHM6Ly9jaHJvbWUuZ29vZ2xlLmNvbS93ZWJzdG9yZS9kZXRhaWwvdGFsZW5kLWFwaS10ZXN0ZXItZnJlZS1lZC9hZWpvZWxhb2dnZW1iY2FoYWdpbWRpbGlhbWxjZG1mbQ==">Talend API Tester<i class="fa fa-external-link-alt"></i></span> 這個擴充功能，能夠在瀏覽器中驗證 API 的操作。</p>
<p>在開發過程中，如果需要快速瞭解 API 的 Response 時，將會使用這個工具。<br>整體 UI 非常直觀，即使對於初學者也能很容易上手。</p>
<p><img src="https://i.imgur.com/yX8JayM.png"></p>
<blockquote>
<p>【補充】Talend API Tester 和常見的 <span class="exturl" data-url="aHR0cHM6Ly9jaHJvbWUuZ29vZ2xlLmNvbS93ZWJzdG9yZS9kZXRhaWwvcG9zdG1hbi9maGJqZ2JpZmxpbmpiZGdnZWhjZGRjYm5jZGRkb21vcD9obD16aC1UVw==">Postman<i class="fa fa-external-link-alt"></i></span> 比較：兩者均是用於測試 RESTful API 的工具，但根據用途、授權方式、測試報告、可擴展性等方面可能有所差異。<br>詳細可參考這篇文章：<span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uY24vcy90YWxlbmQlMjBhcGklMjB0ZXN0ZXIlMjB2cyUyMHBvc3RtYW4=">talend api tester vs postman<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
<h2 id="CSSViewer"><a href="#CSSViewer" class="headerlink" title="CSSViewer"></a><span class="exturl" data-url="aHR0cHM6Ly9jaHJvbWUuZ29vZ2xlLmNvbS93ZWJzdG9yZS9kZXRhaWwvY3Nzdmlld2VyL2dnZmdpamJwaWhlZWdlZmxpY2llbW9mb2JobW9mZ2Nl">CSSViewer<i class="fa fa-external-link-alt"></i></span></h2><p>使用 <a href="(https://chrome.google.com/webstore/detail/cssviewer/ggfgijbpiheegefliciemofobhmofgce)">CSSViewer</a> 的擴充功能，即可在瀏覽器中檢查 CSS。</p>
<p>在開始用這個擴充功能之前，經常需要開啟 Chrome 的開發者工具，來選擇需要檢查的 CSS。如果透過 CSSViewer，只需將游標移動到想檢查的 CSS 位置，即可顯示對應的 CSS。<br>在需要快速檢查 CSS 時，這功能非常方便。</p>
<p><img src="https://i.imgur.com/gHF9ixd.png"></p>
<h2 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h2><p>這次我整理了在前端開發中，經常使用到的 Chrome 擴充功能。<br>由於還有許多想介紹的 Chrome 擴充功能，往後將會繼續進行更新。</p>
<p>有許多免費的擴充功能，能夠使開發工作更加便利，Chrome 擴充功能真的很棒呢。<br>如果有其他推薦的擴充功能，也歡迎留言告訴我，感謝閱讀到最後。</p>
<blockquote>
<p>15th鐵人賽目錄傳送門：<span class="exturl" data-url="aHR0cHM6Ly9pdGhlbHAuaXRob21lLmNvbS50dy91c2Vycy8yMDEzNTU1OC9pcm9ubWFuLzYyOTA=">https://ithelp.ithome.com.tw/users/20135558/ironman/6290<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
]]></content>
      <categories>
        <category>2023鐵人賽</category>
        <category>工具篇</category>
      </categories>
      <tags>
        <tag>Front-End</tag>
        <tag>ironman2023</tag>
        <tag>Qiita</tag>
        <tag>Chrome</tag>
      </tags>
  </entry>
  <entry>
    <title>[2023 15th鐵人賽] Day19 - 使用 Visual Studio Code 時絕對要安裝的擴充套件 Top20【2022 年最新版】</title>
    <url>/ironman-2023-day-19/</url>
    <content><![CDATA[<blockquote>
<p>原文連結：<span class="exturl" data-url="aHR0cHM6Ly9xaWl0YS5jb20veWFtYWd1Y2hpMjAwMC9pdGVtcy83NjA2MGMwODc2NGNlNGM3MDRmOQ==">Visual Studio Codeを使うなら絶対に入れておきたい拡張機能Top20【2022最新版】 - Qiita<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
<p>這篇是 VSCode 系列，整理 2022 年擴充套件排行，本來是想比較看看是否有使用比較不一樣的工具，結果好像大部分還是有使用過XD</p>
<p>但還是決定當作記錄（說不定哪天要重新安裝 VSCode 用得上），也把安裝數和平均星數延續統計到 2023 年，稍微觀察變化作為參考。</p>
<span id="more"></span>

<p>那麼，以下正文開始！</p>
<hr>
<p>本文是 <span class="exturl" data-url="aHR0cHM6Ly9xaWl0YS5jb20vYWR2ZW50LWNhbGVuZGFyLzIwMjIvbnVjbw==">Nuco Advent Calendar 2022<i class="fa fa-external-link-alt"></i></span> 第十四天的文章。<br>內容將介紹 20 個 VSCode 必備的擴充套件，包括安裝數量與平均星數（*更新截至 2023 年 10 月）。</p>
<p>擴充套件列表如下：</p>
<ul>
<li><a href="#Japanese-Language-Pack-for-Visual-Studio-Code">Japanese Language Pack for Visual Studio Code</a><ul>
<li><a href="#Chinese-Traditional-Language-Pack-for-Visual-Studio-Code">Chinese (Traditional) Language Pack for Visual Studio Code</a></li>
</ul>
</li>
<li><a href="#vscode-icons">vscode-icons</a></li>
<li><a href="#code-spell-checker">Code Spell Checker</a></li>
<li><a href="#zenkaku">zenkaku</a></li>
<li><a href="#path-autocomplete">Path Autocomplete</a></li>
<li><a href="#prettier---code-formatter">Prettier - Code formatter</a></li>
<li><a href="#indent-rainbow">indent-rainbow</a></li>
<li><a href="#gitlens">GitLens</a></li>
<li><a href="#git-history">Git History</a></li>
<li><a href="#html-css-support">HTML CSS Support</a></li>
<li><a href="#output-colorizer">Output Colorizer</a></li>
<li><a href="#todo-highlight">TODO Highlight</a></li>
<li><a href="#vscode-random">vscode-random</a></li>
<li><a href="#atom-one-dark-theme">Atom One Dark Theme</a></li>
<li><a href="#trailing-spaces">Trailing Spaces</a></li>
<li><a href="#rest-client">REST Client</a></li>
<li><a href="#live-server">Live Server</a></li>
<li><a href="#jupyter">Jupyter</a></li>
<li><a href="#dev-container">Dev Container</a></li>
<li><a href="#rainbow-csv">Rainbow CSV</a></li>
</ul>
<h2 id="Japanese-Language-Pack-for-Visual-Studio-Code"><a href="#Japanese-Language-Pack-for-Visual-Studio-Code" class="headerlink" title="Japanese Language Pack for Visual Studio Code"></a><span class="exturl" data-url="aHR0cHM6Ly9tYXJrZXRwbGFjZS52aXN1YWxzdHVkaW8uY29tL2l0ZW1zP2l0ZW1OYW1lPU1TLUNFSU5UTC52c2NvZGUtbGFuZ3VhZ2UtcGFjay1qYQ==">Japanese Language Pack for Visual Studio Code<i class="fa fa-external-link-alt"></i></span></h2><p><strong>2022 → 2023</strong><br><strong>安裝數：約 470 → 670 萬　評價：☆4.5 → 4.5</strong></p>
<p>對日本語使用者來說，絕對是不可或缺的擴充功能。<br>可以將 VSCode 的語言界面轉換為日本語。</p>
<p><img src="https://hackmd.io/_uploads/SJjMUEYlT.png"></p>
<h3 id="Chinese-Traditional-Language-Pack-for-Visual-Studio-Code"><a href="#Chinese-Traditional-Language-Pack-for-Visual-Studio-Code" class="headerlink" title="Chinese (Traditional) Language Pack for Visual Studio Code"></a><span class="exturl" data-url="aHR0cHM6Ly9tYXJrZXRwbGFjZS52aXN1YWxzdHVkaW8uY29tL2l0ZW1zP2l0ZW1OYW1lPU1TLUNFSU5UTC52c2NvZGUtbGFuZ3VhZ2UtcGFjay16aC1oYW50">Chinese (Traditional) Language Pack for Visual Studio Code<i class="fa fa-external-link-alt"></i></span></h3><p><strong>安裝數：約 180 萬　評價：☆4.9</strong></p>
<p>這裡附上轉換為繁體中文的版本。</p>
<p><img src="https://hackmd.io/_uploads/BJ698EFlT.png"></p>
<h2 id="vscode-icons"><a href="#vscode-icons" class="headerlink" title="vscode-icons"></a><span class="exturl" data-url="aHR0cHM6Ly9tYXJrZXRwbGFjZS52aXN1YWxzdHVkaW8uY29tL2l0ZW1zP2l0ZW1OYW1lPXZzY29kZS1pY29ucy10ZWFtLnZzY29kZS1pY29ucw==">vscode-icons<i class="fa fa-external-link-alt"></i></span></h2><p><strong>2022 → 2023</strong><br><strong>安裝數：約 1250 → 1560 萬　評價：☆5.0 → 4.8</strong></p>
<p>這個套件能根據資料夾和檔案的種類，新增易於辨識的圖示。<br>是有助於提升工作效率的工具。</p>
<p><img src="https://hackmd.io/_uploads/HJPD84txT.png"></p>
<p>即使是結構複雜的資料夾，也能夠一目瞭然！<br>vscode-icons 真的很厲害！</p>
<p><img src="https://imgur.com/51AXdUq.gif"></p>
<h2 id="Code-Spell-Checker"><a href="#Code-Spell-Checker" class="headerlink" title="Code Spell Checker"></a><span class="exturl" data-url="aHR0cHM6Ly9tYXJrZXRwbGFjZS52aXN1YWxzdHVkaW8uY29tL2l0ZW1zP2l0ZW1OYW1lPXN0cmVldHNpZGVzb2Z0d2FyZS5jb2RlLXNwZWxsLWNoZWNrZXI=">Code Spell Checker<i class="fa fa-external-link-alt"></i></span></h2><p><strong>2022 → 2023</strong><br><strong>安裝數：約 560 → 830 萬　評價：☆4.5 → 4.5</strong></p>
<p>這個功能可以指出英文單詞等的拼寫錯誤。<br>對像我這樣經常拼寫錯誤的人來說非常方便。</p>
<p><img src="https://hackmd.io/_uploads/BJsw9Vtga.png"></p>
<p>當拼寫錯誤時，會像這樣以藍色底線標示。</p>
<p><img src="https://hackmd.io/_uploads/SkEFsEtlT.png"></p>
<h2 id="zenkaku"><a href="#zenkaku" class="headerlink" title="zenkaku"></a><span class="exturl" data-url="aHR0cHM6Ly9tYXJrZXRwbGFjZS52aXN1YWxzdHVkaW8uY29tL2l0ZW1zP2l0ZW1OYW1lPW1vc2FwcmlkZS56ZW5rYWt1">zenkaku<i class="fa fa-external-link-alt"></i></span></h2><p><strong>2022 → 2023</strong><br><strong>安裝數：約 29 → 40 萬　評價：☆4.5 → 4.5</strong></p>
<p>可以清楚地顯示全角和半角空格的區別。</p>
<p><img src="https://hackmd.io/_uploads/BkBf34FxT.png"></p>
<p>像這樣全形空格會用黃底 Highlight，很容易識別！</p>
<p><img src="https://hackmd.io/_uploads/SJ_l64tep.png"></p>
<h2 id="Path-Autocomplete"><a href="#Path-Autocomplete" class="headerlink" title="Path Autocomplete"></a><span class="exturl" data-url="aHR0cHM6Ly9tYXJrZXRwbGFjZS52aXN1YWxzdHVkaW8uY29tL2l0ZW1zP2l0ZW1OYW1lPWlvbnV0dm1pLnBhdGgtYXV0b2NvbXBsZXRl">Path Autocomplete<i class="fa fa-external-link-alt"></i></span></h2><p><strong>2022 → 2023</strong><br><strong>安裝數：約 124 → 150 萬　評價：☆4.5 → 4.7</strong></p>
<p>在輸入路徑時，這個套件可以自動補完路徑。<br>保證能夠提高工作效率。</p>
<p><img src="https://hackmd.io/_uploads/SJSmaEYgp.png"></p>
<p>像這樣預測可能的 Path。</p>
<p><img src="https://hackmd.io/_uploads/r1-Sa4Fl6.png"></p>
<h2 id="Prettier-Code-formatter"><a href="#Prettier-Code-formatter" class="headerlink" title="Prettier - Code formatter"></a><span class="exturl" data-url="aHR0cHM6Ly9tYXJrZXRwbGFjZS52aXN1YWxzdHVkaW8uY29tL2l0ZW1zP2l0ZW1OYW1lPWVzYmVucC5wcmV0dGllci12c2NvZGU=">Prettier - Code formatter<i class="fa fa-external-link-alt"></i></span></h2><p><strong>2022 → 2023</strong><br><strong>安裝數：約 2643 → 3687 萬　評價：☆4.0 → 3.6</strong></p>
<p>能夠協助整理 HTML、JavaScript、Markdown 等內容的排版。</p>
<p><img src="https://hackmd.io/_uploads/SklOCVtxT.png"></p>
<p>即使是雜亂的 Markdown，</p>
<p><img src="https://hackmd.io/_uploads/Sk4d1SKxT.png"></p>
<p>也能像這樣自動調整。真方便！</p>
<p><img src="https://hackmd.io/_uploads/SyCukBKlT.png"></p>
<h2 id="indent-rainbow"><a href="#indent-rainbow" class="headerlink" title="indent-rainbow"></a><span class="exturl" data-url="aHR0cHM6Ly9tYXJrZXRwbGFjZS52aXN1YWxzdHVkaW8uY29tL2l0ZW1zP2l0ZW1OYW1lPW9kZXJ3YXQuaW5kZW50LXJhaW5ib3c=">indent-rainbow<i class="fa fa-external-link-alt"></i></span></h2><p><strong>2022 → 2023</strong><br><strong>安裝數：約 419 → 600 萬　評價：☆5.0 → 4.8</strong></p>
<p>可以為縮排部分添加顏色，使其更容易閱讀。<br>特別適用於 Python 和 HTML 等程式語言。</p>
<p><img src="https://hackmd.io/_uploads/B1H7lBYxa.png"></p>
<p>有效提升縮排的識別度。</p>
<p><img src="https://hackmd.io/_uploads/H1myWBYlp.png"></p>
<h2 id="GitLens"><a href="#GitLens" class="headerlink" title="GitLens"></a><span class="exturl" data-url="aHR0cHM6Ly9tYXJrZXRwbGFjZS52aXN1YWxzdHVkaW8uY29tL2l0ZW1zP2l0ZW1OYW1lPWVhbW9kaW8uZ2l0bGVucw==">GitLens<i class="fa fa-external-link-alt"></i></span></h2><p><strong>2022 → 2023</strong><br><strong>安裝數：約 1866 → 2632 萬　評價：☆4.0 → 3.9</strong></p>
<p>在使用 git 進行共同開發時，能夠得知每行程式碼是由哪位開發者所撰寫的。</p>
<p><img src="https://hackmd.io/_uploads/BkpL-BtgT.png"></p>
<p>透過這種方式，可以清楚查看是誰、在何時、在什麼地方進行修改，以及留下什麼 Commit Message。</p>
<p><img src="https://hackmd.io/_uploads/Hk3ozrtxT.png"></p>
<h2 id="Git-History"><a href="#Git-History" class="headerlink" title="Git History"></a><span class="exturl" data-url="aHR0cHM6Ly9tYXJrZXRwbGFjZS52aXN1YWxzdHVkaW8uY29tL2l0ZW1zP2l0ZW1OYW1lPWRvbmpheWFtYW5uZS5naXRoaXN0b3J5">Git History<i class="fa fa-external-link-alt"></i></span></h2><p><strong>2022 → 2023</strong><br><strong>安裝數：約 717 → 948 萬　評價：☆4.5 → 4.4</strong></p>
<p>可以依檔案為單位，輕鬆查看 git 的 Log。</p>
<p><img src="https://hackmd.io/_uploads/SJQJXBFgT.png"></p>
<p>可以方便搜尋 Commit 歷史記錄，並列出檔案的更新歷史記錄。</p>
<p><img src="https://hackmd.io/_uploads/SkxsNSYg6.png"></p>
<h2 id="HTML-CSS-Support"><a href="#HTML-CSS-Support" class="headerlink" title="HTML CSS Support"></a><span class="exturl" data-url="aHR0cHM6Ly9tYXJrZXRwbGFjZS52aXN1YWxzdHVkaW8uY29tL2l0ZW1zP2l0ZW1OYW1lPWVjbWVsLnZzY29kZS1odG1sLWNzcw==">HTML CSS Support<i class="fa fa-external-link-alt"></i></span></h2><p><strong>2022 → 2023</strong><br><strong>2023 安裝數：約 1236 → 1680 萬　評價：☆3.5 → 3.4</strong></p>
<p>可以根據 CSS 的定義，自動補完 HTML 輸入內容。</p>
<p><img src="https://hackmd.io/_uploads/HJWZHBYxT.png"></p>
<p>像這樣參考 CSS 來預測 class 內容，也有助於防止拼寫錯誤！</p>
<p><img src="https://hackmd.io/_uploads/rJTpPrYl6.png"></p>
<h2 id="Output-Colorizer"><a href="#Output-Colorizer" class="headerlink" title="Output Colorizer"></a><span class="exturl" data-url="aHR0cHM6Ly9tYXJrZXRwbGFjZS52aXN1YWxzdHVkaW8uY29tL2l0ZW1zP2l0ZW1OYW1lPUlCTS5vdXRwdXQtY29sb3JpemVy">Output Colorizer<i class="fa fa-external-link-alt"></i></span></h2><p><strong>2022 → 2023</strong><br><strong>安裝數：約 63 → 87 萬　評價：☆5.0 → 4.9</strong></p>
<p>將 VSCode 的輸出內容上色，以便於理解。</p>
<p><img src="https://hackmd.io/_uploads/SJ2_dHKxa.png"></p>
<p>錯誤訊息也能更容易閱讀！</p>
<p><img src="https://hackmd.io/_uploads/H16gtHtlp.png"></p>
<h2 id="TODO-Highlight"><a href="#TODO-Highlight" class="headerlink" title="TODO Highlight"></a><span class="exturl" data-url="aHR0cHM6Ly9tYXJrZXRwbGFjZS52aXN1YWxzdHVkaW8uY29tL2l0ZW1zP2l0ZW1OYW1lPXdheW91LnZzY29kZS10b2RvLWhpZ2hsaWdodA==">TODO Highlight<i class="fa fa-external-link-alt"></i></span></h2><p><strong>2022 → 2023</strong><br><strong>安裝數：約 301 → 389 萬　評價：☆4.5 → 4.5</strong></p>
<p>當有內容需要稍後處理，但怕會忘記時，這項功能非常有用。</p>
<p><img src="https://hackmd.io/_uploads/H1ncFrYea.png"></p>
<p>TODO 的部分會上色，非常容易識別！</p>
<p><img src="https://hackmd.io/_uploads/B1qz9HKl6.png"></p>
<h2 id="vscode-random"><a href="#vscode-random" class="headerlink" title="vscode-random"></a><span class="exturl" data-url="aHR0cHM6Ly9tYXJrZXRwbGFjZS52aXN1YWxzdHVkaW8uY29tL2l0ZW1zP2l0ZW1OYW1lPWpyZWJvY2hvLnZzY29kZS1yYW5kb20=">vscode-random<i class="fa fa-external-link-alt"></i></span></h2><p><strong>2022 → 2023</strong><br><strong>安裝數：約 4.5 → 6.4 萬　評價：☆5.0 → 4.9</strong></p>
<p>能夠自動產生隨機數字和名稱。<br>對於建立虛擬資料（dummy data）非常有用。</p>
<p><img src="https://hackmd.io/_uploads/SkEEvUKla.png"></p>
<p>例如，希望隨機輸入國家名稱的情況：</p>
<p><img src="https://hackmd.io/_uploads/rJO0u8Ylp.png"></p>
<p>只要在指令面板選擇 Random: Country name：</p>
<p><img src="https://hackmd.io/_uploads/H1kyK8Fe6.png"></p>
<p>即可自動隨機生成國家名稱，方便！</p>
<p><img src="https://hackmd.io/_uploads/ByrkFIFea.png"></p>
<h2 id="Atom-One-Dark-Theme"><a href="#Atom-One-Dark-Theme" class="headerlink" title="Atom One Dark Theme"></a><span class="exturl" data-url="aHR0cHM6Ly9tYXJrZXRwbGFjZS52aXN1YWxzdHVkaW8uY29tL2l0ZW1zP2l0ZW1OYW1lPWFrYW11ZC52c2NvZGUtdGhlbWUtb25lZGFyaw==">Atom One Dark Theme<i class="fa fa-external-link-alt"></i></span></h2><p><strong>2022 → 2023</strong><br><strong>安裝數：約 375 → 473 萬　評價：☆5.0 → 4.8</strong></p>
<p>這個擴充功能，能夠套用看起來舒服的配色。</p>
<p><img src="https://hackmd.io/_uploads/ryy7KUtgp.png"></p>
<h2 id="Trailing-Spaces"><a href="#Trailing-Spaces" class="headerlink" title="Trailing Spaces"></a><span class="exturl" data-url="aHR0cHM6Ly9tYXJrZXRwbGFjZS52aXN1YWxzdHVkaW8uY29tL2l0ZW1zP2l0ZW1OYW1lPXNoYXJkdWxtOTQudHJhaWxpbmctc3BhY2Vz">Trailing Spaces<i class="fa fa-external-link-alt"></i></span></h2><p><strong>2022 → 2023</strong><br><strong>安裝數：約 119 → 163 萬　評價：☆5.0 → 4.8</strong></p>
<p>能夠清楚識別程式碼末端不必要的空格。</p>
<p><img src="https://hackmd.io/_uploads/rk_jjUKeT.png"></p>
<p>像這樣以紅底 Highlight 顯示，能稍微減輕編碼時的壓力。</p>
<p><img src="https://hackmd.io/_uploads/B1hlhUKl6.png"></p>
<h2 id="REST-Client"><a href="#REST-Client" class="headerlink" title="REST Client"></a><span class="exturl" data-url="aHR0cHM6Ly9tYXJrZXRwbGFjZS52aXN1YWxzdHVkaW8uY29tL2l0ZW1zP2l0ZW1OYW1lPWh1bWFvLnJlc3QtY2xpZW50">REST Client<i class="fa fa-external-link-alt"></i></span></h2><p><strong>2022 → 2023</strong><br><strong>安裝數：約 288 → 382 萬　評價：☆5.0 → 4.9</strong></p>
<p>能夠在 VSCode 發送 http request 的擴充功能。</p>
<p><img src="https://hackmd.io/_uploads/rJEw3UYea.png"></p>
<p>並且清楚顯示 request 結果！</p>
<p><img src="https://hackmd.io/_uploads/Hk-nnUFgT.png"></p>
<h2 id="Live-Server"><a href="#Live-Server" class="headerlink" title="Live Server"></a><span class="exturl" data-url="aHR0cHM6Ly9tYXJrZXRwbGFjZS52aXN1YWxzdHVkaW8uY29tL2l0ZW1zP2l0ZW1OYW1lPXJpdHdpY2tkZXkuTGl2ZVNlcnZlcg==">Live Server<i class="fa fa-external-link-alt"></i></span></h2><p><strong>2022 → 2023</strong><br><strong>安裝數：約 2815 → 3977 萬　評價：☆4.5 → 4.4</strong></p>
<p>能夠在 Localhost 啟動 Server，並上傳 HTML 檔案進行逐一檢查。</p>
<p><img src="https://hackmd.io/_uploads/rJnW6UYea.png"></p>
<p>可以同時修改和預覽程式碼。</p>
<p><img src="https://hackmd.io/_uploads/r1sORLYx6.png"></p>
<h2 id="Jupyter"><a href="#Jupyter" class="headerlink" title="Jupyter"></a><span class="exturl" data-url="aHR0cHM6Ly9tYXJrZXRwbGFjZS52aXN1YWxzdHVkaW8uY29tL2l0ZW1zP2l0ZW1OYW1lPW1zLXRvb2xzYWkuanVweXRlcg==">Jupyter<i class="fa fa-external-link-alt"></i></span></h2><p><strong>2022 → 2023</strong><br><strong>安裝數：約 5137 → 7073 萬　評價：☆2.5 → 2.7</strong></p>
<p>能夠在 VSCode 上開啟 Jupyter Notebook。</p>
<p><img src="https://hackmd.io/_uploads/HkMj0UFxa.png"></p>
<p>不需啟動瀏覽器，也能無壓力使用 Notebook。</p>
<p><img src="https://hackmd.io/_uploads/BJb4gDtea.png"></p>
<h2 id="Dev-Container"><a href="#Dev-Container" class="headerlink" title="Dev Container"></a><span class="exturl" data-url="aHR0cHM6Ly9tYXJrZXRwbGFjZS52aXN1YWxzdHVkaW8uY29tL2l0ZW1zP2l0ZW1OYW1lPW1zLXZzY29kZS1yZW1vdGUucmVtb3RlLWNvbnRhaW5lcnM=">Dev Container<i class="fa fa-external-link-alt"></i></span></h2><p><strong>2022 → 2023</strong><br><strong>安裝數：約 1559 → 2039 萬　評價：☆4.5 → 4.5</strong></p>
<p>能透過擴充 VSCode 指令面板，來新增 Docker 的指令。<br>這是使用 Docker 進行遠端開發的必備擴充功能。</p>
<p><img src="https://hackmd.io/_uploads/rk7dgPtg6.png"></p>
<p>透過新增的指令，可以輕鬆建立遠端容器。<br>也可以在 devcontainer 環境中，使用 VSCode 的其他擴充功能。</p>
<p><img src="https://hackmd.io/_uploads/BJQkWPFe6.png"></p>
<h2 id="Rainbow-CSV"><a href="#Rainbow-CSV" class="headerlink" title="Rainbow CSV"></a><span class="exturl" data-url="aHR0cHM6Ly9tYXJrZXRwbGFjZS52aXN1YWxzdHVkaW8uY29tL2l0ZW1zP2l0ZW1OYW1lPW1lY2hhdHJvbmVyLnJhaW5ib3ctY3N2">Rainbow CSV<i class="fa fa-external-link-alt"></i></span></h2><p><strong>2022 → 2023</strong><br><strong>安裝數：約 230 → 355 萬　評價：☆5.0 → 4.8</strong></p>
<p>透過將 CSV 檔案內容上色，可以更清楚辨識每個元素屬於哪一列。</p>
<p><img src="https://hackmd.io/_uploads/ryXU-Ptg6.png"></p>
<p>即使是雜亂到難以理解的 CSV 檔案：</p>
<p><img src="https://hackmd.io/_uploads/B1H-zwKgT.png"></p>
<p>也能透過顏色編碼，使內容更容易理解！</p>
<p><img src="https://hackmd.io/_uploads/rkvzfvYxa.png"></p>
<h2 id="最後"><a href="#最後" class="headerlink" title="最後"></a>最後</h2><p>敝公司 Nuco 正在招募社員與實習生，不論經驗有無，<br>若有興趣請<a href="(https://www.recruit.nuco.co.jp/)">點這裡</a>。</p>
<blockquote>
<p>15th鐵人賽目錄傳送門：<span class="exturl" data-url="aHR0cHM6Ly9pdGhlbHAuaXRob21lLmNvbS50dy91c2Vycy8yMDEzNTU1OC9pcm9ubWFuLzYyOTA=">https://ithelp.ithome.com.tw/users/20135558/ironman/6290<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
]]></content>
      <categories>
        <category>2023鐵人賽</category>
        <category>工具篇</category>
      </categories>
      <tags>
        <tag>ironman2023</tag>
        <tag>Qiita</tag>
        <tag>VSCode</tag>
      </tags>
  </entry>
  <entry>
    <title>[2023 15th鐵人賽] Day20 - 馬上就能使用的免費 Web API 總覽【2023年最新版】</title>
    <url>/ironman-2023-day-20/</url>
    <content><![CDATA[<blockquote>
<p>原文連結：<span class="exturl" data-url="aHR0cHM6Ly9xaWl0YS5jb20va2F6dWtpX3RhY2hpa2F3YS9pdGVtcy83YjJmZWFkMmE5Njk4ZDFjMTVlOA==">今すぐ使える無料WebAPIまとめ【2023年最新版】 - Qiita<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
<hr>
<p>這篇文章整理五十幾項可免費使用的 Web API，種類也是百百種，包括常見的 Google 相關服務、線上支付、識別服務等，依照功能分類如下：</p>
<ul>
<li>工作效率化</li>
<li>資料管理</li>
<li>翻譯</li>
<li>辭典</li>
<li>支付服務</li>
<li>認證</li>
<li>圖像識別</li>
<li>語音識別</li>
<li>聊天機器人</li>
<li>社交軟體</li>
<li>音樂</li>
<li>天氣</li>
<li>線上購物</li>
<li>圖像與影像作品</li>
<li>書籍</li>
<li>位置與交通</li>
<li>金融服務</li>
<li>狂熱取向</li>
</ul>
<p>在現代軟體中，Web API 扮演極其重要的角色。如文中所言，光是瞭解到有這些 API 提供的功能存在，或許未來能夠拓展不同的可能性和選擇，在個人開發也能夠發揮其用。</p>
<span id="more"></span>

<p>那麼，以下正文開始。</p>
<hr>
<p>WebAPI 是將軟體的一部分公開，以 Web 服務的形式，與其他軟體共享功能。通常使用 HTTP 協議進行通訊，通常使用 JSON 或 XML 作為資料交換格式。</p>
<p>因此透過 WebAPI，能夠輕易將所需的功能和資料，編入應用程式或系統中，而不需自己從頭開始開發，即可透過現有的 Web 服務，提供新的功能和服務。</p>
<p>本文介紹一些免費可用的 WebAPI 及其功能，也包括一些有限制的 API，並與其他服務或付費版本進行比較。此外，也提供相關的日文參考資料連結，希望即使是初次使用，也能夠順利引入這些 API。</p>
<h2 id="工作效率化"><a href="#工作效率化" class="headerlink" title="工作效率化"></a>工作效率化</h2><h3 id="Google-Sheets-API"><a href="#Google-Sheets-API" class="headerlink" title="Google Sheets API"></a><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXJzLmdvb2dsZS5jb20vc2hlZXRzL2FwaS9yZWZlcmVuY2UvcmVzdD9obD16aC10dw==">Google Sheets API<i class="fa fa-external-link-alt"></i></span></h3><ul>
<li>Google Sheets API 可用於讀取和寫入 Google 試算表中的資料</li>
<li>可以更改表格格式，或使用 ID 進行管理</li>
</ul>
<blockquote>
<p>＜ 參考＞<span class="exturl" data-url="aHR0cHM6Ly9qYXBhbi5hcHBlb24uY29tL3RlY2huaWNhbC90ZWNoYmxvZy90ZWNobmljYWxibG9nMDE5Lw==">Google Sheets API を使ってスプレッドシートを操作（使用 Google Sheets API 操作試算表）<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
<h3 id="Google-Calendar-API"><a href="#Google-Calendar-API" class="headerlink" title="Google Calendar API"></a><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXJzLmdvb2dsZS5jb20vY2FsZW5kYXIvYXBpL2d1aWRlcy9vdmVydmlldz9obD1qYQ==">Google Calendar API<i class="fa fa-external-link-alt"></i></span></h3><ul>
<li>可以用 JSON 格式取得日曆中的事件</li>
<li>也可以從外部工具新增預定事件</li>
</ul>
<blockquote>
<p>＜參考＞ <span class="exturl" data-url="aHR0cHM6Ly93d3cuY29wcGxhLW5vdGUubmV0L3Bvc3RzL3R1dG9yaWFsL2dvb2dsZS1jYWxlbmRhci1hcGkv">Python で Google Calendar API を使ってみた（在 Python 使用 Google Calendar API）<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
<h3 id="Gmail-API"><a href="#Gmail-API" class="headerlink" title="Gmail API"></a><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXJzLmdvb2dsZS5jb20vZ21haWwvYXBpL2d1aWRlcz9obD1qYQ==">Gmail API<i class="fa fa-external-link-alt"></i></span></h3><ul>
<li>可以使用郵件搜索功能以及各種自動化等功能</li>
<li>可以根據需求管理大量資料</li>
</ul>
<blockquote>
<p>＜參考＞ <span class="exturl" data-url="aHR0cHM6Ly93d3cuYWxwaGEuY28uanAvYmxvZy8yMDIyMTFfMDI=">Gmail API を用いてメールの送受信を行うAndroidアプリケーションの実装例（使用 Gmail API 在 Android 應用程式中發送和接收郵件的實作範例）<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
<h3 id="Notion-API"><a href="#Notion-API" class="headerlink" title="Notion API"></a><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXJzLm5vdGlvbi5jb20v">Notion API<i class="fa fa-external-link-alt"></i></span></h3><ul>
<li>可以擴展多功能工作區</li>
<li>輕鬆新增或刪除資料庫項目</li>
</ul>
<blockquote>
<p>＜參考＞ <span class="exturl" data-url="aHR0cHM6Ly9uLXYtbC5jby9ibG9nL3doYXQtaXMtbm90aW9uLWFwaQ==">Notion APIとは？Notion APIを使ってできることや使い方を解説（什麼是 Notion API？解說 Notion API 的功能和使用方法）<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
<h2 id="資料管理"><a href="#資料管理" class="headerlink" title="資料管理"></a>資料管理</h2><h3 id="Evernote-API"><a href="#Evernote-API" class="headerlink" title="Evernote API"></a><span class="exturl" data-url="aHR0cHM6Ly9kZXYuZXZlcm5vdGUuY29tL2RvYy8=">Evernote API<i class="fa fa-external-link-alt"></i></span></h3><ul>
<li>有 Local 和 Cloud 兩種版本。</li>
<li>可以在任何地方編輯已保存的筆記本。</li>
</ul>
<blockquote>
<p>＜參考＞ <span class="exturl" data-url="aHR0cHM6Ly93d3cuYW50dW4ubmV0L3RpcHMvYXBpL2V2ZXJub3RlLmh0bWw=">Evernote API を使ってみる（試著使用 Evernote API）<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
<h3 id="Dropbox-API"><a href="#Dropbox-API" class="headerlink" title="Dropbox API"></a><span class="exturl" data-url="aHR0cHM6Ly93d3cuZHJvcGJveC5jb20vZGV2ZWxvcGVycy9kb2N1bWVudGF0aW9uL2h0dHAvb3ZlcnZpZXc=">Dropbox API<i class="fa fa-external-link-alt"></i></span></h3><ul>
<li>可以統一管理 PDF、音檔、影片等各種內容。</li>
<li>使用者管理也非常簡單。</li>
</ul>
<blockquote>
<p>＜參考＞ <span class="exturl" data-url="aHR0cHM6Ly9ibG9nLnVzaXplLXRlY2guY29tL2Ryb3Bib3gtdG9vbGJveC8=">Dropbox APIで便利ツールを開発してみた（使用 Dropbox API 開發實用工具）<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
<h3 id="Airtable-API"><a href="#Airtable-API" class="headerlink" title="Airtable API"></a><span class="exturl" data-url="aHR0cHM6Ly9haXJ0YWJsZS5jb20vZGV2ZWxvcGVycy93ZWIvYXBpL2ludHJvZHVjdGlvbg==">Airtable API<i class="fa fa-external-link-alt"></i></span></h3><ul>
<li>可以自由操作雲資料庫。</li>
<li>無程式碼工具在開發上容易上手。</li>
</ul>
<table>
<thead>
<tr>
<th></th>
<th>Free</th>
<th>Team</th>
<th>Business</th>
<th>Enterprise Scale</th>
</tr>
</thead>
<tbody><tr>
<td>價格（每月）</td>
<td>無料</td>
<td>$20/人</td>
<td>$45/人</td>
<td>請洽詢</td>
</tr>
<tr>
<td>記錄</td>
<td>1,000 行</td>
<td>50,000 行</td>
<td>125,000 行</td>
<td>500,000 行</td>
</tr>
<tr>
<td>自動執行</td>
<td>100 次</td>
<td>25,000 次</td>
<td>100,000 次</td>
<td>500,000 次</td>
</tr>
<tr>
<td>附件</td>
<td>1GB</td>
<td>10GB</td>
<td>100GB</td>
<td>1,000GB</td>
</tr>
</tbody></table>
<blockquote>
<p>＜參考＞ <span class="exturl" data-url="aHR0cHM6Ly9ub2NvZGVqYXBhbi5vcmcvbWVkaWEvaG93LXRvLXVzZS1haXJ0YWJsZS8jeW91X2xpYW9wdXJhbm5vX2tlX2ppbl94aW5nX3RhaQ==">【Airtableの使い方】ノーコードでデータベース管理をしよう【Airtable 的使用方法】無程式碼管理資料庫<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
<h3 id="Google-Drive-API"><a href="#Google-Drive-API" class="headerlink" title="Google Drive API"></a><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXJzLmdvb2dsZS5jb20vZHJpdmUvYXBpL2d1aWRlcy9hYm91dC1zZGs/aGw9emgtdHc=">Google Drive API<i class="fa fa-external-link-alt"></i></span></h3><ul>
<li>經過驗證後，可以取得 Google Drive 中的訊息。</li>
<li>操作共享 Google Drive 非常方便。</li>
</ul>
<blockquote>
<p>＜參考＞ <span class="exturl" data-url="aHR0cHM6Ly9qYXBhbi5hcHBlb24uY29tL3RlY2huaWNhbC90ZWNoYmxvZy9hY2Nlc3MtZ29vZ2xlLWRyaXZlLw==">Google Drive API で Google ドライブへアクセス（使用 Google Drive API 取得 Google Drive 權限）<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
<h2 id="翻譯"><a href="#翻譯" class="headerlink" title="翻譯"></a>翻譯</h2><h3 id="DeepL"><a href="#DeepL" class="headerlink" title="DeepL"></a><span class="exturl" data-url="aHR0cHM6Ly93d3cuZGVlcGwuY29tL2VuL3Byby1hcGk=">DeepL<i class="fa fa-external-link-alt"></i></span></h3><ul>
<li>可以輕鬆使用高精度的翻譯功能。</li>
<li>每月最多可免費使用 50 萬個字元。</li>
</ul>
<table>
<thead>
<tr>
<th></th>
<th>Free Plan</th>
<th>Pro Plan</th>
</tr>
</thead>
<tbody><tr>
<td>費用</td>
<td>免費</td>
<td>基本費用 630 日幣 + 每個字元 0.0025 日幣</td>
</tr>
<tr>
<td>文字數上限</td>
<td>50 萬個字元</td>
<td>無限制</td>
</tr>
<tr>
<td>安全性</td>
<td>標準</td>
<td>翻譯後立即刪除文本</td>
</tr>
<tr>
<td>優先處理</td>
<td>無</td>
<td>有</td>
</tr>
</tbody></table>
<blockquote>
<p>＜參考＞ 【<span class="exturl" data-url="aHR0cHM6Ly9jaGlndXNhLXdlYi5jb20vYmxvZy9kZWVwbC1hcGkv">DeepL】APIの登録とサンプルコード実装（【DeepL】註冊 API 和 Sample Code 實作）<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
<h3 id="Google-Translation-API"><a href="#Google-Translation-API" class="headerlink" title="Google Translation API"></a><span class="exturl" data-url="aHR0cHM6Ly9jbG91ZC5nb29nbGUuY29tL3RyYW5zbGF0ZS9kb2NzL3JlZmVyZW5jZS9yZXN0">Google Translation API<i class="fa fa-external-link-alt"></i></span></h3><ul>
<li>可以自由操作 Google 翻譯服務。</li>
<li>不僅限於文字格式，語音和影片檔案也可以輕鬆進行翻譯。</li>
<li>每月最多也可免費使用 50 萬個字元，之後每 1,000,000 個字元將收取 20 美元的費用。（若 1 美元 = 135日幣，則每個字元為 0.0027 日幣）</li>
</ul>
<blockquote>
<p>＜參考＞ <span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYS1ibG9nY21zLmpwL2RvY3VtZW50L2phdmFzY3JpcHQvZ29vZ2xlLXRyYW5zbGF0ZS1hcGkuaHRtbA==">Google Translate APIを使って翻訳ボタンを作る（使用 Google Translate API 建立翻譯按鈕）<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
<h3 id="Translator-Text-API"><a href="#Translator-Text-API" class="headerlink" title="Translator Text API"></a><span class="exturl" data-url="aHR0cHM6Ly93d3cubWljcm9zb2Z0LmNvbS9lbi11cy90cmFuc2xhdG9yL2J1c2luZXNzL3RyYW5zbGF0b3ItYXBpLw==">Translator Text API<i class="fa fa-external-link-alt"></i></span></h3><ul>
<li>可以使用 Microsoft 的翻譯服務進行多語言翻譯。</li>
<li>免費方案每日可處理 200 萬個字元，與其他服務相比非常吸引人。</li>
</ul>
<blockquote>
<p>＜參考＞ <span class="exturl" data-url="aHR0cHM6Ly9xaWl0YS5jb20vVGFrZXNoaU5pY2tPc2FuYWkvaXRlbXMvYTgwMzliYThkNTU4ZjdjOGEwNWU=">Microsoft Translator テキスト API で、日本語を英語に翻訳するサンプル（使用 Microsoft Translator Text API 將日語翻譯為英語的範例）<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
<h2 id="辭典"><a href="#辭典" class="headerlink" title="辭典"></a>辭典</h2><h3 id="Words-API"><a href="#Words-API" class="headerlink" title="Words API"></a><span class="exturl" data-url="aHR0cHM6Ly93d3cud29yZHNhcGkuY29tLw==">Words API<i class="fa fa-external-link-alt"></i></span></h3><ul>
<li>可以取得超過 325,000 個英文單字的意思、類別、用法等資訊。</li>
<li>每日免費處理 <del>1000 次</del>（2500 次）的請求。</li>
</ul>
<blockquote>
<p>＜參考＞ <span class="exturl" data-url="aHR0cHM6Ly9jb2RlemluZS5qcC9hcnRpY2xlL2RldGFpbC84NDA0">150,000以上の英単語の意味、類義語などの情報が取得できる「Words API」が公開（可以取得 150,000 個以上英文單字的意思、同義詞等資的「Words API」）<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
<h3 id="Oxford-Dictionaries-API"><a href="#Oxford-Dictionaries-API" class="headerlink" title="Oxford Dictionaries API"></a><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIub3hmb3JkZGljdGlvbmFyaWVzLmNvbS8=">Oxford Dictionaries API<i class="fa fa-external-link-alt"></i></span></h3><ul>
<li>這是由牛津大學提供支持 35 種語言的 API。</li>
<li>可以搜索同義詞及進行翻譯。</li>
<li>每日免費處理 1000 次的請求。</li>
</ul>
<blockquote>
<p>＜參考＞ <span class="exturl" data-url="aHR0cHM6Ly9xaWl0YS5jb20vVG9tbXl5eXl5eXkvaXRlbXMvMjZiZjdhYWU5ZjQ2NDIxN2FkNzI=">Oxford Dictionaries APIの使い方（Oxford Dictionaries API 的使用方法）<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
<h3 id="COTOHA-API"><a href="#COTOHA-API" class="headerlink" title="COTOHA API"></a><span class="exturl" data-url="aHR0cHM6Ly9hcGkuY2UtY290b2hhLmNvbS9jb250ZW50cy9hYm91dC5odG1s">COTOHA API<i class="fa fa-external-link-alt"></i></span></h3><ul>
<li>使用大規模的日語辭典，可以取得經詞意分類的單詞資訊。</li>
<li>可以應用於文本分析等工具。</li>
</ul>
<table>
<thead>
<tr>
<th></th>
<th>Developers</th>
<th>Enterprise</th>
</tr>
</thead>
<tbody><tr>
<td>費用</td>
<td>免費</td>
<td>130,000 日幣/月</td>
</tr>
<tr>
<td>使用限制</td>
<td>各 API 每日可請求 1000 次</td>
<td>無限制</td>
</tr>
<tr>
<td>辭典</td>
<td>基本用語辭典</td>
<td>基本用語辭典/專業用語辭典</td>
</tr>
</tbody></table>
<blockquote>
<p>＜參考＞ <span class="exturl" data-url="aHR0cHM6Ly93aXRoY2F0aW9uLmNvbS8yMDE5LzEwLzI4L3Bvc3QtOTU3">Cotoha API を使ってみた（試著用了 Cotoha API）<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
<h2 id="支付服務"><a href="#支付服務" class="headerlink" title="支付服務"></a>支付服務</h2><h3 id="Stripe-API"><a href="#Stripe-API" class="headerlink" title="Stripe API"></a><span class="exturl" data-url="aHR0cHM6Ly9zdHJpcGUuY29tL2RvY3MvcGF5bWVudHMvdG91cg==">Stripe API<i class="fa fa-external-link-alt"></i></span></h3><ul>
<li>可輕鬆實作線上支付服務。</li>
<li>支援 47 個國家，並支援 135 種以上的貨幣和支付方式。</li>
<li>交易手續費為 3.6 ％。</li>
</ul>
<blockquote>
<p>＜參考＞ <span class="exturl" data-url="aHR0cHM6Ly9yZWZmZWN0LmNvLmpwL2h0bWwvc3RyaXBlLw==">オンライン決済Stripe(ストライプ)を導入するための組み込み方法の基礎（如何實作線上支付 Stripe 的基礎知識）<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
<h3 id="LINE-Pay-API"><a href="#LINE-Pay-API" class="headerlink" title="LINE Pay API"></a><span class="exturl" data-url="aHR0cHM6Ly9wYXkubGluZS5tZS9qcC9kZXZlbG9wZXJzL2FwaXMvb25saW5lQXBpcz9sb2NhbGU9emhfVFc=">LINE Pay API<i class="fa fa-external-link-alt"></i></span></h3><ul>
<li>使用者的所有購物行為均在 LINE 上完成。</li>
<li>交易手續費為 2.45％。</li>
</ul>
<blockquote>
<p>＜參考＞ <span class="exturl" data-url="aHR0cHM6Ly9xaWl0YS5jb20vbmtqbS9pdGVtcy9iNGY3MGI0ZGFhZjM0M2EyYmVkYw==">LINE Pay APIを使ってアプリに決済を組み込む方法（如何使用 LINE Pay API 將付款合併到應用程式中）<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
<h3 id="PayPal-API"><a href="#PayPal-API" class="headerlink" title="PayPal API"></a><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIucGF5cGFsLmNvbS9ob21l">PayPal API<i class="fa fa-external-link-alt"></i></span></h3><ul>
<li>可以透過全球使用者眾多的 PayPal 進行支付處理。</li>
<li>交易手續費為 2.9％。</li>
</ul>
<blockquote>
<p>＜參考＞ <span class="exturl" data-url="aHR0cHM6Ly9xaWl0YS5jb20vUFBKUC9pdGVtcy9kYjVjNTc5OTFjMmMzZmU4MGFjNw==">PayPal 決済の実装方法（實作 PayPal 支付的方法）<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
<h2 id="認證"><a href="#認證" class="headerlink" title="認證"></a>認證</h2><h3 id="Github-REST-API-v3"><a href="#Github-REST-API-v3" class="headerlink" title="Github REST API v3"></a><span class="exturl" data-url="aHR0cHM6Ly9kb2NzLmdpdGh1Yi5jb20vZW4vcmVzdC9vdmVydmlldy9hYm91dC1naXRodWJzLWFwaXM/YXBpVmVyc2lvbj0yMDIyLTExLTI4">Github REST API v3<i class="fa fa-external-link-alt"></i></span></h3><ul>
<li>可以取得 Repository 訊息，並進行 Pull Request 等管理。</li>
<li>可以使用 GitHub Account 進行使用者身份驗證。</li>
</ul>
<blockquote>
<p>＜餐拗＞ <span class="exturl" data-url="aHR0cHM6Ly9tYWt1NzcuZ2l0aHViLmlvL2dpdC9naXRodWIvZ2l0aHViLXJlc3QtYXBpLmh0bWw=">GitHub REST API を使用する - まくまくGitノート（使用 GitHub REST API - まくまく的 Git 筆記）<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
<h3 id="LinkedIn-API"><a href="#LinkedIn-API" class="headerlink" title="LinkedIn API"></a><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubGlua2VkaW4uY29tL3Byb2R1Y3QtY2F0YWxvZw==">LinkedIn API<i class="fa fa-external-link-alt"></i></span></h3><ul>
<li>可以在 LinkedIn 上，取得主要與職業相關的個人資料資訊。</li>
<li>也可以使用 Account 進行身份驗證。</li>
</ul>
<blockquote>
<p>＜參考＞ <span class="exturl" data-url="aHR0cHM6Ly9yYWluYm93LWVuZ2luZS5jb20vbGlua2VkaW4tYXBpLWhvd3RvLw==">LinkedIn APIの使い方について（PythonでAPIコール疎通させるまで）（如何使用 LinkedIn API（到使用 Python 呼叫 API））<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
<h3 id="Zoom-API"><a href="#Zoom-API" class="headerlink" title="Zoom API"></a><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXJzLnpvb20udXMvZG9jcy9hcGkvcmVzdC96b29tLWFwaS8=">Zoom API<i class="fa fa-external-link-alt"></i></span></h3><ul>
<li>可以建立會議，並與外部工具整合管理。</li>
<li>也可以取得會議後相關的訊息。</li>
</ul>
<blockquote>
<p>＜參考＞ <span class="exturl" data-url="aHR0cHM6Ly93d3cudGVjaHBpdC5qcC9jb3Vyc2VzLzk4L2N1cnJpY3VsdW1zLzEwMS9zZWN0aW9ucy83NTkvcGFydHMvMjY1Ng==">Zoom APIの設定をしてみよう（如何設定 Zoom API）<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
<h2 id="圖像識別"><a href="#圖像識別" class="headerlink" title="圖像識別"></a>圖像識別</h2><h3 id="Cloud-Vision-API"><a href="#Cloud-Vision-API" class="headerlink" title="Cloud Vision API"></a><span class="exturl" data-url="aHR0cHM6Ly9jbG91ZC5nb29nbGUuY29tL3Zpc2lvbj9obD16aC10dw==">Cloud Vision API<i class="fa fa-external-link-alt"></i></span></h3><ul>
<li>可以使用 Google 的圖像識別 AI。</li>
<li>功能包括檢測物體和臉部等多種功能。</li>
<li>適用於圖像的功能以「單位」作為計算，每月最多可免費使用 1000 個單位。</li>
</ul>
<blockquote>
<p>＜參考＞ <span class="exturl" data-url="aHR0cHM6Ly9jbG91ZC5nb29nbGUuY29tL3Zpc2lvbi9kb2NzL2hvdy10bz9obD1qYQ==">入門ガイド | Cloud Vision API（入門指南 | Cloud Vision API）<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
<h3 id="A3RT"><a href="#A3RT" class="headerlink" title="A3RT"></a><span class="exturl" data-url="aHR0cHM6Ly9hM3J0LnJlY3J1aXQuY28uanAv">A3RT<i class="fa fa-external-link-alt"></i></span></h3><ul>
<li>由 Recruit 公司提供的機器學習服務，已經在商業上使用。</li>
<li>可以使用總共 9 種 API，包括允許圖像和文字互相搜尋的「Image Search API」，以及基於已購買商品進行推薦的「Listing API」。</li>
</ul>
<blockquote>
<p>＜參考＞ <span class="exturl" data-url="aHR0cHM6Ly93d3cucGktcGUuY28uanAvc29sdXRpb24vYXJ0aWNsZS9tYWNoaW5lLWxlYXJuaW5nLzIxNC8=">リクルートのAI「A3RT」の使い方と活用方法とは？（Recruit 的 AI  「A3RT」的使用方法以及如何應用？）<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
<h3 id="Microsoft-Face-API"><a href="#Microsoft-Face-API" class="headerlink" title="Microsoft Face API"></a><span class="exturl" data-url="aHR0cHM6Ly9henVyZS5taWNyb3NvZnQuY29tL3poLXR3L3Byb2R1Y3RzL2FpLXNlcnZpY2VzL2FpLXZpc2lvbi8=">Microsoft Face API<i class="fa fa-external-link-alt"></i></span></h3><ul>
<li>可以使用臉部影像進行情感辨識等各種功能，且隱私受到嚴格保護。</li>
<li>每月最多免費提供 3 萬筆資料庫交易。</li>
</ul>
<blockquote>
<p>＜參考＞ <span class="exturl" data-url="aHR0cHM6Ly9sZWFybi5taWNyb3NvZnQuY29tL2phLWpwL3hhbWFyaW4veGFtYXJpbi1mb3Jtcy9kYXRhLWNsb3VkL2F6dXJlLWNvZ25pdGl2ZS1zZXJ2aWNlcy9lbW90aW9uLXJlY29nbml0aW9u">Face API を使用した感情認識（使用 Face API 進行情感辨識）<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
<h2 id="語音識別"><a href="#語音識別" class="headerlink" title="語音識別"></a>語音識別</h2><h3 id="Google-Cloud-Speech-to-Text-API"><a href="#Google-Cloud-Speech-to-Text-API" class="headerlink" title="Google Cloud Speech-to-Text API"></a><span class="exturl" data-url="aHR0cHM6Ly9jbG91ZC5nb29nbGUuY29tL3NwZWVjaC10by10ZXh0P2hsPXpoLVRX">Google Cloud Speech-to-Text API<i class="fa fa-external-link-alt"></i></span></h3><ul>
<li>可以將語音資料轉換為文字逐字稿。</li>
<li>例如，在影片加上字幕時非常有用。</li>
<li>每月最多可免費使用 60 分鐘。</li>
</ul>
<blockquote>
<p>＜參考＞ <span class="exturl" data-url="aHR0cHM6Ly90ZWNoLWJsb2cub3B0aW0uY28uanAvZW50cnkvMjAyMC8wMi8yMS8xNjMwMDA=">Google Cloud Speech-to-Text APIをいろいろ調査してみる（對 Google Cloud Speech-to-Text API 進行各種調查）<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
<h3 id="Web-Speech-API"><a href="#Web-Speech-API" class="headerlink" title="Web Speech API"></a><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL1dlYl9TcGVlY2hfQVBJ">Web Speech API<i class="fa fa-external-link-alt"></i></span></h3><ul>
<li>支援多種語言也是一項優勢。</li>
<li>由於是瀏覽器的 Native API，因此不需要驗證金鑰。</li>
</ul>
<blockquote>
<p>＜參考＞ <span class="exturl" data-url="aHR0cHM6Ly90ZWNoLWJsb2cub3B0aW0uY28uanAvZW50cnkvMjAyMC8wMi8yMS8xNjMwMDA=">Web Speech API（ウェブ音声API）の説明と使い方とサンプルコード【2023】（Web Speech API 的說明、使用方法和範例程式碼【2023】）<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
<h2 id="聊天機器人"><a href="#聊天機器人" class="headerlink" title="聊天機器人"></a>聊天機器人</h2><h3 id="IBM-Watson-Assistant"><a href="#IBM-Watson-Assistant" class="headerlink" title="IBM Watson Assistant"></a><span class="exturl" data-url="aHR0cHM6Ly93d3cuaWJtLmNvbS9wcm9kdWN0cy93YXRzb24tYXNzaXN0YW50">IBM Watson Assistant<i class="fa fa-external-link-alt"></i></span></h3><ul>
<li>也提供免費但有限制的使用方案。</li>
</ul>
<table>
<thead>
<tr>
<th></th>
<th>Lite</th>
<th>Plus</th>
<th>Enterprise</th>
</tr>
</thead>
<tbody><tr>
<td>價格</td>
<td>免費</td>
<td>140 美元/月</td>
<td>請直接諮詢</td>
</tr>
<tr>
<td>Assistant 數量</td>
<td>3</td>
<td>10</td>
<td>30</td>
</tr>
<tr>
<td>分析資料保存期限</td>
<td>7 天</td>
<td>30 天</td>
<td>最多 90 天</td>
</tr>
<tr>
<td>Session Timeout 限制</td>
<td>5 分鐘</td>
<td>24 小時</td>
<td>7 天</td>
</tr>
</tbody></table>
<blockquote>
<p>＜參考＞ <span class="exturl" data-url="aHR0cHM6Ly9haXNtaWxleS5jby5qcC9haV9uZXdzL2libS13YXRzb24tYXNzaXN0YW50Lw==">Watson Assistantとは？IBMのAIチャットボット開発ツール！メリット・事例を紹介！（什麼是 Watson Assistant？ IBM 的 AI 聊天機器人開發工具！優勢和範例介紹！）<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
<h3 id="LINE-Messaging-API"><a href="#LINE-Messaging-API" class="headerlink" title="LINE Messaging API"></a><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXJzLmxpbmUuYml6L3poLWhhbnQvc2VydmljZXMvbWVzc2FnaW5nLWFwaS8=">LINE Messaging API<i class="fa fa-external-link-alt"></i></span></h3><ul>
<li>也支援發送圖片、影片、音頻等多媒體內容。</li>
<li>在免費方案中，每月可以發送 200 條消息。</li>
</ul>
<table>
<thead>
<tr>
<th></th>
<th>Communication Plan</th>
<th>Lite Plan</th>
<th>Standard plan</th>
</tr>
</thead>
<tbody><tr>
<td>每月固定費用（不含稅）</td>
<td>0 日幣</td>
<td>5,000 日幣</td>
<td>15,000 日幣</td>
</tr>
<tr>
<td>免費消息數量（每月）</td>
<td>200 條</td>
<td>5,000 條</td>
<td>30,000 條</td>
</tr>
<tr>
<td>額外消息費用（不含稅）</td>
<td>不適用</td>
<td>不適用</td>
<td>～3 日幣/條</td>
</tr>
</tbody></table>
<blockquote>
<p>＜參考＞ <span class="exturl" data-url="aHR0cHM6Ly9jb2RlemluZS5qcC9hcnRpY2xlL2RldGFpbC8xNzY1NA==">LINEでメッセージの送受信を行おう！ Messaging APIの基本的な使い方から解説（在 LINE 上接收與發送訊息！解說 Messaging API 的基本使用方式）<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
<h3 id="Discord-API"><a href="#Discord-API" class="headerlink" title="Discord API"></a><span class="exturl" data-url="aHR0cHM6Ly9kaXNjb3JkLmNvbS9kZXZlbG9wZXJzL2RvY3MvaW50cm8=">Discord API<i class="fa fa-external-link-alt"></i></span></h3><ul>
<li>可以自由實作觸發事件及其處理。</li>
<li>可以建立具有各種功能的聊天機器人。</li>
</ul>
<blockquote>
<p>＜參考＞  <span class="exturl" data-url="aHR0cHM6Ly9xaWl0YS5jb20vMW50ZWdyYWxlOS9pdGVtcy85ZDU3MGVmODE3NWNmMTc4NDY4Zg==">Pythonで実用Discord Bot(discordpy解説)（使用 Python 的實用 Discord Bot（discordpy 解說））<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
<h3 id="Slack-API"><a href="#Slack-API" class="headerlink" title="Slack API"></a><span class="exturl" data-url="aHR0cHM6Ly9hcGkuc2xhY2suY29tLw==">Slack API<i class="fa fa-external-link-alt"></i></span></h3><ul>
<li>可以將自訂的聊天機器人加到頻道中。</li>
<li>可以輕鬆與外部工具整合，並用來發布訊息。</li>
</ul>
<blockquote>
<p>＜參考＞ <span class="exturl" data-url="aHR0cHM6Ly96ZW5uLmRldi9rb3VfcGdfMDEzMS9hcnRpY2xlcy9zbGFjay1hcGktcG9zdC1tZXNzYWdl">Slack API を使用してメッセージを投稿する（使用 Slack API 發布訊息）<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
<h2 id="SNS-社交軟體"><a href="#SNS-社交軟體" class="headerlink" title="SNS 社交軟體"></a>SNS 社交軟體</h2><h3 id="Qiita-API"><a href="#Qiita-API" class="headerlink" title="Qiita API"></a><span class="exturl" data-url="aHR0cHM6Ly9xaWl0YS5jb20vYXBpL3YyL2RvY3M=">Qiita API<i class="fa fa-external-link-alt"></i></span></h3><ul>
<li>可以使用 API 管理熟悉的 Qiita 文章。</li>
<li>這在分析存取資料和趨勢分析等工作時不可或缺。</li>
</ul>
<blockquote>
<p>＜參考＞ <span class="exturl" data-url="aHR0cHM6Ly9oYXJpbmV6Mi5oYXRlYmxvLmpwL2VudHJ5L3FpaXRhX2FwaV9ieV9weXRob24=">Qiita APIとPythonを用いてQiitaのデータを取得してみる（試著用 Qiita API 和 Python 取得 Qiita 資料）<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
<h3 id="Instagram-API"><a href="#Instagram-API" class="headerlink" title="Instagram API"></a><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXJzLmZhY2Vib29rLmNvbS9wcm9kdWN0cy9pbnN0YWdyYW0vYXBpcy8=">Instagram API<i class="fa fa-external-link-alt"></i></span></h3><p><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXJzLmZhY2Vib29rLmNvbS9wcm9kdWN0cy9pbnN0YWdyYW0vYXBpcy8=">Instagram APIs | Facebook for Developers<i class="fa fa-external-link-alt"></i></span></p>
<ul>
<li>使用基本顯示 API，可以取得個人資料訊息，有助於簡化登入流程等。</li>
<li>使用需要 Business Account 的 Graph API，可以自動發布內容和建立聊天機器人。</li>
</ul>
<blockquote>
<p>＜參考＞ <span class="exturl" data-url="aHR0cHM6Ly9kaS1hY2MyLmNvbS9zeXN0ZW0vcnBhLzE5MjgwLyNpbmRleF9pZDE=">Instagram Graph APIの使い方・認証手順｜アクセストークン・アプリ・インスタビジネスアカウントID取得（Instagram Graph API 的使用方式和身份驗證步驟｜取得 Access Token、APP、Instagram Business Account ID）<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
<h3 id="YouTube-Data-API"><a href="#YouTube-Data-API" class="headerlink" title="YouTube Data API"></a><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXJzLmdvb2dsZS5jb20veW91dHViZS92Mw==">YouTube Data API<i class="fa fa-external-link-alt"></i></span></h3><p><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXJzLmdvb2dsZS5jb20veW91dHViZS92Mw==">YouTube Data API  |  Google for Developers<i class="fa fa-external-link-alt"></i></span></p>
<ul>
<li>可以取得觀看次數和高評分等與影片相關的資訊。</li>
<li>可以分析自己發布的內容。</li>
<li>如果想要增加每天的使用上限，則需要透過表格提交申請。</li>
</ul>
<blockquote>
<p>＜參考＞ <span class="exturl" data-url="aHR0cHM6Ly9kaXktcHJvZ3JhbW1pbmcuc2l0ZS90b29scy9tb3ZpZS1tYXRvbWUtc2l0ZS0zLw==">YouTube APIの使い方とブラウザだけでデータ取得する方法（YouTube API 的使用方法，以及只透過瀏覽器取得資料的方法）<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
<h3 id="Twitch-API"><a href="#Twitch-API" class="headerlink" title="Twitch API"></a><span class="exturl" data-url="aHR0cHM6Ly9kZXYudHdpdGNoLnR2L2RvY3MvYXBpLw==">Twitch API<i class="fa fa-external-link-alt"></i></span></h3><ul>
<li>可以取得與 Twitch 上正在直播的內容相關的資訊。</li>
<li>可以輕鬆掌握正流行的遊戲。</li>
</ul>
<blockquote>
<p>＜參考＞ <span class="exturl" data-url="aHR0cHM6Ly92YXRjaGxvZy5jb20vdHdpdGNoYXBpLXB5dGhvbi1tZW1vLw==">Twitch API をPythonで使うメモ（以 Python 使用 Twitch API 的筆記）<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
<h2 id="音樂"><a href="#音樂" class="headerlink" title="音樂"></a>音樂</h2><h3 id="Spotify-Web-API"><a href="#Spotify-Web-API" class="headerlink" title="Spotify Web API"></a><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuc3BvdGlmeS5jb20vZG9jdW1lbnRhdGlvbi93ZWItYXBp">Spotify Web API<i class="fa fa-external-link-alt"></i></span></h3><ul>
<li>提供使用者查詢音樂庫中的歌曲和播放清單等相關資料。</li>
<li>喜歡的歌曲可以用毫秒為單位分析。</li>
</ul>
<blockquote>
<p>＜參考＞ <span class="exturl" data-url="aHR0cHM6Ly9nYWFhb24uanAvYmxvZy9zcG90aWZ5">Spotify APIで楽曲の分析データを取得する方法（使用 Spotify API 取得音樂分析資料的方法）<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
<h3 id="Apple-Music-API"><a href="#Apple-Music-API" class="headerlink" title="Apple Music API"></a><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYXBwbGUuY29tL2RvY3VtZW50YXRpb24vYXBwbGVtdXNpY2FwaS8=">Apple Music API<i class="fa fa-external-link-alt"></i></span></h3><ul>
<li>可以搜尋與再生歌曲。</li>
<li>將有助於開發 IOS 應用程式。</li>
</ul>
<blockquote>
<p>＜參考＞ <span class="exturl" data-url="aHR0cHM6Ly9kZXYuY2xhc3NtZXRob2QuanAvYXJ0aWNsZXMvaW9zLTExLWFwcGxlLW11c2ljLWFwaS1zZWFyY2gv">[iOS 11] Apple Music APIを使用してアルバム検索アプリを作る（[iOS 11] 使用 Apple Music API 建立專輯搜尋應用程式）<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
<h2 id="天氣"><a href="#天氣" class="headerlink" title="天氣"></a>天氣</h2><h3 id="OpenWeatherMap-API"><a href="#OpenWeatherMap-API" class="headerlink" title="OpenWeatherMap API"></a><span class="exturl" data-url="aHR0cHM6Ly9vcGVud2VhdGhlcm1hcC5vcmcvYXBp">OpenWeatherMap API<i class="fa fa-external-link-alt"></i></span></h3><ul>
<li>可以取得未來 5 天的天氣預報。</li>
<li>在付費方案中，可以取得詳細的降雨預測圖像。</li>
</ul>
<blockquote>
<p>＜參考＞ <span class="exturl" data-url="aHR0cHM6Ly9hdXRvLXdvcmtlci5jb20vYmxvZy8/cD0xNjEyIw==">世界の天気API「OpenWeatherMap」の無料APIキー発行・取得、リクエスト方法（取得世界各地的天氣 API「OpenWeatherMap」的免費 API 密鑰和請求方法）<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
<h3 id="Free-Weather-API"><a href="#Free-Weather-API" class="headerlink" title="Free Weather API"></a><span class="exturl" data-url="aHR0cHM6Ly93d3cud2VhdGhlcmFwaS5jb20v">Free Weather API<i class="fa fa-external-link-alt"></i></span></h3><ul>
<li>可以取得全即時天氣資料和天氣預報。</li>
<li>每月可免費執行 100 萬次。</li>
</ul>
<blockquote>
<p>＜參考＞ <span class="exturl" data-url="aHR0cHM6Ly9oaWJpLXVwZGF0ZS5vcmcvb3RoZXIvb3BlbndlYXRoZXJtYXAtYXBpLw==">無料で使える天気API「Free Weather API」の利用登録とキー発行手順（可免費使用的天氣 API「Free Weather API」的註冊和密鑰生成流程）<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
<h2 id="線上購物"><a href="#線上購物" class="headerlink" title="線上購物"></a>線上購物</h2><h3 id="Rakuten-API"><a href="#Rakuten-API" class="headerlink" title="Rakuten API"></a><span class="exturl" data-url="aHR0cHM6Ly93ZWJzZXJ2aWNlLnJha3V0ZW4uY28uanAvZG9jdW1lbnRhdGlvbg==">Rakuten API<i class="fa fa-external-link-alt"></i></span></h3><ul>
<li>可以取得與樂天網站有關的各種資訊。</li>
<li>涵蓋樂天市場的商品資訊、旅行計劃和食譜等各種方面。</li>
</ul>
<blockquote>
<p>＜參考＞ <span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmZyYW5rdWwubmV0LzIwMjIvMDMvMzAvcmFrdXRlbi1hcGkv">無料で使える、楽天APIを使ってみよう！（試試免費的樂天 API！）<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
<h3 id="Amazon-Product-Advertising-API"><a href="#Amazon-Product-Advertising-API" class="headerlink" title="Amazon Product Advertising API"></a><span class="exturl" data-url="aHR0cHM6Ly9hZmZpbGlhdGUuYW1hem9uLmNvLmpwLz9pc0xhbmd1YWdlUHJlZmVyZW5jZUZhaWxlZD1mYWxzZQ==">Amazon Product Advertising API<i class="fa fa-external-link-alt"></i></span></h3><ul>
<li>這是用於聯盟式營銷的 API。</li>
<li>可以訪問 Amazon 大量的商品資訊。</li>
</ul>
<blockquote>
<p>＜參考＞ <span class="exturl" data-url="aHR0cHM6Ly93cG9yei5jb20vYW1hem9uLXByb2R1Y3QtYWR2ZXJ0aXNpbmctYXBpLXBhLWFwaS01LTAv">【初心者向け】Amazon Product Advertising API（PA-API v5）の使い方と必要な作業（【初學者指南】Amazon Product Advertising API（PA-API v5）的使用方法和所需步驟）<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
<h3 id="Yahoo-Shopping-API"><a href="#Yahoo-Shopping-API" class="headerlink" title="Yahoo Shopping API"></a><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIueWFob28uY28uanAvd2ViYXBpL3Nob3BwaW5nLw==">Yahoo Shopping API<i class="fa fa-external-link-alt"></i></span></h3><ul>
<li>可以取得 Yahoo 網站上的商品訊息。</li>
<li>可以輕鬆參考日語的商品評論是一大優勢。</li>
</ul>
<blockquote>
<p>＜參考＞ <span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNvZGVjYW1wLmpwL3lhaG9vLWFwaS1wcm9ncmFtbWluZw==">【プログラミング初心者でも大丈夫】Yahoo APIを使ってみよう（【程式初學者也可以】試試使用 Yahoo API）<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
<h2 id="圖像・影片作品"><a href="#圖像・影片作品" class="headerlink" title="圖像・影片作品"></a>圖像・影片作品</h2><h3 id="Pinterest-API"><a href="#Pinterest-API" class="headerlink" title="Pinterest API"></a><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXJzLnBpbnRlcmVzdC5jb20v">Pinterest API<i class="fa fa-external-link-alt"></i></span></h3><ul>
<li>可以自動建立與圖像相關的 Pin 和 Board。</li>
<li>也提供用於連結產品資訊用的購物 API。</li>
</ul>
<blockquote>
<p><span class="exturl" data-url="aHR0cHM6Ly9saWdpbmMuY28uanAvMzQ5OTcz">＜參考＞ わずか数行のコードで利用できちゃう！Pinterest APIを活用してみた。（只需幾行程式碼即可使用！試著用了 Pinterest API。）<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
<h3 id="Tmdb-API"><a href="#Tmdb-API" class="headerlink" title="Tmdb API"></a><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIudGhlbW92aWVkYi5vcmcvZG9jcw==">Tmdb API<i class="fa fa-external-link-alt"></i></span></h3><ul>
<li>可以取得已公開電影的相關資訊，包括劇情簡介和海報圖片。</li>
<li>作品可依類別分類，非常方便。</li>
</ul>
<blockquote>
<p>＜參考＞ <span class="exturl" data-url="aHR0cHM6Ly9jaG9jb2xhdDUuY29tL2phL3RpcHMvdG1kYi1hcGkv">TMDb API を利用して映画のポスターやあらすじを自分のサイトに表示する（利用 TMDb API 在自己的網站上顯示電影海報和劇情簡介）<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
<h3 id="NHK-節目表-API"><a href="#NHK-節目表-API" class="headerlink" title="NHK 節目表 API"></a><span class="exturl" data-url="aHR0cHM6Ly9hcGktcG9ydGFsLm5oay5vci5qcC8=">NHK 節目表 API<i class="fa fa-external-link-alt"></i></span></h3><ul>
<li>透過指定地區、服務和日期，可以取得符合條件的節目列表。</li>
<li>可以自動抓取關鍵字，找出觀眾感興趣的相關節目資訊。</li>
</ul>
<blockquote>
<p>＜參考＞ <span class="exturl" data-url="aHR0cHM6Ly9lZGdla25vY2tlci5ibG9nc3BvdC5jb20vMjAxOS8wNi9uaGthcGkuaHRtbA==">NHK番組表APIを使ってキーワード監視と通知（使用 NHK 節目表 API 監視關鍵詞和通知）<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
<h2 id="書籍"><a href="#書籍" class="headerlink" title="書籍"></a>書籍</h2><h3 id="Google-Books-API"><a href="#Google-Books-API" class="headerlink" title="Google Books API"></a><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXJzLmdvb2dsZS5jb20vYm9va3M=">Google Books API<i class="fa fa-external-link-alt"></i></span></h3><ul>
<li>除了作者、書名等書籍資訊，也能取得論文的相關資料。</li>
<li>每日請求上限為 1000 次。</li>
</ul>
<blockquote>
<p>＜參考＞ <span class="exturl" data-url="aHR0cHM6Ly9lZGdla25vY2tlci5ibG9nc3BvdC5jb20vMjAxOS8wNi9uaGthcGkuaHRtbA==">書籍検索APIのGoogle Books APIsの使い方（PHPでのサンプルコードあり）（使用 Google Books API 檢索書籍的方法（附有 PHP 範例程式碼））<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
<h3 id="國立國會圖書館檢索-API"><a href="#國立國會圖書館檢索-API" class="headerlink" title="國立國會圖書館檢索 API"></a><span class="exturl" data-url="aHR0cHM6Ly9pc3MubmRsLmdvLmpwL2luZm9ybWF0aW9uL2FwaS9yaXlvdS8=">國立國會圖書館檢索 API<i class="fa fa-external-link-alt"></i></span></h3><ul>
<li>能夠查詢國立國會圖書館所藏圖書的訊息。</li>
<li>國內書籍基本上都有相關資訊。</li>
</ul>
<blockquote>
<p>＜參考＞ <span class="exturl" data-url="aHR0cHM6Ly9xaWl0YS5jb20vc2FveWFnaTIvaXRlbXMvNWMyMzU1MGIwYTAwOTMzMzg2YTY=">国立国会図書館サーチ APIを使ってみる（試著用了國立國會圖書館搜尋 API）<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
<h3 id="圖書館-API"><a href="#圖書館-API" class="headerlink" title="圖書館 API"></a><span class="exturl" data-url="aHR0cHM6Ly9jYWxpbC5qcC9kb2MvYXBpLmh0bWw=">圖書館 API<i class="fa fa-external-link-alt"></i></span></h3><ul>
<li>透過指定經度和緯度，可以取得距離該地點最近的圖書館資料。</li>
<li>此外，也可以查看有無藏書和借閱狀況的資訊。</li>
</ul>
<blockquote>
<p>＜參考＞ <span class="exturl" data-url="aHR0cHM6Ly9ib29vazI0LmNvbS8/cD0xNTYy">【python】カーリルAPIで図書蔵書情報を取得する（使用 Python 透過 Calil API 取得圖書館藏書資訊）<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
<h2 id="位置・交通"><a href="#位置・交通" class="headerlink" title="位置・交通"></a>位置・交通</h2><h3 id="郵遞區號檢索-API"><a href="#郵遞區號檢索-API" class="headerlink" title="郵遞區號檢索 API"></a><span class="exturl" data-url="aHR0cDovL3ppcGNsb3VkLmlic25ldC5jby5qcC9kb2MvYXBp">郵遞區號檢索 API<i class="fa fa-external-link-alt"></i></span></h3><ul>
<li>可以透過郵遞區號搜索地址。</li>
<li>可以應用於 EC 網站等自動填寫功能。</li>
</ul>
<blockquote>
<p>＜參考＞ <span class="exturl" data-url="aHR0cHM6Ly9pbnRvLXRoZS1wcm9ncmFtLmNvbS9qYXZhc2NyaXB0LWdldC1hZGRyZXNzLXppcGNvZGUtc2VhcmNoLWFwaS8=">【JavaScript】郵便番号検索APIで住所検索を実装する（【JavaScript】實作郵遞區號檢索 API 來搜索地址）<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
<h3 id="Google-Maps-API"><a href="#Google-Maps-API" class="headerlink" title="Google Maps API"></a><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXJzLmdvb2dsZS5jb20vbWFwcy8=">Google Maps API<i class="fa fa-external-link-alt"></i></span></h3><ul>
<li>可以在瀏覽器中顯示 Google 地圖。</li>
<li>有許多日語的文件，有助於順利實作。</li>
</ul>
<blockquote>
<p>＜參考＞ <span class="exturl" data-url="aHR0cHM6Ly9xaWl0YS5jb20vSGFydWthLU9nYXdhL2l0ZW1zLzk5NzQwMWEyZWRjZDIwZTYxMDM3">Google Maps API を使ってみた（嘗試使用Google Maps API）<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
<h3 id="駅すぱあとWeb-服務"><a href="#駅すぱあとWeb-服務" class="headerlink" title="駅すぱあとWeb 服務"></a><span class="exturl" data-url="aHR0cHM6Ly9kb2NzLmVraXNwZXJ0LmNvbS92MS9hcGkv">駅すぱあとWeb 服務<i class="fa fa-external-link-alt"></i></span></h3><ul>
<li>可以取得與公共交通資訊和轉乘指南有關訊息。</li>
<li>對於查詢最近的車站，或搜尋通往目的地的路線都不可或缺。</li>
</ul>
<blockquote>
<p>＜參考＞ <a href="">駅すぱあとWebサービスフリープランを利用する（使用駅すぱあと Web 服務的免費方案）</a></p>
</blockquote>
<h3 id="NAVITIME-API"><a href="#NAVITIME-API" class="headerlink" title="NAVITIME API"></a><span class="exturl" data-url="aHR0cHM6Ly9hcGktc2RrLm5hdml0aW1lLmNvLmpwL2FwaS8=">NAVITIME API<i class="fa fa-external-link-alt"></i></span></h3><ul>
<li>搜索車輛導航路線非常方便。</li>
</ul>
<table>
<thead>
<tr>
<th></th>
<th>BASIC</th>
<th>PRO</th>
</tr>
</thead>
<tbody><tr>
<td>月費金額</td>
<td>免費</td>
<td>$200</td>
</tr>
<tr>
<td>請求限制</td>
<td>50次/分</td>
<td>100次/分</td>
</tr>
</tbody></table>
<h3 id="Hot-Pepper-API"><a href="#Hot-Pepper-API" class="headerlink" title="Hot Pepper API"></a><span class="exturl" data-url="aHR0cHM6Ly93ZWJzZXJ2aWNlLnJlY3J1aXQuY28uanAvZG9jL2hvdHBlcHBlci9yZWZlcmVuY2UuaHRtbA==">Hot Pepper API<i class="fa fa-external-link-alt"></i></span></h3><ul>
<li>可以取得餐廳的名稱和 URL 資訊。</li>
<li>可以搜索位置資訊等詳細資料。</li>
</ul>
<blockquote>
<p>＜參考＞ <span class="exturl" data-url="aHR0cHM6Ly93ZWItdHdlZXRzLmNvbS9weXRob24vaG90cGVwcGVyLWFwaS8=">pythonでホットペッパーのAPIを叩いてみた（使用 Python 串接 Hot Pepper API）<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
<h2 id="金融服務"><a href="#金融服務" class="headerlink" title="金融服務"></a>金融服務</h2><h3 id="Yahoo-Finance-API"><a href="#Yahoo-Finance-API" class="headerlink" title="Yahoo Finance API"></a><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIueWFob28uY29tL2FwaS8/Z3VjY291bnRlcj0x">Yahoo Finance API<i class="fa fa-external-link-alt"></i></span></h3><ul>
<li>可以取得開盤價、最高價、最低價和收盤價等股票相關資料。</li>
<li>也可以輕鬆指定日本的股票。</li>
</ul>
<blockquote>
<p>＜參考＞ <span class="exturl" data-url="aHR0cHM6Ly93ZWItdHdlZXRzLmNvbS9weXRob24vaG90cGVwcGVyLWFwaS8=">yfinance API を使って株のデータを取得する（使用 yfinance API 取得股票相關資料）<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
<h3 id="交易所-API"><a href="#交易所-API" class="headerlink" title="交易所 API"></a><span class="exturl" data-url="aHR0cHM6Ly9jb2luY2hlY2suY29tL2phL2RvY3VtZW50cy9leGNoYW5nZS9hcGk=">交易所 API<i class="fa fa-external-link-alt"></i></span></h3><ul>
<li>在不需身份驗證的 Public API，可以取得交易所的訂單狀態和歷史記錄等資訊。</li>
<li>若使用 Private API，可以使用查詢訂單等自動交易的功能。</li>
</ul>
<blockquote>
<p>＜參考＞ <span class="exturl" data-url="aHR0cHM6Ly9kaS1hY2MyLmNvbS9wcm9ncmFtbWluZy9weXRob24vMTUzMTYv">【Python】コインチェックAPIの取得と自動売買の実践手順｜Coincheck仮想通貨・ビットコイン取引機能入門（【Python】使用 Coincheck API 實際進行交易的步驟｜Coincheck 虛擬貨幣和比特幣交易功能入門）<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
<h2 id="狂熱取向"><a href="#狂熱取向" class="headerlink" title="狂熱取向"></a>狂熱取向</h2><h3 id="Poke-API"><a href="#Poke-API" class="headerlink" title="Poke API"></a><span class="exturl" data-url="aHR0cHM6Ly9wb2tlYXBpLmNvLw==">Poke API<i class="fa fa-external-link-alt"></i></span></h3><ul>
<li>可以取得寶可夢的名稱、類型、可學技能以及遊戲內物品相關的資訊。</li>
<li>需注意所有內容都以英語表示。</li>
</ul>
<blockquote>
<p>＜參考＞ <span class="exturl" data-url="aHR0cHM6Ly90YWl5b3NpdGUuY29tL3Bva2VhcGktZWxlbWVudGFyeS8=">PokeAPIの使い方【初心者向け】（PokeAPI 的使用方法【初學者專用】）<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
<h3 id="Official-Joke-API"><a href="#Official-Joke-API" class="headerlink" title="Official Joke API"></a><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tLzE1RGthdHovb2ZmaWNpYWxfam9rZV9hcGk=">Official Joke API<i class="fa fa-external-link-alt"></i></span></h3><ul>
<li>隨機取得笑話。</li>
<li>由紮實的鋪墊和結尾組成。 </li>
<li>也就是所謂的美式笑話。</li>
</ul>
<blockquote>
<p>＜參考＞ <span class="exturl" data-url="aHR0cHM6Ly9xaWl0YS5jb20vZGFuaXNoaS9pdGVtcy80MmQ4YWRmNjI5MTUxNWU2MjI4NA==">【随時更新】一風変わったWeb APIをまとめてみた（【定期更新】整理一些不同尋常的 Web API）<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
<h3 id="Marvel-API"><a href="#Marvel-API" class="headerlink" title="Marvel API"></a><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubWFydmVsLmNvbS8=">Marvel API<i class="fa fa-external-link-alt"></i></span></h3><ul>
<li>可以取得 Marvel 相關漫畫角色的圖像和故事內容。</li>
<li>可以輕鬆建立簡單的測驗網站等。</li>
</ul>
<blockquote>
<p>＜參考＞ <span class="exturl" data-url="aHR0cHM6Ly93ZWJkZXYtYm9keW1ha2UuY29tL21hcnZlbC1hcGkv">【アメコミ】マーベルAPIでカッコいいサイトを作ろう！（【美漫】使用 Marvel API 建立酷炫網站！）<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
<h3 id="NASA-API"><a href="#NASA-API" class="headerlink" title="NASA API"></a><span class="exturl" data-url="aHR0cHM6Ly9hcGkubmFzYS5nb3Yv">NASA API<i class="fa fa-external-link-alt"></i></span></h3><ul>
<li>主要可以取得行星資訊和衛星圖像。</li>
<li>在考慮遷居太空時，或許派得上用場。</li>
</ul>
<blockquote>
<p>＜參考＞ <span class="exturl" data-url="aHR0cHM6Ly9ub3RlLmNvbS9za19nYW1lX3RoZW9yeS9uL25lODQ2MWVmNGRjOGQ=">NASAのAPIを使ってみる（嘗試用了 NASA 的 API）<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
<h2 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h2><p>在現代軟體中，Web API 扮演極其重要的角色。僅僅瞭解這些存在和功能，或許就能擴大的可能性和選擇。</p>
<p>以上介紹的大多數 API 都適用於個人開發。對於希望建立新服務的人來說，這些 API 將成為極具質量和便利性的有力幫手。</p>
<p>在弊公司 Nuco，也發布了各種實用文章。如果感興趣，請隨時查看 <span class="exturl" data-url="aHR0cHM6Ly9xaWl0YS5jb20vb3JnYW5pemF0aW9ucy9udWNvLWluYw==">Organization<i class="fa fa-external-link-alt"></i></span> 頁面。此外，Nuco 也正在招募志同道合的夥伴！請<span class="exturl" data-url="aHR0cHM6Ly93d3cucmVjcnVpdC5udWNvLmNvLmpwLz9xaWl0YV9pdGVtX2lkPTdiMmZlYWQyYTk2OThkMWMxNWU4">參閱這裡<i class="fa fa-external-link-alt"></i></span>。</p>
<blockquote>
<p>15th鐵人賽目錄傳送門：<span class="exturl" data-url="aHR0cHM6Ly9pdGhlbHAuaXRob21lLmNvbS50dy91c2Vycy8yMDEzNTU1OC9pcm9ubWFuLzYyOTA=">https://ithelp.ithome.com.tw/users/20135558/ironman/6290<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
]]></content>
      <categories>
        <category>2023鐵人賽</category>
        <category>Front-End</category>
      </categories>
      <tags>
        <tag>Front-End</tag>
        <tag>WebAPI</tag>
        <tag>ironman2023</tag>
        <tag>Qiita</tag>
      </tags>
  </entry>
  <entry>
    <title>[2023 15th鐵人賽] Day21 - 日本數位廳的網站太扯了www</title>
    <url>/ironman-2023-day-21/</url>
    <content><![CDATA[<blockquote>
<p>原文連結：<span class="exturl" data-url="aHR0cHM6Ly9xaWl0YS5jb20vbXVfdG9tb3lhL2l0ZW1zL2Y3OGYxZmFkM2E4YjU3YWM3ZGMz">デジタル庁のサイトやばすぎるwww - Qiita<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
<blockquote>
<p><span class="exturl" data-url="aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3poLXR3LyVFNiU5NSVCOCVFNCVCRCU4RCVFNSVCQiVCMw==">デジタル庁（數位廳 ）<i class="fa fa-external-link-alt"></i></span>：因應 COVID-19 疫情，日本政府於 2021 年 9 月 1 日成立數位廳（Digital Agency），欲將政府陳舊的服務系統與記錄保存進行技術升級，並訂定相關組織、法規與政策，致力打造數位社會（デジタル社会）與產業的數位轉型（DX，Digital Transformation）。</p>
</blockquote>
<p>其實第一點看到標題的<strong>やばすぎ</strong>，也就是各位熟知「超牙敗」（？），現代常用來表示「感覺不妙、意外地驚喜」等含義，本來以為這篇文章應該是想 diss 政府網站，畢竟やばい其實有點貶義的意味，沒想到實則驚嘆網站使用的是 Modern 技術與設計，以及進行分析。</p>
<p>關於具前衛風格的網站設計在日本的接受度，之前翻譯的這篇討論也有稍微提到：<a href="https://heidiliu2020.github.io/ironman-2023-day-12/">[Day12] 外國「為什麼日本無法像硬體時代一樣在軟體方面表現出色？」</a> </p>
<span id="more"></span>

<p>簡單來說，日本普遍消費者的喜好偏保守，導致許多日本網站，至今仍維持包含大量文本與閃爍橫幅的傳統設計，因此對於數位廳網頁的簡約風設計，評價還是很兩極。</p>
<p>也因此，不管是在這篇文章底下的討論串，還是在推特上，同樣有持兩派不同意見的人存在。不論是對於本篇文章的聳動標題，或對數位廳的極簡約設計，儘管為了爭取關注與討論度，還是採用新的技術與設計改革，得到的評價仍褒貶不一。但能肯定的是，透過這些方式，能夠確切體會到政府網站的變革。</p>
<p>那麼，以下正文開始！</p>
<hr>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>各位是否已經看過數位廳的網站了？這是近期成為討論話題的<span class="exturl" data-url="aHR0cHM6Ly93d3cuZGlnaXRhbC5nby5qcC8=">數位廳（デジタル庁）<i class="fa fa-external-link-alt"></i></span>：</p>
<p><img src="https://hackmd.io/_uploads/Bybv2B9ea.png"></p>
<p>這是截至 2023 年 6 月的數位廳網站。這不會太扯了嗎？當我第一眼看到時，忍不住心想「哇靠w」。接下來，我想談談這個網站究竟是哪裡令人感到驚訝。</p>
<h2 id="俐落的簡潔性，以及設計"><a href="#俐落的簡潔性，以及設計" class="headerlink" title="俐落的簡潔性，以及設計"></a>俐落的簡潔性，以及設計</h2><p>當我第一次看到網站時，感到非常驚訝。 「太簡單易讀了吧！」這是政府網站吧？提到政府機構的網站時，多數人可能會有這樣的印象，排滿難以閱讀的小字，但數位廳的網站竟如此貫徹簡潔性且易於閱讀。使用的字體是容易閱讀的 Noto Sans JP。黑色也不再是 <code>#000</code>，而是一種好看的顏色。這也太讚了吧。<br>接下來，當我看到這個佈局時，我認為因為有留白，所以能夠更容易閱讀。使用 Chrome Dev Tool 來查看佈局時，發現到：</p>
<p><img src="https://hackmd.io/_uploads/SJGs6Sqe6.png"></p>
<p>竟然採用 <strong>12-Column <span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvemgtVFcvZG9jcy9XZWIvQ1NTL0NTU19ncmlkX2xheW91dC9CYXNpY19jb25jZXB0c19vZl9ncmlkX2xheW91dA==">Grid Design<i class="fa fa-external-link-alt"></i></span>（ 12 列<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvemgtVFcvZG9jcy9XZWIvQ1NTL0NTU19ncmlkX2xheW91dC9CYXNpY19jb25jZXB0c19vZl9ncmlkX2xheW91dA==">格線設計<i class="fa fa-external-link-alt"></i></span>）</strong>！ ！ ！而且是 CSS Grid！這是我第一次看到像這樣漂亮使用 12 列格線設計的網站。 </p>
<p>有關 Grid Design 的詳細資訊可以參考：</p>
<p><span class="exturl" data-url="aHR0cHM6Ly9jb2xpc3MuY29tL2FydGljbGVzL2J1aWxkLXdlYnNpdGVzL29wZXJhdGlvbi93b3JrL3Jlc3BvbnNpdmUtZ3JpZC1kZXNpZ24tdWx0aW1hdGUtZ3VpZGUuaHRtbA==">最新版、レスポンシブ対応のレイアウト・グリッドデザイン徹底解説<i class="fa fa-external-link-alt"></i></span></p>
<p>再進一步觀察設計時，發現配色簡單，再加上清晰的對比，對於色弱的使用者而言較為友善的設計。<br>繼續仔細研究，發現數位廳發布了一個設計系統（Design System），而該設計系統也有發佈在 Figma 上：</p>
<p><span class="exturl" data-url="aHR0cHM6Ly93d3cuZGlnaXRhbC5nby5qcC9wb2xpY2llcy9zZXJ2aWNlZGVzaWduL2Rlc2lnbnN5c3RlbS8=">デザインシステム｜デジタル庁<i class="fa fa-external-link-alt"></i></span></p>
<p><img src="https://hackmd.io/_uploads/r1SlRScgp.png"></p>
<p>我認為設計被大量地用語言表達是很容易理解的。</p>
<p>內容非常詳盡且易於理解，還可以免費閱讀。當中解釋為什麼這樣設計，這對於任何從事 Web Design 的人來說都很值得一讀。比起飽讀許多設計書籍，或許閱讀這個設計系統更能夠提升設計能力。將設計相關的內容大篇幅以語言表達這點，非常有助於理解。</p>
<p>在閱讀過程中，可以發現在如何減輕使用者負擔方面，花費許多心思，看到這裡實在抬不起頭來。雖然這麼說可能有點失禮，但確實讓我意識到，這個網站是由專業的 Web Designer 所設計的。</p>
<p>除此之外，在其他頁面有介紹到 <span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvemgtVFcvZG9jcy9XZWIvQWNjZXNzaWJpbGl0eQ==">Web Accessibility（無障礙網頁）<i class="fa fa-external-link-alt"></i></span>：</p>
<p><span class="exturl" data-url="aHR0cHM6Ly93d3cuZGlnaXRhbC5nby5qcC9hY2Nlc3NpYmlsaXR5LXN0YXRlbWVudC8=">ウェブアクセシビリティ｜デジタル庁<i class="fa fa-external-link-alt"></i></span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly9kaWdpdGFsLWdvdi5ub3RlLmpwL24vbmIyZGE2YmEyMTgyOQ==">「誰一人取り残されない」を高い水準で叶えるために。ウェブサイトのアクセシビリティ検証結果と、その後｜デジタル庁<i class="fa fa-external-link-alt"></i></span></p>
<p>網站的 Web Accessibility 似乎符合 <span class="exturl" data-url="aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3poLXR3LyVFNiU5NyVBNSVFNiU5QyVBQyVFNyU5NCVBMiVFNiVBNSVBRCVFOCVBNiU4RiVFNiVBMCVCQw==">JIS（日本產業規格）<i class="fa fa-external-link-alt"></i></span> 標準，也有發佈檢驗結果。老實說，如果必須考慮到這個程度，可能會對這個網站感到反感，但數位廳的網站在這點卻做得非常徹底。</p>
<blockquote>
<p>數位廳的目標是「實現一個不讓任何人落後，且人性化的數位社會」。</p>
</blockquote>
<p>是很棒的想法，而這正是體現這個說法的 Web Design。此外，網站還有提供 Web Accessibility 功能實現指南，數位廳太慷慨了⋯⋯</p>
<p><span class="exturl" data-url="aHR0cHM6Ly93d3cuZGlnaXRhbC5nby5qcC9yZXNvdXJjZXMvaW50cm9kdWN0aW9uLXRvLXdlYi1hY2Nlc3NpYmlsaXR5LWd1aWRlYm9vay8=">ウェブアクセシビリティ導入ガイドブック｜デジタル庁<i class="fa fa-external-link-alt"></i></span></p>
<p>共計 56 頁的<span class="exturl" data-url="aHR0cHM6Ly93d3cuZGlnaXRhbC5nby5qcC9hc3NldHMvY29udGVudHMvbm9kZS9iYXNpY19wYWdlL2ZpZWxkX3JlZl9yZXNvdXJjZXMvMDhlZDg4ZTEtZDYyMi00M2NiLTkwMGItODQ5NTdhYjg3ODI2LzU5MDI1M2Q0LzIwMjMwMTI0X2ludHJvZHVjdGlvbl90b193ZWJhMTF5LnBkZg==">超豐富 PDF<i class="fa fa-external-link-alt"></i></span>。這些內容都是可以免費閱讀的喔？</p>
<h2 id="採用現代前端開發技術"><a href="#採用現代前端開發技術" class="headerlink" title="採用現代前端開發技術"></a>採用現代前端開發技術</h2><p><img src="https://hackmd.io/_uploads/r1jTavhep.png"></p>
<p>透過可以大略檢查 Web 網站使用何種技術的工具 <span class="exturl" data-url="aHR0cHM6Ly9jaHJvbWUuZ29vZ2xlLmNvbS93ZWJzdG9yZS9kZXRhaWwvd2FwcGFseXplci10ZWNobm9sb2d5LXByby9ncHBvbmdtaGprcGZuYmhhZ3BtamZrYW5uZmJsbGFtZw==">wappalyzer<i class="fa fa-external-link-alt"></i></span> 查看時，忍不住懷疑這真的是政府機關的網站嗎，使用的竟然是現代技術。</p>
<p>值得關注的技術棧採用 Next.js、S3、CloudFront。在眾多使用 jQuery 或 WordPress 製作的網站當中，使用 Next.js 技術開發的政府網站實在令人驚訝。</p>
<img src="https://hackmd.io/_uploads/BJpqAw2gT.png" width="400">

<img src="https://hackmd.io/_uploads/rkz2Av2e6.png" width="400">

<blockquote>
<p><span class="exturl" data-url="aHR0cHM6Ly90d2l0dGVyLmNvbS9jaGliaWNvZGUvc3RhdHVzLzE2MjkzMDc2Njg1Njg2MzMzNDQ=">推文連結<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
<p>或許是使用 Next.js 的 <span class="exturl" data-url="aHR0cHM6Ly9uZXh0anMub3JnL2RvY3MvcGFnZXMvYnVpbGRpbmcteW91ci1hcHBsaWNhdGlvbi9yZW5kZXJpbmcvc3RhdGljLXNpdGUtZ2VuZXJhdGlvbg==">SSG（Static Site Generation）<i class="fa fa-external-link-alt"></i></span> 功能，將靜態網站部署到 S3，並透過 CDN <span class="exturl" data-url="aHR0cHM6Ly9hd3MuYW1hem9uLmNvbS90dy9jbG91ZGZyb250Lw==">CloudFront<i class="fa fa-external-link-alt"></i></span> 服務以快速交付網站，因此<strong>網頁顯示速度非常快</strong>。這真的不簡單，我認為甚至比<span class="exturl" data-url="aHR0cHM6Ly9uZXdzLmdhbW1lLmNvbS50dy8xNjkzOTcz">阿部寬的個人官方網站<i class="fa fa-external-link-alt"></i></span>還要快，因為頁面轉換非常流暢，能夠在點擊之前就顯示完成。</p>
<p><img src="https://hackmd.io/_uploads/ryzA0B9eT.png"></p>
<p><span class="exturl" data-url="aHR0cHM6Ly9wYWdlc3BlZWQud2ViLmRldi8=">PageSpeed Insights<i class="fa fa-external-link-alt"></i></span>（測試網站速度的工具）的結果也相當不錯。能夠有具備紮實前端相關知識的人在數位廳任職真是太好了。</p>
<h2 id="最後"><a href="#最後" class="headerlink" title="最後"></a>最後</h2><img src="https://hackmd.io/_uploads/S191LR2e6.png" width="400">

<blockquote>
<p><span class="exturl" data-url="aHR0cHM6Ly90d2l0dGVyLmNvbS8zMzNtaW1pbmEvc3RhdHVzLzE2NjcyNzYwMjYwNjQzOTIxOTU=">推文連結<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
<p>之所以會撰寫這篇文章，原因是有些人明明對技術一無所知，卻嘲笑說「這種東西就算是業餘的也能做到w」，讓我感到非常惱火。</p>
<p>確實最近數位廳在 My Number 相關事務上有些混亂，能夠理解會對河野大臣感到憤怒。然而，若因此憎其人而及其物，<strong>連同嘲笑那些在數位廳工作的人，那可就大錯特錯</strong>。數位廳的網站是如此追求極簡風格和通用性，透過閱讀設計相關的內容也受益匪淺，看似簡單的外表，實則隱藏相當多的技術。</p>
<p>就我個人而言，我非常支持數位廳的努力。強烈希望藉由數位廳的力量，能夠讓日本成為全國工程師辛勤工作能夠得到回報的地方。</p>
<h2 id="後記"><a href="#後記" class="headerlink" title="後記"></a>後記</h2><p>6/29 更新<br>看來數位廳的網站預計更新，並且已經發布了試用版。已經新增一篇相關文章，有興趣的話可以在這閱讀：**<span class="exturl" data-url="aHR0cHM6Ly9xaWl0YS5jb20vbXVfdG9tb3lhL2l0ZW1zL2RkMDVjMjkwNmVlMThhMDQxMTEx">またまたデジタル庁(試行版)のサイトが見やすすぎな件について<i class="fa fa-external-link-alt"></i></span>。**</p>
<p>6/14 更新<br>原本希望在這篇文章傳播之前就寫下來，雖然可能已經晚了，但我會將更多觀察到的內容補足。</p>
<p>以下是數位廳充實的 note（類似日本版的方格子）：</p>
<p><span class="exturl" data-url="aHR0cHM6Ly9kaWdpdGFsLWdvdi5ub3RlLmpwLw==">デジタル庁<i class="fa fa-external-link-alt"></i></span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly9kYXRhLWdvdi5ub3RlLmpwLw==">デジタル庁Data strategy team: Digital Agency, Gov of JP<i class="fa fa-external-link-alt"></i></span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly9jbG91ZC1nb3Yubm90ZS5qcC8=">デジタル庁 ガバメントクラウド<i class="fa fa-external-link-alt"></i></span></p>
<p>「數位廳」的 note 非常詳細地介紹數位廳的組成。</p>
<p>「數位廳  Data strategy team」撰寫與資料管理以及國外資料策略有關的文章。雖然我自己本身不是這方面的專家，但內容解釋非常清楚，有時間的話也請閱讀看看。</p>
<p>接下來，這裡是對於 <strong>Web 工程師的初學者、後端、前端、基礎設施等而言必看的內容</strong>「<strong>ガバメントクラウド（政府雲端）</strong>」。為了瞭解政府雲端是什麼，閱讀內容時發現這是一個與 Web 相關的技術部落格，我心想「哇，寫得這麼詳細啊？」，每篇文章都解釋得非常詳細且容易理解</p>
<p>這裡舉出其中一個例子：</p>
<p><span class="exturl" data-url="aHR0cHM6Ly9jbG91ZC1nb3Yubm90ZS5qcC9uL24xNDkzYmE4MTEzMWY=">マネージドサービス、コンテナ、サーバレス｜デジタル庁 ガバメントクラウド<i class="fa fa-external-link-alt"></i></span></p>
<p>除此之外，也應該閱讀過所有文章，特別是對於即將成為工程師的初學者。不，說真的，對於目前的趨勢 IaC（Infrastructure as Code = 基礎設施即為程式碼）、容器、Serverless、Web API、前端靜態站點生成架構、基礎設施配置、監控運維等技術主題，均有進行深入淺出的講解。 忍不住想吐槽這些人是在超酷炫的新創公司上班的程度，對技術是如此真誠，數位廳也傳達著這樣的訊息，這點真的很厲害。</p>
<p>這篇政府雲端，文章結構真的很不錯，不僅是介紹技術相關的知識，還徹底講解其優缺點，該如何應用政府雲端，未來需要改進的部分，內容撰寫非常透徹。</p>
<p>如果對數位廳的 note 內容有認同感，請務必在 SNS 上分享 note，或是在 note 上點讚。這些是有價值的技術知識，應該傳播給更多的工程師，甚至還包含使用範例，真的超讚。</p>
<h2 id="來源"><a href="#來源" class="headerlink" title="來源"></a>來源</h2><p>デジタル庁 <span class="exturl" data-url="aHR0cHM6Ly93d3cuZGlnaXRhbC5nby5qcC8=">https://www.digital.go.jp<i class="fa fa-external-link-alt"></i></span></p>
<blockquote>
<p>15th鐵人賽目錄傳送門：<span class="exturl" data-url="aHR0cHM6Ly9pdGhlbHAuaXRob21lLmNvbS50dy91c2Vycy8yMDEzNTU1OC9pcm9ubWFuLzYyOTA=">https://ithelp.ithome.com.tw/users/20135558/ironman/6290<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
]]></content>
      <categories>
        <category>2023鐵人賽</category>
        <category>Front-End</category>
      </categories>
      <tags>
        <tag>Front-End</tag>
        <tag>ironman2023</tag>
        <tag>Qiita</tag>
        <tag>Design</tag>
      </tags>
  </entry>
  <entry>
    <title>[2023 15th鐵人賽] Day22 - 程式設計最難的部分我認為是「估算成本」</title>
    <url>/ironman-2023-day-22/</url>
    <content><![CDATA[<blockquote>
<p>原文連結：<span class="exturl" data-url="aHR0cHM6Ly9xaWl0YS5jb20veXVub19taXlha28vaXRlbXMvODY3OGNkNTQyZmJiNzA1MGU0MGU=">プログラミングで一番難しいのは「見積もり」だと思う - Qiita<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
<p>在進行程式開發之前，通常會需要經歷更重要的「工時評估」。實際在開發時，也經常會被 PM 問到「這功能需要多久時間？這個 BUG 多久可以修好？」等情況，一開始可能會不知道該如何做評估，或不小心給出太長或太短的工時。</p>
<p>然而，這項能力是必須練習的，一方面與「成本估算」有關，另一方面也是「自我保護」，透過動態的修正，使估算工時的過程更加準確。</p>
<span id="more"></span>

<p>以下正文開始。</p>
<hr>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在程式設計中，我認為最難的部分之一就是「<strong>估算成本</strong>」。每當收到程式設計的需求時，第一個問題總是「<strong>大概要花多長時間完成？</strong>」。在嚴格的情況下，可能會問「幾天能夠交付？」（不如說這或許是常態）。面對全新的案子，通常會藉由過去的所有經驗，來預測所需時間，盡可能將任務分解並估算時間，卻或許總是感到不安。應該有許多人對估算成本感到困難與不安，希望透過這篇文章，分享自己對估算相關的知識和經驗。</p>
<p>「估算」一詞具有多重含義，但本文中想表達的是「<strong>估算從開始到產品發布所需的時間</strong>」到「<strong>估算完成特定功能所需的時間</strong>」這個範疇的估算。</p>
<h2 id="為什麼需要估算？"><a href="#為什麼需要估算？" class="headerlink" title="為什麼需要估算？"></a>為什麼需要估算？</h2><p>之所以需要進行估算，理由有許多個。</p>
<p>其中一個是為了<strong>投資判斷</strong>。需要計算開發該產品或功能所需的金錢成本，並判斷是否能夠獲得相應的價值，因此必須估算時間。如果回答是「我不知道需要多長時間，直到完成為止」，那根本無法開始開發。</p>
<p>此外，如果能夠事先知道時間，也能確定該何時開始準備市場行銷活動，或是否應該增加人力資源。如果不知道需要多長時間和成本，則無法制定其他計劃。出於這些重要原因，我們必須能夠<strong>對自己的工作進行估算</strong>。</p>
<h2 id="為什麼估算很困難"><a href="#為什麼估算很困難" class="headerlink" title="為什麼估算很困難"></a>為什麼估算很困難</h2><p>為什麼估算如此困難呢？原因在於，有太多的<strong>不確定性</strong>。</p>
<ul>
<li>對於從未嘗試過的工作，無法知道需要多少時間</li>
<li>可能會出現<strong>意料之外的任務</strong></li>
<li>不知道<strong>學習</strong>使用的框架或技術<strong>需要多長時間</strong></li>
<li>可能會遇到<strong>困難點被卡住</strong></li>
<li>不知道發現和修復<strong>錯誤</strong>需要多長時間</li>
<li>在團隊開發中，無法知道其他人的開發速度，也不知道<strong>自己將負責什麼</strong></li>
</ul>
<p>應該還有各種原因。事實上，<strong>很少有人能在一開始就完全理解即將開發的目標</strong>。估算是一個充滿不確定性的過程，因此讓人感到卻步，然而估算仍是必要的過程，不得不去執行。</p>
<h3 id="造成估算困難的因素"><a href="#造成估算困難的因素" class="headerlink" title="造成估算困難的因素"></a>造成估算困難的因素</h3><p>雖然上述提到，由於存在太多不確定性，使得估算變得困難。即使如此，透過將任務分解，動用過去的知識，建立現實性的假設，仍然能夠進行估算。然而，還有另一個使估算變得更困難的因素。</p>
<p>這個因素是「<strong>估算的日期即為截止日期</strong>」。</p>
<p>如果對上司說出「可能需要一個星期完成」，那即使到星期五晚上，也必須加班到深夜以確保完成。假如有截止日期，那麼無論如何都必須在該期限內完成。</p>
<p>基於這個原因，即使估算大約需要一個星期的時間，也不能輕易說出「可以在一個星期內完成」。</p>
<p>由於存在高度的不確定性，我們無法得出「<strong>一個星期即可完成</strong>」的結論。估算只能得出「<strong>一個星期完成的可能性最高，但可能存在 50~200% 幅度的差異</strong>」。</p>
<p>因此我認為，<strong>實際估算的情況和追求的估算結果（截止日期）之間的差異</strong>，是造成估算困難的原因。</p>
<h2 id="估算方法"><a href="#估算方法" class="headerlink" title="估算方法"></a>估算方法</h2><p>估算的困難性，源自於不確定性和認知不一致，面對這些問題，該如何抱持誠實的心態來應對呢？</p>
<p>首先介紹應對不確定性的方法，這是在敏捷開發中使用的「故事點數和速度」估算方法。</p>
<h3 id="故事點數與速度"><a href="#故事點數與速度" class="headerlink" title="故事點數與速度"></a>故事點數與速度</h3><h4 id="Story-Point-故事點數"><a href="#Story-Point-故事點數" class="headerlink" title="Story Point 故事點數"></a>Story Point 故事點數</h4><p>由於任務存在不確定性，很難做出絕對性的評估。因此，<strong>使用相對評估來進行估算</strong>，即為故事點數。</p>
<p>若將工作 A 估算為 5 點時，可能需要花兩倍時間的工作 B，則會被估算為 10 點。不到工作 B 的難度，但比工作 A 困難的工作 C，則可能被估算為 7 點。差不多是這樣的概念。</p>
<p>人們普遍認為，<strong>相對評估比絕對評估更準確</strong>。要估算遠處建築物的高度很困難，但如果是估算相對於隔壁的小建築物會大多少倍，則任何人都能做到。</p>
<p>透過分配點數給已識別的任務，最後總點數即為該產品或功能完成的估計值。</p>
<h4 id="Velocity-速度"><a href="#Velocity-速度" class="headerlink" title="Velocity 速度"></a>Velocity 速度</h4><p>光是擁有故事點數這些數字，並不具有實際意義。估算的目的，是為了做出決策或用於其他計劃，因此必須將其轉換為「<strong>時間</strong>」。</p>
<p>速度是實現這一點的關鍵。</p>
<p>實際執行任務，並測量每一點所需的時間。</p>
<p>假設估算一個功能開發，需要的故事點數共 80 點，而完成一個 8 點的任務需要 1 天，即可推測功能開發需要 10 天的時間。</p>
<h4 id="Burn-down-chart-燒盡圖"><a href="#Burn-down-chart-燒盡圖" class="headerlink" title="Burn down chart 燒盡圖"></a><span class="exturl" data-url="aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3poLXR3LyVFNyU4NyU4MyVFNSVCMCVCRCVFNSU5QiVCRQ==">Burn down chart 燒盡圖<i class="fa fa-external-link-alt"></i></span></h4><p>將「總故事點數」、「已完成的故事點數」和「剩餘的故事點數」，按照時間順序繪製成折線圖，即稱為<strong>燒盡圖</strong>。</p>
<p>在順利進行的專案中，剩餘點數將形成一條向下的斜線，當該斜線延伸到 x 軸時，代表專案預計完成日期。</p>
<p>在確認或共享進度時，透過將資訊可視化，能夠一目瞭然的燒盡圖非常重要。</p>
<h3 id="兼顧不確定性的估算"><a href="#兼顧不確定性的估算" class="headerlink" title="兼顧不確定性的估算"></a>兼顧不確定性的估算</h3><p>上述提到估算變得困難的原因，是「估算結果」變成「截止日期」。</p>
<p>考慮到估算可能成為「截止日期」，為了自我保護，可能會犧牲估算的準確性，以提供過多的緩衝時間。即使認為一個工作需要 1 周完成，為了安全起見，可能會說需要 2 周，但這樣真的是誠實的回答嗎？</p>
<p>改變傳達方式也是一種方法。</p>
<p>與其說出「完成需要 2 周的時間」，不如傳達「估計整體完成需要 4 至 10 天。預計前 3 天可能完成這些進度。」並共享燒盡圖以確認當前進度。我認為這種方式，能更確實傳達確切的資訊，並承認估算的不確定性。更重要的是，<strong>估算應該時常進行修正</strong>。在專案初期，認知到估算充滿不確定性，並隨著知識的累積<strong>重新進行估算</strong>，即可與決策者共享更精確的估算結果。</p>
<h4 id="重新估算"><a href="#重新估算" class="headerlink" title="重新估算"></a>重新估算</h4><p>當一個任務估計需要 2 天，最終卻耗時 3 天的情況，我們經常會思考「<strong>為什麼沒有按照預期的進行？</strong>」。接下來的任務，為了趕上進度表，我們會付出更多的「<strong>努力</strong>」。當進度不如時間表的預期時，為提升速度付出的「努力」，通常會付出更大的代價。因為時間緊迫，將導致產出不穩定的程式碼，即使發現錯誤也可能被忽略，或即使想出有價值的功能，也可能被忽視。</p>
<p>但我們並不想做這樣的「努力」。如此一來，我們反而應該思考「<strong>為什麼把需要費時 2 天的任務錯估為 3 天？</strong>」。修改當初的估算，根據這次花費比預計多 1.5 倍時間的任務，<strong>將與其類似的任務的故事點數乘以 1.5 倍重新估算</strong>。透過修正的步驟，能夠<strong>使估算更加準確</strong>。</p>
<h2 id="最後"><a href="#最後" class="headerlink" title="最後"></a>最後</h2><p>在這次分享中，介紹對於估計的觀念，以及在敏捷開發中使用的故事點數估計方法。</p>
<p>當然，實際情況會因讀者所處環境而有所差異，本文提到的方法和思維方式，可能也不適用於所有情況，希望能提供作為參考。</p>
<blockquote>
<p>15th鐵人賽目錄傳送門：<span class="exturl" data-url="aHR0cHM6Ly9pdGhlbHAuaXRob21lLmNvbS50dy91c2Vycy8yMDEzNTU1OC9pcm9ubWFuLzYyOTA=">https://ithelp.ithome.com.tw/users/20135558/ironman/6290<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
]]></content>
      <categories>
        <category>2023鐵人賽</category>
        <category>入門篇</category>
      </categories>
      <tags>
        <tag>ironman2023</tag>
        <tag>Qiita</tag>
        <tag>產品開發</tag>
        <tag>agile</tag>
      </tags>
  </entry>
  <entry>
    <title>[2023 15th鐵人賽] Day23 - ChatGPT 使用方法總整理</title>
    <url>/ironman-2023-day-23/</url>
    <content><![CDATA[<blockquote>
<p>原文連結：<span class="exturl" data-url="aHR0cHM6Ly9xaWl0YS5jb20vc2FrYXNlZ2F3YS9pdGVtcy84MjA2OWM5N2ExZWUwMTFjMmQxZQ==">ChatGPT使い方総まとめ - Qiita<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
<p>這篇文章主要介紹現在正流行的 ChatGPT，整理幾項不論是日常或在工作上，都很實用的提問方式。作者是 <span class="exturl" data-url="aHR0cHM6Ly90d2l0dGVyLmNvbS9neWFrdXNl">sakasegawa<i class="fa fa-external-link-alt"></i></span>。</p>
<p>使用方法分類如下：</p>
<ul>
<li>文章範例<ul>
<li>提問-回答</li>
<li>創作 Wikipedia 風格的文章</li>
<li>建立任務列表</li>
<li>建立時間表</li>
<li>歸納</li>
<li>將列點用文章呈現</li>
<li>將文章列點呈現</li>
</ul>
</li>
<li>程式碼<ul>
<li>生成程式碼</li>
<li>生成程式碼的文件</li>
<li>重構</li>
<li>單元測試</li>
<li>DB 設計（資料庫設計）</li>
</ul>
</li>
<li>故事範例<ul>
<li>語氣變化</li>
<li>模仿角色的語氣來回答</li>
</ul>
</li>
</ul>
<span id="more"></span>

<p>以下正文開始。</p>
<hr>
<h2 id="ChatGPT-是什麼"><a href="#ChatGPT-是什麼" class="headerlink" title="ChatGPT 是什麼"></a>ChatGPT 是什麼</h2><p>這是一款基於 OpenAI，並以令人驚嘆的語言模型 GPT-3(※) 為基底，所開發的聊天應用程式，能夠立即回答任何問題。<br>本文將介紹各種使用方法。</p>
<blockquote>
<p>※ 確切來說，是被稱為 GPT-3.5 系列</p>
</blockquote>
<p><span class="exturl" data-url="aHR0cHM6Ly9jaGF0Lm9wZW5haS5jb20v">https://chat.openai.com/<i class="fa fa-external-link-alt"></i></span></p>
<p>順帶一提，關於 GPT-3，以下 note 的文章也很有用，有興趣也可參考：<br><span class="exturl" data-url="aHR0cHM6Ly9ub3RlLmNvbS9zYWthc2VnYXdhL24vbjlmNjNlODJlZjM5MQ==">AIがコミットメッセージ自動生成！神ツール『auto-commit』『commit-autosuggestions』の紹介<i class="fa fa-external-link-alt"></i></span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly9xaWl0YS5jb20vc2FrYXNlZ2F3YS9pdGVtcy9lMTNlMjljOTZmYzcxMWNmODRiYg==">ChatGPTの仕組みを考えながらプロンプトを作る手法はこちらに別途まとめています<i class="fa fa-external-link-alt"></i></span></p>
<h2 id="使用範例"><a href="#使用範例" class="headerlink" title="使用範例"></a>使用範例</h2><h3 id="提問-回答"><a href="#提問-回答" class="headerlink" title="提問-回答"></a>提問-回答</h3><pre class="line-numbers language-none"><code class="language-none">〜について教えて

請告訴我關於～

[範例] 請告訴我什麼是 TPP<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><img src="https://hackmd.io/_uploads/rJFsKf1Z6.png"></p>
<p>以下是中文版本：</p>
<p><img src="https://hackmd.io/_uploads/r1SRKzyWa.png"></p>
<h3 id="創作-Wikipedia-風格的文章"><a href="#創作-Wikipedia-風格的文章" class="headerlink" title="創作 Wikipedia 風格的文章"></a>創作 Wikipedia 風格的文章</h3><pre class="line-numbers language-none"><code class="language-none">〜について説明するWikipedia風の記事を出力して

請寫出用 Wikipedia ****風格的文章來解釋～

[範例] 請用 Wikipedia 風格來解釋 gpt-3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><img src="https://hackmd.io/_uploads/Hk8N5fJWa.png"></p>
<p>以下是中文版本：</p>
<p><img src="https://hackmd.io/_uploads/B1EI5f1ba.png"></p>
<h3 id="建立任務列表"><a href="#建立任務列表" class="headerlink" title="建立任務列表"></a>建立任務列表</h3><pre class="line-numbers language-none"><code class="language-none">〜をタスク化して

請將～任務化

[範例] 請舉出「APEX 變強的方法」<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><img src="https://hackmd.io/_uploads/HJFvczy-a.png"></p>
<p>以下是中文版本，發現如果用「任務化」步驟會太詳細，因此換個方式問：</p>
<p><img src="https://hackmd.io/_uploads/r1Dd5zkZ6.png"></p>
<h3 id="建立時間表"><a href="#建立時間表" class="headerlink" title="建立時間表"></a>建立時間表</h3><pre class="line-numbers language-none"><code class="language-none">xx〜yyの間にzzします。この間のスケジュールを30分刻みで提示して

zz 介於 xx 和 yy 之間，請以 30 分鐘為單位，顯示該時段的時間表

[範例] 我想在 20:00-24:00 這段時間製作報告，請以 30 分鐘為單位安排時間表<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><img src="https://hackmd.io/_uploads/S1f5qM1-a.png"></p>
<p>以下是中文版本：</p>
<p><img src="https://hackmd.io/_uploads/ryeR9zyb6.png"></p>
<h3 id="歸納"><a href="#歸納" class="headerlink" title="歸納"></a>歸納</h3><pre class="line-numbers language-none"><code class="language-none">以下を要約して

請歸納以下內容

[範例] 請歸納以下內容：

## GPU Resourse 的取得方法

若想要取得 GPU Resourse，現在主要有以下幾種方式：

基本上是根據預算和目的做選擇。

- Host 型的 Juptyer Notebook Service
	- 目的：使用 Spot
	- 預算：每個月 5000 日幣
- GPU（租用或購買 Gaming PC）
	- 目的：持續性學習與推論
	- 預算：每個月 1 萬日幣～
- Cloud GPU
	- 目的：持續性學習與推論
	- 預算：每個月 2 萬日幣～<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><img src="https://hackmd.io/_uploads/r1kgjGJ-T.png"></p>
<p>以下是中文版本，這裡意外發現如果沒有加上「幾句話」，會一直鬼打牆用列點的方式回答，因此還是要確實指定希望的格式：</p>
<p><img src="https://hackmd.io/_uploads/rk9xoM1-T.png"></p>
<h3 id="將列點用文章呈現"><a href="#將列點用文章呈現" class="headerlink" title="將列點用文章呈現"></a>將列點用文章呈現</h3><pre class="line-numbers language-none"><code class="language-none">以下を文章化して

請將以下內容用文章呈現

[範例] 請用以下內容，寫出一段文章：

## GPU Resourse 的取得方法

若想要取得 GPU Resourse，現在主要有以下幾種方式：

基本上是根據預算和目的做選擇。

- Host 型的 Juptyer Notebook Service
	- 目的：使用 Spot
	- 預算：每個月 5000 日幣
- GPU（租用或購買 Gaming PC）
	- 目的：持續性學習與推論
	- 預算：每個月 1 萬日幣～
- Cloud GPU
	- 目的：持續性學習與推論
	- 預算：每個月 2 萬日幣～
ChatGPT<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><img src="https://hackmd.io/_uploads/HkkfjG1-6.png"></p>
<p>以下是中文版本：</p>
<p><img src="https://hackmd.io/_uploads/B1CfjMk-a.png"></p>
<h3 id="將文章列點呈現"><a href="#將文章列點呈現" class="headerlink" title="將文章列點呈現"></a>將文章列點呈現</h3><pre class="line-numbers language-none"><code class="language-none">以下をタスク化して

將以下內容列點呈現

[範例] 將以下內容列點呈現：
明天早上吃完早餐後要去學校午休時必須到花圃澆水，接著放學後要去社團跟老師道歉<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><img src="https://hackmd.io/_uploads/BJRNiMJWT.png"></p>
<p>以下是中文版本：</p>
<p><img src="https://hackmd.io/_uploads/BJoBiG1Za.png"></p>
<h2 id="程式碼"><a href="#程式碼" class="headerlink" title="程式碼"></a>程式碼</h2><h3 id="生成程式碼"><a href="#生成程式碼" class="headerlink" title="生成程式碼"></a>生成程式碼</h3><pre class="line-numbers language-none"><code class="language-none">xxするyyの関数を出力して

請輸出執行 xx 的 yy 函數

[範例] 請寫出如何判斷閏年的 JavaScript 函數<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><img src="https://hackmd.io/_uploads/S1SwoMyWp.png"></p>
<p>以下是中文版本：</p>
<p><img src="https://hackmd.io/_uploads/rJz_sGJZT.png"></p>
<h3 id="生成程式碼的文件"><a href="#生成程式碼的文件" class="headerlink" title="生成程式碼的文件"></a>生成程式碼的文件</h3><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx">以下の関数のドキュメントをxx形式で出力して

請將以下函數的文件以 xx 形式呈現

<span class="token punctuation">[</span>範例<span class="token punctuation">]</span> 請將下方函數的說明以 JSDoc 形式表示：

<span class="token keyword">function</span> <span class="token function">isLeapYear</span><span class="token punctuation">(</span><span class="token parameter">year</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>year <span class="token operator">%</span> <span class="token number">4</span> <span class="token operator">===</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> year <span class="token operator">%</span> <span class="token number">100</span> <span class="token operator">!==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>year <span class="token operator">%</span> <span class="token number">400</span> <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span> 
    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><img src="https://hackmd.io/_uploads/HkQYoz1Wp.png"></p>
<p>以下是中文版本：</p>
<p><img src="https://hackmd.io/_uploads/rke9oz1ba.png"></p>
<h3 id="重構"><a href="#重構" class="headerlink" title="重構"></a>重構</h3><p>以下程式碼的<span class="exturl" data-url="aHR0cHM6Ly93d3cuc2VwbHVzLmpwL2Rva3VzaHV6ZW1pL2Jsb2cvMjAxOC8wNy9wcmFjdGljZV9yZWZhY3RvcmluZy5odG1s">引用出處<i class="fa fa-external-link-alt"></i></span>。</p>
<pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx">以下をリファクタリングして

請重構以下內容

<span class="token punctuation">[</span>範例<span class="token punctuation">]</span> 請重構以下程式碼：

<span class="token keyword">package</span> composing_methods<span class="token punctuation">.</span>replace_temp_with_query<span class="token punctuation">.</span>after<span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Example</span> <span class="token punctuation">&#123;</span>

    <span class="token keyword">private</span> int quantity<span class="token punctuation">;</span>
    <span class="token keyword">private</span> int itemPrice<span class="token punctuation">;</span>

    <span class="token keyword">public</span> double <span class="token function">getPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

        int basePrice <span class="token operator">=</span> quantity <span class="token operator">*</span> itemPrice<span class="token punctuation">;</span>
        double discountFactor<span class="token punctuation">;</span>

        <span class="token keyword">if</span><span class="token punctuation">(</span>basePrice <span class="token operator">></span> <span class="token number">1000</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            discountFactor <span class="token operator">=</span> <span class="token number">0.95</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
            discountFactor <span class="token operator">=</span> <span class="token number">0.98</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>

        <span class="token keyword">return</span> basePrice <span class="token operator">*</span> discountFactor<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><img src="https://hackmd.io/_uploads/SJX6oMkbT.png"></p>
<p><img src="https://hackmd.io/_uploads/SktpozyWa.png"></p>
<p>以下是中文版本：</p>
<p><img src="https://hackmd.io/_uploads/BJ01nz1Z6.png"></p>
<h3 id="單元測試"><a href="#單元測試" class="headerlink" title="單元測試"></a>單元測試</h3><pre class="line-numbers language-none"><code class="language-none">以下の単体テストを書いて

請根據以下內容，寫出單元測試<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p><img src="https://hackmd.io/_uploads/rk8RoMJ-a.png"></p>
<p><img src="https://hackmd.io/_uploads/ryWy2zyWT.png"></p>
<p>※ 第二項測試的 expected 有誤，因為 900*0.98 = 882 才正確，需注意由 AI 產出的測試程式碼也必須經過測試。</p>
<h3 id="DB-設計（資料庫設計）"><a href="#DB-設計（資料庫設計）" class="headerlink" title="DB 設計（資料庫設計）"></a>DB 設計（資料庫設計）</h3><pre class="line-numbers language-none"><code class="language-none">〜に必要なtable一覧を出力して

請輸出～必要的 table 列表

[範例] 請列出建立 EC 網站必需的 table 列表<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><img src="https://hackmd.io/_uploads/S1kZ3M1WT.png"></p>
<p>以下是中文版本：</p>
<p><img src="https://hackmd.io/_uploads/rkq-3My-6.png"></p>
<h2 id="故事"><a href="#故事" class="headerlink" title="故事"></a>故事</h2><h3 id="語氣變化"><a href="#語氣變化" class="headerlink" title="語氣變化"></a>語氣變化</h3><pre class="line-numbers language-none"><code class="language-none">「〜ですの」を語尾につけてxxについて説明して

請在句尾加上「〜ですの」對 xx 內容進行說明

[範例] 請用「的語氣」對 xx 內容進行說明<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><img src="https://hackmd.io/_uploads/B1b7hfJWp.png"></p>
<p>也可以加上「用 ◯◯ 語調」、「用 ◯◯ 風格」等指令來表示。</p>
<p>以下是中文版本：</p>
<p><img src="https://hackmd.io/_uploads/Bko42zkba.png"></p>
<h3 id="模仿角色的語氣來回答"><a href="#模仿角色的語氣來回答" class="headerlink" title="模仿角色的語氣來回答"></a>模仿角色的語氣來回答</h3><pre class="line-numbers language-none"><code class="language-none">以下はxxのセリフです
&#123;セリフ例&#125;
xxっぽく、敬語を使わず可愛く、yyについて説明してください。

以下是 xx 的台詞
&#123;台詞範例&#125;
請不用敬語，以可愛並且類似 xx 的方式說明 yy<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><img src="https://hackmd.io/_uploads/rynXnfJbT.png"></p>
<p>以下是中文版本：</p>
<pre class="line-numbers language-none"><code class="language-none">[範例] 以下是魯夫的台詞

&quot;我要成為海賊王！&quot;
&quot;如果你是我的夥伴，我會保護你直到最後一刻！&quot;
&quot;不管發生什麼事，我絕不會成為別人的部下！&quot;
&quot;我不會對任何人低頭，即使是海軍上將也一樣！&quot;
&quot;夢想是不會死的！&quot;
&quot;我要保護的東西，絕對不會被奪走！&quot;
&quot;即使是一個人也要勇往直前！&quot;

請用像魯夫的語氣，不使用敬語且充滿朝氣又像個笨蛋，針對薩爾達傳說進行說明。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><img src="https://hackmd.io/_uploads/HJWK3Mk-6.png"></p>
<h2 id="Bonus"><a href="#Bonus" class="headerlink" title="Bonus"></a>Bonus</h2><h3 id="GPT-3-的特性"><a href="#GPT-3-的特性" class="headerlink" title="GPT-3 的特性"></a>GPT-3 的特性</h3><ul>
<li>可以做到<ul>
<li>自動生成各種文件</li>
<li>用來回答問題</li>
</ul>
</li>
<li>特徴<ul>
<li>超厲害的<span class="exturl" data-url="aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3poLXR3LyVFOSVBOSVBQyVFNSVCMCU5NCVFNSU4RiVBRiVFNSVBNCVBQiVFOSU5MyVCRQ==">馬可夫鏈（Markov chain）<i class="fa fa-external-link-alt"></i></span></li>
<li>使用一種稱為 <span class="exturl" data-url="aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3poLXR3L1RyYW5zZm9ybWVyJUU2JUE4JUExJUU1JTlFJThC">Transformer<i class="fa fa-external-link-alt"></i></span> 的架構（曾經成為熱門話題的 <span class="exturl" data-url="aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3poLXR3L0JFUlQ=">BERT<i class="fa fa-external-link-alt"></i></span> 等也同樣是）</li>
<li>學習前文中詞語之間的關係模式</li>
</ul>
</li>
</ul>
<h3 id="大規模語言模型"><a href="#大規模語言模型" class="headerlink" title="大規模語言模型"></a><span class="exturl" data-url="aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3dpa2kvJUU1JUE0JUE3JUU1JTlFJThCJUU4JUFGJUFEJUU4JUE4JTgwJUU2JUE4JUExJUU1JTlFJThC">大規模語言模型<i class="fa fa-external-link-alt"></i></span></h3><ul>
<li>Flan-U-PaLM（Google），540B（5400 億）類<ul>
<li>PaLM 學習 540B，Flan-PaLM 在其中進行 1.8k（1800）個任務學習的調整</li>
</ul>
</li>
<li>Gopher（Google / DeepMind），280B（2800 億）類</li>
<li>Bloomz（bigscience），176B（1760 億）類<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9odWdnaW5nZmFjZS5jby9iaWdzY2llbmNlL2Jsb29teg==">https://huggingface.co/bigscience/bloomz<i class="fa fa-external-link-alt"></i></span></li>
</ul>
</li>
<li>GPT-3（OpenAI），175B（1750 億）類<ul>
<li>提供方式：僅提供付費 API</li>
<li>授權：遵守 API 使用條款</li>
</ul>
</li>
<li>OPT-175B（Meta），175B（1750 億）類<ul>
<li>提供方式：GitHub</li>
<li>授權：非營利性</li>
</ul>
</li>
<li>Galactica：120B（1200 億）類<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9hcnhpdi5vcmcvYWJzLzIyMTEuMDkwODU=">https://arxiv.org/abs/2211.09085<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9nYWxhY3RpY2Eub3JnLw==">https://galactica.org/<i class="fa fa-external-link-alt"></i></span></li>
<li>科學相關</li>
</ul>
</li>
<li>HyperCLOVA（LINE），82B（820 億）類<br>GPT-NeoX（EleutherAI）：GPT-NeoX-20B，20B（200 億）類<br>GPT-J（EleutherAI）：GPT-J-6B，6B（60 億）類<ul>
<li>提供方式：huggingface</li>
<li>授權：apache-2.0</li>
</ul>
</li>
<li>GPT-J-japanese-6.8B（Sta）<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9odWdnaW5nZmFjZS5jby9uYWNsYml0L2dwdC1qLWphcGFuZXNlLTYuOGI/dGV4dD0lRTUlODUlODMlRTYlQjAlOTclRTMlODElQTclRTMlODElOTklRTMlODElOEIlRUYlQkMlOUY=">https://huggingface.co/naclbit/gpt-j-japanese-6.8b<i class="fa fa-external-link-alt"></i></span></li>
<li>（private）やみおとめ，20B（200 億）類</li>
</ul>
</li>
<li>japanese-gpt2-medium（Rinna），1.3B（13 億）類</li>
</ul>
<h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9hcnhpdi5vcmcvYWJzLzIyMDEuMTE5MDM=">Chain of Thought Prompting Elicits Reasoning in Large Language Models<i class="fa fa-external-link-alt"></i></span><ul>
<li>有關提高 GPT-3 在執行對話等方面性能的 Chain of Thought（CoT）方法的論文</li>
</ul>
</li>
<li><span class="exturl" data-url="aHR0cHM6Ly9xaWl0YS5jb20vaGFsaG9ybi9pdGVtcy9jOTE0OTc1MjJiZTI3YmRlMTdjZQ==">作って理解する Transformer / Attention<i class="fa fa-external-link-alt"></i></span><ul>
<li>闡述近期 DeepLearning 的超重要成果 Transformer 的好文章</li>
</ul>
</li>
</ul>
<blockquote>
<p>15th鐵人賽目錄傳送門：<span class="exturl" data-url="aHR0cHM6Ly9pdGhlbHAuaXRob21lLmNvbS50dy91c2Vycy8yMDEzNTU1OC9pcm9ubWFuLzYyOTA=">https://ithelp.ithome.com.tw/users/20135558/ironman/6290<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
]]></content>
      <categories>
        <category>2023鐵人賽</category>
        <category>工具篇</category>
      </categories>
      <tags>
        <tag>ironman2023</tag>
        <tag>Qiita</tag>
        <tag>ChatGPT</tag>
      </tags>
  </entry>
  <entry>
    <title>[2023 15th鐵人賽] Day24 - 啊？你還在用 ChatGPT 嗎？ Bing 可以免費使用 GPT-4 喔！ </title>
    <url>/ironman-2023-day-24/</url>
    <content><![CDATA[<blockquote>
<p>原文連結：<span class="exturl" data-url="aHR0cHM6Ly9xaWl0YS5jb20vdGFrYW8tdGFrYXNzL2l0ZW1zLzE2YTcwNTJhNGEwZTg1N2I3Yzkw">えっ、まだChatGPT使ってんの？ Bingは無料でGPT-4使えますよ！ - Qiita<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
<p>這篇文章主要是介紹 Bing Chat，和 ChatGPT Plus 同樣支援 GPT-4，卻能夠免費使用！然而，使用次數限制卻是一大硬傷，這點文中也有提及，但用作個人開發等用途，或許也不失為一種選擇。</p>
<p>此外，作者也舉出幾項實際導入開發使用的範例，可提供參考：</p>
<ul>
<li>用於建立 Debug 配置</li>
<li>完成轉換（移植）腳本語言</li>
<li>改善程式碼</li>
</ul>
<span id="more"></span>

<p>以下正文開始。</p>
<hr>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>儘管使用這種吸睛的標題，但我無意說 ChatGPT 任何壞話。無庸置疑，ChatGPT 是非常優秀的產品，實際上也帶給世界巨大變化。ChatGPT 作為大力普及 LLM 的先驅者，是相當偉大的存在。</p>
<p>而這一回，我會將重點聚焦在使用費用上。</p>
<p>對於那些想使用 Chat GPT Plus（或已經在使用），但覺得價格有點高的人，希望這篇文章能夠有所幫助。</p>
<h2 id="ChatGPT⋯⋯感覺有點貴"><a href="#ChatGPT⋯⋯感覺有點貴" class="headerlink" title="ChatGPT⋯⋯感覺有點貴"></a>ChatGPT⋯⋯感覺有點貴</h2><p>GPT-4 的高準確度，真的很棒啊！</p>
<p>我在編寫程式，或決定使用哪些產品時也經常使用！</p>
<p>然而，要使用 ChatGPT 的 GPT-4，每月個需支付 3,000日圓(※)。</p>
<p>如果公司出錢的話完全沒問題，但如果是用於個人使用，老實說不覺得有點貴嗎？</p>
<blockquote>
<p>※ 確切來說是 20 美元，以 1 美元兌換 150 日圓的匯率計算，會是 3000 日圓。</p>
</blockquote>
<p><img src="https://hackmd.io/_uploads/BJocvZxb6.png"></p>
<h2 id="一起免費使用-GPT-4-吧"><a href="#一起免費使用-GPT-4-吧" class="headerlink" title="一起免費使用 GPT-4 吧"></a>一起免費使用 GPT-4 吧</h2><p>想使用 GPT-4！但每個月 3000 日圓有點貴啊！ ！</p>
<p>在這種情況下，試試免費使用 GPT-4 吧！ ！</p>
<p>是否能在不支付 3,000 日圓的情況使用 GPT-4？</p>
<p>是否真有這麼好的事情？</p>
<p>原來這種好事，還真的存在著。</p>
<h2 id="雖然叫做-Bing"><a href="#雖然叫做-Bing" class="headerlink" title="雖然叫做 Bing"></a>雖然叫做 Bing</h2><p>你是否聽過 Bing 搜尋呢？這是 Microsoft 的搜尋引擎。</p>
<p><span class="exturl" data-url="aHR0cHM6Ly93d3cuYmluZy5jb20vc2VhcmNoP3E9QmluZytBSSZhbXA7c2hvd2NvbnY9MSZhbXA7Rk9STT1ocGNvZHg=">https://www.bing.com/search?q=Bing+AI&amp;showconv=1&amp;FORM=hpcodx<i class="fa fa-external-link-alt"></i></span></p>
<p>Bing 搜尋有個名為「Chat」的功能，其功能與 ChatGPT 完全相同，並且也可以使用 GPT-4。</p>
<p>選擇「より厳密に（更精確）」的選項，將得到更準確的答案（與 AI 查詢資訊來源一致）。<br>如果使用個人帳號登入，UI 會略有不同，可以透過開啟「使用 GPT-4」的開關來使用 GPT-4。</p>
<p>當然，這是可以免費使用的。</p>
<p><img src="https://hackmd.io/_uploads/HJjAoGeZT.png"></p>
<p>在過去兩週中，我透過 Bing Chat 來編寫程式和進行研究。我的感想是，Bing Chat 能做到與  ChatGPT 的 GPT-4（每個月 3,000日圓的方案）相同的事情。</p>
<p>首先，由於是 GPT-4，回答給出的程式碼相當準確。</p>
<p>我當時基於興趣，正在學習 Go 語言，僅透過複製貼上的動作，就完成了一個 Web 程式。</p>
<p>若是 ChatGPT 的免費版本（GPT-3.5），在許多情況下都需要進行些微修改，因此不出所料 GPT-4 表現得更好。</p>
<h2 id="唯一的缺點"><a href="#唯一的缺點" class="headerlink" title="唯一的缺點"></a>唯一的缺點</h2><p><del>依照 Microsoft 的慣例，使用 Bing Chat 必須透過 Microsoft Edge 瀏覽器。</del><br><del>請注意如果不是用 Edge 瀏覽器，就無法使用 Bing Chat。</del><br><del>Fu○k Microsoft！</del></p>
<p>2023 年 9 月 4 日 追記<br>Bing Chat 現在也可以在 Google Chrome 中使用了。謝謝 Microsoft！</p>
<p><img src="https://hackmd.io/_uploads/HJ-RXQgZp.png"></p>
<p>2023 年 9 月 28 日 追記<br>雖然在 Google Chrome 也可以使用 Bing Chat，但似乎只能保留 5 次對話紀錄。而在 Microsoft Edge 可保留 30 次對話紀錄，看來 Edge 以外的瀏覽器還是存在著限制⋯⋯（此外，這是以 Microsoft 帳號登入使用 Bing 為前提。）</p>
<p><img src="https://hackmd.io/_uploads/BJ-QEveZT.png"></p>
<p>上下分別代表使用 Microsoft Edge 和 Google Chrome 瀏覽器的對話紀錄次數。</p>
<h2 id="實踐：嘗試在實際開發中導入使用"><a href="#實踐：嘗試在實際開發中導入使用" class="headerlink" title="實踐：嘗試在實際開發中導入使用"></a>實踐：嘗試在實際開發中導入使用</h2><h3 id="建立用於-Debug-的配置！"><a href="#建立用於-Debug-的配置！" class="headerlink" title="建立用於 Debug 的配置！"></a>建立用於 Debug 的配置！</h3><p>雖然想要自己建立 VS Code 的 Debug 配置，但完全不知道該怎麼寫才好。</p>
<p>因此，我決定完全交給 Bing Chat。</p>
<p><img src="https://hackmd.io/_uploads/BJiXZrlZa.png"></p>
<p>將 Bing Chat 編寫的 Debug 配置複製貼上，並嘗試進行 Debug。 </p>
<p>結果，不需要任何人工介入，Debug 就可以完美進行。</p>
<p>這樣的高準確度，不愧是 GPT-4。 （如果是用 GPT-3.5，可能會出現部分錯誤，導致無法運行。）</p>
<p><img src="https://hackmd.io/_uploads/r1wIZSeWp.png"></p>
<h3 id="完成轉換（移植）腳本語言！"><a href="#完成轉換（移植）腳本語言！" class="headerlink" title="完成轉換（移植）腳本語言！"></a>完成轉換（移植）腳本語言！</h3><p>過去建立的 Windows 批次檔（.bat），通常缺乏可維護性。</p>
<p>如果習慣可能就沒有問題，但對於只熟悉高階語言（例如 Python 或 Java）的人來說，或許會感到困難。現代 Windows 似乎已經將 PowerShell 作為標準，那麼何不將其移植到 PowerShell，使其向高級語言一樣，藉此提高可維護性。</p>
<p>在這種情況下，透過 Bing Chat，語言轉換（移植）即可瞬間完成。</p>
<p><img src="https://hackmd.io/_uploads/SJAlE8xbp.png"></p>
<p>只需複製貼上 Bing Chat 生成的腳本，建立 PowerShell 腳本（.ps1 文件），即可正常運行。</p>
<p><img src="https://hackmd.io/_uploads/BJMzVLlW6.png"></p>
<h3 id="試著改善了程式！"><a href="#試著改善了程式！" class="headerlink" title="試著改善了程式！"></a>試著改善了程式！</h3><h4 id="之一：重構所寫的程式"><a href="#之一：重構所寫的程式" class="headerlink" title="之一：重構所寫的程式"></a>之一：重構所寫的程式</h4><p>對於自己編寫的程式碼，可能會想知道是否有更好的寫法。</p>
<p>但也不可能每次都請專家來檢查⋯⋯這種時候，就使用 GPT-4 來幫忙檢查重構吧！</p>
<p><img src="https://i.imgur.com/GnDAoz5.png"></p>
<h4 id="之二：在自己編寫的程式導入-OR-Mapper（對象關係對映）"><a href="#之二：在自己編寫的程式導入-OR-Mapper（對象關係對映）" class="headerlink" title="之二：在自己編寫的程式導入 OR Mapper（對象關係對映）"></a>之二：在自己編寫的程式導入 <span class="exturl" data-url="aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3poLXR3LyVFNSVBRiVCOSVFOCVCMSVBMSVFNSU4NSVCMyVFNyVCMyVCQiVFNiU5OCVBMCVFNSVCMCU4NA==">OR Mapper（對象關係對映）<i class="fa fa-external-link-alt"></i></span></h4><p>在編寫程式時，你是否曾經出現過「有沒有更好的作法啊？」這樣的想法呢？<br>這種時候，就讓 GPT-4 來實現這個更好的做法吧！</p>
<p>這次因為不想對 SQL 硬編碼（Hard Code），因此想導入使用 OR Mapper。如果想要靠自己引入 OR Mapper，可能會花費相當大的學習成本。</p>
<p>但有了 GPT-4 就是一瞬間的事情，更友善的是，還可以得知推薦使的工具以及安裝方式（如以下回答，是介紹 Go 的使用方式）。</p>
<p><img src="https://i.imgur.com/yXdIYEN.png"></p>
<h4 id="之三：由於替換不同的-Library，需要修改程式"><a href="#之三：由於替換不同的-Library，需要修改程式" class="headerlink" title="之三：由於替換不同的 Library，需要修改程式"></a>之三：由於替換不同的 Library，需要修改程式</h4><p>在替換 Library 時，大多數的情況下，函數的使用方式也會改變。換句話說，必須全面重新檢查該程式。</p>
<p>因為通常會發生錯誤，因此需要瞭解該修復的部分，但是「那該如何重新編寫才對？」這件事將會產生學習成本。閱讀文本學習需要花費許多時間，希望能夠快速完成。</p>
<p>能夠自己閱讀和理解固然重要，但如果能更先查看完成的程式碼，或許有助於更快理解內容。特別是在工作時間內，可能無法提供太多的學習時間。</p>
<p>像這種程式修改的情況，有了 GPT-4 將能夠立即完成，準確性也非常出色，只需複製貼上程式碼，程式即可如預期運行。</p>
<p><img src="https://i.imgur.com/tW2Pckm.png"></p>
<h4 id="之四：將冗長的程式碼進行拆分"><a href="#之四：將冗長的程式碼進行拆分" class="headerlink" title="之四：將冗長的程式碼進行拆分"></a>之四：將冗長的程式碼進行拆分</h4><p>有時在實作中得意忘形，可能一不小心寫出冗長的程式碼⋯⋯<br>雖然想要拆分成多個檔案，但又不確定該如何分割才好⋯⋯</p>
<p>你是否有過這樣的想法呢？<br>在這種時候，使用 GPT-4 來協助進行分割吧。</p>
<p><img src="https://i.imgur.com/nIjqJce.png"></p>
<h2 id="最後"><a href="#最後" class="headerlink" title="最後"></a>最後</h2><p>至今為止，為了使用 GPT-4，必須每個月支付 3,000 日圓給 ChatGPT，但當我意識到 Bing Chat 的 GPT-4 也相當優秀後，便開始用於個人興趣的開發用途，並停止支付 ChatGPT 的費用。</p>
<p>GPT-4 回答的精確度非常高，和程式設計的相容性極佳。若是想使用 GPT-4 的同時節省費用，請務必嘗試使用 Bing Chat！</p>
<blockquote>
<p>15th鐵人賽目錄傳送門：<span class="exturl" data-url="aHR0cHM6Ly9pdGhlbHAuaXRob21lLmNvbS50dy91c2Vycy8yMDEzNTU1OC9pcm9ubWFuLzYyOTA=">https://ithelp.ithome.com.tw/users/20135558/ironman/6290<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
]]></content>
      <categories>
        <category>2023鐵人賽</category>
        <category>工具篇</category>
      </categories>
      <tags>
        <tag>ironman2023</tag>
        <tag>Qiita</tag>
        <tag>ChatGPT</tag>
        <tag>Bing</tag>
        <tag>GPT-4</tag>
      </tags>
  </entry>
  <entry>
    <title>[2023 15th鐵人賽] Day25 - 成為具備需求定義～系統設計能力人才的文章！ </title>
    <url>/ironman-2023-day-25/</url>
    <content><![CDATA[<blockquote>
<p>原文連結：<span class="exturl" data-url="aHR0cHM6Ly9xaWl0YS5jb20vU2FrdTczMS9pdGVtcy83NDFmY2YwZjQwZGQ5ODllZTRmOCMlRTUlOUYlQkElRTYlOUMlQUMlRTglQTglQUQlRTglQTglODglRTclOTQlQkIlRTklOUQlQTIlRTglQTglQUQlRTglQTglODglRTYlQTklOUYlRTglODMlQkQlRTglQTglQUQlRTglQTglODglRTMlODMlODclRTMlODMlQkMlRTMlODIlQkYlRTglQTglQUQlRTglQTglODglRTMlODElQUUlRTQlQkQlOUMlRTMlODIlOEElRTYlOTYlQjk=">要件定義～システム設計ができる人材になれる記事 - Qiita<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
<p>本篇介紹的主題是「需求定義到系統設計」，從為什麼需要需求定義，到如何進行這段流程，再接著說明基本設計的三個步驟，透過一步步解說，到最後完成系統設計圖。</p>
<p>文章架構如下：</p>
<ul>
<li>需求定義的必要性<ul>
<li>需求定義的目的</li>
</ul>
</li>
<li>確定需求定義的過程</li>
<li>在需求定義中決定的事項</li>
<li>基本設計（畫面設計・功能設計・資料設計）的作法</li>
<li>畫面設計（UI 設計）</li>
<li>功能設計</li>
<li>資料設計<ul>
<li>資料的具體內容</li>
<li>資料庫設計</li>
<li>資料的流向（Data Flow）</li>
</ul>
</li>
<li>進一步推進基本設計</li>
</ul>
<span id="more"></span>

<p>以下正文開始。</p>
<hr>
<p>由於收到許多詢問，這裡提供需求評估～設計相關 Udemy 課程的 Coupon。<br>歡迎多多利用＆給予評價 m(_ _)m</p>
<p>■入門編：</p>
<p><span class="exturl" data-url="aHR0cHM6Ly93d3cudWRlbXkuY29tL2NvdXJzZS9kaWdpc2FrdV9yZXF1aXJlbWVudHNfZGVmaW5pdGlvbl9hbmRfc3lzdGVtX2Rlc2lnbi8/Y291cG9uQ29kZT03QTk0NDEwMEE1RkU3RTNGOTcxQQ==">【入門】システム要件定義と基本設計（実践ワークで理解する上流工程の進め方）<i class="fa fa-external-link-alt"></i></span></p>
<p>■應用編：</p>
<p><span class="exturl" data-url="aHR0cHM6Ly93d3cudWRlbXkuY29tL2NvdXJzZS9idXNpbmVzc19yZXF1aXJlbWVudF9hbmFseXNpc19hbmRfc3lzdGVtX2Rlc2lnbi8/Y291cG9uQ29kZT1GOTE2NUM1MDhDNjdBMTAxREI0Qw==">【超実践】ビジネス要件分析・基本設計・詳細設計をやり抜く実践ワーク講座<i class="fa fa-external-link-alt"></i></span></p>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>這是由 <span class="exturl" data-url="aHR0cHM6Ly9kaWdpc2FrdS5jby5qcC8=">DEGISAKU 株式會社<i class="fa fa-external-link-alt"></i></span>提供的程式設計文章。</p>
<p>這次要討論的是與需求定義・系統設計相關的主題。</p>
<p>在學習程式設計時，是否曾經有過這樣的經驗呢？</p>
<p><strong>「即使學習也做不出產品」<br>「到底開發是怎麼進行？」<br>「需求定義是什麼？」</strong></p>
<p>為了解決這些困擾，首先讓我們瞭解<strong>開發過程的整體概念</strong>。<br>請參考下圖的「軟體開發過程」，</p>
<p>我們平常在學習程式設計的階段，將對應到 <strong>「實作」</strong>的部分。<br>換句話說，在展現程式設計能力之前，還<strong>存在四道壁壘</strong>需要克服。</p>
<p><img src="https://hackmd.io/_uploads/B1KZLebW6.png"></p>
<blockquote>
<p>軟體開發過程，由左至右分別是：</p>
<ul>
<li>企劃 &gt; 業務設計 &gt; 需求定義 &gt; 設計 &gt; 實作（程式設計） &gt; 測試 &gt; 發布 &gt; 維護</li>
</ul>
</blockquote>
<p>因此，本文將針對開始實作（程式設計）之前，必須進行的「企劃 &gt; 設計」過程依序做介紹。<br>內容將特別著重於，工程師必須理解的「需求定義」和「設計」階段。</p>
<p>此外，據說在整個開發過程中，大約<strong>有二到三成的時間用於實作（程式設計）</strong>；<strong>另一方面，需求定義和設計等上游流程，約占總時間的五成</strong>。</p>
<p>這意味著，<strong>擁有需求定義和設計能力的人，必然能提高對開發專案的貢獻度</strong>。藉由這個機會，讓我們好好學習這些技能，來擴大發展的機會吧。</p>
<p>本文的章節安排如下：</p>
<ul>
<li>需求定義的必要性</li>
<li>确定需求定義的過程</li>
<li>在需求定義中決定的事項</li>
<li>基本設計的建立方式</li>
<li>進一步推進基本設計</li>
<li>總結</li>
</ul>
<p>※ 我在 SNS 上也有分享各種訊息，若閱讀本文感覺不錯，也歡迎關注 <span class="exturl" data-url="aHR0cHM6Ly90d2l0dGVyLmNvbS9kaWdpc2FrdTcxMA==">Twitter 帳號「Saku731」<i class="fa fa-external-link-alt"></i></span> 。</p>
<h2 id="需求定義的必要性"><a href="#需求定義的必要性" class="headerlink" title="需求定義的必要性"></a>需求定義的必要性</h2><h3 id="需求定義的目的"><a href="#需求定義的目的" class="headerlink" title="需求定義的目的"></a>需求定義的目的</h3><p>在系統開發專案中，通常分成兩類主要參與者：</p>
<ul>
<li><strong>「製作」系統的人（開發者）</strong></li>
<li><strong>「使用」系統的人（委託者）</strong></li>
</ul>
<p>如果是建立自己想要的系統，那麼在腦海中應該已經有了完整概念，因此不會有太大問題。但在更多情況下，開發工作會是透過「委託者⇒開發者」來委託完成。</p>
<p>而在這種情況，如果不<strong>明確化委託者腦中的想法</strong>，開發者將不知道該從何做起。因此，需求定義的目的就是為了能夠與委託者溝通。</p>
<p>試著用日常生活中的例子來思考看看。</p>
<p>當覺得口渴時，您是否會提出「幫我買飲料來！」的要求？<br>如果沒有表達「幫我買杯咖啡」，或更具體的「<strong>幫我買杯微糖熱咖啡，不要罐裝，要瓶裝的！</strong>」，可能無法如願得到想要的咖啡。</p>
<p>系統開發也是如此。</p>
<p>需求定義的目標，就是為了明確達成「該做什麼才能滿足需求？」的共識。</p>
<p>也就是說，<strong>需求定義 = 在交付時可以明確確認「這樣 OK！」的具體先決條件</strong>，請務必理解這點。</p>
<h2 id="確定需求定義的過程"><a href="#確定需求定義的過程" class="headerlink" title="確定需求定義的過程"></a>確定需求定義的過程</h2><p>瞭解需求定義的目的之後，接下來，讓我們來理解完成需求定義的三個階段：</p>
<ul>
<li>要望（ようぼう）：「如果有這樣的系統就好了」的想法</li>
<li>要求（ようきゅう）：希望在系統實現的<strong>粗略功能清單</strong></li>
<li>要件（ようけん）：雙方都同意的<strong>具體功能清單與實作方法</strong></li>
</ul>
<blockquote>
<p>「要望」&gt;「要求」&gt;「要件」分別表示不同程度或類型的需求。</p>
</blockquote>
<p>可參考下圖，由外到內依序代表：</p>
<ul>
<li>要望：比較隨意的願望或期望<ul>
<li>「如果有這樣的系統就好了」</li>
</ul>
</li>
<li>要求：強制性、正式的需求<ul>
<li>「希望實現這樣的功能」</li>
</ul>
</li>
<li>要件：特定的條件、規格或要求<ul>
<li>「來實現這個功能吧」</li>
</ul>
</li>
</ul>
<p><img src="https://hackmd.io/_uploads/B1P9M5W-a.png"></p>
<p>這三個階段的過程，需要透過「審查」和「建議」來溝通，按照順序整理如下：</p>
<ul>
<li><strong>①要望（期望）：需要解決的問題（委託者的任務）</strong><ul>
<li>現有的問題</li>
<li>目標（本應達到的狀態）</li>
<li>現況與目標之間的差距（需要解決的問題）</li>
</ul>
</li>
<li><strong>②要求（正式需求）：想要在系統中實現的功能（委託者的任務）</strong><ul>
<li>專案背景（需要解決的問題）</li>
<li>解決問題所需的系統概述</li>
<li>具體想要實現的功能清單</li>
</ul>
</li>
<li><strong>③評估：思考實現需求的可行性（開發者的任務）</strong><ul>
<li>開發在技術上是否可行？</li>
<li>預算大約需要多少？</li>
<li>交付期限差不多是何時？</li>
</ul>
</li>
<li><strong>④提議：將討論結果反饋給委託者（開發者的任務）</strong><ul>
<li>可以實現的功能</li>
<li>請求金額</li>
<li>可以交付的日期</li>
</ul>
</li>
<li><strong>⑤要件（特定條件的需求）：雙方達成共識的決策事項（委託者・開發者協商決定）</strong><ul>
<li>在系統中實現的功能清單</li>
<li>交付期限、收費金額的參考資訊也可能包含在其中</li>
</ul>
</li>
</ul>
<p><img src="https://hackmd.io/_uploads/BkFXJs-WT.png"></p>
<h2 id="在需求定義中決定的事項"><a href="#在需求定義中決定的事項" class="headerlink" title="在需求定義中決定的事項"></a>在需求定義中決定的事項</h2><p>在瞭解流程之後，接下來將粗略介紹需求定義中決定的事項。</p>
<p>這裡使用 3W（Why・What・How）來整理排列，將有助於清楚理解：</p>
<ul>
<li><strong>Why：系統開發目的（要望）</strong><ul>
<li>現有的問題</li>
<li>目標（本應達到的狀態）</li>
<li>現況與目標之間的差距（需要解決的問題）</li>
</ul>
</li>
<li><strong>What：需要解決什麼問題</strong><ul>
<li>系統導入後的業務流程</li>
<li>功能需求<ul>
<li>想要實現的功能清單</li>
</ul>
</li>
<li>非功能需求<ul>
<li>處理速度、安全性等</li>
</ul>
</li>
</ul>
</li>
<li><strong>How：具體的使用難易度與實作方法（類似系統設計的任務）</strong><ul>
<li>基本設計<ul>
<li>畫面設計（UI 設計）</li>
<li>功能設計</li>
<li>資料設計</li>
</ul>
</li>
<li>詳細設計<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3poLXR3LyVFOSVBMSU5RSVFNSU4OCVBNSVFNSU5QyU5Ng==">類別圖（Class Diagram）<i class="fa fa-external-link-alt"></i></span>、<span class="exturl" data-url="aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3poLXR3LyVFNiU5NyVCNiVFNSVCQSU4RiVFNSU5QiVCRQ==">序列圖（Sequence Diagram）<i class="fa fa-external-link-alt"></i></span></li>
<li>系統架構（<strong>Systems architecture）</strong></li>
<li>實現各部位的技術等</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="基本設計（畫面設計・功能設計・資料設計）的作法"><a href="#基本設計（畫面設計・功能設計・資料設計）的作法" class="headerlink" title="基本設計（畫面設計・功能設計・資料設計）的作法"></a>基本設計（畫面設計・功能設計・資料設計）的作法</h2><p>對於在需求定義中決定的事項，可能因此產生繁雜的印象，但請不用擔心。</p>
<p>在 What 部分（業務流程、功能需求和非功能需求），通常是由開發團隊中的「<strong>業務人員</strong>」或「<strong>銷售工程師</strong>」來處理。</p>
<p>因此，我們將<strong>深入探討工程師在 How（設計）方面發揮其能力</strong>。其中，<strong>扮演關鍵角色的基本設計</strong>，將是本文的討論重點。</p>
<p>如上所述，基本設計包括「畫面、功能和資料」的設計，只有當這些內容都到位後，程式設計師才能開始著手軟體開發。</p>
<ul>
<li><strong>畫面設計（UI 設計）</strong><ul>
<li>可以在各畫面做什麼？</li>
<li>顯示資訊（文字、圖像等）和佈局</li>
<li>將上述內容統整到畫面轉換圖（Screen transition diagram）</li>
</ul>
</li>
<li><strong>功能設計</strong><ul>
<li>背後執行（功能名稱和處理內容）</li>
<li>處理需要的資料、資料的取得來源（從畫面輸入、從 DB 取得等）</li>
<li>將處理後的資料傳送目的地（畫面顯示、儲存到 DB 等）</li>
</ul>
</li>
<li><strong>資料設計</strong><ul>
<li>資料的具體內容</li>
<li>資料庫設計</li>
<li>資料的流向（Data Flow）</li>
</ul>
</li>
</ul>
<h2 id="畫面設計（UI-設計）"><a href="#畫面設計（UI-設計）" class="headerlink" title="畫面設計（UI 設計）"></a>畫面<strong>設計（UI 設計）</strong></h2><p>首先，必須優先決定的部分是<strong>畫面設計（UI 設計）</strong>。</p>
<p>使用者透過畫面（UI）來使用軟體，因此在「<strong>畫面的易用性</strong>」這點意見一致，將是通往專案成功的捷徑。</p>
<p>如前面所述，畫面設計包含以下項目：</p>
<ul>
<li>可以在各畫面做什麼？</li>
<li>顯示資訊（文字、圖像等）和佈局</li>
<li>將上述內容統整到畫面轉換圖（Screen transition diagram）</li>
</ul>
<p><img src="https://hackmd.io/_uploads/r1tr6iWbT.png">)</p>
<p>當整理到這一步時，即可想像出系統的具體成品，這就是為什麼要先進行畫面設計的原因。</p>
<h2 id="功能設計"><a href="#功能設計" class="headerlink" title="功能設計"></a>功能設計</h2><p>完成畫面設計（UI 設計）後，接著將設計系統要實現的功能。</p>
<p>功能設計是確定「背後<strong>執行的流程和所需資料</strong>」的階段。</p>
<p>需要決定的事項，如前面所述：</p>
<ul>
<li>背後執行（功能名稱和處理內容）</li>
<li>處理需要的資料、資料的取得來源（從畫面輸入、從 DB 取得等）</li>
<li>將處理後的資料傳送目的地（畫面顯示、儲存到 DB 等）</li>
</ul>
<p>接下來，試著粗略設計畫面轉換圖中出現的各頁面功能。</p>
<p><img src="https://hackmd.io/_uploads/B1IT1n-bp.png"></p>
<p><img src="https://hackmd.io/_uploads/SJq1g2-Z6.png"></p>
<p><img src="https://hackmd.io/_uploads/Sy0xg3bWT.png"></p>
<p><img src="https://hackmd.io/_uploads/Sk8Ze2-Za.png"></p>
<p><img src="https://hackmd.io/_uploads/B1vMg3Wb6.png"></p>
<p><img src="https://hackmd.io/_uploads/HyyXenbW6.png"></p>
<p>透過這個方式，無論是誰都<strong>能夠藉此想像應該寫什麼樣的程式</strong>。構成系統的各個部分也變得清晰，能更容易<strong>在團隊內部進行分工</strong>。</p>
<p>作為功能設計的最後一步，便是將畫面設計和功能設計連接起來。藉此可視化<strong>使用者操作與背後執行的處理</strong>，在畫面之間的關係。</p>
<p><img src="https://hackmd.io/_uploads/ByuzNNG-p.png"></p>
<p>全部統整後如下圖所示。<br>※ 這部分資料量較大，因此可放大感興趣的部分查閱。</p>
<p><img src="https://hackmd.io/_uploads/S1AEehWbT.png"></p>
<h2 id="資料設計"><a href="#資料設計" class="headerlink" title="資料設計"></a>資料設計</h2><p>最後是資料設計。</p>
<p>準備工作到這一步，終於要開始進行資料設計。</p>
<p>如上所述，需要決定的事項有三個：</p>
<ul>
<li>資料的具體內容</li>
<li>資料庫設計</li>
<li>資料的流向（Data Flow）</li>
</ul>
<p><strong>資料大致上可分為四種類型</strong>。</p>
<p>接下來，將要設計這四種資料類型，在系統內的流向是如何。</p>
<ul>
<li><strong>在程式「輸入」資料（參數）</strong><ul>
<li>使用者在 Web 畫面輸入資料</li>
<li>從資料庫讀取資料</li>
</ul>
</li>
<li><strong>從程式「返回」資料（返回值）</strong><ul>
<li>在 Web 畫面顯示的資料</li>
<li>在資料庫儲存的資料</li>
</ul>
</li>
</ul>
<h3 id="資料的具體內容"><a href="#資料的具體內容" class="headerlink" title="資料的具體內容"></a>資料的具體內容</h3><p>在這個階段，將會具體化之前抽象定義的資料，例如 <strong>「會員資訊」</strong> 等。</p>
<p>此外，如果要達到實務水平，就必須瞭解 <strong>「正規化」</strong> 的相關知識。</p>
<p>※ 如果感興趣，可參考相關文章：**<span class="exturl" data-url="aHR0cHM6Ly9xaWl0YS5jb20vbW9jaGljaG9jby9pdGVtcy8yOTA0Mzg0YjI4NTZkYjJiZjQ2Yw==">正規化の要点を理解する<i class="fa fa-external-link-alt"></i></span>**。</p>
<ul>
<li><strong>會員資訊</strong><ul>
<li>姓名</li>
<li>姓名的片假名讀音</li>
<li>電子郵件地址</li>
<li>密碼</li>
</ul>
</li>
<li><strong>商品資訊</strong><ul>
<li>商品名稱</li>
<li>詳細説明</li>
<li>商品圖像 URL</li>
<li>類型</li>
<li>製造商</li>
<li>價格</li>
<li>評價</li>
</ul>
</li>
<li><strong>購買紀錄</strong><ul>
<li>會員 ID</li>
<li>商品 ID</li>
<li>購買日期</li>
<li>購買數量</li>
</ul>
</li>
</ul>
<h3 id="資料庫設計"><a href="#資料庫設計" class="headerlink" title="資料庫設計"></a>資料庫設計</h3><p>在明確資料內容之後，再來將進行資料庫設計。</p>
<p>首先要記住的是，到目前為止，我們雖然稱資料為「會員訊息」、「商品訊息」、「購買歷史紀錄」等，但在資料庫設計中，將會用「Table（表格）」來表示。</p>
<p>※ 例如：<strong>「會員訊息表格」、「商品訊息表格」、「購買紀錄表格」</strong>。</p>
<p>在資料庫設計中，需要執行三項任務：</p>
<ul>
<li>區分表格的角色為「<strong>主表格</strong>」和「<strong>紀錄表格</strong>」</li>
<li>整理表格之間的<strong>參考關係</strong></li>
<li>將參考關係繪製成 <strong><span class="exturl" data-url="aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3poLXR3L0VSJUU2JUE4JUExJUU1JTlFJThC">ER 圖（Entity-Relation Model = 實體關係圖）<i class="fa fa-external-link-alt"></i></span></strong></li>
</ul>
<p>※（註）「主表格」和「紀錄表格」等稱呼是作者自身觀點。</p>
<p>接下來，按照以下標準來區分每個表格的角色：</p>
<ul>
<li><strong>主表格：包含基本訊息（其他表格會參照的資料）</strong><ul>
<li>會員訊息表格（以下簡稱為「<strong>會員主表格</strong>」）</li>
<li>商品訊息表格（以下簡稱為「<strong>商品主表格</strong>」）</li>
</ul>
</li>
<li><strong>紀錄表格：包含系統在運行中累積的資料</strong><ul>
<li>購買紀錄表格</li>
</ul>
</li>
</ul>
<p>下一步，使用箭頭表示<strong>參考來源與參考目標</strong>，整理「表格之間的參考關係」。<br>同時，也明確標明是「<strong>根據使用者操作產生的資料</strong>」，將有助於理解資料流動，而不易有所遺漏。<br>※ 有時也會透過網路從外部引入資料，如：天氣預報 API 等。</p>
<p><img src="https://hackmd.io/_uploads/SyR95mG-6.png"></p>
<p>最後，完成的 ER 圖即為資料庫設計圖。</p>
<p>※ 有關繪製 ER 圖的詳細內容，可參考這篇文章：<span class="exturl" data-url="aHR0cHM6Ly9pdC1rb2FsYS5jb20vZW50aXR5LXJlbGF0aW9uc2hpcC1kaWFncmFtLTE4OTc=">若手プログラマー必読！５分で理解できるER図の書き方５ステップ<i class="fa fa-external-link-alt"></i></span></p>
<p><img src="https://hackmd.io/_uploads/HkJd4VfWa.png"></p>
<h3 id="資料的流向（Data-Flow）"><a href="#資料的流向（Data-Flow）" class="headerlink" title="資料的流向（Data Flow）"></a>資料的流向（Data Flow）</h3><p>最後，將 <strong>「資料庫與畫面轉移圖之間的關係」</strong>整理完成後，即可看到系統整體面貌<strong>「畫面設計×功能設計×資料設計」</strong>。</p>
<p>每個程式都將基於這份設計圖來撰寫。</p>
<p>透過反覆練習這段過程，將能夠清楚呈現整體面貌。</p>
<p><img src="https://hackmd.io/_uploads/Hkvh2XMba.png"></p>
<h2 id="進一步推進基本設計"><a href="#進一步推進基本設計" class="headerlink" title="進一步推進基本設計"></a>進一步推進基本設計</h2><p>若能夠理解以上內容，即可進行基本設計，並且已足夠開發自己的產品。遇到不理解的部分，可以在查詢資料的同時，繼續進行編程。</p>
<p>開發完成後，如何設定伺服器為公開，Qiita 上已經有發表許多相關文章，這篇文章可供參考：**<span class="exturl" data-url="aHR0cHM6Ly9xaWl0YS5jb20vdGFjaGliYW5heXUyNC9pdGVtcy9iOGQ3M2NkZmQ0Y2JkNDJjNWIxZA==">【20分でデプロイ】AWS EC2にDjango+PostgreSQL+Nginx環境を構築してササッと公開<i class="fa fa-external-link-alt"></i></span>**</p>
<p>另外，在實際的開發現場，若是不進行<strong>詳細設計</strong>，將無法向程式設計師提出明確的要求。</p>
<p>在充分理解本文內容後，請先學習以下內容：</p>
<ul>
<li>建立類別圖和序列圖</li>
<li>決定系統架構</li>
<li>決定實現架構各部位的技術</li>
</ul>
<p>儘管如此，最近技術變革非常迅速，在<strong>詳細設計過程中可能已出現新技術</strong>的情況發生。</p>
<p>根據敏捷開發的方式，即可透過「<strong>在詳細設計過程中做出決策</strong>」來繼續進行。</p>
<p>※ 根據公司內部的開發方針進行即可。</p>
<h2 id="最後"><a href="#最後" class="headerlink" title="最後"></a>最後</h2><p>在團隊開發現場，<strong>角色分工是前提</strong>。<br>確實描繪整體樣貌，明確訂出「是誰、要做什麼」，以便開發順利進行。</p>
<p>若是覺得這篇文章有所幫助，也歡迎關注我的 <span class="exturl" data-url="aHR0cHM6Ly90d2l0dGVyLmNvbS9kaWdpc2FrdTcxMA==">Twitter 帳號「Saku731」<i class="fa fa-external-link-alt"></i></span> 。</p>
<p>（後記）</p>
<p>我撰寫了一篇，關於使用 Python 進行系統開發所需技能的文章。可參考以下內容：</p>
<ul>
<li>瞭解系統開發所需技能的整體概況：<span class="exturl" data-url="aHR0cHM6Ly9xaWl0YS5jb20vU2FrdTczMS9pdGVtcy81MmEzYmJhY2QwMDJmMjZmNDA4ZQ==">Pythonでゼロからでもサービス開発・公開できる学習ロードマップ<i class="fa fa-external-link-alt"></i></span></li>
<li>使用 Django 進行系統開發的一系列步驟：<span class="exturl" data-url="aHR0cHM6Ly9xaWl0YS5jb20vU2FrdTczMS9pdGVtcy9lZDY0MTkwYTEyYTQ0OThiOTQ0Ng==">Django(Python)でシステム開発できるようになる記事_入門編<i class="fa fa-external-link-alt"></i></span></li>
</ul>
<blockquote>
<p>15th鐵人賽目錄傳送門：<span class="exturl" data-url="aHR0cHM6Ly9pdGhlbHAuaXRob21lLmNvbS50dy91c2Vycy8yMDEzNTU1OC9pcm9ubWFuLzYyOTA=">https://ithelp.ithome.com.tw/users/20135558/ironman/6290<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
]]></content>
      <categories>
        <category>2023鐵人賽</category>
        <category>Back-End</category>
      </categories>
      <tags>
        <tag>Back-End</tag>
        <tag>System Design</tag>
        <tag>ironman2023</tag>
        <tag>Qiita</tag>
        <tag>Demand</tag>
      </tags>
  </entry>
  <entry>
    <title>[2023 15th鐵人賽] Day26 - 擁有 20 多年工程師經驗的我，在撰寫設計規格書時所注意的事情</title>
    <url>/ironman-2023-day-26/</url>
    <content><![CDATA[<blockquote>
<p>原文連結：<span class="exturl" data-url="aHR0cHM6Ly9xaWl0YS5jb20veS1zb21lL2l0ZW1zLzkwNjUxYzFlMjdmNzc5OGY4N2M2">エンジニア歴20数年の私が、設計書を書く際に心がけていること - Qiita<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
<p>上一篇主要介紹「需求定義到內部設計」的流程，接下來這篇文章，將著重於設計規格書的寫法。</p>
<p>先是從作者個人角度統整觀點，如何提升文件的易讀性，以及如何避免資訊混淆等；而在團隊開發中，如何制定一致的「規格書撰寫方式」，使其易於後續維護。</p>
<span id="more"></span>

<p>以下正文開始。</p>
<hr>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>時間過得真快，轉眼間我已經在 IT 行業度過了四分之一個世紀。</p>
<p>在這段時間裡，我寫過大量的「設計文件（規格書）」，但內心仍充滿困惑和迷惘。</p>
<p>儘管如此，俗話說「<span class="exturl" data-url="aHR0cDovL2tvdG93YXphLWFsbGd1aWRlLmNvbS9rYS9rYW1lbm9rb3V5b3JpdG9zaGkuaHRtbA==">亀の甲より年（薑是老的辣）<i class="fa fa-external-link-alt"></i></span>」，我試著從「個人」和「團隊」兩種角度總結出經驗法則。</p>
<ul>
<li>本文的主題是「針對設計規格書，開發文件的撰寫方式」</li>
<li>本文假定的規格書，是以 Excel 或 Word 撰寫成正式的（≒ 交付物）設計文件。</li>
<li>因此，比起以自家服務開發或敏捷開發為前提，委託開發、瀑布式開發可能更適合本文內容。</li>
</ul>
<p><strong>＜請注意＞</strong></p>
<p>本文內容是作者個人見解，並不代表所屬公司的立場、策略、意見。</p>
<h2 id="個人所注意的事情"><a href="#個人所注意的事情" class="headerlink" title="個人所注意的事情"></a>個人所注意的事情</h2><h3 id="在文章開頭說明該文件的建立目的和定位"><a href="#在文章開頭說明該文件的建立目的和定位" class="headerlink" title="在文章開頭說明該文件的建立目的和定位"></a>在文章開頭說明該文件的建立目的和定位</h3><ul>
<li>例如「本書將描述 ◯◯ 功能中 ×× 畫面的佈局設計以及輸入輸出設計」。</li>
<li>若有相關文件，可以寫上「關於 △△，請參考 □□」。</li>
<li>特別適用於設計階段之後（例如系統測試、維護或新增功能時），「搜尋」設計文件的情況。</li>
</ul>
<h3 id="首先考慮章節架構"><a href="#首先考慮章節架構" class="headerlink" title="首先考慮章節架構"></a>首先考慮章節架構</h3><ul>
<li>考慮章節架構，也可以說是設計一份設計文件。</li>
<li>如果可以，最好在只寫出章節標題的狀態，給合適的人過目，如此可以降低基本認知差異的風險。</li>
</ul>
<h3 id="先顯示整體-→-再解釋細節"><a href="#先顯示整體-→-再解釋細節" class="headerlink" title="先顯示整體 → 再解釋細節"></a>先顯示整體 → 再解釋細節</h3><ul>
<li>這不僅適用於設計文件和發表文稿，任何文件檔也同樣適用。</li>
</ul>
<h3 id="注意每行的字數"><a href="#注意每行的字數" class="headerlink" title="注意每行的字數"></a>注意每行的字數</h3><ul>
<li>有些人會在 A4 橫向格式中，寫很長的文句，但這將導致閱讀困難。</li>
<li>每行最佳文字數<ul>
<li>如果用 Google 搜尋，可以發現許多網站文章，對橫向書寫的建議是每行 30〜35 個字。</li>
<li>以我來看，設計文件最多不超過 40 個字，這是為了易讀性和每頁資訊量之間的平衡。<ul>
<li>40 個字並沒有明確的根據，但如果是「一行 80 字節」，可能會讓人有所感觸⋯⋯</li>
</ul>
</li>
<li>字數可以根據個人的基準來決定，重點是「需要注意每行文字」這一點。</li>
</ul>
</li>
</ul>
<h3 id="縮短句子"><a href="#縮短句子" class="headerlink" title="縮短句子"></a>縮短句子</h3><ul>
<li>長句子往往形成複雜的結構，容易產生誤解。</li>
<li>個人建議以「每句不超過兩行（即 80 個字符以內）」為目標。對於跨越三行的句子，應該考慮是否能進行拆解。</li>
</ul>
<h3 id="使用條列式"><a href="#使用條列式" class="headerlink" title="使用條列式"></a>使用條列式</h3><ul>
<li>列舉項目的長句，通常可以轉換為條列式。</li>
<li>在分解結構複雜的句子時，條列式通常非常有效。</li>
</ul>
<h3 id="使用圖表"><a href="#使用圖表" class="headerlink" title="使用圖表"></a>使用圖表</h3><ul>
<li>比起文字，人類更容易透過圖表直觀理解。</li>
<li>特別是在表現整體概念時，圖表比文字更有說服力。</li>
</ul>
<h3 id="使用表格"><a href="#使用表格" class="headerlink" title="使用表格"></a>使用表格</h3><ul>
<li>這對預防損害方面非常重要。</li>
<li>若試圖只用文字描述複雜的情況，可能導致讀者產生誤解。</li>
</ul>
<h3 id="使用縮排（Indentation）"><a href="#使用縮排（Indentation）" class="headerlink" title="使用縮排（Indentation）"></a>使用縮排（Indentation）</h3><ul>
<li>縮排是一種有效的方式，可以讓讀者在視覺上理解文章結構。</li>
</ul>
<h3 id="統一主語"><a href="#統一主語" class="headerlink" title="統一主語"></a>統一主語</h3><ul>
<li>「當 ◯◯ 按鈕被點擊時，將顯示 ×× 畫面」和「當點擊 ◯◯ 按鈕時，×× 畫面將被顯示」的主語是不同的。</li>
<li>在設計文件中，通常主語是「系統」或「用戶」。雖然沒有必要堅持哪一種，但至少在文件中要保持一致。</li>
<li>順帶一提，我在設計文件中傾向於使用「系統」作為主語。</li>
</ul>
<h3 id="統一用詞"><a href="#統一用詞" class="headerlink" title="統一用詞"></a>統一用詞</h3><ul>
<li>對於相同功能、相同概念，應該使用完全相同的詞彙，不要用不同的詞彙來描述同一件事。<ul>
<li>例：「日締め」、「日次締め」、「日締処理」（代表截止日期）</li>
</ul>
</li>
<li>這些看似小事，但在系統開發中，團隊成員之間微小的認知差異，往往會引發大問題。</li>
<li>在專案中建立詞彙表。</li>
<li>對於縮寫也要在詞彙表中記錄，或在文件開頭寫上「Ruby on Rails（以下簡稱 RoR）」等內容。（除非是已經廣泛使用的縮寫，如「IT」等）</li>
</ul>
<h3 id="不要創造新詞"><a href="#不要創造新詞" class="headerlink" title="不要創造新詞"></a>不要創造新詞</h3><ul>
<li>常見例子是與日期相關的詞。<ul>
<li>「執行日期」、「處理日期」、「當日」⋯⋯<ul>
<li>是從哪裡取得？包含時刻嗎？時區是什麼？是否有曆法差異？</li>
</ul>
</li>
</ul>
</li>
<li>如果是專案內共享的概念，請在詞彙表中記錄定義。</li>
<li>如果是在該文件內，獨自建立的詞語，應該建立該詞語的定義項目，並明確做記錄。</li>
</ul>
<h3 id="排除寫法不一致"><a href="#排除寫法不一致" class="headerlink" title="排除寫法不一致"></a>排除寫法不一致</h3><p>例如：</p>
<ul>
<li>「サーバ」和「サーバー」：統一拼音</li>
<li>「Web」和「ウェブ」：名詞統一使用中、英或日文表示</li>
<li>「4月」、「４月」和「四月」：數字統一用半形、全形或中文表示</li>
<li>「です・ます」和「だ・である」：句尾型態統一</li>
</ul>
<p>如果是自己專用的筆記，可能不太需要在意這些細節。<br>但我認為，考慮有讀者存在，以「也許會有人根據這些細節來評價文件的好壞」為前提會比較保險。</p>
<h3 id="專有名詞必須準確"><a href="#專有名詞必須準確" class="headerlink" title="專有名詞必須準確"></a>專有名詞必須準確</h3><ul>
<li>例如「JAVA」是錯誤寫法，正確是「Java」。</li>
<li>對於產品名稱或公司名稱，容易出現混淆的情況，應該仔細查證，確保文字大小寫、單詞間有無空格等內容。</li>
</ul>
<h2 id="在領導團隊時所注意的事情"><a href="#在領導團隊時所注意的事情" class="headerlink" title="在領導團隊時所注意的事情"></a>在領導團隊時所注意的事情</h2><p>我認為，影響設計文件好壞的因素，比起個人的努力和心態，團隊之間的協力更為重要。</p>
<p>如果整個團隊在撰寫設計文件時沒有統一感，對於外部觀察者而言，設計文件的整體價值將會降低。</p>
<h3 id="確認記錄的細節"><a href="#確認記錄的細節" class="headerlink" title="確認記錄的細節"></a>確認記錄的細節</h3><ul>
<li>對於基本設計文件和詳細設計文件，應該要記錄什麼，以及寫到什麼程度。</li>
<li>如果寫得過於詳細，將難以進行維護，最終導致沒有人會查看設計文件。</li>
</ul>
<h3 id="確認章節的記錄方式"><a href="#確認章節的記錄方式" class="headerlink" title="確認章節的記錄方式"></a>確認章節的記錄方式</h3><p>這裡提供一個範例：</p>
<pre class="line-numbers language-none"><code class="language-none">１．ｘｘｘ
    １．１．ｘｘｘ
        １．１．１．ｘｘｘ
            （１）ｘｘｘ<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>無論是使用全形/半形文字，以及是否使用縮排等細節，都需要仔細確認，這將有助於文件的統一性。</p>
<h3 id="在量產規格書之前先製作樣本"><a href="#在量產規格書之前先製作樣本" class="headerlink" title="在量產規格書之前先製作樣本"></a>在量產規格書之前先製作樣本</h3><ul>
<li>最好由設計文件的審查者，也就是工程師來製作樣本。</li>
<li>樣本完成後，除了說「請看一下」以外，最好有一個場合，能夠向所有人解釋希望如何編寫樣本，以及樣本創作者的想法。</li>
</ul>
<h3 id="模板盡可能簡單"><a href="#模板盡可能簡單" class="headerlink" title="模板盡可能簡單"></a>模板盡可能簡單</h3><ul>
<li>過多的規則將會降低生產效率。</li>
<li>過度拘泥於模板，將會使內容變得膚淺。在某些情況下，自由格式可能更適合表達。</li>
<li>確實格式也是品質的一部分，但製作一個平衡的模板更為重要。</li>
</ul>
<h3 id="確定如何保留變更歷史紀錄"><a href="#確定如何保留變更歷史紀錄" class="headerlink" title="確定如何保留變更歷史紀錄"></a>確定如何保留變更歷史紀錄</h3><ul>
<li>紅→藍→綠→⋯⋯，有些成員可能會在每次進行變更時，把顏色變得很繽紛。</li>
<li>對此可能會有其他成員抱怨「難以閱讀！」（就是我）。</li>
<li>雖然從 Excel 轉移到 Markdown 等格式，將其納入版本控制系統可能會更好⋯⋯（有時也涉及到政治因素），但可能很難實現。</li>
<li>建立變更歷史紀錄表，並記錄在哪個表的哪個部分，進行了什麼修改，可能是現實的解決方案。</li>
</ul>
<h3 id="將上述事項整理成指南"><a href="#將上述事項整理成指南" class="headerlink" title="將上述事項整理成指南"></a>將上述事項整理成指南</h3><ul>
<li>使審查更加順利</li>
<li>當成員更換時，能夠順利進行說明</li>
<li>無論有多忙碌，都不應忽視指南的維護</li>
</ul>
<h2 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h2><ul>
<li>為了提高書寫能力，只有透過訓練。</li>
<li>最重要的是，身邊有人能夠嚴格指導並提供建議。</li>
</ul>
<p>最後，如果這篇文章有任何不足之處，請在評論等地方告訴我！</p>
<p><strong>（2018 年 2 月 15 日補充）</strong></p>
<p>非常感謝得到許多反饋。</p>
<p>這篇文章僅基於我個人的經驗，可能存在思慮不足之處，也希望能夠根據各位的開發需求進行修改與應用。</p>
<p>我認為，透過教育和指導，可以在團隊內制定一致的「設計規格書撰寫方式」，從而在設計審查中更專注於「設計本身」。</p>
<p><strong>（2018 年 3 月 11 日補充）</strong></p>
<p>關於「每行字數〜」、「縮短句子」和「使用條列式」，已重新審視表達方式，主要內容將保持不變。</p>
<blockquote>
<p>15th鐵人賽目錄傳送門：<span class="exturl" data-url="aHR0cHM6Ly9pdGhlbHAuaXRob21lLmNvbS50dy91c2Vycy8yMDEzNTU1OC9pcm9ubWFuLzYyOTA=">https://ithelp.ithome.com.tw/users/20135558/ironman/6290<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
]]></content>
      <categories>
        <category>2023鐵人賽</category>
        <category>入門篇</category>
      </categories>
      <tags>
        <tag>ironman2023</tag>
        <tag>Qiita</tag>
        <tag>規格書</tag>
        <tag>設計文件</tag>
      </tags>
  </entry>
  <entry>
    <title>[2023 15th鐵人賽] Day27 - [常有的事] 克服「遇到問題卡住時，請立刻提問」的方法</title>
    <url>/ironman-2023-day-27/</url>
    <content><![CDATA[<blockquote>
<p>原文連結：<span class="exturl" data-url="aHR0cHM6Ly9xaWl0YS5jb20vZGV2LXRhdHN1eWEvaXRlbXMvYmNhMzg2YmM0NzMyMmYyMjA3MmE=">[あるある]「詰まったら、すぐに質問してください」の克服法 - Qiita<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
<p>倒數三天！不知不覺也來到第二十七天，終於快看到終點了似乎有點感概XD</p>
<p>接下來這篇文章，是打從自己在<span class="exturl" data-url="aHR0cHM6Ly9oZWlkaS1jb2RpbmcubWVkaXVtLmNvbS8lRTglQkQlODklRTglODElQjclRTUlODklOEQlRTclQUIlQUYlRTUlQjclQTUlRTclQTglOEIlRTUlQjglQUItbGlkZW15LSVFNyVCNSU5MCVFNiVBNSVBRCVFNSVCRiU4MyVFNSVCRSU5NyVFOCU4OCU4NyVFNiVCMSU4MiVFOCU4MSVCNyVFNyVCOCVCRCVFNyVCNSU5MC05ODA2NDRlYjRmNzQ=">轉職學習程式<i class="fa fa-external-link-alt"></i></span>的階段，直到現在第二份工作，有時仍是備感困擾的問題。因為不善於提問，或是希望先自己做好功課，等到萬不得已才找人求救，殊不知中間已經浪費太多時間，放在工作上也很有可能因此耽誤進度。</p>
<p>但是呢，這些過程其實是能夠訓練的，本文中提供面對問題時，應該如何善用「提問模板」訓練思考，並且著重於「輸出導向的輸入」，透過這些過程，將有助於改善語言表達能力，並有效提升學習的效果。</p>
<span id="more"></span>

<p>那麼，以下正文開始。</p>
<hr>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><strong>「當遇到問題卡住時，請立刻提問！」</strong></p>
<p>你是否曾經被上司、PM 或資深工程師這樣告誡過？</p>
<p>通常這種建議可能會針對初學者，但你是否曾經有以下的經驗呢？</p>
<ol>
<li>遇到不懂的問題！</li>
<li>因為被告誡要「立刻」提問，所以毫不猶豫馬上提問…</li>
<li>( ﾟдﾟ) &lt; <strong>「難道你不會試著自己查一下嗎？」</strong> 遭到了拒絕！！！噹(´・ω・｀) <code>[註解1]</code></li>
</ol>
<p>（明明被要求馬上提問的⋯⋯(´；ω；｀)）</p>
<p>還是應該自己查嗎？嗯嗯⋯⋯</p>
<ol>
<li>遇到不懂的問題！</li>
<li>即使自己思考和查找已經到極限，還是不懂…</li>
<li>（數小時後）小心翼翼地提問…</li>
<li>( ﾟдﾟ) &lt; <strong>「一開始可能會遇到無法解決的問題，所以別猶豫，馬上提問吧！」</strong> 被重擊！！！噹(´・ω・｀)</li>
</ol>
<p><strong>「到底該怎麼辦啊啊啊啊啊啊啊啊啊啊啊啊啊啊！！！！！！！！」</strong></p>
<hr>
<p>在這篇文章中，我將分享一種克服這種困境的方法。</p>
<p>相信正確的方法有非常多種，因此如果有其他克服方法，也歡迎分享出來！</p>
<h2 id="克服方法"><a href="#克服方法" class="headerlink" title="克服方法"></a>克服方法</h2><p>我認為克服的方法有 3 個步驟（逆向思考）。</p>
<ol>
<li>建立問題模板，填寫後再提問</li>
<li>強調語言表達</li>
<li>注重以輸出為前提的輸入</li>
</ol>
<h3 id="建立問題模板，填寫後再提問"><a href="#建立問題模板，填寫後再提問" class="headerlink" title="建立問題模板，填寫後再提問"></a>建立問題模板，填寫後再提問</h3><p>首先，我會建立一種稱為「問題模板」的東西，並填寫後再提問。</p>
<p>「問題模板」是在想要提問時，用來引導思考的範本。</p>
<p>為什麼會想要創建這個模板呢？因為剛進公司工作的我，即使想要提問，但多數情況都是模糊不清，無法理清思緒，提出具體化問題。</p>
<p>因此，我建立了一個模板，試著視覺化所提出的問題，和自己的思考進行連結。</p>
<p>儘管稱之為「問題模板」，但實際上非常簡單。</p>
<p>以下是問題模板的範例：</p>
<pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token comment">// 日文版</span>
<span class="token number">1.</span> 〜がわかりません。
<span class="token number">2.</span> 具体的には、〜です。
<span class="token number">3.</span> 私は〜と考えました。
<span class="token number">4.</span> なぜなら〜です。

<span class="token comment">// 中文版</span>
<span class="token number">1.</span> 我不瞭解～。
<span class="token number">2.</span> 具體來說，這是～。
<span class="token number">3.</span> 我的想法是～。
<span class="token number">4.</span> 原因是～。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><strong>簡單！</strong></p>
<p>１.<br>首先是寫下結論。<br>我不懂這個！！！像這樣，讓提問者和回答者都一目瞭然！</p>
<p>２.<br>接著，提供詳細說明，以及<strong>具體地</strong>描述遇到問題的經過。<br>即使某些程式碼或操作對自己來說是顯而易見的，但對別人來說可能是第一次見到，因此建議盡可能提供詳細的訊息。<br>就算寫得比自己想得還要詳細，讀者可能瞬間就能夠讀懂。</p>
<p>３.<br>然後，陳述自己的觀點，即使是錯的也沒關係。<br>重要的是傳達給對方「我已經思考過了」這件事。<br>如果不知道答案，透過自己的方式嘗試並寫下來。</p>
<p>４.</p>
<p>最後，提供支持該觀點的客觀證據。<br>如果缺乏這一點，觀點就僅止於預測或猜想。<br>對於程式設計師來說，尤其不喜歡模糊不清的想法⋯⋯（猜測）</p>
<hr>
<p>如果能用語言表達以上四點，就可以提問！這是我給自己定下的規則。</p>
<p>建立好提問的目標，即可迅速且毫不猶豫地提出問題，而不會陷入迷茫。</p>
<p>如此一來，</p>
<p>( ﾟдﾟ) &lt; 「<strong>難道你不會試著自己查一下嗎？</strong>」</p>
<p>( ﾟдﾟ) &lt; <strong>「一開始可能會遇到無法解決的問題，所以別猶豫，馬上提問吧！」</strong></p>
<p>就能擺脫被夾在這中間的過去了！ ！ ！</p>
<p>.</p>
<p>.</p>
<p>.</p>
<p>儘管如此，即使能夠在腦中思考自己的想法，要將文本內容實際用語言傳達給他人並不容易。（我也是這樣）</p>
<h2 id="強調語言表達"><a href="#強調語言表達" class="headerlink" title="強調語言表達"></a>強調語言表達</h2><p>我對語言表達的定義是「將腦中的想法記錄下來」。</p>
<p>（準確來說，除了文本內容，還包括口頭等詞語，但在這裡將限制其含義。）</p>
<p>就我而言，起初甚至從未聽過「語言表達」這個詞彙。</p>
<p>一直以來，比起發郵件我更喜歡打電話。</p>
<p>我認為直接說出來即可，如果是在 Slack 等的通訊工具上出現意見不一致，可透過通話來解決。如此除了節省時間，也能透過互動減少認知差異的可能性。</p>
<p>然而，日常中我們經常使用的是 Slack 等透過文本進行的交流。舉例來說，與合作夥伴或遠程工作的同事，彼此之間的互動、會議記錄、任務管理工具等。</p>
<p>實際上，對語言表達的認知，是自從我開始向遠端資深工程師和合作夥伴，提出針對規格和技術方面的問題時開始的。</p>
<p>某一天，我向一位遠端工程師提出一個技術問題。<br>當然，是按照問題模板來提問。<br>但得到的回答卻是「我不明白你的意思」。<br>噢，這裡我沒有傳達好。<br>因為對方理解不足的可能性為零，完全是因為我沒有解釋清楚。<br>這是我第一次遇到「記錄腦中的想法是如此困難」的情況。</p>
<p>現在的我，比以前更善於語言表達。<br>我認為，雖然這可能比起直接溝通，需要花費更多時間，但卻具有更多的優勢！</p>
<p>具體而言：</p>
<ul>
<li>可以獲得更深入的理解</li>
<li>增加自信和確信</li>
<li>可以得到反饋</li>
<li>可以看到自己的變化</li>
<li>作為記錄留下來</li>
</ul>
<p>那麼，該如何提高語言表達能力？<br>當然，思考方式也很重要，但更關鍵的是<strong>提高輸入的質量</strong>。</p>
<h3 id="注重以輸出為前提的輸入"><a href="#注重以輸出為前提的輸入" class="headerlink" title="注重以輸出為前提的輸入"></a>注重以輸出為前提的輸入</h3><p>提高輸入的質量意味著什麼？<br>是否已經清楚瞭解定義是什麼？瞭解基本的基礎？這些就是關鍵。</p>
<p>在語言表達時，我經常遇到在「術語」方面的問題。<br>例如對於某個詞語 A’，其抽象的單詞是 A 嗎？還是 B 呢？</p>
<p>再來，該如何提高輸入的質量呢？<br>以下提供的範例將有助於理解：</p>
<ul>
<li>如果在工作中發現需要某項技術的知識，那麼閱讀相關的技術書籍或網站，將會提供非常高質量的輸入吧？</li>
<li>如果計劃在某次會議上作為演講者登台，將會透過思考來提高輸入的質量吧？</li>
<li>如果決定撰寫 qiita 文章或技術部落格時，因為不希望提供錯誤的知識，將會研究需要的所有資訊吧？</li>
</ul>
<p>為什麼呢？</p>
<p>因為必須<strong>輸出</strong>。<br>想要提高輸入的質量，必須以輸出為前提進行輸入！</p>
<p>透過這些例子也可以瞭解到，與獨自學習程式語言相比，在工作中累積實務經驗的學習方式將會更有效率。</p>
<h2 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h2><p>當遇到問題卡住時，應該先填寫問題模板再提問！<br>透過提高輸入的質量，提高語言表達能力，將有助於更快提出問題！<br>為了實現這一點，必須始終以輸出為前提！</p>
<h2 id="最後"><a href="#最後" class="headerlink" title="最後"></a>最後</h2><p>這是我第一次撰寫 How-to 文章，結果變成類似自我啟發的內容⋯⋯<br>因為這是一篇個人散文，請別在意這點。</p>
<p><strong>後記（2019.10.03）</strong></p>
<p>收到了許多反饋，並且深切感受到 Qiita 的卓越之處＼(^o^)／ 謝謝大家！</p>
<p><code>[註解1]</code>: 敝公司從未說過 or 被告知過這樣的事。公司的政策之一是「初學者應該<strong>學習如何查找資料</strong>」。</p>
<blockquote>
<p>15th鐵人賽目錄傳送門：<span class="exturl" data-url="aHR0cHM6Ly9pdGhlbHAuaXRob21lLmNvbS50dy91c2Vycy8yMDEzNTU1OC9pcm9ubWFuLzYyOTA=">https://ithelp.ithome.com.tw/users/20135558/ironman/6290<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
]]></content>
      <categories>
        <category>2023鐵人賽</category>
        <category>入門篇</category>
      </categories>
      <tags>
        <tag>ironman2023</tag>
        <tag>Qiita</tag>
        <tag>提問方法</tag>
      </tags>
  </entry>
  <entry>
    <title>[2023 15th鐵人賽] Day28 - 事到如今問不出口的 Log 基礎和設計指南</title>
    <url>/ironman-2023-day-28/</url>
    <content><![CDATA[<blockquote>
<p>原文連結：<span class="exturl" data-url="aHR0cHM6Ly9xaWl0YS5jb20vdGFkYXNoaXJvX25pbm9taXlhL2l0ZW1zLzE5Yzc3NDg5OGM2OGFkZDYxODVlP3V0bV9zb3VyY2U9UWlpdGElRTMlODMlOEIlRTMlODMlQTUlRTMlODMlQkMlRTMlODIlQjkmdXRtX2NhbXBhaWduPTUwN2YwOTU1NGMtUWlpdGFfbmV3c2xldHRlcl81ODNfMDlfMTMmdXRtX21lZGl1bT1lbWFpbCZ1dG1fdGVybT0wX2U0NGZlYWEwODEtNTA3ZjA5NTU0Yy02MjgyMDQ0OQ==">今さら聞けないログの基本と設計指針 - Qiita<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
<p>在進行程式開發時，不論是前後端，應該都對 Log（日誌）再熟悉不過。尤其是在遇到非預期性的錯誤時，通常會需要立即調閱 Log，查看是否顯示錯誤訊息；或是在改良軟體時，需要透過 Log 來分析使用者行為等等。</p>
<p>接下來這篇文章，將會針對 Log（日誌）主題進行介紹，從 Log 相關的基礎知識、設計方法、操作時的注意事項，再到實際應用說明。 </p>
<span id="more"></span>

<p>文章架構如下：</p>
<ul>
<li>為什麼要輸出 Log？</li>
<li>為什麼要設計 Log？</li>
<li>有關 Log 的基礎知識<ul>
<li>Log 的級別與意義</li>
<li>Log 的輸出位置</li>
<li>Log 格式</li>
</ul>
</li>
<li>Log 的設計方法介紹<ul>
<li>設計 Log 時的確認事項與技巧</li>
<li>操作 Log 時的注意事項</li>
</ul>
</li>
<li>對實際的 Log 輸出進行說明<ul>
<li>基於 VM 的 Log 輸出</li>
<li>基於 Docker 的 Log 輸出</li>
<li>設計 Log 時不該做什麼</li>
</ul>
</li>
</ul>
<p>那麼，以下正文開始。</p>
<hr>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>各位對於 Log（日誌）的理解是什麼呢？可能有從機制到設計方法都完全理解的工程師，或者只是隨便用用的工程師存在。</p>
<p>Log 是系統中按照時間順序記錄，關於錯誤或故障發生、使用者操作或設定變更、與外部通信等內容。透過深入瞭解有關 Log 的知識，將能夠進行複雜的系統開發和運用。此外，如果使用 AWS、Azure、GCP 等雲端服務，不只能夠實現系統開發，還可能節省經費開支。</p>
<p>本文將介紹 Log 的基本設計方法。如果有任何疑問，請繼續閱讀下去。</p>
<h2 id="為什麼要輸出-Log？"><a href="#為什麼要輸出-Log？" class="headerlink" title="為什麼要輸出 Log？"></a>為什麼要輸出 Log？</h2><p>在討論 Log 的基本知識和 Log  的設計之前，首先必須瞭解為什麼需要輸出 Log。</p>
<p>主要考慮以下四個理由：</p>
<ul>
<li>在問題發生時進行調查</li>
<li>為了防止問題發生</li>
<li>通過資料分析來改良軟體</li>
<li>作為審計日誌使用</li>
</ul>
<p>通過輸出 Log，不只能夠調查和防止問題，還可以分析使用者的行為。或許目前還不太能感覺到輸出 Log 的必要性，但將來肯定會變得不可或缺。</p>
<h2 id="為什麼要設計-Log？"><a href="#為什麼要設計-Log？" class="headerlink" title="為什麼要設計 Log？"></a>為什麼要設計 Log？</h2><p>那麼，為什麼需要設計 Log 呢？</p>
<p>首先，Log 的設計將決定 Log 輸出的訊息和格式，基本方針是根據 Log 的使用目的來反推設計。</p>
<p>而設計 Log 的原因在於，將有助於選擇符合目的的 Log 並適當顯示。如上所述，Log 存在各種不同的類型，也因為如此，如何進行選擇和顯示其實相當複雜。</p>
<p>例如，以下將介紹使用 AWS 等雲端服務，進行系統開發的範例。雲端服務可以輕鬆實現橫向擴充和縮減，是非常方便的功能。</p>
<p>然而，容易擴展也意味著，可能存在大量不知道何時會出現或消失的伺服器。因此，在雲端系統中，各伺服器的 Log 會非同步寫入，即使將範圍縮小到毫秒單位，也很難找到特定的 Log。</p>
<p><img src="https://hackmd.io/_uploads/rJGyp9rZT.png"></p>
<p>因此，Log 的設計就變得非常重要。透過為特定事件的請求和回應，分配唯一可識別的 ID，即可藉此搜尋與目標事件相關的 Log。透過提前設計 Log，將有助於大幅減少 Log 搜尋時間。</p>
<p>以上只是一個範例，但建議在開發和操作複雜的系統時，務必進行 Log 設計。</p>
<h2 id="有關-Log-的基礎知識"><a href="#有關-Log-的基礎知識" class="headerlink" title="有關 Log 的基礎知識"></a>有關 Log 的基礎知識</h2><p>在介紹 Log 的設計之前，這裡先來瞭解有關 Log 的基礎知識！以下將簡單解釋相關內容，因此可以只挑選還不熟悉的部分閱讀。</p>
<ul>
<li>Log 的級別</li>
<li>Log 的輸出位置</li>
<li>Log 的格式</li>
</ul>
<h3 id="Log-的級別與意義"><a href="#Log-的級別與意義" class="headerlink" title="Log 的級別與意義"></a>Log 的級別與意義</h3><p>Log 具備權限分析、故障調查、安全性和稽核等多種用途。</p>
<p>下表整理出代表 Log 重要性的等級和類型，內容可能會依據所使用的開發語言、Log 管理系統和設計而有所變化，但基本如下所示：</p>
<table>
<thead>
<tr>
<th>種類</th>
<th>意思</th>
</tr>
</thead>
<tbody><tr>
<td>EMERG</td>
<td>系統不可利用</td>
</tr>
<tr>
<td>ALERT</td>
<td>必須立即採取行動</td>
</tr>
<tr>
<td>CRIT</td>
<td>嚴重缺失狀況</td>
</tr>
<tr>
<td>ERROR</td>
<td>發生錯誤的狀態</td>
</tr>
<tr>
<td>WARN</td>
<td>被警告的狀態</td>
</tr>
<tr>
<td>NOTICE</td>
<td>正常但重要的情況</td>
</tr>
<tr>
<td>INFO</td>
<td>資訊訊息</td>
</tr>
<tr>
<td>DEBUG</td>
<td>有關系統如何運作的訊息</td>
</tr>
</tbody></table>
<h3 id="Log-的輸出位置"><a href="#Log-的輸出位置" class="headerlink" title="Log 的輸出位置"></a>Log 的輸出位置</h3><p>原則上，Log 應該輸出到開發人員和維運人員容易找到的位置。如果想輸出到文件，建議創建一個 <code>log</code> 的目錄。基本上，預期會輸出以下四個位置：</p>
<ul>
<li><strong>輸出到文檔</strong><ul>
<li>這種方法適合在控制台以外啟動的應用程式。</li>
</ul>
</li>
<li><strong>標準輸出</strong><ul>
<li>這種方法適合用於從控制台啟動的應用程式，用於輸出中間過程等資訊。</li>
</ul>
</li>
<li><strong>輸出到外部日誌管理工具的文檔</strong><ul>
<li>如果可以使用外部日誌管理工具，建議將 Log 輸出到專用的記錄位置。</li>
</ul>
</li>
<li><strong>輸出到外部系統</strong><ul>
<li>為了方便開發者和運維人員的工作和溝通，有時會將 Log 輸出到如 Slack 等聊天工具中。但需注意維護適當的運行效率，避免輸出過多的 Log。</li>
</ul>
</li>
</ul>
<p>基本上，若使用外部日誌管理系統，或在雲端環境進行開發，這些專用工具通常會輸出到適當的位置。以雲端環境為例，如  Azure Application Insights 或  Amazon CloudWatch Logs 等工具。</p>
<p>此外，需要注意的是，不應該將 Log 輸出到未指定數量的使用者可以訪問的位置，或將系統內重要的資訊輸出到 Log，這通常被視為禁忌。</p>
<h3 id="Log-格式"><a href="#Log-格式" class="headerlink" title="Log 格式"></a>Log 格式</h3><p>Log 格式將決定 Log 輸出的內容。 例如輸出以下表格中的項目：</p>
<table>
<thead>
<tr>
<th>項目</th>
<th>内容</th>
<th>備註</th>
</tr>
</thead>
<tbody><tr>
<td>時間</td>
<td>記錄 Log 的時間</td>
<td>年月日時分秒毫秒。最少必須以毫秒為單位輸出</td>
</tr>
<tr>
<td>事件 ID</td>
<td>事件的 ID</td>
<td>追蹤事件序列時所需的</td>
</tr>
<tr>
<td>Log 級別</td>
<td>Log 的級別</td>
<td>INFO、ERROR 等</td>
</tr>
<tr>
<td>請求目標</td>
<td>對哪裡提出的請求</td>
<td>URL 等</td>
</tr>
<tr>
<td>使用者資訊</td>
<td>請求的使用者資訊</td>
<td>使用者 ID 和 IP 位置等</td>
</tr>
<tr>
<td>執行對象</td>
<td>對什麼進行處理</td>
<td>已執行的來源 ID 等</td>
</tr>
<tr>
<td>執行內容</td>
<td>執行什麼樣的處理</td>
<td>DELETE、PUT、GET 等</td>
</tr>
<tr>
<td>執行結果</td>
<td>執行結果是什麼</td>
<td>成功、失敗、執行件數等</td>
</tr>
<tr>
<td>訊息</td>
<td>其他要輸出的內容</td>
<td>Log 級別若大於 Error 時會希望顯示的訊息</td>
</tr>
</tbody></table>
<p>Log 輸出基本上以 5W1H 為基礎，並且輸出必要的資訊，不應過多或不足。</p>
<p>建議注意以下內容：</p>
<p>When → 何時執行該程序</p>
<p>Who → 是誰執行該程序</p>
<p>Where → 在哪執行該程序</p>
<p>What → 執行該程序做什麼</p>
<p>Why → 為什麼執行該程序</p>
<p>例如，以下就是一個理想格式的範例：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">(</span>Log 級數<span class="token punctuation">)</span>　<span class="token punctuation">(</span>時間<span class="token punctuation">)</span>　<span class="token punctuation">(</span>IP 地址<span class="token punctuation">)</span>　<span class="token punctuation">(</span>執行對象<span class="token punctuation">)</span>　<span class="token punctuation">(</span>執行結果<span class="token punctuation">)</span>　<span class="token punctuation">(</span>訊息<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>此格式的輸出 Log 如下所示：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>Error<span class="token punctuation">]</span> Feb <span class="token number">21</span> <span class="token number">12</span>:32:23, <span class="token number">193.121</span>.123, https-8080, Failed, client denied by server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>輸出的困難點在於，並非所有可輸出的訊息都要進行輸出，在進入 Log 設計之前，必須先釐清使用用途，這部分將在後半章節進行介紹。</p>
<p>以上資訊作為參考，接下來讓我們更深入理解 Log 設計吧！</p>
<h2 id="Log-的設計方法介紹"><a href="#Log-的設計方法介紹" class="headerlink" title="Log 的設計方法介紹"></a>Log 的設計方法介紹</h2><p>這裡開始，將會對 Log 的設計方法進行說明。</p>
<p>在設計 Log 時，比起建立具突破性的出色設計，更重要的是不犯錯誤。對此，接下來將對確認事項、技巧和需注意的部分進行說明。</p>
<p>首先是針對設計時的確認事項和技巧進行說明！</p>
<h3 id="設計-Log-時的確認事項與技巧"><a href="#設計-Log-時的確認事項與技巧" class="headerlink" title="設計 Log 時的確認事項與技巧"></a>設計 Log 時的確認事項與技巧</h3><p>接下來，將會說明設計 Log 時必須確認的要點，以及有關設計的技巧。透過牢記這些內容，將能夠有效進行 Log 分析。反之，如果忽略這些要點，Log 將變得毫無用處。</p>
<p>先是針對確認內容進行說明。</p>
<h4 id="・Log-的使用目的是什麼？"><a href="#・Log-的使用目的是什麼？" class="headerlink" title="・Log 的使用目的是什麼？"></a>・Log 的使用目的是什麼？</h4><p>Log 可使用於多種用途，如本文開頭附上的「Log 的類型與使用目的」表所介紹。正因為用途非常多樣，因此有必要確立使用目的。不只是開發人員，包括維運人員、企劃和法務部門等相關利益者的意見，都必須納入考量。</p>
<p>舉例來說，Log 的使用目的可能有以下三種：</p>
<ul>
<li>瞭解來自外部未經授權的訪問</li>
<li>防止資訊洩露等的內部控制</li>
<li>監控系統的使用狀態</li>
</ul>
<p>請確認適用於哪一個項目。</p>
<h4 id="・Log-的讀者是誰？"><a href="#・Log-的讀者是誰？" class="headerlink" title="・Log 的讀者是誰？"></a>・Log 的讀者是誰？</h4><p>確定使用目的後，應該考慮 Log 的讀者是誰。這些讀者可能包括開發人員、運維人員、客戶公司的員工等各種對象。根據不同的讀者，可能需要不同的輸出方式和輸出內容，因此，結合使用目的來考慮將會更理想。</p>
<p>例如，根據使用目的預期目標讀者，可以得出以下結果：</p>
<table>
<thead>
<tr>
<th>使用目的</th>
<th>讀者</th>
</tr>
</thead>
<tbody><tr>
<td>瞭解來自外部未經授權的訪問</td>
<td>運維人員、客戶公司的員工、法務人員、系統負責人等</td>
</tr>
<tr>
<td>防止資訊洩露等的內部控制</td>
<td>開發人員、運維人員、客戶公司的員工、法務人員等</td>
</tr>
<tr>
<td>監控系統的使用狀態</td>
<td>開發人員、運維人員等</td>
</tr>
</tbody></table>
<p>掌握這些確認事項後，設計 Log 的準備工作也差不多完成。</p>
<p>接下來，將介紹設計 Log 時需考慮的要點。</p>
<h4 id="・考慮使用哪種格式"><a href="#・考慮使用哪種格式" class="headerlink" title="・考慮使用哪種格式"></a>・考慮使用哪種格式</h4><p>在實際設計 Log 時，需要確定 Log 的格式。Log 的格式代表 Log 中包含哪些資訊，這部分必須和 Log 的目標讀者討論並確定格式。</p>
<p>可參考以下格式：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">(</span>Log 級數<span class="token punctuation">)</span>　<span class="token punctuation">(</span>時間<span class="token punctuation">)</span>　<span class="token punctuation">(</span>IP 地址<span class="token punctuation">)</span>　<span class="token punctuation">(</span>執行對象<span class="token punctuation">)</span>　<span class="token punctuation">(</span>執行結果<span class="token punctuation">)</span>　<span class="token punctuation">(</span>訊息<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>使用這種格式輸出的 Log，將如下所示：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>Error<span class="token punctuation">]</span> Feb <span class="token number">21</span> <span class="token number">12</span>:32:23, <span class="token number">193.121</span>.123, https-8080, Failed, client denied by server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>在這裡，可以考慮添加 Log 讀者的需求。例如，如果目標對象是法務人員，那麼列出 IP 地址和執行對象資訊，可能不會有太大意義。</p>
<p>因此，將訊息部分移至 Log 的前半部等其他改進，或許會更有幫助。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">(</span>Log 級數<span class="token punctuation">)</span>　<span class="token punctuation">(</span>時間<span class="token punctuation">)</span>　<span class="token punctuation">(</span>訊息<span class="token punctuation">)</span>　<span class="token punctuation">(</span>IP 地址<span class="token punctuation">)</span>　<span class="token punctuation">(</span>執行對象<span class="token punctuation">)</span>　<span class="token punctuation">(</span>執行結果<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>Error<span class="token punctuation">]</span> Feb <span class="token number">21</span> <span class="token number">12</span>:32:23, client denied by server, <span class="token number">193.121</span>.123, https-8080, Failed<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h4 id="・思考包括什麼樣的訊息"><a href="#・思考包括什麼樣的訊息" class="headerlink" title="・思考包括什麼樣的訊息"></a>・思考包括什麼樣的訊息</h4><p>Log 格式中，包括一個名為訊息的項目。Log 扮演的角色，是以易於理解的方式傳達系統狀態。透過充分利用這些訊息，將能發揮其效用至最大限度。如果是在輸出錯誤 Log 的情況，則務必描述預期錯誤的原因。</p>
<p>此外，也必須考慮設計符合潛在讀者 IT 素養的訊息。假設使用目的是「瞭解來自外部未經授權的訪問」，那麼非技術人員可能也會閱讀這些訊息，因此應該以簡單的語言解釋問題和錯誤發生原因，即使沒有專業知識背景，也能夠理解內容。</p>
<h4 id="・斟酌選擇-Log-級別"><a href="#・斟酌選擇-Log-級別" class="headerlink" title="・斟酌選擇 Log 級別"></a>・斟酌選擇 Log 級別</h4><p>正如本文前半部分提供的「Log 級別和含義」表中所示，Log 具有級別的概念。透過定義級別，能夠在達到一定程度以上級別的訊息時通知負責人，同時避免收到不必要的通知造成干擾。</p>
<p>具體來說，除了「監控系統的使用狀態」以外的目的，並不需要使用到 DEBUG 級別的 Log。如果使用目的為「防止資訊洩漏等內部控制」，即使出現無法使用系統的 EMERG 的 Log，也無法有任何作為，因此沒有這麼必要。</p>
<p>請參考這些內容來設計 Log。</p>
<h3 id="操作-Log-時的注意事項"><a href="#操作-Log-時的注意事項" class="headerlink" title="操作 Log 時的注意事項"></a>操作 Log 時的注意事項</h3><p>接下來，將會介紹操作 Log 時的注意事項，主要是避免在搜索目標 Log 時出現問題。</p>
<h4 id="將-Log-檔案分割處理"><a href="#將-Log-檔案分割處理" class="headerlink" title="將 Log 檔案分割處理"></a>將 Log 檔案分割處理</h4><p>在調查 Log 時，可以透過減少目標 Log的數量來縮短調查時間。 為此，建議將 Log 檔進行分割處理，例如：按時間或網站為單位來分割 Log 檔，藉此提升工作效率。</p>
<p>如果使用的是 <span class="exturl" data-url="aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3poLXR3LyVFNiU5NyVBNSVFNSVCRiU5NyVFOCVCRCVBRSVFNiU5QiVCRg==">logrotate<i class="fa fa-external-link-alt"></i></span>，並希望分割 Log 檔案時，則應修改位於 <code>etc/logrotate.d</code> 的日誌輪替（Log Rotation）設定檔。</p>
<p>舉例來說，<code>sample-service</code> 使用的 Log 設定檔位於 <code>etc/logrotate.d/sample-service</code> ，內容如下所示：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">/var/log/sample-service/sample.log <span class="token punctuation">&#123;</span> <span class="token comment"># 目標 Log 檔案</span>
    ifempty            <span class="token comment"># 即使 Log 檔案為空也進行輪替</span>
    missingok          <span class="token comment"># 即使沒有 Log 檔案也不會發出錯誤</span>
    compress           <span class="token comment"># 進行壓縮</span>
    daily              <span class="token comment"># 毎日輪替</span>
    rotate <span class="token number">10</span>          <span class="token comment"># 保留最近 10 個分割後的 Log 檔案</span>
    create             <span class="token comment"># 更新後建立一個新的 Log 檔案</span>
    endscript
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><code>create</code> 這個指令，可用於分割 Log 檔案，因此請確認檔案中是否有此指令。</p>
<p>此外，如果希望新建立的 Log 檔能包含更新日期，請執行以下操作：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">/var/log/sample-service/sample.log <span class="token punctuation">&#123;</span> <span class="token comment"># 目標 Log 檔案</span>
    ifempty            <span class="token comment"># 即使 Log 檔案為空也進行輪替</span>
    missingok          <span class="token comment"># 即使沒有 Log 檔案也不會發出錯誤</span>
    compress           <span class="token comment"># 進行壓縮</span>
    daily              <span class="token comment"># 毎日輪替</span>
    rotate <span class="token number">10</span>          <span class="token comment"># 保留最近 10 個分割後的 Log 檔案</span>
    dateext            <span class="token comment"># 建立一個包含更新日期的檔案</span>
    endscript
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>透過添加 <code>dateext</code> 這個指令，檔名將會更改為 <code>原檔案名稱 + -YYYYMMDD</code></p>
<h4 id="採用結構化日誌記錄"><a href="#採用結構化日誌記錄" class="headerlink" title="採用結構化日誌記錄"></a>採用結構化日誌記錄</h4><p>如果情況允許，請務必採用結構化日誌記錄（Structured Logging）。 結構化日誌記錄是透過標準化 Log 輸出格式，並作為結構化資料合集而非單文本處理，常見格式為 Json。 結構化日誌記錄不只易於和其他工具連結，還具備高性能搜索等優點。</p>
<p>請參考以下範例：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>Error<span class="token punctuation">]</span> Feb <span class="token number">21</span> <span class="token number">12</span>:32:23, <span class="token number">193.121</span>.123, https-8080, Failed, client denied by server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>以上顯示的 Log 會是：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">jsonPayload: <span class="token punctuation">&#123;</span>
    <span class="token string">"level"</span><span class="token builtin class-name">:</span> <span class="token string">"[Error]"</span>,
    <span class="token string">"timestamp"</span><span class="token builtin class-name">:</span> <span class="token string">"Feb 21 12:32:23"</span>,
    <span class="token string">"host"</span><span class="token builtin class-name">:</span> <span class="token string">"193.121.123"</span>,
    <span class="token string">"port-number"</span><span class="token builtin class-name">:</span> <span class="token string">"https-8080"</span>,
    <span class="token string">"result"</span><span class="token builtin class-name">:</span> <span class="token string">"Failed"</span>,
    <span class="token string">"message"</span><span class="token builtin class-name">:</span> <span class="token string">"client denied by server"</span>,
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>可以像這樣進行結構化。</p>
<p>對人類來說可能有點難以閱讀，但從機器的角度來看，結構化日誌將更容易閱讀，因此建議導入使用。</p>
<h4 id="時間同步和時區設定"><a href="#時間同步和時區設定" class="headerlink" title="時間同步和時區設定"></a>時間同步和時區設定</h4><p>在調查 Log 時，可能想知道該 Log 的輸出時間。如果未完成伺服器和本地時間同步，或沒有設定相同時區，將無法好好處理時間。此外，若是更改設定，則需重新啟動伺服器以使其生效！</p>
<p>若要更改本地時間 <code>/etc/localtime</code> ，請在終端機輸入以下指令：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">// 東京時區
<span class="token function">cp</span> /usr/share/zoneinfo/Asia/Tokyo /etc/localtime

// 台北時區
<span class="token function">cp</span> /usr/share/zoneinfo/Asia/Taipei /etc/localtime<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>接著輸入 <code>date</code> 指令，確認是否顯示以下內容（是否為 JST）：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Wed Dec  <span class="token number">12</span> <span class="token number">13</span>:15:11 JST <span class="token number">2015</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>此外，可透過 <code>/etc/timezone</code> 檢查時區。 輸入 <code>$ cat /etc/timezone</code> 指令後，檢查輸出是否類似以下內容：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Asia/Tokyo

Asia/Taipei<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>如果輸出結果不同，請試著重寫內容。</p>
<h4 id="確認日誌輪替的基本設定"><a href="#確認日誌輪替的基本設定" class="headerlink" title="確認日誌輪替的基本設定"></a>確認日誌輪替的基本設定</h4><p>日誌輪替（Log rotation）是種按照一定容量或時間間隔，刪除較舊的 Log 或拆分檔案，以防止 Log 無限增長的功能。在執行日誌輪替時，應確認使用指令的預設配置。輪替不一定是在 0 點進行，有時可能也無法按日期拆分檔案。</p>
<p>如果要更改日誌輪替的時間，請按照以下步驟進行（以使用 logrotate 為例）。</p>
<p>首先，從正在運行 logrotate 的 <code>etc/cron.daily</code> 中，刪除 anacron 設定，請註解或刪除以下行列：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>hour<span class="token punctuation">]</span>     <span class="token punctuation">[</span>minutes<span class="token punctuation">]</span>     cron.daily     <span class="token function">nice</span> run-parts /etc/cron.daily<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>接下來，在 crontab 中註冊 <code>/etc/cron.daily</code> 寫上希望運行的時間。 具體來說，就是開啟 <code>etc/crontab</code> 檔案，並添加以下行列：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">23</span>     <span class="token number">59</span>     cron.daily     root run-parts /etc/cron.daily<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>如此一來，日誌輪換將會在 23:59 進行。</p>
<h4 id="使用-Dokcer-時需注意"><a href="#使用-Dokcer-時需注意" class="headerlink" title="使用 Dokcer 時需注意"></a>使用 <span class="exturl" data-url="aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3poLXR3L0RvY2tlcg==">Dokcer<i class="fa fa-external-link-alt"></i></span> 時需注意</h4><p>如果使用 Docker 的情況，可能會在 Docker 內部容器中的檔案輸出 Log。在這種情況下，若是重新建立 Docker 容器，將導致 Log 輸出檔案也一併被刪除，因此請務必更改輸出位置。</p>
<p>想要更改輸出位置，請在啟動 Docker 時執行以下指令：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">docker run --log-driver<span class="token operator">=</span><span class="token operator">&lt;</span>Driver Name<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>本文的後半部分，將會詳細介紹有關 Docker 的 Log 輸出。如果對 Driver（驅動程式）部分感到疑惑，也請繼續往下閱讀。</p>
<h4 id="使用-CDN-或反向代理時需注意"><a href="#使用-CDN-或反向代理時需注意" class="headerlink" title="使用 CDN 或反向代理時需注意"></a>使用 CDN 或反向代理時需注意</h4><p>如果使用 CDN 或反向代理，需注意其 IP 地址可能會被輸出為 Log。但由於 Client 端的 IP 地址已經正確記錄在別處的標頭欄位中，因此需要更改設定以記錄相關內容。</p>
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3dpa2kvTmdpbng=">Nginx<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3poLXR3L1Zhcm5pc2hfY2FjaGU=">Varnish<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3dpa2kvVHJhZmZpY19TZXJ2ZXI=">Apache Traffic Server<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3poLXR3L0hBUHJveHk=">HAProxy<i class="fa fa-external-link-alt"></i></span></li>
</ul>
<p>更改設定的方法，將根據反向代理而有所差異。 以上列舉幾項反向代理，建議根據自己使用的工具，查詢更改設定的相關方法。</p>
<p>但我希望您能找到如何使用您正在使用的內容更改設置。</p>
<h2 id="對實際的-Log-輸出進行說明"><a href="#對實際的-Log-輸出進行說明" class="headerlink" title="對實際的 Log 輸出進行說明"></a>對實際的 Log 輸出進行說明</h2><p>到目前為止，已介紹通用的 Log 設計相關基礎知識。在最後部分中，將藉由一系列的情境來說明 Log 輸出的不同階段。</p>
<p>在實際輸出 Log 時，總共有三個階段：</p>
<ul>
<li><strong>日誌輸出 Log Output</strong><ul>
<li>是以什麼格式，在何時輸出</li>
</ul>
</li>
<li><strong>日誌輪換 Log Rotation</strong><ul>
<li>如何處理不斷增長的日誌數量</li>
</ul>
</li>
<li><strong>日誌聚合 Log Aggregation</strong><ul>
<li>如何長時間保存日誌</li>
</ul>
</li>
</ul>
<p>在每個階段中，都需要注意不同事項。以下是針對各種情境的注意事項進行說明。</p>
<h3 id="基於-VM-的-Log-輸出"><a href="#基於-VM-的-Log-輸出" class="headerlink" title="基於 VM 的 Log 輸出"></a>基於 VM 的 Log 輸出</h3><p>首先，將對基於 VM（虛擬機器）的 Log 輸出流程進行說明。舉例來說，對於在 AWS 的 EC2 上運行的應用程式，在上述三個階段（誌輸出、日誌輪替、日誌集約）當中，應特別注意「日誌輸出」。</p>
<h4 id="日誌輸出"><a href="#日誌輸出" class="headerlink" title="日誌輸出"></a>日誌輸出</h4><p>通常最初想到的輸出方法，是由應用程式直接輸出到 Log 檔案的模式，這是許多框架的預設配置。</p>
<p>另一方面，被稱為應用程式開發的最佳實踐 <span class="exturl" data-url="aHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvVHdlbHZlLUZhY3Rvcl9BcHBfbWV0aG9kb2xvZ3k=">The Twelve-factor App（12 要素應用程式）<i class="fa fa-external-link-alt"></i></span>，則表示應用程式生成的 Log 不應該直接由 Log 檔案進行管理。<br>而作為替代方案，建議採取以下方法：</p>
<ul>
<li>以標準輸出的方式輸出日誌，並使用日誌管理系統將其輸出到檔案中</li>
</ul>
<p>透過這種方式，在測試或部署環境中，將無法透過應用程式查看或設定 Log，只能由執行環境進行全面管理。</p>
<h3 id="基於-Docker-的-Log-輸出"><a href="#基於-Docker-的-Log-輸出" class="headerlink" title="基於 Docker 的 Log 輸出"></a>基於 Docker 的 Log 輸出</h3><p>如「操作 Log 時的注意事項」段落所述，在 Docker 容器中，刪除容器時會將連同所有寫入的資料一起被棄用。換句話說，基於 Docker 的 Log 輸出之所以困難，在於日誌聚合。為了正確執行日誌聚合，可參考以下兩種方法：</p>
<ul>
<li>指定 volume 目標並永久保存</li>
<li>使用 log driver 傳輸</li>
</ul>
<p>以下將會逐一進行介紹。</p>
<h4 id="指定-volume-目標並永久保存"><a href="#指定-volume-目標並永久保存" class="headerlink" title="指定 volume 目標並永久保存"></a>指定 volume 目標並永久保存</h4><p>透過使用 volume，將能夠永久保存主機的資料。為了避免中斷引用，請使用 <code>--volumes-from &lt;container_name&gt;</code> 或 <code>--v &lt;host_path&gt;:&lt;container_path&gt;</code> 將其保存在資料容器中。</p>
<p>然而另一方面，若是因為<span class="exturl" data-url="aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3poLXR3LyVFNSVCQyVCOSVFNiU4MCVBNyVFNCVCQyVCOCVFNyVCQyVBOQ==">自動規模化<i class="fa fa-external-link-alt"></i></span>等功能，導致實例本身也被頻繁刪除的情況，則必須將 Log 轉移到其他位置保存。在這種情況下，則必須準備一個類似於 <span class="exturl" data-url="aHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvRmx1ZW50ZA==">fluentd<i class="fa fa-external-link-alt"></i></span> 容器，透過能夠將收集的資料暫存到緩衝區的機制，將 volume 掛載（mount）以進行傳送等處理。</p>
<h4 id="使用-Logging-Driver-傳輸"><a href="#使用-Logging-Driver-傳輸" class="headerlink" title="使用 Logging Driver 傳輸"></a>使用 Logging Driver 傳輸</h4><p>透過 Docker 提供的日誌記錄驅動機制（Logging Driver），能夠將 Log 傳輸到外部日誌記錄軟體，即使是在結構複雜的容器，也能夠實現日誌聚合。</p>
<p>在 Logging Driver 中，可以在容器啟動時指定輸出目標，將 Log 輸出到指定的日誌管理系統。通常使用「json-file」Driver，但從 Docker 1.12 版本開始，還提供以下幾種類型的 Driver 使用：</p>
<table>
<thead>
<tr>
<th>Driver</th>
<th>輸出目標</th>
</tr>
</thead>
<tbody><tr>
<td>json-file</td>
<td>以 Json 格式儲存在檔案</td>
</tr>
<tr>
<td>（Docker Default）</td>
<td></td>
</tr>
<tr>
<td>none</td>
<td>不記錄 Log</td>
</tr>
<tr>
<td>syslog</td>
<td>syslog</td>
</tr>
<tr>
<td>journald</td>
<td>journald</td>
</tr>
<tr>
<td>gelf</td>
<td>支援 gelf 的 Log 管理系統</td>
</tr>
<tr>
<td>fluentd</td>
<td>Log 管理工具「fluentd」</td>
</tr>
<tr>
<td>awslogs</td>
<td>AWS 提供的 Log 管理系統「Amazon CloudWatch Logs」</td>
</tr>
<tr>
<td>splunk</td>
<td>Log 管理系統「Splunk」</td>
</tr>
<tr>
<td>etwlogs</td>
<td>Windows 的 Event Tracing for Windows</td>
</tr>
<tr>
<td>gcplogs</td>
<td>GCP 提供的 Log 管理系統「Google Cloud Logging」</td>
</tr>
</tbody></table>
<p>若要實際指定 Driver，可在容器啟動時輸入 <code>docker run --log-driver=&lt;driver name&gt;</code>。如果只輸入 <code>docker run</code>，則會使用預設的「json-file」Driver。</p>
<h3 id="設計-Log-時不該做什麼"><a href="#設計-Log-時不該做什麼" class="headerlink" title="設計 Log 時不該做什麼"></a>設計 Log 時不該做什麼</h3><p>最後要介紹的，是設計 Log 時不應該執行的兩件事。</p>
<h4 id="不輸出機密資訊"><a href="#不輸出機密資訊" class="headerlink" title="不輸出機密資訊"></a>不輸出機密資訊</h4><p>導致資訊洩露的原因之一，就是 Log 輸出機密資訊。 對於應該只有開發人員和負責人才能知道 Log，是否就此感到安心了？ 事實上，透過未經授權的訪問，將有可能查看 Log。 因此為了以防萬一，請再三確保重要的機密資訊不會作為 Log 輸出。</p>
<p>請注意並確保重要的機密資訊不會作為日誌輸出，</p>
<p>如下所示：</p>
<ul>
<li>姓名</li>
<li>地址</li>
<li>電話號碼</li>
<li>電子郵件地址</li>
<li>密碼</li>
<li>Access Token</li>
<li>信用卡號碼</li>
</ul>
<p>等機密資訊。</p>
<h4 id="不輸出不必要的資訊"><a href="#不輸出不必要的資訊" class="headerlink" title="不輸出不必要的資訊"></a>不輸出不必要的資訊</h4><p>不輸出不必要的資訊，原因有以下三種：</p>
<ul>
<li>若增加 Log 的大小，將會增加服務使用費。</li>
<li>進行調查時可能造成妨礙</li>
<li>將導致系統性能下降</li>
</ul>
<h2 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h2><p>在本文中，介紹了如何設計 Log！ 如果正在進行開發，一定會使用到這些 Log，希望從明天開始就能夠實際應用開發中！</p>
<p>敝公司 Nuco 目前正在招募中，詳細可<span class="exturl" data-url="aHR0cHM6Ly93d3cucmVjcnVpdC5udWNvLmNvLmpwLz9xaWl0YV9pdGVtX2lkPTE5Yzc3NDg5OGM2OGFkZDYxODVl">參考這裡<i class="fa fa-external-link-alt"></i></span>。</p>
<blockquote>
<p>15th鐵人賽目錄傳送門：<span class="exturl" data-url="aHR0cHM6Ly9pdGhlbHAuaXRob21lLmNvbS50dy91c2Vycy8yMDEzNTU1OC9pcm9ubWFuLzYyOTA=">https://ithelp.ithome.com.tw/users/20135558/ironman/6290<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
]]></content>
      <categories>
        <category>2023鐵人賽</category>
        <category>Back-End</category>
      </categories>
      <tags>
        <tag>Back-End</tag>
        <tag>ironman2023</tag>
        <tag>Qiita</tag>
        <tag>Log</tag>
      </tags>
  </entry>
  <entry>
    <title>[2023 15th鐵人賽] Day29 - AWS Engineer Roadmap 2023</title>
    <url>/ironman-2023-day-29/</url>
    <content><![CDATA[<blockquote>
<p>原文連結：<span class="exturl" data-url="aHR0cHM6Ly9xaWl0YS5jb20vS3Vyb2thd2FLb3VoZWkvaXRlbXMvMzgzNjgwMmZjM2EwMjg2ZjY2OGY=">AWSエンジニアロードマップ2023<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
<p>終於來到了這篇，其實當初在決定要報名今年鐵人賽的時候，是想要從 AWS 主題著手，但一方面沒什麼自信能夠在三十天內寫出完整架構，一方面也還在摸索學習的步調。</p>
<p>本篇文章將會介紹 AWS 學習指標，部分圖解和影片以日文為主，但透過 Roadmap 還有每週主題，還是能夠參考並安排自己的學習進度，架構如下所示：</p>
<ul>
<li>第 1 週：AWS 基礎知識（AWS Basics）</li>
<li>第 2～3 週：網路與內容傳遞（Networking and Content Delivery）</li>
<li>第 4 週：運算服務（Compute Services）</li>
<li>第 5 週：安全、身份和合規性（Security, Identity, and Compliance）</li>
<li>第 6 週：資料庫（Database）</li>
<li>第 7 週：儲存（Storage）</li>
<li>第 8 週：管理和管控治理（Management and Governance）</li>
<li>第 9 週：容器、無伺服器運算、應用程式整合（Containers and Serverless Computing, Application Integration）</li>
<li>第 10 週：分析、遷移、其他（Analytics, Migrations）</li>
<li>第 11〜12 週：SAA 認證模擬測驗<ul>
<li>練習 SAA 的注意事項</li>
</ul>
</li>
</ul>
<p>實際學習主要還是建議搭配 <span class="exturl" data-url="aHR0cHM6Ly9kb2NzLmF3cy5hbWF6b24uY29tL3poX3R3Lz9uYzI9aF9xbF9kb2NfZG8=">AWS 官方文件<i class="fa fa-external-link-alt"></i></span>，或是其他線上課程等管道來進行。此外，也給自己訂下目標，希望今年結束前能夠達成，有機會的話，到時候再來整理一篇更詳細的準備心得。</p>
<span id="more"></span>

<p>那麼，以下正文開始。</p>
<hr>
<p><img src="https://i.imgur.com/gDb4iD0.png"></p>
<ul>
<li>將 AWS 的學習路線統整後，以「路線圖風格」呈現。</li>
<li>黃色的圓圈代表重要的項目。</li>
<li>「完全沒有 AWS 經驗」的人來說，通常需要約「3 個月」的學習時間才能「通過 SAA 取得證照資格」。</li>
</ul>
<p>（對於有經驗的人來說，可以在更短時間內通過考試。）</p>
<ul>
<li>通過 SAA 測驗後，建議學習其他證照內容的同時，需搭配實際操作來學習。</li>
</ul>
<p>即使是 ChatGPT，應該無法提供這樣的路線圖⛅️</p>
<h2 id="第-1-週：AWS-基礎知識（AWS-Basics）"><a href="#第-1-週：AWS-基礎知識（AWS-Basics）" class="headerlink" title="第 1 週：AWS 基礎知識（AWS Basics）"></a>第 1 週：<span class="exturl" data-url="aHR0cHM6Ly9hd3MuYW1hem9uLmNvbS90dy9nZXR0aW5nLXN0YXJ0ZWQv">AWS 基礎知識（AWS Basics）<i class="fa fa-external-link-alt"></i></span></h2><p>首先，以下整理一下有關「AWS」和「傳統的 IT 基礎架構」的基本知識。<br>為什麼 AWS 會受到如此多的關注？瞭解 AWS 擁有哪些優勢非常重要。</p>
<iframe width="734" height="413" src="https://www.youtube.com/embed/156B6cZ_2aQ" title="AWSが使われる理由、クラウドサービスのメリット、なぜ今AWSを学ぶべきなのか？【11:32】" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen></iframe>

<p>就地部署軟體（On-Premises）的缺點如下：</p>
<ul>
<li>需要大量的初期成本</li>
<li>需要預測容量（Capacity）</li>
<li>從購買到部署伺服器，通常需要約一個月的時間</li>
</ul>
<p>等項目。</p>
<p>另一方面，AWS 能夠根據實際使用量來支付費用，因此不需預測容量。</p>
<p>可以立即使用、從任何地方連接，且應用標準化的技術。</p>
<p>基於上述幾項特點，可預期 AWS 的優勢將遠高於就地部署軟體，並且在成本、彈性和可訪問性等方面能夠得到提升。</p>
<p><img src="https://hackmd.io/_uploads/Skq9SoSba.png"></p>
<iframe width="708" height="315" src="https://www.youtube.com/embed/nNWdBqdbn9w" title="AWSグローバルインフラストラクチャ【4:50】" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen></iframe>

<blockquote>
<p><span class="exturl" data-url="aHR0cHM6Ly93d3cueW91dHViZS5jb20vcGxheWxpc3Q/bGlzdD1QTDJuQ0UyaVItbHBtN1hGQUpSMG5nRDFya2hlSGdYXzBi">更多 AWS 相關基礎知識的影片可參考這裡<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
<h2 id="第-2～3-週：網路與內容傳遞（Networking-and-Content-Delivery）"><a href="#第-2～3-週：網路與內容傳遞（Networking-and-Content-Delivery）" class="headerlink" title="第 2～3 週：網路與內容傳遞（Networking and Content Delivery）"></a>第 2～3 週：<span class="exturl" data-url="aHR0cHM6Ly9hd3MuYW1hem9uLmNvbS90dy9wcm9kdWN0cy9uZXR3b3JraW5nLw==">網路與內容傳遞（Networking and Content Delivery）<i class="fa fa-external-link-alt"></i></span></h2><p><span class="exturl" data-url="aHR0cHM6Ly9kb2NzLmF3cy5hbWF6b24uY29tL3poX3R3L3ZwYy9sYXRlc3QvdXNlcmd1aWRlL3doYXQtaXMtYW1hem9uLXZwYy5odG1s">VPC<i class="fa fa-external-link-alt"></i></span> 是最重要的項目。應具備網路知識，如果對<span class="exturl" data-url="aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3poLXR3LyVFNSVBRCU5MCVFNyVCRCU5MQ==">子網路遮罩<i class="fa fa-external-link-alt"></i></span>或<span class="exturl" data-url="aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3poLXR3LyVFNiU5NyVBMCVFNyVCMSVCQiVFNSU4OCVBQiVFNSU5RiU5RiVFOSU5NyVCNCVFOCVCNyVBRiVFNyU5NCVCMQ==">無類別域間路由（CIDR）<i class="fa fa-external-link-alt"></i></span>計算不熟悉，則需要複習這部分內容。</p>
<iframe width="781" height="439" src="https://www.youtube.com/embed/2317shavNoo" title="【VPC講座1】リージョン / アベイラビリティゾーン / サブネット【9:02】" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen></iframe>

<p>對於 <span class="exturl" data-url="aHR0cHM6Ly9hd3MuYW1hem9uLmNvbS90dy9yb3V0ZTUzLw==">Route 53<i class="fa fa-external-link-alt"></i></span>，只要能瞭解必備知識 DNS，與名稱解析相關的概念，就不會太困難。<br>由於 <span class="exturl" data-url="aHR0cHM6Ly9hd3MuYW1hem9uLmNvbS90dy9jbG91ZGZyb250Lw==">CloudFront<i class="fa fa-external-link-alt"></i></span> 設定項目較多，如果在初期階段過於深入研究，可能會因此感到挫折。</p>
<p><img src="https://hackmd.io/_uploads/SyyLLsSZ6.png"></p>
<h2 id="第-4-週：運算服務（Compute-Services）"><a href="#第-4-週：運算服務（Compute-Services）" class="headerlink" title="第 4 週：運算服務（Compute Services）"></a>第 4 週：<span class="exturl" data-url="aHR0cHM6Ly9kb2NzLmF3cy5hbWF6b24uY29tL3poX3R3L3doaXRlcGFwZXJzL2xhdGVzdC9hd3Mtb3ZlcnZpZXcvY29tcHV0ZS1zZXJ2aWNlcy5odG1s">運算服務（Compute Services）<i class="fa fa-external-link-alt"></i></span></h2><p>瞭解如何購買 <span class="exturl" data-url="aHR0cHM6Ly9hd3MuYW1hem9uLmNvbS90dy9lYzIv">EC2<i class="fa fa-external-link-alt"></i></span>，對於考試和實務都非常重要，這部分也須充分理解。<br>如果只是建立伺服器，可透過圖形使用介面（GUI）在一分鐘內搞定，而進一步架構和維護，瞭解 Linux 的基本知識和命令更為重要。</p>
<p><img src="https://hackmd.io/_uploads/HyqIIiBZp.png"></p>
<p><span class="exturl" data-url="aHR0cHM6Ly9hd3MuYW1hem9uLmNvbS90dy9hdXRvc2NhbGluZy8=">Auto Scaling<i class="fa fa-external-link-alt"></i></span> 則需要瞭解各種擴展策略（Scaling Policies）的差異。</p>
<p><img src="https://hackmd.io/_uploads/HJ_KUiBZa.png"></p>
<p><span class="exturl" data-url="aHR0cHM6Ly9hd3MuYW1hem9uLmNvbS90dy9lbGFzdGljYmVhbnN0YWxrLw==">Elastic Beanstalk<i class="fa fa-external-link-alt"></i></span><br>只需掌握服務概述，並試著實際運行即可（以下是 <span class="exturl" data-url="aHR0cHM6Ly9kb2NzLmF3cy5hbWF6b24uY29tL3poX3R3L2VsYXN0aWNiZWFuc3RhbGsvbGF0ZXN0L2RnL2NvbmNlcHRzLXdlYnNlcnZlci5odG1s">Web 伺服器環境<i class="fa fa-external-link-alt"></i></span>，還有<span class="exturl" data-url="aHR0cHM6Ly9kb2NzLmF3cy5hbWF6b24uY29tL3poX3R3L2VsYXN0aWNiZWFuc3RhbGsvbGF0ZXN0L2RnL2NvbmNlcHRzLXdvcmtlci5odG1s">工作者環境<i class="fa fa-external-link-alt"></i></span>也需掌握）。</p>
<p><img src="https://hackmd.io/_uploads/BJ6_LoSb6.png"></p>
<h2 id="第-5-週：安全、身份和合規性（Security-Identity-and-Compliance）"><a href="#第-5-週：安全、身份和合規性（Security-Identity-and-Compliance）" class="headerlink" title="第 5 週：安全、身份和合規性（Security, Identity, and Compliance）"></a>第 5 週：<span class="exturl" data-url="aHR0cHM6Ly9hd3MuYW1hem9uLmNvbS90dy9hcmNoaXRlY3R1cmUvc2VjdXJpdHktaWRlbnRpdHktY29tcGxpYW5jZS8=">安全、身份和合規性（Security, Identity, and Compliance）<i class="fa fa-external-link-alt"></i></span></h2><p>AWS 除了以一般的密碼方式，還使用<span class="exturl" data-url="aHR0cHM6Ly9kb2NzLmF3cy5hbWF6b24uY29tL3poX3R3L3JlZHNoaWZ0L2xhdGVzdC9kZy90X1JvbGVzLmh0bWw=">基於角色型的存取控制（RBAC）<i class="fa fa-external-link-alt"></i></span>功能進行權限管理。透過瞭解<span class="exturl" data-url="aHR0cHM6Ly9kb2NzLmF3cy5hbWF6b24uY29tL3poX3R3L0lBTS9sYXRlc3QvVXNlckd1aWRlL2lkLmh0bWw=">角色的概念<i class="fa fa-external-link-alt"></i></span>以及如何<span class="exturl" data-url="aHR0cHM6Ly9kb2NzLmF3cy5hbWF6b24uY29tL3poX3R3L0lBTS9sYXRlc3QvVXNlckd1aWRlL2FjY2Vzc19wb2xpY2llc19jcmVhdGUuaHRtbA==">建立 IAM 政策<i class="fa fa-external-link-alt"></i></span>，將能夠從容地處理權限錯誤等問題。</p>
<p><img src="https://hackmd.io/_uploads/rkB9IoB-p.png"></p>
<p><span class="exturl" data-url="aHR0cHM6Ly9kb2NzLmF3cy5hbWF6b24uY29tL3poX3R3L2NvZ25pdG8vbGF0ZXN0L2RldmVsb3Blcmd1aWRlL3doYXQtaXMtYW1hem9uLWNvZ25pdG8uaHRtbA==">Cognito<i class="fa fa-external-link-alt"></i></span> 是一項受管服務，用於控制對 Web 和行動應用程式的存取，提供使用者註冊和登入的身份驗證功能。</p>
<p><img src="https://hackmd.io/_uploads/HyE3LoBbT.png"></p>
<h2 id="第-6-週：資料庫（Database）"><a href="#第-6-週：資料庫（Database）" class="headerlink" title="第 6 週：資料庫（Database）"></a>第 6 週：<span class="exturl" data-url="aHR0cHM6Ly9hd3MuYW1hem9uLmNvbS90dy9wcm9kdWN0cy9kYXRhYmFzZXMv">資料庫（Database）<i class="fa fa-external-link-alt"></i></span></h2><p>瞭解如何區別 <span class="exturl" data-url="aHR0cHM6Ly9hd3MuYW1hem9uLmNvbS90dy9yZHMv">Relational Database Service（RDS）<i class="fa fa-external-link-alt"></i></span> 的 <span class="exturl" data-url="aHR0cHM6Ly9hd3MuYW1hem9uLmNvbS90dy9yZHMvZmVhdHVyZXMvbXVsdGktYXov">Multi AZ 部署<i class="fa fa-external-link-alt"></i></span> 和<span class="exturl" data-url="aHR0cHM6Ly9hd3MuYW1hem9uLmNvbS90dy9yZHMvZmVhdHVyZXMvcmVhZC1yZXBsaWNhcy8=">讀取複本（Read Replica）<i class="fa fa-external-link-alt"></i></span>非常重要。</p>
<p><img src="https://hackmd.io/_uploads/SyNTUiB-T.png"></p>
<p>此外，也需瞭解 <span class="exturl" data-url="aHR0cHM6Ly9hd3MuYW1hem9uLmNvbS90dy9keW5hbW9kYi8=">NoSQL 的 DynamoDB<i class="fa fa-external-link-alt"></i></span> 和記憶體資料庫的 <span class="exturl" data-url="aHR0cHM6Ly9hd3MuYW1hem9uLmNvbS90dy9lbGFzdGljYWNoZS8=">ElastiCache<i class="fa fa-external-link-alt"></i></span> 等，以及與傳統的<span class="exturl" data-url="aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3poLXR3LyVFOSU5NyU5QyVFOCU4MSVBRiVFNSVCQyU4RiVFOCVCMyU4NyVFNiU5NiU5OSVFNSVCQSVBQiVFNyVBRSVBMSVFNyU5MCU4NiVFNyVCMyVCQiVFNyVCNSVCMQ==">關連式資料庫管理系統（RDBMS）<i class="fa fa-external-link-alt"></i></span>的不同之處。</p>
<p><img src="https://hackmd.io/_uploads/SydgRdvbp.png"></p>
<h2 id="第-7-週：儲存（Storage）"><a href="#第-7-週：儲存（Storage）" class="headerlink" title="第 7 週：儲存（Storage）"></a>第 7 週：<span class="exturl" data-url="aHR0cHM6Ly9hd3MuYW1hem9uLmNvbS90dy9wcm9kdWN0cy9zdG9yYWdlLw==">儲存（Storage）<i class="fa fa-external-link-alt"></i></span></h2><p>需要理解 <span class="exturl" data-url="aHR0cHM6Ly9hd3MuYW1hem9uLmNvbS90dy9zMy9zdG9yYWdlLWNsYXNzZXMv">Amazon Simple Storage Service（Amazon S3）儲存類別<i class="fa fa-external-link-alt"></i></span>，以及把握三種 <span class="exturl" data-url="aHR0cHM6Ly9hd3MuYW1hem9uLmNvbS90dy9zMy9zdG9yYWdlLWNsYXNzZXMvZ2xhY2llci8=">Glacier<i class="fa fa-external-link-alt"></i></span> 的特性。</p>
<p><img src="https://hackmd.io/_uploads/r1IQDiHba.png"></p>
<h2 id="第-8-週：管理和管控治理（Management-and-Governance）"><a href="#第-8-週：管理和管控治理（Management-and-Governance）" class="headerlink" title="第 8 週：管理和管控治理（Management and Governance）"></a>第 8 週：<span class="exturl" data-url="aHR0cHM6Ly9hd3MuYW1hem9uLmNvbS90dy9wcm9kdWN0cy9tYW5hZ2VtZW50LWFuZC1nb3Zlcm5hbmNlLw==">管理和管控治理（Management and Governance）<i class="fa fa-external-link-alt"></i></span></h2><p>在工作現場，通常需要設定 <span class="exturl" data-url="aHR0cHM6Ly9kb2NzLmF3cy5hbWF6b24uY29tL3poX3R3L3N5c3RlbXMtbWFuYWdlci9sYXRlc3QvdXNlcmd1aWRlL3Nlc3Npb24tbWFuYWdlci5odG1s">Session Manager<i class="fa fa-external-link-alt"></i></span>，因此需要能夠在不查看文件的情況下進行設定。</p>
<p>儘管初學者可以透過 <span class="exturl" data-url="aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3poLXR3L1RlcmFfVGVybQ==">Teraterm<i class="fa fa-external-link-alt"></i></span> 的 SSH 連接來理解如何運作，但目前這種連接方式已經有點過時。</p>
<p><img src="https://hackmd.io/_uploads/S1CMwoSWa.png"></p>
<h2 id="第-9-週：容器、無伺服器運算、應用程式整合（Containers-and-Serverless-Computing-Application-Integration）"><a href="#第-9-週：容器、無伺服器運算、應用程式整合（Containers-and-Serverless-Computing-Application-Integration）" class="headerlink" title="第 9 週：容器、無伺服器運算、應用程式整合（Containers and Serverless Computing, Application Integration）"></a>第 9 週：<span class="exturl" data-url="aHR0cHM6Ly9hd3MuYW1hem9uLmNvbS90dy9jb250YWluZXJzLw==">容器<i class="fa fa-external-link-alt"></i></span>、<span class="exturl" data-url="aHR0cHM6Ly9hd3MuYW1hem9uLmNvbS90dy9zZXJ2ZXJsZXNzLw==">無伺服器運算<i class="fa fa-external-link-alt"></i></span>、<span class="exturl" data-url="aHR0cHM6Ly9hd3MuYW1hem9uLmNvbS90dy9wcm9kdWN0cy9hcHBsaWNhdGlvbi1pbnRlZ3JhdGlvbi8=">應用程式整合<i class="fa fa-external-link-alt"></i></span>（Containers and Serverless Computing, Application Integration）</h2><p>理解 <span class="exturl" data-url="aHR0cHM6Ly9hd3MuYW1hem9uLmNvbS90dy9lY3Mv">Elastic Container Service（ESC）<i class="fa fa-external-link-alt"></i></span>的結構至關重要。特別是理解<span class="exturl" data-url="aHR0cHM6Ly9kb2NzLmF3cy5hbWF6b24uY29tL3poX3R3L0FtYXpvbkVDUy9sYXRlc3QvZGV2ZWxvcGVyZ3VpZGUvdGFza19kZWZpbml0aW9ucy5odG1s">任務定義（Task Definition）<i class="fa fa-external-link-alt"></i></span>的必備知識 <span class="exturl" data-url="aHR0cHM6Ly9kb2NzLmRvY2tlci5jb20vZW5naW5lL3JlZmVyZW5jZS9idWlsZGVyLw==">Dockerfile<i class="fa fa-external-link-alt"></i></span>。</p>
<p><img src="https://hackmd.io/_uploads/BJ2bwsrWa.png"></p>
<h2 id="第-10-週：分析、遷移、其他（Analytics-Migrations）"><a href="#第-10-週：分析、遷移、其他（Analytics-Migrations）" class="headerlink" title="第 10 週：分析、遷移、其他（Analytics, Migrations）"></a>第 10 週：分析、遷移、其他（Analytics, Migrations）</h2><p>需記住 <span class="exturl" data-url="aHR0cHM6Ly9hd3MuYW1hem9uLmNvbS90dy9raW5lc2lzL2RhdGEtc3RyZWFtcy8=">Kinesis Data Streams<i class="fa fa-external-link-alt"></i></span> 是即時的，<span class="exturl" data-url="aHR0cHM6Ly9hd3MuYW1hem9uLmNvbS90dy9raW5lc2lzL2RhdGEtZmlyZWhvc2Uv">Firehose<i class="fa fa-external-link-alt"></i></span> 則幾乎是即時的，熟記這點或許對考試得分有所幫助。</p>
<p><span class="exturl" data-url="aHR0cHM6Ly9hd3MuYW1hem9uLmNvbS90dy9raW5lc2lzL2RhdGEtc3RyZWFtcy8=">Kinesis Data Streams<i class="fa fa-external-link-alt"></i></span> 是即時的：</p>
<p><img src="https://hackmd.io/_uploads/HywNvsSWT.png"></p>
<p><span class="exturl" data-url="aHR0cHM6Ly9hd3MuYW1hem9uLmNvbS90dy9raW5lc2lzL2RhdGEtZmlyZWhvc2Uv">Kinesis Data Firehose<i class="fa fa-external-link-alt"></i></span> 是幾乎即時的：</p>
<p><img src="https://hackmd.io/_uploads/HJDrDoSZT.png"></p>
<h2 id="第-11〜12-週：SAA-認證模擬測驗"><a href="#第-11〜12-週：SAA-認證模擬測驗" class="headerlink" title="第 11〜12 週：SAA 認證模擬測驗"></a>第 11〜12 週：SAA 認證模擬測驗</h2><p>最後，建議參加「<span class="exturl" data-url="aHR0cHM6Ly9hd3MuYW1hem9uLmNvbS90dy9jZXJ0aWZpY2F0aW9uL2NlcnRpZmllZC1zb2x1dGlvbnMtYXJjaGl0ZWN0LWFzc29jaWF0ZS8=">SAA - 解決方案架構師<i class="fa fa-external-link-alt"></i></span>」認證考試，作為知識的客觀證明。</p>
<p>即使對完全沒有經驗的人來說，也能夠在三個月內取得認證資格。</p>
<p>然而，除了取得認證以外，透過實際操作來取得實作技能並加深理解，將能夠提高在該領域解決問題的能力以及適應力，成為更有價值的技術人員」。</p>
<p>測驗費用：16,500 日圓（含稅） = 150 USD<br>全年可以考試：可以線上或在最近的測試中心參加考試</p>
<h3 id="練習-SAA-的注意事項"><a href="#練習-SAA-的注意事項" class="headerlink" title="練習 SAA 的注意事項"></a>練習 SAA 的注意事項</h3><p>建議使用符合以下條件的練習問題集：</p>
<ul>
<li>問題的質量是否達到正式考試水平</li>
</ul>
<p><strong>解答大量質量低下的問題等同是在浪費時間</strong>，應該避免花時間在不太重要的問題上。相對於盲目地解答大量質量低下的問題，透過多次解答正式考試水平的問題 3～4 次（大約 200 到 260 道問題），將能更有效地提高技能。</p>
<ul>
<li>解答是否易於理解</li>
</ul>
<p>為了使初學者更容易理解，<strong>除了文字以外，還應提供相關的圖片解說</strong>。<br>這將有助於更深入理解概念，並提升學習效率。</p>
<ul>
<li>是否有能夠提問的環境</li>
</ul>
<p>如果在學習過程中，無法妥善解決疑問，可能會成為進入下一個主題的障礙，導致學習進度緩慢。透過有一個能夠提問的環境，將能迅速解決疑問，以順利推進學習不掉，還可以防止失去動力。</p>
<h2 id="最後"><a href="#最後" class="headerlink" title="最後"></a>最後</h2><p>感謝您看到最後！希望這個路線圖對於學習指標或公司培訓有所幫助。</p>
<p>如果對路線圖有任何想法，請在 Qiita 的評論中，或透過 <span class="exturl" data-url="aHR0cHM6Ly90d2l0dGVyLmNvbS9Bd3Nza2lsbEMvc3RhdHVzLzE2MzY4NzczMzAyNDQzMjEyODA/cz0yMA==">Twitter<i class="fa fa-external-link-alt"></i></span> 發送私訊給筆者，期待聽到建設性的回饋！</p>
<p>那麼！預祝擁有美好的 AWS Life！</p>
<blockquote>
<p>15th鐵人賽目錄傳送門：<span class="exturl" data-url="aHR0cHM6Ly9pdGhlbHAuaXRob21lLmNvbS50dy91c2Vycy8yMDEzNTU1OC9pcm9ubWFuLzYyOTA=">https://ithelp.ithome.com.tw/users/20135558/ironman/6290<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
]]></content>
      <categories>
        <category>2023鐵人賽</category>
        <category>雲端篇</category>
      </categories>
      <tags>
        <tag>ironman2023</tag>
        <tag>Qiita</tag>
        <tag>AWS</tag>
        <tag>Roadmap</tag>
      </tags>
  </entry>
  <entry>
    <title>[2023 15th鐵人賽] Day30 - 對技術不感興趣有什麼錯？</title>
    <url>/ironman-2023-day-30/</url>
    <content><![CDATA[<blockquote>
<p>原文連結：<span class="exturl" data-url="aHR0cHM6Ly9xaWl0YS5jb20vaW5kaWdvbmlnaHRpc20vaXRlbXMvYzFiZjc0N2JlZDE1ZTI4NDA5MzY=">技術に興味がなくて何が悪い？ - Qiita<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
<p>最後選擇這篇文章作為結尾，是自己也覺得挺有意思的主題。</p>
<p>作者從自身角度，說明為何不贊同「對技術不感興趣的人不適合成為工程師」這項論點；再進一步透過自身經歷，分享即使對技術不感興趣，該如何以工程師的身份面對工作。</p>
<p>畢竟自己對於技術本身，可能也稱不上是「充滿興趣」的那一側人種，但不可否認的是，學習也好，工作也罷，若能從中獲得成就感，仍舊是讓人樂此不疲的事情。</p>
<span id="more"></span>

<p>那麼，以下正文開始！</p>
<hr>
<h2 id="TL-DR"><a href="#TL-DR" class="headerlink" title="TL;DR"></a>TL;DR</h2><p>即使對技術不感興趣，也可以成為一名工程師。</p>
<blockquote>
<p>【註】<span class="exturl" data-url="aHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvVEw7RFI=">TL:DR<i class="fa fa-external-link-alt"></i></span> = Too Long; Didn’t Read.（長話短說、簡言之）</p>
</blockquote>
<h2 id="目標讀者"><a href="#目標讀者" class="headerlink" title="目標讀者"></a>目標讀者</h2><p>認為自己對技術不感興趣的人</p>
<h2 id="關於筆者"><a href="#關於筆者" class="headerlink" title="關於筆者"></a>關於筆者</h2><ul>
<li>Web 應用程式開發工程師，主要工作包括程式細部設計、畫面設計和編碼。</li>
<li>對技術不太感興趣。</li>
</ul>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在工程師的圈子，經常可以看到以下類似的主張：</p>
<ul>
<li>應該在假日學習。</li>
<li>應該經常關注最新的技術趨勢。</li>
<li>應該參加技術活動。</li>
<li>應該每天寫程式。</li>
<li>應該學習現代技術，而不是過時的技術。</li>
</ul>
<p>etc…</p>
<p>而當這些「應該論」變得更加強烈時，甚至會出現「<strong>對技術不感興趣的人不適合當工程師</strong>」這樣的言論，並且有不少人贊同這種觀點。</p>
<p>前陣子，我在某個社群（SNS）看到以下對話：</p>
<blockquote>
<p>新手工程師的提問<br><em>我應該在假日學習嗎？</em></p>
</blockquote>
<blockquote>
<p>現役工程師的回答<br><em>提出這種問題說明你不適合做工程師，還是辭職吧</em>。</p>
</blockquote>
<p>接下來撰寫的內容，即使是對技術不感興趣的新手工程師，也完全沒有問題。我自己也是如此，很高興從事工程師的工作。不論是因為「可以賺錢」、「想要遠端工作」或是「IT 領域感覺很熱門」，基於這些動機而成為一名工程師。但為了生存，仍必須學習必要的知識。</p>
<p>我認為，即使對技術不感興趣，也不代表不適合成為工程師。對技術是否感興趣，和是否適合工程師這個職業不一定相符。我自己對技術並不太感興趣，但我認為自己非常適合工程師這個職業。<br>因此，我決定撰寫這篇文章，重新整理關於 <strong>「工程師和對技術的興趣」</strong> 的想法，希望能夠給那些因為對技術缺乏興趣而感到壓力的工程師，或那些正在考慮成為工程師的人一點鼓勵。</p>
<h2 id="「對技術不感興趣的人不適合成為工程師」的根據"><a href="#「對技術不感興趣的人不適合成為工程師」的根據" class="headerlink" title="「對技術不感興趣的人不適合成為工程師」的根據"></a>「對技術不感興趣的人不適合成為工程師」的根據</h2><p>首先，「對技術不感興趣的人不適合成為工程師」這種主張，可能是從什麼樣的思維中產生的？我認為以下是根本原因：</p>
<p><strong>工程師需要持續學習技術，如果沒有興趣將難以做到。</strong></p>
<p>然而，我認為事情並非如此。</p>
<h3 id="是否需要持續學習技術"><a href="#是否需要持續學習技術" class="headerlink" title="是否需要持續學習技術"></a>是否需要持續學習技術</h3><p>這在某種程度上是真實的。因為技術的進化和變遷非常劇烈，而且變化的速度似乎每年都在加快。<br>雖然計算機科學的基礎技術不會經常改變，但實際在工作現場需要掌握的技術，例如程式語言或 AWS/GCP/Azure 等雲端服務，可以說變化非常快速。</p>
<p>然而，一旦掌握了現場所需的技術，不太可能會因為日後不再持續學習，而失去工程師的職位。</p>
<p>這可能是一個極端的例子，但即使是動態語言從這個世界上消失，Ruby 或 PHP 的工程師是否會突然失業呢？我認為不會，既然擁有現場等級的技術能力，適應靜態語言可能也不需要花太多時間。此外，現在的編輯器具備強大的補完功能，因此也未必所有使用靜態語言的工程師，都能夠對「型別安全」或「編譯器行為」等有正確概念，有些可能只是按照感覺來編寫程式。</p>
<p>這也就是為何在開頭提到「某種程度上是真實的」，一旦掌握了現場所需技術，就不太可能會因為日後不再持續學習而失去工作，從這層意義上來看，將會有所抵觸。</p>
<p>另外，近來在與工程技術的領域中，出現像 ChatGPT 和 GitHub Copilot 這樣的創新 AI 相關服務，並且有顯著發展；但我認為不是所有技術人員，都需要不斷追蹤這些最新資訊。即使是創新的技術或服務，在實際導入現場時也會漸進式地逐步發展。當然，追蹤最新技術趨勢並沒有壞處，但若沒有足夠的技術興趣或體力，那麼根據目前工作職場對於導入技術的氛圍，在必要時把握需要的訊息，也能夠足以生存下去。</p>
<p><strong>對於那些對技術不感興趣的人來說，沒有必要自己開闢道路，只需要感謝前人鋪好的道路，並堂堂正正地前進就好。</strong></p>
<h3 id="如果沒有興趣就不能持續學習嗎"><a href="#如果沒有興趣就不能持續學習嗎" class="headerlink" title="如果沒有興趣就不能持續學習嗎"></a>如果沒有興趣就不能持續學習嗎</h3><p>對於這一點，我認為明顯是錯誤的。</p>
<h3 id="即使沒有興趣也可以學習"><a href="#即使沒有興趣也可以學習" class="headerlink" title="即使沒有興趣也可以學習"></a>即使沒有興趣也可以學習</h3><p>很顯然地，即使沒有興趣也可以學習，興趣和行動應該分開思考。</p>
<p>就我自己而言，即使對某種技術沒有興趣，只要目前的工作有需要，或者對未來的職涯發展有必要，我會在休息日抽出時間學習，這並不是什麼特別的事情。</p>
<p>在成為工程師之前，我曾在金融機構工作。當我看到周圍的同事，不一定都對「金融」感興趣，甚至可以說，對金融感興趣的人還比較少。</p>
<p>然而，他們在下班後或休息日也會學習。這是因為，這些對<strong>當前工作或未來晉升是必要的</strong>。</p>
<p>工程師也是一樣的，只要對當前工作執行或能夠接近自己未來的理想，那麼無論是否感興趣，學習就會是必要的。</p>
<p><strong>相較於其他職業，我認為工程師更傾向將興趣和行動視為不可分割</strong>，但實際上，有許多行業即使沒有興趣也必須學習，甚至是在工作之外，學習的情況並不少見。在經歷高中或大學入學考試的人當中，有多少是因為對學術有興趣而學習的呢？</p>
<h2 id="題外話：工程師和懈怠"><a href="#題外話：工程師和懈怠" class="headerlink" title="題外話：工程師和懈怠"></a>題外話：工程師和懈怠</h2><p>這並不僅限於這部分，但這些只代表個人觀點，並且未經過科學根據的調查。由於主題涉及到個人性格，因此特別強調這只是我的猜測。</p>
<p>在社群上看到工程師的貼文時，經常能看到「懶惰」或「麻煩」的詞語。雖然只是主觀感受，但相較於非工程師的貼文，這些詞語似乎更常見。</p>
<p>容易懈怠的人，擁有對感興趣的事物非常專注這項優點，甚至到可能忘記時間的程度。然而，另一方面，對於不感興趣的事物，可能難以保持專注。如果是對技術感興趣的工程師，這可能不是問題，但如果沒有興趣，那可能就是悲劇了。</p>
<p>「對技術不感興趣的人不適合成為工程師」的觀點，也許被誤解為與這部分有關。可能因此產生「懈怠的人對不感興趣的事情難以保持專注」 + 「懈怠的人需要學習技術才能成為工程師」 =&gt; 「對技術不感興趣且<strong>懈怠的</strong>人不適合成為工程師」這樣的論點。</p>
<p><strong>20230814 註記</strong></p>
<p>在評論中，有讀者指出，在工程師的貼文中經常看到「懶惰」這個詞，這可能與 <span class="exturl" data-url="aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3poLXR3LyVFNiU4QiU4OSVFOSU4NyU4QyVDMiVCNyVFNiVCMiU4MyVFNSVCMCU5NA==">Larry Wall<i class="fa fa-external-link-alt"></i></span> 所提倡程式工程師的三大美德之一「懶惰」有關。確實，在這種語境和含義使用是很有可能的。</p>
<h2 id="首先是作為公司職員而不是工程師"><a href="#首先是作為公司職員而不是工程師" class="headerlink" title="首先是作為公司職員而不是工程師"></a>首先是作為公司職員而不是工程師</h2><p>這裡只討論在組織中工作的工程師。</p>
<p>在組織中工作，評價一位工程師價值的標準，<strong>將取決於如何為該組織創造利益</strong>，而技術能力只是其中的一種手段。</p>
<p>如果是這樣，即使對最新技術不感興趣或缺乏知識也沒關係，只要能把握該組織所採用的技術，並能用來解決組織的問題就足夠了。</p>
<p>即使只能使用過時的技術，對最新技術一無所知，只要能用自己的技術解決所屬組織的問題，那麼這個人就是一個出色的工程師，同時也是一位職員。</p>
<h2 id="成為職業的工程師"><a href="#成為職業的工程師" class="headerlink" title="成為職業的工程師"></a>成為<strong>職業的工程師</strong></h2><p>在組織中工作，用自己的能力為組織貢獻利益是理所當然的。如果身為一名工程師，那麼方法通常會是基於技術的工程。</p>
<p>若是如此，對技術是否感興趣並不重要。因為動機更簡單，只需「學習對組織利益有貢獻的事情」，這樣就足夠了。將興趣和行動分開，<strong>採取「因為需要而學習」的態度非常重要</strong>。</p>
<p>如果不能學習對工作必要的知識，那麼不論是否適合成為工程師，也很難成為能被組織認可的人才。</p>
<h2 id="面對未來的態度"><a href="#面對未來的態度" class="headerlink" title="面對未來的態度"></a>面對未來的態度</h2><p>如果已滿足於現在（目前工作職務）的需求，那麼只需要對未來做好準備，就不會有任何不安了。如果未來有想要成為的樣貌，那就朝著那個目標努力。然而，對於那些沒有未來目標，但仍想以工程師身份生活下去的人，以下將介紹一些我自己正在實踐的方法。</p>
<h3 id="取得證照"><a href="#取得證照" class="headerlink" title="取得證照"></a>取得證照</h3><p>我個人推薦的方法之一，是參加每年兩次由 <span class="exturl" data-url="aHR0cHM6Ly93d3cuaXBhLmdvLmpwL2luZGV4Lmh0bWw=">IPA（資訊處理推進機構）<i class="fa fa-external-link-alt"></i></span>舉辦的「<span class="exturl" data-url="aHR0cHM6Ly9qYS53aWtpcGVkaWEub3JnL3dpa2kvJUU2JTgzJTg1JUU1JUEwJUIxJUU1JTg3JUE2JUU3JTkwJTg2JUU2JThBJTgwJUU4JUExJTkzJUU4JTgwJTg1JUU4JUE5JUE2JUU5JUE4JTkz">情報処理技術者試験（資訊處理技術者試驗）<i class="fa fa-external-link-alt"></i></span>」。如此可以避免一年中完全沒有學習的時期，且由於一年舉辦兩次，也不需每天忙於準備考試。</p>
<p>之所以選擇 IPA，是因爲資格沒有有效期限。一旦取得資格，就可以永遠列在履歷表上。對於對技術不感興趣的人來說，可能不太願意花時間在只有 2、3 年有效期限的資格上。</p>
<p> ※ 關於「<span class="exturl" data-url="aHR0cHM6Ly9qYS53aWtpcGVkaWEub3JnL3dpa2kvJUU2JTgzJTg1JUU1JUEwJUIxJUU1JTg3JUE2JUU3JTkwJTg2JUU1JUFFJTg5JUU1JTg1JUE4JUU3JUEyJUJBJUU0JUJGJTlEJUU2JTk0JUFGJUU2JThGJUI0JUU1JUEzJUFC">情報処理安全確保支援士（資訊處理安全支援專家）<i class="fa fa-external-link-alt"></i></span>」，由於是採取註冊制度，因此說沒有有效期限可能不太準確，詳細資訊請參考 <span class="exturl" data-url="aHR0cHM6Ly93d3cuaXBhLmdvLmpwL2luZGV4Lmh0bWw=">IPA 官方網站<i class="fa fa-external-link-alt"></i></span>。</p>
<p>如果是身為 Web 工程師，基本資訊、應用資訊、資訊處理安全確保支援師、網路專家、資料專家、系統架構師等資格，都與實務相關，擁有這些資格也不會有損失。此外，根據自身的情況，參加專案經理的考試也是不錯的選擇。</p>
<p>在完成 IPA 必要的試驗後，可以參加 <span class="exturl" data-url="aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3poLXR3L0xpbnV4JUU1JTlDJThCJUU5JTlBJTlCJUU1JUIwJTg4JUU2JUE1JUFEJUU1JThEJTk0JUU2JTlDJTgz">LPI（Linux Professional Institute）<i class="fa fa-external-link-alt"></i></span>、<span class="exturl" data-url="aHR0cHM6Ly9hd3MuYW1hem9uLmNvbS90dy9jZXJ0aWZpY2F0aW9uLw==">AWS<i class="fa fa-external-link-alt"></i></span>、<span class="exturl" data-url="aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3poLXR3LyVFNyU5NCVCMiVFOSVBQSVBOCVFNiU5NiU4NyVFNSU4NSVBQyVFNSU4RiVCOCVFOCVBRSVBNCVFOCVBRiU4MSVFOSVBMSVCOSVFNyU5QiVBRQ==">Oracle<i class="fa fa-external-link-alt"></i></span> 等的認證測驗，只需在 Google 上搜索「工程師 證照 推薦」，選擇與自身工作相關認證，每年參加兩次測驗即可。</p>
<p>這裡需注意的是，不要考取太多證照。假設對技術不感興趣，那麼每天為了學習某個領域將會非常痛苦。將認證視為對未來的準備，能有一層安全網應對可能情況，因此在不超出能夠容忍的範圍內學習就足夠了。</p>
<p>此外，這裡並不打算討論工程師證照是否有其必要性的問題，但我認為擁有相關資格總是有益的。特別是對於像我這樣對技術不感興趣的人來說，不太可能採取將個人開發成果上傳到 GitHub 這類的行動，因此<strong>證照可能是唯一能夠客觀證明 IT 技能的方式</strong>。我的 GitHub 個人帳號已經荒廢許久，最近某汽車公司的除草劑成了熱門話題，我甚至懷疑是否也散布到了我的 GitHub 上。</p>
<p><img src="https://hackmd.io/_uploads/rkoBNIuZp.png"></p>
<p>順帶一提，有時在就業市場上，經常會聽到「實務經驗比證照更重要」的看法。由於有些人在面試中善於說真假話，除了依賴由個人主觀認定在過去工作中的貢獻度，證照資格也應該列入評估對象。無論這個人是否能執行與該資格相應的實務工作，至少存在「在某個時刻滿足取得該資格的要求」這項事實。而<strong>在工作中，能否按時交付成果也非常重要</strong>。</p>
<h3 id="閱讀技術書籍"><a href="#閱讀技術書籍" class="headerlink" title="閱讀技術書籍"></a>閱讀技術書籍</h3><p>只需閱讀就可以。我通常每天閱讀約 30 頁技術書籍。因為覺得麻煩，所以不會打開編輯器寫程式碼，只是閱讀而已。這樣就不會花太多時間，也不會感到負擔，僅僅閱讀就可以在某種程度上加深對技術的理解。</p>
<h3 id="「看」影片"><a href="#「看」影片" class="headerlink" title="「看」影片"></a>「看」影片</h3><p>在 YouTube 或 Udemy 等平台上，觀看影片內容，這裡重要的是「看」而不是「觀看」。即使試圖「認真觀看」來完全理解，但如果對內容不感興趣，也不太能持之以恆，最終可能會發現自己正在看其他內容。當然，也不需要打開編輯器。（即使打開也無妨）</p>
<p>為了能夠保持適度的專注，只需專心「看」就好。人類的大腦和五感是很神奇的，即使只存在過去腦海中模糊的記憶，「啊，是那時候的某項事物」也可能像這樣在未來產生連結。</p>
<h3 id="和工程師朋友出去吃飯"><a href="#和工程師朋友出去吃飯" class="headerlink" title="和工程師朋友出去吃飯"></a>和工程師朋友出去吃飯</h3><p>和工程師朋友一起吃飯時，總會有段時間談論技術相關的話題。在這個過程中，還可以瞭解最新的技術趨勢。</p>
<p>我有個非常熟悉區塊鏈技術的朋友。因為想知道他對區塊鏈的哪一方面感興趣，於是我閱讀了有關區塊鏈的書籍和觀看相關影片內容，查看了他的成果，甚至嘗試自己撰寫程式碼。結果，我對於區塊鏈技術有了一定程度的理解。</p>
<p>像這樣，<strong>即使對技術沒有興趣，只要對某個人感興趣，也許有機會透過這個人去瞭解某些技術。</strong></p>
<h3 id="關注-X-的技術用戶"><a href="#關注-X-的技術用戶" class="headerlink" title="關注 X 的技術用戶"></a>關注 X 的技術用戶</h3><p>我經常查看在 X 上所關注技術專家的貼文。這樣一來，我可以粗淺瞭解技術領域正在討論的話題。</p>
<p>在撰寫本文時，我觀察到有關「Ruby 的 return 語句」的小爭論。僅僅只是觀察一些關於這方面的貼文，也可以學習到「原來技術人員是用這種角度看待語言的」。</p>
<h2 id="嘗試去做不感興趣的事情"><a href="#嘗試去做不感興趣的事情" class="headerlink" title="嘗試去做不感興趣的事情"></a>嘗試去做不感興趣的事情</h2><p>取得證照、閱讀技術書籍、觀看影片等，做這些事情，可能會讓人懷疑自己其實對技術感興趣。因此，以下將依時間順序介紹今天的行動：</p>
<table>
<thead>
<tr>
<th>Time</th>
<th>Action</th>
</tr>
</thead>
<tbody><tr>
<td>15:00</td>
<td>起床</td>
</tr>
<tr>
<td>~16:00</td>
<td>早餐兼午餐</td>
</tr>
<tr>
<td>~21:00</td>
<td>YouTube, Netflix</td>
</tr>
<tr>
<td>~22:30</td>
<td>晚餐、散步</td>
</tr>
<tr>
<td>22:30</td>
<td>朋友要求我寫一篇文章</td>
</tr>
<tr>
<td>~24:00</td>
<td>YouTube, Netflix</td>
</tr>
<tr>
<td>24:00~</td>
<td>開始撰寫該文章</td>
</tr>
</tbody></table>
<p>如上所示，我通常將大部分的時間花在 YouTube 和 Netflix 上。說個題外話，但我目前非常熱衷於 TBS 電視台的「日曜劇場」節目正在播放的《VIVANT》劇集，經常花很多時間回顧主要劇情，或觀看關於這部劇的分析影片。</p>
<p>雖然有點偏題，但我想傳達的是，<strong>正因為沒有興趣，學習才具有其價值。</strong></p>
<p>即使可能存在細微差別，但那些在 X 上追蹤的人，無論是否有動力，都會強迫自己投入一定的時間完成某件事，期望由此產生（內在）動機，可以用 <strong>「念能力攻擊」</strong> 這個詞來形容。</p>
<p><strong>努力學習不感興趣的事物，往後也可能因此產生興趣。</strong></p>
<h2 id="相對於對技術感興趣的人，那些不感興趣的人能勝過嗎"><a href="#相對於對技術感興趣的人，那些不感興趣的人能勝過嗎" class="headerlink" title="相對於對技術感興趣的人，那些不感興趣的人能勝過嗎"></a>相對於對技術感興趣的人，那些不感興趣的人能勝過嗎</h2><p>很遺憾的，越是追求卓越，越難在技術能力和知識方面，勝過那些對技術有濃厚興趣的人。如果對技術感興趣的人每天花 3 小時學習，而對技術不感興趣的人來說，花 4 小時學習就有辦法勝過嗎？這並不是那麼簡單的問題。</p>
<p>對技術充滿興趣的人，除了在桌前學習，還會在日常生活的各種場合，思考與技術相關的事情，例如上廁所、吃飯或散步時，也許在這些時候花的時間更長。</p>
<p>因此很遺憾的，面對這樣的人，不抱持興趣的一方是無法與其競爭的。<strong>原因很單純，因為面對技術的學習時間、量和質都不同。</strong></p>
<p>但也不必感到過於悲觀，因為在我觀察的範圍內，這樣的人只佔極少數，只要能不懈怠地持續必要的學習，就能獲得在多數環境通用的技術能力。</p>
<p>此外，即使身為工程師，並不意味著單靠磨練技術就足以生存。能夠進行技術性討論的前提，是建立在能與客戶進行談判的能力、與工程師之間橫向協作的能力、領導其他工程師的能力、管理技術工程師團隊的能力等等，除了單純的技術能力以外，實際工作中所需的技能範圍非常廣泛。</p>
<h2 id="儘管如此我仍然認為自己適合成為工程師"><a href="#儘管如此我仍然認為自己適合成為工程師" class="headerlink" title="儘管如此我仍然認為自己適合成為工程師"></a>儘管如此我仍然認為自己適合成為工程師</h2><p>到目前為止，作為一名對技術不感興趣的工程師，我寫下自己對此的看法與實踐。儘管我依舊對技術不抱持興趣，但我仍然認為自己適合成為一名工程師。以下是我的原因。</p>
<h3 id="喜歡細節工作"><a href="#喜歡細節工作" class="headerlink" title="喜歡細節工作"></a>喜歡細節工作</h3><p>在工程領域中，包含許多細節工作。不用說，光是缺少冒號就可能導致無法運作，或空格變全形可能導致故障發生。然而，近來這些問題通常能被編輯器自動處理，這讓我有點嫉妒。<br>不僅是在寫程式的時候，在建立設計文件等情況，只不過是為了微調樣式，需要刪除字句、添加標點符號、修正錯字，或按上司喜好做細部調整，像這樣細緻而簡單的工作，我個人非常喜歡。</p>
<h3 id="能夠迅速看到成果"><a href="#能夠迅速看到成果" class="headerlink" title="能夠迅速看到成果"></a>能夠迅速看到成果</h3><p>只需添加一行程式碼，即可修復故障的功能，並且結果能夠立即顯示在螢幕上。例如，為了解決「這部分的數字沒有顯示」的問題，只需打開編輯器，稍微修改一下程式碼，然後刷新畫面，問題就解決了。</p>
<p>如果稍微拓寬視野，可以在許多場合迅速應用所學知識。這樣的例子多不勝數，如果被分配到的工作需要用到自己不熟悉的技術，透過自身研究和學習能夠成功完成這項工作，多數工程師可能或多或少都曾有過這些經歷。</p>
<p>如此一來，對於輸入和行動，能夠迅速看到結果，以及透過所學知識完成工作的實感，都使我樂在其中而不會感到厭倦。</p>
<h3 id="「喜愛」所具有的熱度"><a href="#「喜愛」所具有的熱度" class="headerlink" title="「喜愛」所具有的熱度"></a>「喜愛」所具有的熱度</h3><p>如同再三提到的，雖然我個人對技術沒有太大興趣，但周圍有許多人是因為熱愛技術，才選擇擔任工程師。與其他職業相比，真正對工作充滿興趣的人可能佔據相當大的比例。</p>
<p>在這樣的環境中，可能有機會體驗到珍貴的時刻。雖然無法完全用言語表達，但面對某人的「喜愛」所散發的熱度，能夠意識到周圍的人，甚至是自己都被這份熱情所牽引。</p>
<p><strong>「喜愛」這份情感所蘊含的熱情，感覺似乎遠遠超乎我們的想像。</strong></p>
<h3 id="著迷於網路的動力"><a href="#著迷於網路的動力" class="headerlink" title="著迷於網路的動力"></a>著迷於網路的動力</h3><p>無論是在網路上，還是私有網路空間，當別人向我建立的程式發送請求，並藉由回應滿足使用者的需求，可說是身為工程師所能夠體會到的<strong>最強大動力</strong>。</p>
<p>此外，自己完成的程式能透過網路向全球公開，並且被陌生人使用，<strong>這點讓我感到非常浪漫，甚至帶來一種興奮感</strong>。</p>
<h3 id="喜歡尋求自己的美感"><a href="#喜歡尋求自己的美感" class="headerlink" title="喜歡尋求自己的美感"></a>喜歡尋求自己的美感</h3><p>程式碼中存在著「美感」，即使是具有相同功能的程式碼，有的可能很髒亂，而有的可能具有令人嘆為觀止的美麗。</p>
<p>當然必須優先考慮的，是專案的程式碼規範，以及響應速度和內存效率等性能指標，但在滿足這些要求後，還存在一些空間，能夠寫出自己認為充滿美感的程式碼。這已不再被稱作是重構，而是<strong>類似補妝或盆景的至高領域</strong>了。</p>
<p><strong>如上所述，雖然我對工程技術本身並不感興趣，但透過工程領域獲得的經驗讓我樂此不疲，並且使我認為自己適合成為工程師。</strong></p>
<h2 id="最後"><a href="#最後" class="headerlink" title="最後"></a>最後</h2><p>基於以上這些理由，我認為並不一定要對技術感興趣，才能夠成為一名工程師。</p>
<p>即使對技術不感興趣，只要能夠發揮組織所需的能力，就不需擔心謀生的問題，有些人可能更關心透過工程領域所獲得的經驗。<br>此外，即使現在沒有興趣，也不代表將來會一直如此。</p>
<p>最後，我想分享這段話：</p>
<blockquote>
<p>頂への途を見つけたなら険しいのか？己に向いているのか？可能なのか？そんなものは関係ない　”ただ登る”少なくとも俺にアメリカンフットボールを教えたマルコという男はそうしてきた才能が足りぬのなら臆面もなく人の手にすがり己の手を汚し愛する者に侮辱され　それでもなお頂点を獲るために全ての男が本来持っている焼け付くような渇き　ただ頂点を獲るために！by アイシールド21 峨王力哉</p>
</blockquote>
<p>內容翻譯如下：</p>
<blockquote>
<p>既然看到了通往頂點的路；危險嗎？自己夠格嗎？可能嗎？這根本就無所謂了。只要「往上爬」，至少——那個教會我美式足球的男人，就是那麼做的啊！力量不夠那就用卑鄙的手段也要得到，即使弄髒自己的雙手；即使被喜歡的人輕視。就算是那樣，也要爬上頂點。所有人心裡本就該存在的那種熊熊燃燒的渴望，就只為了登上頂點！<br>——摘自<span class="exturl" data-url="aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3poLXR3LyVFNSU4NSU4OSVFOSU4MCU5RiVFOCU5MiU5OSVFOSU5RCVBMiVFNCVCRiVBMDIx">《光速蒙面俠21》<i class="fa fa-external-link-alt"></i></span>峨王力哉</p>
</blockquote>
<p>並不是說在這個時刻一定要追求巔峰。但如果有需要，不論自己是否適合，只要為了滿足這種需求，就應該「繼續往上爬」。</p>
<p>我相信這樣一來，絕對能夠以工程師的身份謀生。</p>
<hr>
<p>到這裡，結束鐵人賽最後一篇文章！（撒花）<del>雖然有點爆字數，差點以為要來不及-_-;;</del></p>
<p>看到這篇標題的時候不禁想著，不僅限於工程師這項職業，也許多數人對於工作本身的想法是：</p>
<blockquote>
<p>勞動就是狗屎。（労働はクソということです。）<br>by《咒術迴戰》七海健人</p>
</blockquote>
<p><img src="https://hackmd.io/_uploads/r1-rXPYWT.png"></p>
<p>咳咳、我想表達的是，或許大多數的人可能都曾懷疑過自己，懷疑是否有能力從事這份工作，但卻因為各種原因堅持下來。我想這沒有錯，畢竟能夠將興趣和工作完美結合的天選之人，在世上可能只佔極少數，但即使不感興趣，若能夠從中獲得成就感，也是很棒的事情呢。</p>
<p>最後，預計明天會再整理一篇結語，為今年鐵人賽初體驗做個結尾，以上！</p>
<blockquote>
<p>15th鐵人賽目錄傳送門：<span class="exturl" data-url="aHR0cHM6Ly9pdGhlbHAuaXRob21lLmNvbS50dy91c2Vycy8yMDEzNTU1OC9pcm9ubWFuLzYyOTA=">https://ithelp.ithome.com.tw/users/20135558/ironman/6290<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
]]></content>
      <categories>
        <category>2023鐵人賽</category>
        <category>職涯篇</category>
      </categories>
      <tags>
        <tag>ironman2023</tag>
        <tag>Qiita</tag>
        <tag>Learning</tag>
      </tags>
  </entry>
  <entry>
    <title>[2023 15th鐵人賽] Day31 - 結語 &amp; 關於翻譯的一點心得</title>
    <url>/ironman-2023-day-31/</url>
    <content><![CDATA[<p>在最後結語部分，稍微記錄這次在翻譯時的一點心得感想，內容可分為以下幾點：</p>
<ul>
<li>翻譯流程</li>
<li>文章管理</li>
<li>輔助翻譯工具</li>
<li>其他選擇</li>
<li>iThome 平台使用心得</li>
<li>結語</li>
</ul>
<span id="more"></span>

<h2 id="翻譯流程"><a href="#翻譯流程" class="headerlink" title="翻譯流程"></a>翻譯流程</h2><p>簡單記述這次在翻譯文章時的流程，步驟大致如下：</p>
<ul>
<li>在 <span class="exturl" data-url="aHR0cHM6Ly9xaWl0YS5jb20v">Qiita<i class="fa fa-external-link-alt"></i></span> 篩選感興趣的文章</li>
<li>使用 <span class="exturl" data-url="aHR0cHM6Ly93d3cubm90aW9uLnNvLw==">Notion<i class="fa fa-external-link-alt"></i></span> 管理日文初稿</li>
<li>搭配 <span class="exturl" data-url="aHR0cHM6Ly9jaGF0Lm9wZW5haS5jb20v">ChatGPT<i class="fa fa-external-link-alt"></i></span> 等工具進行翻譯</li>
<li>翻譯完成後，會再轉移到 <span class="exturl" data-url="aHR0cHM6Ly9oYWNrbWQuaW8v">HackMD<i class="fa fa-external-link-alt"></i></span> 管理，主要是確認 Markdown 語法是否有問題</li>
<li>貼到 iThome 編輯器，進行最後確認，沒問題就儲存成草稿</li>
<li>隔天起床發文送出</li>
</ul>
<p>關於文章篩選，除了是挑自己感興趣且討論度高的主題以外，也會盡量挑選文章字數在 3 千字上下，感覺翻譯起來比較不會有負擔，但凡事總是有例外，還是有幾篇字數突破到 5 千字以上，卻又無法輕易割捨⋯⋯</p>
<p>在正式開賽前，庫存約有十篇翻譯，到第十天左右進度也很有餘裕，因此天真地以為肯定能夠提早完成，舒舒服服迎接完賽。</p>
<p>隨著時間進行到中期，開始進入到偏技術性的文章，就不能單純仰賴翻譯工具進行翻譯，而是時常需要 Google 或查看 Wiki 等確保用字，以避免自創新詞的情況發生。甚至途中還發生點小插曲，雖然已經完成整篇翻譯，自己卻覺得主題有點太淺，結果乾脆當作練習，另外再找篇新的文章。</p>
<p>結果可想而知，到了後期，進度急速被壓縮，幾乎變成一兩天內就要完成一篇翻譯。也因此，真的還是需要提前把文章準備好，才不會整天被死線追著跑Orz</p>
<p>最後挑選主題，依照類別如下所示，這系列文章也已經整理到<a href="https://heidiliu2020.github.io/categories/">個人部落格</a>：</p>
<ul>
<li>非程式語言<ul>
<li>入門篇(9)</li>
<li>豆知識篇(6)</li>
<li>職涯篇(4)</li>
<li>工具篇(4)</li>
</ul>
</li>
<li>程式語言<ul>
<li>前端技術篇(4)</li>
<li>後端技術篇(2)</li>
<li>雲端篇(1)</li>
</ul>
</li>
</ul>
<p>其實選文結果跟自己原本預想差蠻多的，因為一開始的想法，是希望能夠程式與非程式各佔一半，程式語言的部分，理想是能夠介紹到四五種語言。</p>
<p>但現實是骨感的，想要能夠在一篇文章中清楚介紹一門程式語言，其實不是件容易的事。如果想要深入探討，這類型文章通常篇幅較長；如果篇幅較短，又可能會是比較粗淺的入門介紹。也因此，最後還是選擇非技術語言類別的文章居多。</p>
<h2 id="文章管理"><a href="#文章管理" class="headerlink" title="文章管理"></a>文章管理</h2><p>平時在做筆記的時候，也會像這樣搭配 Notion 與 HackMD 來管理文章。以前的我，其實是忠實的 HackMD 粉，但自從瞭解到 Notion 強大的資料管理功能，漸漸轉變成雙棲用戶。之所以仍無法捨棄 HackMD，是因為作為 Markdown 檔案編輯器，使用體驗還是很棒，但對於分類管理就不是強項，這點就靠 Notion 來進行互補。</p>
<p>總結兩者的優缺點如下：</p>
<ul>
<li>Notion<ul>
<li><p>強大的資料管理功能</p>
</li>
<li><p>可以直接內嵌圖片、影片和連結</p>
</li>
<li><p>不需花太多心思，就能讓畫面賞心悅目</p>
</li>
<li><p>因為功能眾多，一開始可能需要點時間熟悉使用方法</p>
</li>
<li><p>雖然支援 Markdown 語法，但匯出檔案有時符號會出現在奇怪位置</p>
<p><img src="https://hackmd.io/_uploads/ry9tq1sb6.png"></p>
</li>
</ul>
</li>
<li>HackMD<ul>
<li>支援 Markdown 語法</li>
<li>編輯器能使用雙欄位模式，編輯的同時馬上顯示預覽結果</li>
<li>能夠直接插入圖片並生成語法</li>
<li>能夠與 GitHub 同步筆記，進行文章備份</li>
<li>文章管理較弱，僅能夠以「標籤」進行文章分類</li>
</ul>
</li>
</ul>
<p><img src="https://hackmd.io/_uploads/HJpcc1jW6.png"></p>
<h2 id="輔助翻譯工具"><a href="#輔助翻譯工具" class="headerlink" title="輔助翻譯工具"></a>輔助翻譯工具</h2><p>現在的翻譯工具，已經比起過去充滿「機翻味」的 Google 翻譯成熟許多，尤其是在初次見識到 ChatGPT 的翻譯功能，更是令人嘆為觀止。</p>
<p>一如寫程式能夠直接問 ChatGPT，翻譯也能夠輕易達成。雖然遇到較複雜的情境，或是文法斷句較不規則的情況，還是很容易出現奇怪的結果，甚至翻譯出完全相反的語意。因此，想要完全取代人力可能還為之過早，但不可置否，若能夠妥善使用這些工具，將能夠大幅提升工作效率。或許機器能夠達到 80% 的要求，剩下更細微的部分，就需要由人力去進行優化。</p>
<p>除了 ChatGPT，主要還使用以下幾種翻譯工具：</p>
<h3 id="ChatGPT"><a href="#ChatGPT" class="headerlink" title="ChatGPT"></a>ChatGPT</h3><ul>
<li>網頁版：<span class="exturl" data-url="aHR0cHM6Ly9jaGF0Lm9wZW5haS5jb20v">https://chat.openai.com/<i class="fa fa-external-link-alt"></i></span></li>
<li>Chrome 擴充功能：**<span class="exturl" data-url="aHR0cHM6Ly9jaHJvbWUuZ29vZ2xlLmNvbS93ZWJzdG9yZS9kZXRhaWwvY2hhdGdwdC1mb3ItZ29vZ2xlL2pnamFlYWNka29uYW9hZmVubGZra2ttYmFvcGtiaWxm">ChatGPT for Google<i class="fa fa-external-link-alt"></i></span>**<ul>
<li>個人認為比 ChatGPT 官網好用，使用上穩定很多，不會經常出現錯誤導致對話卡住</li>
</ul>
</li>
<li>使用免費版 GPT-3.5</li>
</ul>
<h3 id="Bing-Chat"><a href="#Bing-Chat" class="headerlink" title="Bing Chat"></a>Bing Chat</h3><ul>
<li>網頁版：<span class="exturl" data-url="aHR0cHM6Ly93d3cuYmluZy5jb20vc2VhcmNoP3E9QmluZytBSSZhbXA7c2hvd2NvbnY9MSZhbXA7Rk9STT1ocGNvZHg=">https://www.bing.com/search?q=Bing+AI&amp;showconv=1&amp;FORM=hpcodx<i class="fa fa-external-link-alt"></i></span></li>
<li>支援 GPT-4，就翻譯而言沒有太大差別，但或許對寫程式仍有一定幫助</li>
<li>次數限制這點真的不太友善，如果不是遇到特別複雜的結構，可能不太會想用 Bing 來協助翻譯</li>
<li>詳細可參考這篇：<span class="exturl" data-url="aHR0cHM6Ly9pdGhlbHAuaXRob21lLmNvbS50dy9hcnRpY2xlcy8xMDMzNjg4Mg==">Day24 - 啊？你還在用 ChatGPT 嗎？ Bing 可以免費使用 GPT-4 喔！<i class="fa fa-external-link-alt"></i></span></li>
</ul>
<h3 id="DeepL-Translate"><a href="#DeepL-Translate" class="headerlink" title="DeepL Translate"></a>DeepL Translate</h3><ul>
<li>網頁版：<span class="exturl" data-url="aHR0cHM6Ly93d3cuZGVlcGwuY29tL3poL3RyYW5zbGF0b3IvbC9lbi96aA==">https://www.deepl.com/zh/translator/l/en/zh<i class="fa fa-external-link-alt"></i></span></li>
<li>Chrome 擴充功能：<span class="exturl" data-url="aHR0cHM6Ly9jaHJvbWUuZ29vZ2xlLmNvbS93ZWJzdG9yZS9kZXRhaWwvZGVlcGwtdHJhbnNsYXRlLXJlYWRpbmctdy9jb2ZkYnBvZWdlbXBqbG9vZ2JhZ2tuY2VraW5mbGNuag==">DeepL Translate: Reading &amp; writing translator<i class="fa fa-external-link-alt"></i></span></li>
<li>中文只有簡體，尚未支援繁體<ul>
<li>雖然可搭配「簡轉繁中」的工具，但多一步驟就是有點麻煩</li>
</ul>
</li>
</ul>
<h3 id="Mate-Translate"><a href="#Mate-Translate" class="headerlink" title="Mate Translate"></a>Mate Translate</h3><ul>
<li>Chrome 擴充功能：<span class="exturl" data-url="aHR0cHM6Ly9jaHJvbWUuZ29vZ2xlLmNvbS93ZWJzdG9yZS9kZXRhaWwvbWF0ZS10cmFuc2xhdGUtJUUyJTgwJTkzLXRyYW5zbGF0L2lobWdpY2xpYmJuZGZmZWplZGppbWZqbWZvYWJwY2tl">Mate Translate – translator, dictionary<i class="fa fa-external-link-alt"></i></span></li>
<li>在閱讀文章時，無意間發現這項工具，體驗上比只有簡體的 DeepL 優秀很多</li>
<li>用法同樣是選取翻譯區塊，旁邊會出現 icon 可點選進行翻譯，或是點選右上角的 icon 進行全頁翻譯</li>
</ul>
<p>使用畫面如下所示，選取區塊旁的兩個 icon 分別是 DeepL 和 Mate：</p>
<p><img src="https://hackmd.io/_uploads/Bk83qki-6.png"></p>
<p>然而，以上這些翻譯工具，即使輸入提示文字「請翻譯成繁體中文」或下一些「限制語句」，偶爾還是會冒出對岸用語或簡體中文。</p>
<p>舉出部分例子作為對照，如下表所示，這點在翻譯時需特別注意：</p>
<table>
<thead>
<tr>
<th>台灣用語</th>
<th>對岸用語</th>
</tr>
</thead>
<tbody><tr>
<td>程式</td>
<td>程序</td>
</tr>
<tr>
<td>程式碼</td>
<td>代碼</td>
</tr>
<tr>
<td>程式語言</td>
<td>編程語言</td>
</tr>
<tr>
<td>影片</td>
<td>視頻</td>
</tr>
<tr>
<td>資訊</td>
<td>信息</td>
</tr>
<tr>
<td>資料庫</td>
<td>數據庫</td>
</tr>
<tr>
<td>軟體</td>
<td>軟件</td>
</tr>
<tr>
<td>文章</td>
<td>帖子</td>
</tr>
<tr>
<td>網際網路</td>
<td>互聯網</td>
</tr>
</tbody></table>
<h2 id="其他選擇"><a href="#其他選擇" class="headerlink" title="其他選擇"></a>其他選擇</h2><p>除了文章編輯管理工具，以及輔助翻譯工具以外，也會搭配以下方式：</p>
<h3 id="goo-辭書"><a href="#goo-辭書" class="headerlink" title="goo 辭書"></a><span class="exturl" data-url="aHR0cHM6Ly9kaWN0aW9uYXJ5Lmdvby5uZS5qcC8=">goo 辭書<i class="fa fa-external-link-alt"></i></span></h3><ul>
<li>日語辭典</li>
<li>遇到一些即使 Google 還是不懂意思，或甚至找不到中文翻譯，直接翻日語詞典也是個辦法</li>
<li>遇到較口語或新潮的用語，還是要善用 Google 搜尋<ul>
<li>如何提升 Google 搜尋能力，可參考這篇：<span class="exturl" data-url="aHR0cHM6Ly9pdGhlbHAuaXRob21lLmNvbS50dy9hcnRpY2xlcy8xMDMyMTI0NQ==">Day3 - 工程師必備技能——Google 之力<i class="fa fa-external-link-alt"></i></span></li>
</ul>
</li>
</ul>
<h3 id="教育部重編國語辭典"><a href="#教育部重編國語辭典" class="headerlink" title="教育部重編國語辭典"></a><span class="exturl" data-url="aHR0cHM6Ly9kaWN0LnJldmlzZWQubW9lLmVkdS50dy9pbmRleC5qc3A=">教育部重編國語辭典<i class="fa fa-external-link-alt"></i></span></h3><ul>
<li>沒錯！就是中文辭典</li>
<li>避免口語化，確保不是使用台語或對岸用語<ul>
<li>例如：來去～、觀看視頻</li>
</ul>
</li>
<li>有時翻譯奧妙的點就在於，發現自己明明懂日文意思，卻不知道該如何用中文表達 <del>（或突然覺得自己不會中文）</del> 的時候，避免出現奇怪自創用詞</li>
</ul>
<h3 id="問問強者朋友"><a href="#問問強者朋友" class="headerlink" title="問問強者朋友"></a>問問強者朋友</h3><ul>
<li>不懂就問！問問精通日文的親朋好友，或是在 PTT、<span class="exturl" data-url="aHR0cHM6Ly90dy5oaW5hdGl2ZS5jb20v">HiNative<i class="fa fa-external-link-alt"></i></span> 等平台發問</li>
<li>此外，「翻譯時開著教育部辭典和日文辭典，只要有疑慮就查」這點，就是詢問有在接案翻譯的朋友得到的建議</li>
</ul>
<h2 id="iThome-平台使用心得"><a href="#iThome-平台使用心得" class="headerlink" title="iThome 平台使用心得"></a>iThome 平台使用心得</h2><p>接下來，雖然跟主題比較無關，但這次藉由鐵人賽的機會，第一次使用 iThome 平台發文，在過程中對文章編輯器有些感想：</p>
<ol>
<li>不能一次上傳多張圖片，只能一張一張分開傳<ul>
<li>解決方法：先上傳到 HackMD 或 Imgur 等圖片空間，調整語法後再貼過來</li>
</ul>
</li>
<li>不支援內嵌影片語法，只能用編輯器的內建功能插入影片</li>
<li>無法用 markdown 語法控制圖片大小，如以下範例：<ul>
<li><code>![](https://sample.png =300x450)</code></li>
<li><code>&lt;img src=&quot;https://sample.png&quot; width=“300”&gt;</code></li>
</ul>
</li>
<li>文章部分沒有內建目錄系統，也不支援 <code>[TOC]</code>（<span class="exturl" data-url="aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3dpa2kvJUU3JTlCJUFFJUU2JUFDJUExXyglRTYlOUIlQjglRTclQjElOEQp">Table Of Contents<i class="fa fa-external-link-alt"></i></span>） 這類能夠建立目錄的語法</li>
</ol>
<p>雖然在編輯器頁面中，就有顯示「不支援部分 HTML 內容」的標語，並舉出可使用的 Markdown 常用語法，但還是感覺使用上稍微不方便就是：</p>
<p><img src="https://hackmd.io/_uploads/BkYGjko-6.png"></p>
<h2 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h2><p>轉職成為前端工程師以來，終於輪到自己參賽，從閱讀者的角色轉變為創作者，感覺還是很不可思議。</p>
<p>先前也有在文章中提到，原本自己是想要以 AWS 為主題參賽的。起因是，一直在思考今年能不能有什麼突破，從年中就有計畫要考取 AWS 證照，卻遲遲沒辦法有可見的進度，甚至陷入一段小小低潮。</p>
<p>雖然是題外話，原本其實有過想去日本留學的夢想，甚至還在今年申請到別科資格，雖然後來因為職涯考量還是放棄了。仔細想了想，其實自己已經具備基礎的日文能力，畢竟打從一開始，就是以「興趣」驅動學習日文這件事，那麼何不以這為切入點，試試看能不能借此點燃學習程式的熱情呢？於是就開啟了這次鐵人賽的旅程。</p>
<p>最後，儘管說是創作，但翻譯本身仍舊是建立在他人的「成果」上，透過這次大量閱讀技術文章，除了瞭解與技術、軟硬實力與學習相關的知識內容，同時也瞭解文章架構，以及敘事方式。期許明年或是未來的自己，能夠真正「創作」文章進行技術分享。</p>
<p>感謝您的閱讀，如果發現文章內容有誤或有什麼建議，歡迎留言告訴我，我們有緣再相見！</p>
<blockquote>
<p>15th鐵人賽目錄傳送門：<span class="exturl" data-url="aHR0cHM6Ly9pdGhlbHAuaXRob21lLmNvbS50dy91c2Vycy8yMDEzNTU1OC9pcm9ubWFuLzYyOTA=">https://ithelp.ithome.com.tw/users/20135558/ironman/6290<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
]]></content>
      <categories>
        <category>2023鐵人賽</category>
        <category>入門篇</category>
      </categories>
      <tags>
        <tag>ironman2023</tag>
        <tag>Qiita</tag>
        <tag>Translation</tag>
      </tags>
  </entry>
  <entry>
    <title>Google 廣告｜如何使用 Google AdSense 設定廣告</title>
    <url>/google-adsense/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在上一篇文章  <a href="https://heidiliu2020.github.io/google-advertising-service/">Google 廣告｜比較 Google Ads、AdSense、AdMob 和 Ad Manager 的區別</a> 中，介紹幾種與 Google 廣告相關的服務。</p>
<p>接下來，將會介紹如何使用 Google AdSense，從申請帳號資格到實際設定廣告投放。</p>
<h2 id="如何使用-Google-AdSense"><a href="#如何使用-Google-AdSense" class="headerlink" title="如何使用 Google AdSense"></a>如何使用 Google AdSense</h2><p>以下是官方 AdSense 頻道的影片介紹：</p>
<iframe width="694" height="520" src="https://www.youtube.com/embed/YSqOvgfbPhI" title="Welcome to Google AdSense" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen></iframe>

<span id="more"></span>

<h3 id="申請資格"><a href="#申請資格" class="headerlink" title="申請資格"></a>申請資格</h3><p>若想參加 AdSense 計畫，需要註冊 AdSense 帳戶，在這之前，必須確認是否符合 <span class="exturl" data-url="aHR0cHM6Ly9zdXBwb3J0Lmdvb2dsZS5jb20vYWRzZW5zZS9hbnN3ZXIvOTcyND9obD16aC1IYW50JnJlZl90b3BpYz0xMzE5NzU2JnNqaWQ9MjYyNzk1MjA4NTc4NTczMTQ1OC1BUA==">AdSense 資格規定<i class="fa fa-external-link-alt"></i></span>：</p>
<ul>
<li>網站提供獨創內容</li>
<li>內容需符合<span class="exturl" data-url="aHR0cHM6Ly9zdXBwb3J0Lmdvb2dsZS5jb20vYWRzZW5zZS9hbnN3ZXIvNDgxODI=">計畫政策<i class="fa fa-external-link-alt"></i></span>規定</li>
<li>需為年滿 18 歲成年人，若未滿 18 歲則可由父母或監護人代為註冊</li>
</ul>
<h3 id="申請流程"><a href="#申請流程" class="headerlink" title="申請流程"></a>申請流程</h3><ul>
<li>Step1. 進入 <span class="exturl" data-url="aHR0cHM6Ly93d3cuZ29vZ2xlLmNvbS50dy9hZHNlbnNlL3N0YXJ0Lw==">Google AdSense<i class="fa fa-external-link-alt"></i></span> 官網，點擊開始使用</li>
</ul>
<p><img src="https://hackmd.io/_uploads/S15Wc6Jfa.png"></p>
<ul>
<li>Step2. 填寫網站、收款國家等資訊<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9zdXBwb3J0Lmdvb2dsZS5jb20vYWRzZW5zZS9hbnN3ZXIvMTIxNzA0MjE/aGw9emgtSGFudCZzamlkPTEzNTA5Njk4NjQ0NzU0ODc5MzkzLUFQ">AdSense 的網站管理異動 2023/2/20<i class="fa fa-external-link-alt"></i></span>：需注意輸入的網站網址，限制「必須是不含路徑、參數、片段或通訊埠號碼的標準網域」，因此不支援路徑（path）或子網域（subdomain），詳細可<span class="exturl" data-url="aHR0cHM6Ly9zdXBwb3J0Lmdvb2dsZS5jb20vYWRzZW5zZS9hbnN3ZXIvMjc4NDQzOD9obD16aC1IYW50JnNqaWQ9MTM1MDk2OTg2NDQ3NTQ4NzkzOTMtQVAjemlwcHk9JTJDJUU3JTg0JUExJUU2JTk1JTg4JUU3JUI2JUIyJUU1JTlEJTgwJUU3JUE0JUJBJUU0JUJFJThCJTJDJUU2JTlDJTg5JUU2JTk1JTg4JUU3JUI2JUIyJUU1JTlEJTgwJUU3JUE0JUJBJUU0JUJFJThC">參考官方文件<i class="fa fa-external-link-alt"></i></span><ul>
<li>有效範例：<code>example.com</code>、<code>example.blogspot.com</code></li>
<li>無效範例：<code>example.com/page.html</code>、<code>example.com/directory</code>、<code>subdomain.example.com</code></li>
</ul>
</li>
</ul>
</li>
</ul>
<p><img src="https://hackmd.io/_uploads/rJ_X5akG6.png"></p>
<ul>
<li>Step3. 點選最左側的「填寫付款資訊」</li>
</ul>
<p><img src="https://hackmd.io/_uploads/H1tLH6eza.png"></p>
<ul>
<li>Step4. 接著點選最右側的「將網站連結到 Adsense」會出現以下頁面，可選擇驗證方法並更新至自己的網站上，方法共有三種：<ul>
<li>(1) 在網頁的 HTML <code>&lt;head&gt;&lt;/head&gt;</code> 區塊內嵌 AdSense 程式碼片段</li>
<li>(2) 新增 Ads.txt 檔案並貼上相關程式碼片段</li>
<li>(3) 在網頁的 HTML <code>&lt;head&gt;&lt;/head&gt;</code> 區塊之間插入 <code>&lt;meta&gt;</code> 中繼標記</li>
</ul>
</li>
</ul>
<p><img src="https://hackmd.io/_uploads/B1cwHagMp.png"></p>
<ul>
<li>Step5. 完成後打勾並點選驗證，約需經過 2 至 4 週的時間審查</li>
</ul>
<h2 id="廣告類型與設定"><a href="#廣告類型與設定" class="headerlink" title="廣告類型與設定"></a>廣告類型與設定</h2><p>在啟用 AdSense 帳戶後，即可在網站上設定廣告，廣告類型可分為「<span class="exturl" data-url="aHR0cHM6Ly9zdXBwb3J0Lmdvb2dsZS5jb20vYWRzZW5zZS9hbnN3ZXIvNzAzNzYyND9obD16aC1IYW50JnJlZl90b3BpYz0xMjUwMTAyJnNqaWQ9MjYyNzk1MjA4NTc4NTczMTQ1OC1BUCNhdXRvX2Fkcw==">自動廣告<i class="fa fa-external-link-alt"></i></span>」和「<span class="exturl" data-url="aHR0cHM6Ly9zdXBwb3J0Lmdvb2dsZS5jb20vYWRzZW5zZS9hbnN3ZXIvNzAzNzYyND9obD16aC1IYW50JnJlZl90b3BpYz0xMjUwMTAyJnNqaWQ9MjYyNzk1MjA4NTc4NTczMTQ1OC1BUCNhZF91bml0cw==">廣告單元<i class="fa fa-external-link-alt"></i></span>」兩種方式。</p>
<h3 id="自動廣告-Auto-ads"><a href="#自動廣告-Auto-ads" class="headerlink" title="自動廣告 Auto ads"></a>自動廣告 Auto ads</h3><p>在網站導入自動廣告（Auto ads）時，只需將程式碼放到想要顯示廣告的頁面中，系統就會自動掃描網站，並根據版面配置與內容，找出位置自動刊登廣告。</p>
<p><img src="https://hackmd.io/_uploads/rkmKS6eMa.png"></p>
<p>點擊上圖頁面中的「取得程式碼」，並將程式碼放到網頁的 <strong><code>&lt;head&gt;&lt;/head&gt;</code></strong> 標籤中即可。</p>
<p><img src="https://hackmd.io/_uploads/Skd5STgMT.png"></p>
<p>程式碼示意如下：</p>
<pre class="line-numbers language-htmlmixed" data-language="htmlmixed"><code class="language-htmlmixed">&lt;html&gt;
	&lt;head&gt;
		&#x2F;&#x2F; ...
		&lt;script async src&#x3D;&quot;https:&#x2F;&#x2F;pagead2.googlesyndication.com&#x2F;pagead&#x2F;js&#x2F;adsbygoogle.js?client&#x3D;ca-pub-XXXXXXXXXXXXX&quot;
	     crossorigin&#x3D;&quot;anonymous&quot;&gt;&lt;&#x2F;script&gt;
	&lt;&#x2F;head&gt;

	&lt;body&gt;
		&#x2F;&#x2F; ...	
	&lt;&#x2F;body&gt;
&lt;&#x2F;html&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>點選右下角的「鉛筆符號」進入自動廣告的設定頁面，在這裡可以預覽選擇的廣告格式，以及希望排除的區域或頁面等：</p>
<p><img src="https://hackmd.io/_uploads/rkagLTxG6.png"></p>
<h3 id="廣告單元-Ads-units"><a href="#廣告單元-Ads-units" class="headerlink" title="廣告單元 Ads units"></a>廣告單元 Ads units</h3><p>另一種<span class="exturl" data-url="aHR0cHM6Ly9zdXBwb3J0Lmdvb2dsZS5jb20vYWRzZW5zZS9hbnN3ZXIvOTE4MzU0OT9obD16aC1IYW50JnNqaWQ9OTU0NTM5Mjk1NTMwMjU1MjU5MS1BUCZ2aXNpdF9pZD02MzgzMDU5NzYzNDEzMzczMDAtMzM5NDg5NzkxMCZyZWZfdG9waWM9OTE4MzI0MiZyZD0x">廣告單元<i class="fa fa-external-link-alt"></i></span>（Ad units），是指透過 AdSense 廣告程式碼，根據設定的類別與樣式，顯示一至多個 Google 廣告。</p>
<p>可在 AdSense 帳戶的「按廣告單元」頁面建立、自訂及管理廣告單元；不同於自動廣告，根據廣告單元的程式碼，能夠控制廣告的顯示位置，而原生廣告單元則在自訂方面更提供更大的彈性。</p>
<p><img src="https://hackmd.io/_uploads/BJRWLpezT.png"></p>
<p>廣告單元類型分成以下幾種，可根據不同需求選用：</p>
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9zdXBwb3J0Lmdvb2dsZS5jb20vYWRzZW5zZS90b3BpYy85MTgzMzYw">多媒體廣告<i class="fa fa-external-link-alt"></i></span><ul>
<li>適用於任何情境</li>
<li>預設為回應式廣告，因此會隨網頁版面和使用者裝置自動調整大小</li>
<li>可自訂為只顯示大小固定的廣告</li>
<li>與 <span class="exturl" data-url="aHR0cHM6Ly9zdXBwb3J0Lmdvb2dsZS5jb20vYWRzZW5zZS9hbnN3ZXIvOTE4NzIzOQ==">AMP 網頁<i class="fa fa-external-link-alt"></i></span>相容</li>
</ul>
</li>
<li><span class="exturl" data-url="aHR0cHM6Ly9zdXBwb3J0Lmdvb2dsZS5jb20vYWRzZW5zZS90b3BpYy85MTgzNTgy">動態內廣告<i class="fa fa-external-link-alt"></i></span><ul>
<li>在動態饋給 (例如文章或產品的清單) 中放送與內容自然呼應的原生廣告，提供良好使用者體驗</li>
</ul>
</li>
<li><span class="exturl" data-url="aHR0cHM6Ly9zdXBwb3J0Lmdvb2dsZS5jb20vYWRzZW5zZS90b3BpYy85MTgzNTk0">文章內廣告<i class="fa fa-external-link-alt"></i></span><ul>
<li>讓廣告自然融入網頁段落的原生廣告，可有效提升閱讀體驗</li>
</ul>
</li>
<li><span class="exturl" data-url="aHR0cHM6Ly9zdXBwb3J0Lmdvb2dsZS5jb20vYWRzZW5zZS90b3BpYy85MTg1MDUz">Multiplex 廣告<i class="fa fa-external-link-alt"></i></span><ul>
<li>用來顯示內容建議式原生廣告的格狀廣告單元</li>
</ul>
</li>
<li><span class="exturl" data-url="aHR0cHM6Ly9zdXBwb3J0Lmdvb2dsZS5jb20vYWRzZW5zZS90b3BpYy8xMDAzMzE5Ng==">搜尋引擎<i class="fa fa-external-link-alt"></i></span><ul>
<li>由 Google 技術提供的搜尋引擎，可在搜尋結果中顯示廣告</li>
</ul>
</li>
</ul>
<p>點選想要建立的廣告單元會進入設定頁面，需輸入名稱以及選擇廣告大小：</p>
<p><img src="https://hackmd.io/_uploads/H1lQUaxGp.png"></p>
<p>建立完成廣告單元後，將廣告單元程式碼放到網頁的 <strong><code>&lt;body&gt;&lt;/body&gt;</code></strong> 標籤中，希望顯示廣告的區塊即可：</p>
<p><img src="https://hackmd.io/_uploads/HyTXLTlMT.png"></p>
<p>根據<span class="exturl" data-url="aHR0cHM6Ly9zdXBwb3J0Lmdvb2dsZS5jb20vYWRzZW5zZS9hbnN3ZXIvOTE5MDAyOD9obD16aC1IYW50">在 HTML 中安插廣告程式碼的位置（廣告單元）<i class="fa fa-external-link-alt"></i></span>，可透過程式碼來調整廣告單元顯示的位置與樣式：</p>
<pre class="line-numbers language-htmlmixed" data-language="htmlmixed"><code class="language-htmlmixed">&lt;body&gt;
	&lt;!-- Ad units container --&gt;
	&lt;div align&#x3D;&quot;center&quot;&gt;

		&lt;script async src&#x3D;&quot;https:&#x2F;&#x2F;pagead2.googlesyndication.com&#x2F;pagead&#x2F;js&#x2F;adsbygoogle.js?client&#x3D;ca-pub-XXXXXXXXXXXXX&quot;
		     crossorigin&#x3D;&quot;anonymous&quot;&gt;&lt;&#x2F;script&gt;
		&lt;!-- Responsive_ads --&gt;
		&lt;ins class&#x3D;&quot;adsbygoogle&quot;
		     style&#x3D;&quot;display:block&quot;
		     data-ad-client&#x3D;&quot;ca-pub-4274798044223706&quot;
		     data-ad-slot&#x3D;&quot;3472959732&quot;
		     data-ad-format&#x3D;&quot;auto&quot;
		     data-full-width-responsive&#x3D;&quot;true&quot;&gt;&lt;&#x2F;ins&gt;
		&lt;script&gt;
		     (adsbygoogle &#x3D; window.adsbygoogle || []).push(&#123;&#125;);
		&lt;&#x2F;script&gt;

	&lt;&#x2F;div&gt;
  
  &#x2F;&#x2F; ...

&lt;&#x2F;body&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="在本地端測試-AdSense"><a href="#在本地端測試-AdSense" class="headerlink" title="在本地端測試 AdSense"></a>在本地端測試 AdSense</h3><p>此外，若想要在本地端（Localhost）測試廣告，可加上 <code>data-ad-test=&quot;on&quot;</code> 屬性：</p>
<pre class="line-numbers language-htmlmixed" data-language="htmlmixed"><code class="language-htmlmixed">&lt;script async src&#x3D;&quot;https:&#x2F;&#x2F;pagead2.googlesyndication.com&#x2F;pagead&#x2F;js&#x2F;adsbygoogle.js?client&#x3D;ca-pub-XXXXXXXXXXXXX&quot;
     crossorigin&#x3D;&quot;anonymous&quot;&gt;&lt;&#x2F;script&gt;
&lt;!-- ad_0113 --&gt;
&lt;ins class&#x3D;&quot;adsbygoogle&quot;
     style&#x3D;&quot;display:block&quot;
     data-ad-client&#x3D;&quot;ca-pub-4274798044223706&quot;
     data-ad-slot&#x3D;&quot;7260167051&quot;
     data-ad-format&#x3D;&quot;auto&quot;
     data-ad-test&#x3D;&quot;on&quot;
     data-full-width-responsive&#x3D;&quot;true&quot;&gt;&lt;&#x2F;ins&gt;
&lt;script&gt;
     (adsbygoogle &#x3D; window.adsbygoogle || []).push(&#123;&#125;);
&lt;&#x2F;script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="設定-Domain-name-對應-IP"><a href="#設定-Domain-name-對應-IP" class="headerlink" title="設定 Domain name 對應 IP"></a>設定 Domain name 對應 IP</h3><p>接下來，透過調整設定檔 <code>\etc\hosts</code>，手動設定網址（Domain name）對應的 IP 位置，即可方便在本地端進行測試。以下是 Mac 修改 hosts 的方式：</p>
<ul>
<li>Step1. 開啟資量夾，點選上方「前往」&gt;「前往資料夾」</li>
<li>Step2. 輸入 <code>/private/etc/hosts</code> 並點擊前往</li>
<li>Step3. 由於無法直接進行編輯，可透過 sudo 指令來變更權限，或是把檔案拉到桌面，編輯完成再拉回 <code>/private/etc</code> 取代原本的檔案</li>
<li>Step4. 輸入 <code>IP domain_name</code>，範例如下所示：</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">##</span>
<span class="token comment"># Host Database</span>
<span class="token comment">#</span>
<span class="token comment"># localhost is used to configure the loopback interface</span>
<span class="token comment"># when the system is booting.  Do not change this entry.</span>
<span class="token comment">##</span>
<span class="token number">127.0</span>.0.1	local.ugamenow.com
<span class="token number">127.0</span>.0.1	localhost

<span class="token number">127.0</span>.0.1 heidiliu2020.github.io<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>有關 Mac 設定詳細可參考：<span class="exturl" data-url="aHR0cHM6Ly9tcm1hZC5jb20udHcvbWFjLW9zLXgtaG9zdHM=">[教學]Mac OS X也能編輯與修改Hosts檔案方法<i class="fa fa-external-link-alt"></i></span><br>Windows 和 Linux 如何進行設定，則可參考：<span class="exturl" data-url="aHR0cHM6Ly9ibG9nLm1pbmlhc3AuY29tL3Bvc3QvMjAwOC8wOC8yNS9Nb2RpZnktaG9zdHMtZmlsZS10by1jaGFuZ2UtRG9tYWluLU5hbWUtSVAtTWFwcGluZw==">手動設定網址對應 IP 的方式 ( 主機 IP 域名對應檔 hosts )<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
<h2 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h2><p>透過這篇文章，認識到如何申請 Google AdSense 帳號，以及提供刊登的廣告類型，設定上算是較容易上手。此外，也能夠先透過修改 <code>\etc\hosts</code> 檔案，在本地端進行測試，瞭解廣告實際在頁面中呈現的樣式並即時修正。</p>
<h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9zdXBwb3J0Lmdvb2dsZS5jb20vYWRzZW5zZS9hbnN3ZXIvMTcwNTgyMj9obD1lbiZyZWZfdG9waWM9MTcwNjAwNCZzamlkPTE4ODM0OTc3Nzc0NjY3NDkzMTgtQVA=">AdSense for video overview - Google AdSense Help<i class="fa fa-external-link-alt"></i></span></li>
</ul>
]]></content>
      <categories>
        <category>Google</category>
      </categories>
      <tags>
        <tag>Google</tag>
        <tag>Advertising</tag>
        <tag>Translation</tag>
      </tags>
  </entry>
  <entry>
    <title>【學習筆記】談談 Next.js：基於 React 的 SSR 框架</title>
    <url>/next-react-ssr/</url>
    <content><![CDATA[<p><img src="https://hackmd.io/_uploads/SkvRg5cd6.png" alt="image"></p>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在認識 Next.js 之前，建議先複習 React 的相關知識，可參考過去的<a href="https://heidiliu2020.github.io/react-jsx-props/">《[week 21] 初探 React：Component、JSX 語法、props 與 state 的不同》</a>系列筆記。</p>
<p>距離上次碰 React 感覺已經是好久以前的事情了，趁著這次組內專案需求，預計導入 Next.js 框架技術，寫下這篇學習筆記做記錄。</p>
<span id="more"></span>

<h2 id="初探-Next-js"><a href="#初探-Next-js" class="headerlink" title="初探 Next.js"></a>初探 Next.js</h2><h3 id="React-vs-Next-js：函式庫與框架"><a href="#React-vs-Next-js：函式庫與框架" class="headerlink" title="React vs Next.js：函式庫與框架"></a>React vs Next.js：函式庫與框架</h3><p>眾所周知，React 其實並不是框架（Framework），而是用來建構使用者介面的 JavaScript 函式庫（Library）。</p>
<p>而 Next.js 則是建立 React 之上的框架，除了客戶端渲染（Client-side Rendering），還支援兩種形式的預渲染：靜態網頁生成（Static Site Generation）和伺服器端渲染（Server-side Rendering）。</p>
<p>可參考官網的標語介紹：</p>
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9yZWFjdC5kZXYv">React<i class="fa fa-external-link-alt"></i></span>：用於打造使用者介面的函式庫（The <strong>library</strong> for web and native user interfaces）<ul>
<li>此外官方也提到：「建議使用者使用全端 React 框架，如 Next.js 或 <span class="exturl" data-url="aHR0cHM6Ly9yZW1peC5ydW4v">Remix<i class="fa fa-external-link-alt"></i></span>，以處理專案中的路由與資料處理等需求」</li>
</ul>
</li>
<li><span class="exturl" data-url="aHR0cHM6Ly9uZXh0anMub3JnLw==">Next.js<i class="fa fa-external-link-alt"></i></span>：用於網頁開發的 React 框架（The React <strong>Framework</strong> for the Web）</li>
</ul>
<h2 id="為何選擇-Next-js？"><a href="#為何選擇-Next-js？" class="headerlink" title="為何選擇 Next.js？"></a>為何選擇 Next.js？</h2><p>在使用任何新技術之前，都要先問為什麼會做出這個選擇，是否有解決實作上面臨的問題 <del>（畢竟面試也很常會被問到）</del>，先瞭解前因後果，也有助於掌握各種工具的使用時機。</p>
<p>這裡我們可以從 React 提供的功能作為切入點，React 是由 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL3JlYWN0">Facebook<i class="fa fa-external-link-alt"></i></span> 團隊所維護的 JavaScript 函式庫。</p>
<p>Angular、React、Vue，也就是俗稱的前端三大「框架」，常用於快速開發單頁式應用程式（Single Page Application，SPA），可達到前後端分離，以及提升使用者體驗等目的，例如 Gmail、Facebook 和 Netflix 等平台。</p>
<p>然而，由於 SPA 是利用客戶端渲染（CSR）技術，由 JavaScript 動態產生內容，若檢視原始碼會發現無法看到新增的內容，這將導致 SEO（搜尋引擎最佳化）較差的問題；也因為初次載入頁面需下載大量的 JavaScript 檔案，使第一次渲染較為費時，反而降低使用者體驗。</p>
<p>那該怎麼辦呢？</p>
<p>只要第一個畫面改由伺服器端渲染（SSR），即可解決 SEO 問題，其他畫面仍維持使用者端渲染（CSR），減少伺服器運算負荷，如此不就能夠兩者兼得了嗎？</p>
<p>React 可透過「搭建後端 Server + 處理 Hydration + Webpack 打包配置」等設定來實現 SSR，但相對來說門檻較高，需耗費較多成本學習。</p>
<p>於是前端 SSR 框架就誕生了，如 React 的 <span class="exturl" data-url="aHR0cHM6Ly9uZXh0anMub3JnLw==">Next.js<i class="fa fa-external-link-alt"></i></span> 和 <span class="exturl" data-url="aHR0cHM6Ly93d3cuZ2F0c2J5anMuY29tLw==">Gatsby.js<i class="fa fa-external-link-alt"></i></span>，以及 Vue 的 <span class="exturl" data-url="aHR0cHM6Ly9udXh0LmNvbS8=">Nuxt.js<i class="fa fa-external-link-alt"></i></span>。</p>
<p>【延伸閱讀】關於 MVC、SPA 到 SSR 詳細演進，可閱讀 Huli 寫的這兩篇文章：<span class="exturl" data-url="aHR0cHM6Ly9saWZlLmh1bGkudHcvMjAxOC8wNS8wNC9pbnRyb2R1Y3Rpb24tbXZjLXNwYS1hbmQtc3NyLTU0NWM5NDE2NjllOS8=">《跟著小明一起搞懂技術名詞：MVC、SPA 與SSR》<i class="fa fa-external-link-alt"></i></span>以及<span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmh1bGkudHcvMjAyMy8xMS8yNy9zZXJ2ZXItc2lkZS1yZW5kZXJpbmctc3NyLWFuZC1pc29tb3JwaGljLw==">《從歷史的角度探討多種 SSR（Server-side rendering）》<i class="fa fa-external-link-alt"></i></span>，前者明明是兩年前才讀過的文章，現在又有一層新的體悟。</p>
<h3 id="Next-js-特別在哪？"><a href="#Next-js-特別在哪？" class="headerlink" title="Next.js 特別在哪？"></a>Next.js 特別在哪？</h3><p><img src="https://hackmd.io/_uploads/r1anuqcu6.png" alt="image"></p>
<p>由 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3ZlcmNlbC9uZXh0Lmpz">Vercel<i class="fa fa-external-link-alt"></i></span> 團隊創建的 Next.js，解決了上述幾點網頁開發遇到的問題，以下是官網提及有關 Next.js v14（發布於 2023 年 12 月）的幾項特點：</p>
<ul>
<li>Data Fetching：可控制資料載入的時機點</li>
<li>CSS Support：內建支援 CSS、Sass 檔案，並支援 CSS 模組化</li>
<li>Route Handlers：基於檔案架構的路由系統，如 <code>page/home.tsx</code></li>
<li>API Routes：支援 API 路由，易於建立與管理 API 端點</li>
<li>Pre-rendering：支援兩種形式的預渲染，分別是靜態網頁生成（SSG）和伺服器渲染（SSR）</li>
<li>Built-in Optimizations：針對圖片、字體、JavaScript 載入進行自動優化，包括延遲載入與緩存處理</li>
</ul>
<p>綜合上述優點，Next.js 有助於優化網頁效能與 SEO，適合用於建立著陸頁面（Landing Page）或是產品展示頁面，但較不適合應用在經常變動的網站，避免伺服器負荷過大。</p>
<p>而 Next.js 實際使用案例可參考 <span class="exturl" data-url="aHR0cHM6Ly9uZXh0anMub3JnL3Nob3djYXNl">Showcase<i class="fa fa-external-link-alt"></i></span> 頁面，如 Notion、Tik Tok 以及 Twitch 等網站。</p>
<h2 id="比較：CSR-vs-SSR-vs-SSG-vs-ISR"><a href="#比較：CSR-vs-SSR-vs-SSG-vs-ISR" class="headerlink" title="比較：CSR vs SSR vs SSG vs ISR"></a>比較：CSR vs SSR vs SSG vs ISR</h2><p><img src="https://hackmd.io/_uploads/Sk0QYQzYa.png" alt="image"></p>
<blockquote>
<p>Ref: <span class="exturl" data-url="aHR0cHM6Ly9kZXYudG8vZ3V5ZHVtYWlzL25leHQtanMtdGhlLXVsdGltYXRlLWNoZWF0LXNoZWV0LXRvLXBhZ2UtcmVuZGVyaW5nLTU1ZWI=">Next.js: The Ultimate Cheat Sheet To Page Rendering<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
<p>最後針對 Next.js 支援的網頁渲染方式，以及如何在 Next.js 搭配使用，列點整理如下：</p>
<ul>
<li>Client-side Rendering（CSR）：客戶端渲染<ul>
<li>Client（瀏覽器）第一次發送 Request 給 Server =&gt; Server 回傳只有容器不含內容的 HTML 檔 =&gt; 再由瀏覽器執行 JavaScript 動態產生資料 =&gt; 最後將資料渲染到畫面上</li>
<li>因此第一次渲染較為費時，而只有容器沒有內容的原始碼也將不利於 SEO</li>
<li>執行函數：<code>useEffect()</code> 或使用由 Next.js 團隊開發的 <span class="exturl" data-url="aHR0cHM6Ly9zd3IudmVyY2VsLmFwcC8=">SWR<i class="fa fa-external-link-alt"></i></span> 開源<br>套件</li>
</ul>
</li>
<li>Server-side Rendering（SSR）：伺服器端渲染<ul>
<li>Server（伺服器）在每次收到 Request 時，會建立好完整的 HTML 內容並發送給 Client</li>
<li>適用於需經常更新數據的頁面，缺點是可能導致伺服器負荷較大</li>
<li>執行函數：<code>getServerSideProps()</code>，只會在 Server side 執行，可跳過呼叫 API 步驟直接到資料庫抓取資料</li>
</ul>
</li>
<li>Static Site Generation（SSG）：靜態網站生成<ul>
<li>在網頁打包（built time）時，就由 Server 產生所有需要用到的內容，因此每次 Server 收到 Request 均回傳相同的 HTML 給 Client</li>
<li>因 HTML 內容不變可搭配快取機制，適用於資料變動較小的頁面，無法動態更新</li>
<li>執行函數：<code>getStaticProps()</code></li>
</ul>
</li>
<li>Incremental Site Rendering（ISR）：增量式網站渲染<ul>
<li>結合 SSG 和 SSR 的渲染方式，可設定條件保存上一次渲染結果，當靜態檔案過期，將觸發 Server 重新 build HTML 檔案以更新頁面</li>
<li>執行函數: <code>getStaticProps()</code> 搭配 <code>revalidate</code> 屬性</li>
</ul>
</li>
</ul>
<p>也可參考 web.dev 這篇文章<span class="exturl" data-url="aHR0cHM6Ly93ZWIuZGV2L2FydGljbGVzL3JlbmRlcmluZy1vbi10aGUtd2ViP2hsPXpoLXR3">《Rendering on the Web》<i class="fa fa-external-link-alt"></i></span> 提供的表格整理：</p>
<p><img src="https://hackmd.io/_uploads/SyQLDXGKp.png" alt="image"></p>
<h2 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h2><p>在實際瞭解 Next.js 這套框架之前，在社群或其他平台略有耳聞，透過這次學習，除了把 React 的基礎，也把過去常被問到的 MVC、SPA、CSR、SSR 等專有名詞再重新複習一遍。</p>
<p>不管選擇什麼技術或框架，重要的是為何要使用，又想解決什麼問題，不外乎結果都是為了提升使用者體驗，畢竟科技始終源自於人性。這篇只提及基本觀念，再來就是實際動手操作啦！</p>
<h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9pdGhlbHAuaXRob21lLmNvbS50dy9hcnRpY2xlcy8xMDIyNDc3Mg==">18. [FE] 為什麼網站要做成SPA？SSR 的優點是什麼？<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9pdGhlbHAuaXRob21lLmNvbS50dy91c2Vycy8yMDE2MTg1My9pcm9ubWFuLzYxMjI=">深入淺出，完整認識Next.js 13 - iT 邦幫忙<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9oYWNrbWQuaW8vQHBlcmljb2RlL0h5UkpIdkFzag==">快速了解Next.js中的網頁渲染技術重點: SSR、SSG、ISR與CSR<i class="fa fa-external-link-alt"></i></span></li>
</ul>
]]></content>
      <categories>
        <category>Front-End</category>
        <category>React</category>
      </categories>
      <tags>
        <tag>Front-End</tag>
        <tag>React</tag>
        <tag>Next.js</tag>
      </tags>
  </entry>
  <entry>
    <title>【學習筆記】Next.js 路由系統：App Router vs Page Router</title>
    <url>/nextjs-app-router/</url>
    <content><![CDATA[<p><img src="https://hackmd.io/_uploads/SkK9xkWqp.png" alt="Parallel Routes"></p>
<blockquote>
<p>Ref: <span class="exturl" data-url="aHR0cHM6Ly9uZXh0anMub3JnL2RvY3MvYXBwL2J1aWxkaW5nLXlvdXItYXBwbGljYXRpb24vcm91dGluZy9wYXJhbGxlbC1yb3V0ZXMjc3RyZWFtaW5n">Next.js - Parallel Routes<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>接續上篇文章 <a href="https://heidiliu2020.github.io/next-react-ssr/">【學習筆記】談談 Next.js：基於 React 的 SSR 框架</a>，初步瞭解 Next.js 這套框架的特性以及網頁渲染方式，本篇將實際建立 Next.js 專案，以及介紹 Page Router 與 APP Router 兩種路由系統的差異。</p>
<span id="more"></span>

<h2 id="Getting-Started"><a href="#Getting-Started" class="headerlink" title="Getting Started"></a>Getting Started</h2><p>詳細步驟可參考<span class="exturl" data-url="aHR0cHM6Ly9uZXh0anMub3JnL2RvY3MvZ2V0dGluZy1zdGFydGVkL2luc3RhbGxhdGlvbg==">官方文件<i class="fa fa-external-link-alt"></i></span>，注意目前版本的 Next.js v14 需要安裝 <span class="exturl" data-url="aHR0cHM6Ly9ub2RlanMub3JnLw==">Node.js v18.17<i class="fa fa-external-link-alt"></i></span> 或以上版本才支援。</p>
<h3 id="nvm：Node-Version-Manager"><a href="#nvm：Node-Version-Manager" class="headerlink" title="nvm：Node Version Manager"></a>nvm：Node Version Manager</h3><p>若已經安裝過 Node.js 卻顯示版本不符，可透過 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL252bS1zaC9udm0=">nvm<i class="fa fa-external-link-alt"></i></span> 這項 Node.js 版本管理工具，在不同專案中切換 Node.js 版本。</p>
<p>首先在終端機輸入下方指令安裝 nvm：</p>
<pre class="line-numbers language-none"><code class="language-none">$ curl -o- https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;nvm-sh&#x2F;nvm&#x2F;v0.39.1&#x2F;install.sh | bash<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>接著透過下方指令，即可安裝與套用指定版本的 Node.js：</p>
<pre class="line-numbers language-none"><code class="language-none">$ nvm install v18.17.0
&#x2F;&#x2F; 安裝指定版本 Node.js
 
$ nvm use v18.17.0
&#x2F;&#x2F; 套用指定版本的 Node.js<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>也可透過以下指定確認目前版本，以及已安裝的版本：</p>
<pre class="line-numbers language-none"><code class="language-none">$ node -v
&#x2F;&#x2F; 確認目前 Node.js 版本

$ nvm ls
&#x2F;&#x2F; 列出所有本機端已安裝的 Node.js 版本

$ nvm ls-remote
&#x2F;&#x2F; 列出目前遠端可使用的 Node.js 版本<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="專案建置"><a href="#專案建置" class="headerlink" title="專案建置"></a>專案建置</h3><p>依照下方指令建立 next 專案，在後方加上 <code>--ts</code> 或 <code>--typescript</code> 即可支援 TypeScript 語法：</p>
<pre class="line-numbers language-none"><code class="language-none">$ npx create-next-app
or
$ npx create-next-app --ts<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>接著會依序出現下列幾個提問，分別如下：</p>
<pre class="line-numbers language-none"><code class="language-none">What is your project named? my-app
&#x2F;&#x2F; 專案名稱，格式需為英文小寫

Would you like to use TypeScript? No &#x2F; Yes
&#x2F;&#x2F; 是否支援 TypeScript

Would you like to use ESLint? No &#x2F; Yes
&#x2F;&#x2F; 是否使用 ESLint（用來規範 Coding Style 的套件）

Would you like to use Tailwind CSS? No &#x2F; Yes
&#x2F;&#x2F; 是否使用 Tailwind CSS

Would you like to use &#96;src&#x2F;&#96; directory? No &#x2F; Yes
&#x2F;&#x2F; 是否在 &#x2F;app 外加一層 src 資料夾

Would you like to use App Router? (recommended) No &#x2F; Yes
&#x2F;&#x2F; 是否使用 App Router 

Would you like to customize the default import alias (@&#x2F;*)? No &#x2F; Yes
&#x2F;&#x2F; 是否自訂 alias 調整預設的 baseURL 匯入路徑

What import alias would you like configured? @&#x2F;*
&#x2F;&#x2F; alias 預設使用 @ 是否修改<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>建置完成後，初始專案架構主要分成以下三大類：</p>
<ul>
<li>app：放置 components、pages 與 api 等檔案<ul>
<li>layout.tsx：在多個頁面之間定義共用 UI，其狀態將會被保存，如：nav、header、footer 等元件</li>
<li>page.tsx：在資料夾底下需包含 <code>page.tsx</code> 檔案，才會被定義為一個 route segment，如：<code>app/blog/page.tsx</code></li>
<li>globals.css：定義全域樣式</li>
</ul>
</li>
<li>public：放置靜態檔案，如圖片等<ul>
<li>需要引入 <code>/public/next.svg</code> 檔案時，路徑可直接指向 <code>/next.svg</code></li>
</ul>
</li>
<li>設定檔：包含 <code>next.config.js</code>、<code>tsconfig.json</code>、<code>package.json</code> 等用於設定專案配置的檔案</li>
</ul>
<p>接著輸入 <code>cd my-app</code> 指令移動到專案根目錄，再以 <code>npm run dev</code> 指令運行開發伺服器，進入 <code>http://localhost:3000/</code> 即可看到初始頁面如下，也就是 <code>app/page.tsx</code> 的內容：</p>
<p><img src="https://hackmd.io/_uploads/ryQN1aXtT.png" alt="image"></p>
<h2 id="Router-System-路由系統"><a href="#Router-System-路由系統" class="headerlink" title="Router System 路由系統"></a>Router System 路由系統</h2><p>過去我們在 React 專案中，曾使用 <code>react-router-dom</code> 這項套件來實現路由功能，詳細可參考這篇筆記：<a href="https://heidiliu2020.github.io/react-router/">[week 22] React：用 SPA 架構實作一個部落格（一）- Router</a>。</p>
<p>由於 Next.js 使用基於檔案系統的路由（file-system based router），會依照專案的檔案結構自動定義路由。</p>
<p>而根據版本不同，Next.js 提供兩種管理頁面路由的方式，分別是舊版本適用的 Pages Router 以及 v13 後推出的 App Router，兩者差異在於：</p>
<ul>
<li>Pages Router<ul>
<li>定義頁面層級的路由</li>
<li>所有元件為 React Client Component（客戶端元件）</li>
<li>只能使用 Next.js 提供的預設規則，如：檔案名稱即為路徑</li>
</ul>
</li>
<li>App Router<ul>
<li>定義應用程式層級的路由</li>
<li>所有元件預設為 React Server Component（伺服器端元件）</li>
<li>可自定義路由規則，如：使用正則表達式匹配特定路徑</li>
</ul>
</li>
</ul>
<p>如上所言，在 App Router 中所有元件預設為 React Server Component（RSC），意思是由伺服器將 React Component 準備好，再傳給 Client 顯示在畫面上。</p>
<p>而 RSC 的優缺點如下：</p>
<ul>
<li>優點<ul>
<li>整合後端操作，如存取資料庫（DB）、讀取檔案（File System）</li>
<li>降低資料間的依賴關係，改善請求瀑布流（Waterfall）導致的效能問題</li>
<li>降低 JS Bundle Size 以提升頁面效能</li>
</ul>
</li>
<li>缺點<ul>
<li>無法使用 React Hooks</li>
<li>無法使用瀏覽器 API</li>
<li>無法操作 DOM 事件監聽</li>
</ul>
</li>
</ul>
<p>面對上述缺點，Next.js 可依照使用情境不同，將元件定義為 Server Component 或 Client Component。舉例來說，當某個元件需要使用 Hooks 管理時，可透過在程式碼開頭加上 <code>&#39;use client&#39;</code> 來標示元件類型，該元件底下的子元件也會自動視為 Client Component。</p>
<p>但也因為如此，相較於 Page Router，新版的 App Router 學習曲線會較高，需瞭解 Server 如何運作，以及判斷哪些元件適合放在 Server 或 Client 端，在使用時須特別注意。</p>
<p>介紹完 Page Router 和 App Router 之間的差異，接著談談兩者專案架構，以及對應路由的方式。</p>
<h3 id="Page-Router：基於檔案的路由系統"><a href="#Page-Router：基於檔案的路由系統" class="headerlink" title="Page Router：基於檔案的路由系統"></a>Page Router：基於檔案的路由系統</h3><p>檔案架構示意：</p>
<pre class="line-numbers language-none"><code class="language-none">└── pages
    ├── index.tsx
    ├── login.tsx
    ├── api
    │   └── user.tsx
    ├── posts
    │   └── [id].tsx
    └── blog
        ├── index.tsx
        └── setting.tsx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>檔案與對應的頁面路由如下：</p>
<ul>
<li><code>pages/index.tsx</code> → <code>/</code></li>
<li><code>pages/blog/index.tsx</code> → <code>/blog</code></li>
<li><code>pages/blog/setting.tsx</code> → <code>/blog/setting</code></li>
<li><code>pages/posts/[id].tsx</code>  → <code>/posts/[id]</code><ul>
<li>檔名可作為動態路由的參數，透過 <span class="exturl" data-url="aHR0cHM6Ly9uZXh0anMub3JnL2RvY3MvcGFnZXMvYXBpLXJlZmVyZW5jZS9mdW5jdGlvbnMvdXNlLXJvdXRlcg==">useRoute<i class="fa fa-external-link-alt"></i></span> 這個 Hook 取得 route 相關資訊</li>
</ul>
</li>
<li>呼叫 API：<code>page/api/user.tsx</code></li>
</ul>
<p>可參考官方部落格的這篇文章<span class="exturl" data-url="aHR0cHM6Ly9uZXh0anMub3JnL2Jsb2cvbGF5b3V0cy1yZmM=">《Layouts RFC》<i class="fa fa-external-link-alt"></i></span>，包含以下檔案對應頁面路由的示意圖：</p>
<p><img src="https://hackmd.io/_uploads/B1-kgTiKp.png" alt="image"></p>
<h3 id="App-Router：基於目錄的路由系統"><a href="#App-Router：基於目錄的路由系統" class="headerlink" title="App Router：基於目錄的路由系統"></a>App Router：基於目錄的路由系統</h3><p>目錄架構示意：</p>
<pre class="line-numbers language-none"><code class="language-none">└── app
    ├── blog
    │   └── [slug]
    │        └── page.tsx
    ├── login
    │   └── page.tsx
    ├── @analytics
    │   ├── page.tsx
    │   ├── error.tsx
    │   └── loading.tsx
    ├── api
    │   └── user
    │       ├── index.ts
    │       └── route.ts  
    ├── components
    │   ├── loading.tsx
    │   └── button.tsx    
    ├── globals.css
    ├── layout.tsx
    └── page.tsx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>文件目錄與對應的頁面路由如下：</p>
<ul>
<li><code>app/page.tsx</code> → <code>/</code></li>
<li><code>app/login/page.tsx</code> → <code>/login</code></li>
<li><code>app/blog/[slug]/page.tsx</code> → <code>/blog/[slug]</code><ul>
<li>目錄可作為動態路由的參數，並以 props 傳入元件</li>
</ul>
</li>
<li>呼叫 API：<code>app/api/user/route.tsx</code></li>
<li><code>@</code> 開頭的 folder 不會對路由造成影響：<ul>
<li><code>app/@analytics/page.tsx</code> 實際渲染的路由為 /，這個特殊的檔案夾是用來切分同一個路由底下的不同邏輯區塊。</li>
</ul>
</li>
</ul>
<p>可參考<span class="exturl" data-url="aHR0cHM6Ly9uZXh0anMub3JnL2RvY3MvYXBwL2J1aWxkaW5nLXlvdXItYXBwbGljYXRpb24vcm91dGluZw==">官方文件<i class="fa fa-external-link-alt"></i></span>，以下是目錄對應頁面路由的示意圖：</p>
<p><img src="https://hackmd.io/_uploads/SyBL03sK6.png" alt="image"></p>
<h2 id="File-Convention-檔案規則"><a href="#File-Convention-檔案規則" class="headerlink" title="File Convention 檔案規則"></a>File Convention 檔案規則</h2><p>詳細的路由架構，可參考<span class="exturl" data-url="aHR0cHM6Ly9uZXh0anMub3JnL2RvY3MvYXBwL2J1aWxkaW5nLXlvdXItYXBwbGljYXRpb24vcm91dGluZw==">官方文件<i class="fa fa-external-link-alt"></i></span>，也可以直接在頁面左上方切換查看 App Router 或 Page Router。</p>
<p>此外，Next.js 有設定<span class="exturl" data-url="aHR0cHM6Ly9uZXh0anMub3JnL2RvY3MvYXBwL2J1aWxkaW5nLXlvdXItYXBwbGljYXRpb24vcm91dGluZyNmaWxlLWNvbnZlbnRpb25z">保留字<i class="fa fa-external-link-alt"></i></span>給特殊檔案，以建立具有特定行為的 UI，以下副檔名為 <code>.js</code>、<code>.jsx</code>、<code>.tsx</code> 可視專案而定：</p>
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9uZXh0anMub3JnL2RvY3MvYXBwL2FwaS1yZWZlcmVuY2UvZmlsZS1jb252ZW50aW9ucy9sYXlvdXQ=">layout.js<i class="fa fa-external-link-alt"></i></span>：定義共用 UI 元件</li>
<li><span class="exturl" data-url="aHR0cHM6Ly9uZXh0anMub3JnL2RvY3MvYXBwL2FwaS1yZWZlcmVuY2UvZmlsZS1jb252ZW50aW9ucy90ZW1wbGF0ZQ==">template.js<i class="fa fa-external-link-alt"></i></span>：類似 layout，處理需要重新渲染的 Layout UI</li>
<li><span class="exturl" data-url="aHR0cHM6Ly9uZXh0anMub3JnL2RvY3MvYXBwL2FwaS1yZWZlcmVuY2UvZmlsZS1jb252ZW50aW9ucy9wYWdl">page.js<i class="fa fa-external-link-alt"></i></span>：建立路由的主要 UI，並使路徑可公開存取</li>
<li><span class="exturl" data-url="aHR0cHM6Ly9uZXh0anMub3JnL2RvY3MvYXBwL2FwaS1yZWZlcmVuY2UvZmlsZS1jb252ZW50aW9ucy9yb3V0ZQ==">route.js<i class="fa fa-external-link-alt"></i></span>：建立伺服器端 API 端點</li>
<li><span class="exturl" data-url="aHR0cHM6Ly9uZXh0anMub3JnL2RvY3MvYXBwL2FwaS1yZWZlcmVuY2UvZmlsZS1jb252ZW50aW9ucy9sb2FkaW5n">loading.js<i class="fa fa-external-link-alt"></i></span>：在載入時顯示載入中 UI</li>
<li><span class="exturl" data-url="aHR0cHM6Ly9uZXh0anMub3JnL2RvY3MvYXBwL2FwaS1yZWZlcmVuY2UvZmlsZS1jb252ZW50aW9ucy9ub3QtZm91bmQ=">not-found.js<i class="fa fa-external-link-alt"></i></span>：處理 notFound error（HTTP 404）或任何未知路徑錯誤</li>
<li><span class="exturl" data-url="aHR0cHM6Ly9uZXh0anMub3JnL2RvY3MvYXBwL2FwaS1yZWZlcmVuY2UvZmlsZS1jb252ZW50aW9ucy9lcnJvcg==">error.js<i class="fa fa-external-link-alt"></i></span>：顯示錯誤 UI，必須為 Client Components</li>
<li><span class="exturl" data-url="aHR0cHM6Ly9uZXh0anMub3JnL2RvY3MvYXBwL2J1aWxkaW5nLXlvdXItYXBwbGljYXRpb24vcm91dGluZy9lcnJvci1oYW5kbGluZw==">global-error.js<i class="fa fa-external-link-alt"></i></span>：全域錯誤 UI</li>
<li><span class="exturl" data-url="aHR0cHM6Ly9uZXh0anMub3JnL2RvY3MvYXBwL2FwaS1yZWZlcmVuY2UvZmlsZS1jb252ZW50aW9ucy9kZWZhdWx0">default.js<i class="fa fa-external-link-alt"></i></span>：處理 <span class="exturl" data-url="aHR0cHM6Ly9uZXh0anMub3JnL2RvY3MvYXBwL2J1aWxkaW5nLXlvdXItYXBwbGljYXRpb24vcm91dGluZy9wYXJhbGxlbC1yb3V0ZXM=">Parallel Routes（平行路由）<i class="fa fa-external-link-alt"></i></span> 遇到渲染問題時，用來替代顯示的 UI（fallback UI）</li>
</ul>
<p>以下是官方文件提供的路由範例架構，可以看到父層和子層均有 layout、error 以及 loading 元件，用來處理各自的邏輯：</p>
<p><img src="https://hackmd.io/_uploads/BJGCACec6.png" alt="router image"></p>
<h2 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h2><p>在查路由相關的資料時，會發現因為 App Router 是 Next.js v13 後才推出的路由系統，架構上和 Page Router 不相容，規則也有所差異，因此特別列出來進行比較，實際開發時使用預設的 App Router 即可。</p>
<p>接下來預計會實作一個的部落格，希望包含簡易的登入機制、API 串接、顯示文章列表等功能。</p>
<h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><ul>
<li>Next.js 官方文件：<span class="exturl" data-url="aHR0cHM6Ly9uZXh0anMub3JnL2RvY3MvYXBwL2J1aWxkaW5nLXlvdXItYXBwbGljYXRpb24=">App Router<i class="fa fa-external-link-alt"></i></span> &amp; <span class="exturl" data-url="aHR0cHM6Ly9uZXh0anMub3JnL2RvY3MvcGFnZXM=">Page Router<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLnR5cGVhcnQuY2MvbmV4dGpzMTMtcXVpY2stZ3VpZGUv">快速入門 Next.Js 13 App Router, RSC(React Server Component), SEO相關說明<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9pdGhlbHAuaXRob21lLmNvbS50dy9hcnRpY2xlcy8xMDMzNDQyNQ==">Day 19 - Parallel Routes 路由的平行宇宙 - iT 邦幫忙<i class="fa fa-external-link-alt"></i></span></li>
</ul>
]]></content>
      <categories>
        <category>Front-End</category>
        <category>React</category>
      </categories>
      <tags>
        <tag>Front-End</tag>
        <tag>React</tag>
        <tag>Next.js</tag>
      </tags>
  </entry>
  <entry>
    <title>【學習筆記】Next.js 實現多國語系：react-i18next &amp; next-i18next</title>
    <url>/nextjs-i18next/</url>
    <content><![CDATA[<p><img src="https://hackmd.io/_uploads/ry0hNlrZA.png" alt="i18n"></p>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在開發網站時，多國語系功能（i18n）是很常見的需求，能根據使用者需求切換網站顯示的語言。這陣子在 Next.js 專案中意外踩了幾個坑，寫下學習筆記作為紀錄。</p>
<span id="more"></span>

<p>本篇分為以下幾個段落：</p>
<ul>
<li>What is i18n？</li>
<li>如何實作<ul>
<li>Next.js 內建：路由層級</li>
<li>選擇套件：react-i18next &amp; next-i18next</li>
</ul>
</li>
<li>使用範例<ul>
<li>SSG/SSR：使用 next-i18next</li>
<li>SPA：使用 react-i18next</li>
</ul>
</li>
</ul>
<h2 id="What-is-i18n？"><a href="#What-is-i18n？" class="headerlink" title="What is i18n？"></a>What is i18n？</h2><p>i18n 是由  internationalization（國際化）英文縮寫而來，18 代表 i 到 n 之間的字母數量。</p>
<p>透過 i18n 多國語系功能，能夠讓不同語系的使用者，根據需求選定顯示語言和格式，減少在地化的時間成本，達到國際化的目的。</p>
<h2 id="如何實作"><a href="#如何實作" class="headerlink" title="如何實作"></a>如何實作</h2><h3 id="Next-js-內建：路由層級"><a href="#Next-js-內建：路由層級" class="headerlink" title="Next.js 內建：路由層級"></a>Next.js 內建：路由層級</h3><p>在介紹套件之前，先介紹 Next.js 官方<span class="exturl" data-url="aHR0cHM6Ly9uZXh0anMub3JnL2RvY3MvcGFnZXMvYnVpbGRpbmcteW91ci1hcHBsaWNhdGlvbi9yb3V0aW5nL2ludGVybmF0aW9uYWxpemF0aW9u">內建 i18n 功能<i class="fa fa-external-link-alt"></i></span>，透過路由層級（routing）設定不同語言轉至不同路徑，設定範例如下：</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// next.config.js</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  i18n<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    locales<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'en'</span><span class="token punctuation">,</span> <span class="token string">'zh'</span><span class="token punctuation">,</span> <span class="token string">'jp'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    defaultLocale<span class="token operator">:</span> <span class="token string">'en'</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>根據上述配置，即可搭配 <code>next/link</code>、<code>next/router</code>，根據路由顯示對應的語言，路徑如下：</p>
<ul>
<li><code>/posts</code>：預設為 <code>en</code></li>
<li><code>/zh/blog</code></li>
<li><code>/jp/blog</code></li>
</ul>
<p>其中需注意 <span class="exturl" data-url="aHR0cHM6Ly9uZXh0anMub3JnL2RvY3MvcGFnZXMvYnVpbGRpbmcteW91ci1hcHBsaWNhdGlvbi9yb3V0aW5nL2ludGVybmF0aW9uYWxpemF0aW9u">Page Router<i class="fa fa-external-link-alt"></i></span> 和 <span class="exturl" data-url="aHR0cHM6Ly9uZXh0anMub3JnL2RvY3MvYXBwL2J1aWxkaW5nLXlvdXItYXBwbGljYXRpb24vcm91dGluZy9pbnRlcm5hdGlvbmFsaXphdGlvbg==">App Router<i class="fa fa-external-link-alt"></i></span> 在路由設定上有所不同，詳細可參考官方提供的範例，以下介紹常見的 i18n 套件作為範例。</p>
<blockquote>
<p>關於 Page router 和 App router 的差別，可參考之前的筆記：<a href="https://heidiliu2020.github.io/nextjs-app-router/">【學習筆記】Next.js 路由系統：App Router vs Page Router</a></p>
</blockquote>
<h3 id="選擇套件：react-i18next-amp-next-i18next"><a href="#選擇套件：react-i18next-amp-next-i18next" class="headerlink" title="選擇套件：react-i18next &amp; next-i18next"></a>選擇套件：react-i18next &amp; next-i18next</h3><ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2kxOG5leHQvbmV4dC1pMThuZXh0">i18next/next-i18next<i class="fa fa-external-link-alt"></i></span><ul>
<li>支援 Page Router </li>
<li>支援 SSG/SSR</li>
</ul>
</li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2kxOG5leHQvcmVhY3QtaTE4bmV4dA==">i18next/react-i18next<i class="fa fa-external-link-alt"></i></span><ul>
<li>支援 APP Router，因此 Next.js v13 後的版本建議搭配使用</li>
<li>支援 SPA</li>
</ul>
</li>
</ul>
<p>可參考上述兩種套件的 npm 下載數：</p>
<p><img src="https://hackmd.io/_uploads/HyMMe1Sb0.png" alt="next-i18n"></p>
<h2 id="使用範例"><a href="#使用範例" class="headerlink" title="使用範例"></a>使用範例</h2><h3 id="SSR：使用-next-i18next"><a href="#SSR：使用-next-i18next" class="headerlink" title="SSR：使用 next-i18next"></a>SSR：使用 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2kxOG5leHQvbmV4dC1pMThuZXh0">next-i18next<i class="fa fa-external-link-alt"></i></span></h3><p>(1) 首先是安裝套件：</p>
<pre class="line-numbers language-none"><code class="language-none">npm install next-i18next --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>(2) 在根目錄新增 <code>next-i18next.config.js</code> 設定檔：</p>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">// next-i18next.config.js</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  i18n<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    locales<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'en'</span><span class="token punctuation">,</span> <span class="token string">'jp'</span><span class="token punctuation">,</span> <span class="token string">'zh'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    defaultLocale<span class="token operator">:</span> <span class="token string">'en'</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  fallbackLng<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">default</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'en'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>(3) 在 <code>next.config.js</code> 設定檔引入使用 <code>next-i18next</code>：</p>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">// next.config.js</span>

<span class="token keyword">const</span> <span class="token punctuation">&#123;</span> i18n <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token keyword">require</span><span class="token punctuation">(</span><span class="token string">'./next-i18next.config'</span><span class="token punctuation">)</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  i18n<span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>(4) 修改 <code>src/pages/_app.tsx</code> 檔案，以 <code>appWithTranslation</code> 這個 <span class="exturl" data-url="aHR0cHM6Ly9sZWdhY3kucmVhY3Rqcy5vcmcvZG9jcy9oaWdoZXItb3JkZXItY29tcG9uZW50cy5odG1s">HOC（高階組件）<i class="fa fa-external-link-alt"></i></span>包住整個 App：</p>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">// src/pages/_app.tsx</span>

<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> appWithTranslation <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'next-i18next'</span>

<span class="token keyword">const</span> <span class="token function-variable function">MyApp</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">&#123;</span> Component<span class="token punctuation">,</span> pageProps <span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span>
  <span class="token operator">&lt;</span>Component <span class="token punctuation">&#123;</span><span class="token operator">...</span>pageProps<span class="token punctuation">&#125;</span> <span class="token operator">/</span><span class="token operator">></span>
<span class="token punctuation">)</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">appWithTranslation</span><span class="token punctuation">(</span>MyApp<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="【補充】Higher-Order-Components（HOC，高階組件）"><a href="#【補充】Higher-Order-Components（HOC，高階組件）" class="headerlink" title="【補充】Higher-Order Components（HOC，高階組件）"></a>【補充】Higher-Order Components（HOC，高階組件）</h4><ul>
<li>HOC 並不是 React 提供的 API，而是和 JavsScript 中的 <span class="exturl" data-url="aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3poLXR3LyVFOSVBQiU5OCVFOSU5OCVCNiVFNSU4NyVCRCVFNiU5NSVCMA==">Higher Order Function（高階函式）<i class="fa fa-external-link-alt"></i></span>類似的一個函式，高階函式可代入另一個函式作為參數，最終回傳一個函式作為結果</li>
<li>而 HOC 則是可代入元件（Component）作為參數，並回傳一個新的元件</li>
<li>目的是將共用邏輯放在 HOC 中，變動的部分由 Component 的 props 和 state 傳入</li>
</ul>
<p>(5) 在 <code>public/locales/&lt;locale&gt;/&lt;namespace&gt;.json</code> 路徑加入多國語系檔案，架構參考如下：</p>
<pre class="line-numbers language-none"><code class="language-none">.
└── public
    └── locales
        ├── en
        |   ├── posts.json
        |   └── common.json
        ├── jp
        |   ├── posts.json
        |   └── common.json
        └── zh
            ├── posts.json
            └── common.json<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>(6) 在頁面引入語系檔案：</p>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> serverSideTranslations <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'next-i18next/serverSideTranslations'</span>

<span class="token keyword">export</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">getStaticProps</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> locale <span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>
    props<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
      <span class="token operator">...</span><span class="token punctuation">(</span><span class="token keyword">await</span> <span class="token function">serverSideTranslations</span><span class="token punctuation">(</span>locale<span class="token punctuation">,</span> <span class="token punctuation">[</span>
        <span class="token string">'common'</span><span class="token punctuation">,</span>
        <span class="token string">'posts'</span><span class="token punctuation">,</span>
      <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token comment">// Will be passed to the page component as props</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>(7) 即可在頁面引入 <code>useTranslation</code> hook 使用，注意需從 <code>next-i18next</code> 引用：</p>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> useTranslation <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'next-i18next'</span>

<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">Header</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> t <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token function">useTranslation</span><span class="token punctuation">(</span><span class="token string">'common'</span><span class="token punctuation">)</span>

  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token operator">&lt;</span>div<span class="token operator">></span>
      <span class="token operator">&lt;</span>h1<span class="token operator">></span><span class="token punctuation">&#123;</span><span class="token function">t</span><span class="token punctuation">(</span><span class="token string">'home-title'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
  <span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="SPA：使用-react-i18next"><a href="#SPA：使用-react-i18next" class="headerlink" title="SPA：使用 react-i18next"></a>SPA：使用 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2kxOG5leHQvcmVhY3QtaTE4bmV4dA==">react-i18next<i class="fa fa-external-link-alt"></i></span></h3><p>非 SSR、SSG 環境，只需直接引用 <code>react-i18next</code> 套件即可。</p>
<p>(1) 首先是安裝套件：</p>
<pre class="line-numbers language-none"><code class="language-none">npm install react-i18next i18next --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>(2) 建立 <code>app/i18n</code> 目錄，放置管理 i18n 的相關檔案（初始 i18n、翻譯文檔），範例如下：</p>
<ul>
<li><code>i18n/index.ts</code>：初始 i18n 相關設定</li>
</ul>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">// i18n/index.ts</span>

<span class="token keyword">import</span> i18n <span class="token keyword">from</span> <span class="token string">'i18next'</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> initReactI18next <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'react-i18next'</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> resources <span class="token keyword">from</span> <span class="token string">'./lang-resource'</span><span class="token punctuation">;</span>

i18n
  <span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>initReactI18next<span class="token punctuation">)</span>  <span class="token comment">// 初始化設定</span>
  <span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
    resources<span class="token punctuation">,</span>            <span class="token comment">// 引入定義語系與對應文字的 json 檔</span>
    lng<span class="token operator">:</span> <span class="token string">'en'</span><span class="token punctuation">,</span>            <span class="token comment">// 預設語系為 en</span>
    fallbackLng<span class="token operator">:</span> <span class="token string">'en'</span><span class="token punctuation">,</span>    <span class="token comment">// 若找不到對應語系則回傳 en</span>
    defaultNS<span class="token operator">:</span> <span class="token string">'common'</span><span class="token punctuation">,</span>
    preload<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'en'</span><span class="token punctuation">,</span> <span class="token string">'ja'</span><span class="token punctuation">,</span> <span class="token string">'zh'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    ns<span class="token operator">:</span> <span class="token string">'common'</span><span class="token punctuation">,</span>
    interpolation<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
      escapeValue<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token function-variable function">parseMissingKeyHandler</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">return</span> <span class="token string">''</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span> <span class="token punctuation">,</span>
    react<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
      useSuspense<span class="token operator">:</span> <span class="token boolean">false</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> i18n<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li><code>i18n/lang-resource</code>：定義語系與對應文字的 json 檔</li>
</ul>
<pre class="line-numbers language-jsonld" data-language="jsonld"><code class="language-jsonld">&#x2F;&#x2F; i18n&#x2F;lang-resource

const resources &#x3D; &#123;
  en: &#123;
    common: &#123;
        &#39;login&#39;: &#39;Login&#39;,
        &#39;logout&#39;: &#39;Log out&#39;,
      &#125;,
  &#125;,
  ja: &#123;
    common: &#123;
        &#39;login&#39;: &#39;ログイン&#39;,
        &#39;logout&#39;: &#39;ログアウト&#39;, 
    &#125;,
  &#125;,
  zh: &#123;
    common: &#123;
        &#39;login&#39;: &#39;登入&#39;,
        &#39;logout&#39;: &#39;登出&#39;, 
    &#125;,
  &#125;,
&#125;;

export default resources;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>(3) 設定完成後，即可在 <code>app/pages/layout</code> 引入 <code>i18n/index.ts</code> 使用：</p>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">// app/pages/layout</span>

<span class="token keyword">import</span> <span class="token string">'./i18n'</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">RootLayout</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// ...</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>以 <code>app/pages/login/page.tsx</code> 為例：</p>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">// app/pages/login/page.tsx</span>

<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> useTranslation <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'react-i18next'</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">Login</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> t <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token function">useTranslation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
        <span class="token keyword">return</span> <span class="token punctuation">(</span>
        <span class="token operator">&lt;</span>div<span class="token operator">></span>
            <span class="token operator">&lt;</span>p<span class="token operator">></span><span class="token punctuation">&#123;</span><span class="token function">t</span><span class="token punctuation">(</span><span class="token string">'login'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>
            <span class="token operator">&lt;</span>p<span class="token operator">></span><span class="token punctuation">&#123;</span><span class="token function">t</span><span class="token punctuation">(</span><span class="token string">'logout'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>
        <span class="token operator">&lt;</span>div<span class="token operator">/</span><span class="token operator">></span>
    <span class="token punctuation">)</span>    
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>(4) 若要切換語系，可使用 <code>i18n.changeLanguage</code> 方法：</p>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">// app/component/header.tsx</span>

<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> useTranslation <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'react-i18next'</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">Header</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> t<span class="token punctuation">,</span> i18n <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token function">useTranslation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
  <span class="token keyword">const</span> <span class="token function-variable function">handleChangeLanguage</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
      i18n<span class="token punctuation">.</span><span class="token function">changeLanguage</span><span class="token punctuation">(</span><span class="token string">'en'</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h2><p>其實一開始研究實作 i18n 功能時，看到官方文件整個頭昏眼花，Next.js 內建的路由實作上又稍嫌複雜，React 生態不像 Angular 框架能直接引入內建功能實作，反而有很多種套件能夠選擇使用。</p>
<p>但問題來了，套件引入使用下來卻噴一堆 Error，才發現到由於 Next.js 路由系統架構，需搭配支援 App Router 或 Page Router 的套件使用，其實想成是在實作 React 多國語系功能就單純許多；雖然文中提及的 Page Router 還沒有機會實作，概念上還有點模糊，但還是先寫下筆記留作紀錄。</p>
<h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uY24vcG9zdC83MjM4NjE5ODkwOTkzNzU4MjYz">一篇文章了解如何在 Next.js 中集成 i18n 国际化（含踩坑及开发配置）<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9qaWFuZ3NodXV1LmNvbS9kb2NzL1JlYWN0L25leHQtaTE4bi8=">【Next】i18n使用 - JohnShu Blog<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9pdGhlbHAuaXRob21lLmNvbS50dy9hcnRpY2xlcy8xMDMyMzAxNw==">【DAY20】React Native - 多語系切換 (react-i18next)<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9pdGhlbHAuaXRob21lLmNvbS50dy9hcnRpY2xlcy8xMDMwODMxNQ==">使用 next-i18next 實作中英文多語系 - Modern Next.js Blog 系列 #28<i class="fa fa-external-link-alt"></i></span></li>
</ul>
]]></content>
      <categories>
        <category>Front-End</category>
        <category>React</category>
      </categories>
      <tags>
        <tag>Front-End</tag>
        <tag>React</tag>
        <tag>Next.js</tag>
        <tag>i18n</tag>
      </tags>
  </entry>
  <entry>
    <title>【學習筆記】Next.js 錯誤修復紀錄： 「Window is not defined」、「use client &amp; missing generateStaticParams() error」</title>
    <url>/nextjs-error-fix/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>這篇主要用來記錄 Next.js 開發過程採的坑，後續也會不定期更新：</p>
<ul>
<li>問題一：如何修復 <code>&quot;Window is not defined&quot;</code> error</li>
<li>問題二：在 use client 頁面實作動態路由顯示 <code>missing generateStaticParams()</code> error</li>
</ul>
<span id="more"></span>

<h2 id="問題一：如何修復-“Window-is-not-defined”-error-in-Next-js"><a href="#問題一：如何修復-“Window-is-not-defined”-error-in-Next-js" class="headerlink" title="問題一：如何修復 “Window is not defined” error in Next.js"></a>問題一：如何修復 “Window is not defined” error in Next.js</h2><p>事情發生在開發 Next.js APP，要實作 Google 登入驗證，需要使用 <span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL1dpbmRvdw==">Window<i class="fa fa-external-link-alt"></i></span>、<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL0RvY3VtZW50">Document<i class="fa fa-external-link-alt"></i></span> 物件時，發現程式會報出以下錯誤：</p>
<pre class="line-numbers language-none"><code class="language-none">ReferenceError: window is not defined

or

ReferenceError: document is not defined<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="發生原因"><a href="#發生原因" class="headerlink" title="發生原因"></a>發生原因</h3><p>這是由於 Next.js 預設為伺服器渲染（Server-side Rendering），會在 Node.js 環境下預渲染頁面，並將生成的 HTML 內容發送給 Client 端。</p>
<p>因此渲染過程是在 Server 端而非在瀏覽器中，由於程式無法識別 Window / Document 物件而回報上述 Error。</p>
<h3 id="如何解決？"><a href="#如何解決？" class="headerlink" title="如何解決？"></a>如何解決？</h3><p>解決方法可透過條件渲染（Conditional Rendering），確保 Next.js 只在 Client 端執行指定的程式碼，</p>
<p>可透過以下兩種方式來實現：</p>
<ul>
<li>檢查 window 是否存在</li>
<li>使用 useEffect hook</li>
</ul>
<h4 id="1-檢查-window-是否存在"><a href="#1-檢查-window-是否存在" class="headerlink" title="(1) 檢查 window 是否存在"></a>(1) 檢查 window 是否存在</h4><p>判斷 window 是否存在，確定在瀏覽器中才執行指定的程式碼：</p>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">const</span> <span class="token function-variable function">isBrowser</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">typeof</span> window <span class="token operator">!==</span> <span class="token string">'undefined'</span><span class="token punctuation">;</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> window <span class="token operator">!==</span> <span class="token string">'undefined'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// Client-side-only</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'window: '</span><span class="token punctuation">,</span> window<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>


<h4 id="2-使用-useEffect-等-Hooks"><a href="#2-使用-useEffect-等-Hooks" class="headerlink" title="(2) 使用 useEffect 等 Hooks"></a>(2) 使用 useEffect 等 Hooks</h4><p>透過 useEffect 等方法，可確保程式碼只會在 Client 端執行：</p>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token string">'use client'</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> useEffect <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span>

<span class="token comment">// ...</span>

<span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// Client-side-only        </span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'window: '</span><span class="token punctuation">,</span> window<span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'scroll'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'srcoll: '</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h3><ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvNTUxNTEwNDEvd2luZG93LWlzLW5vdC1kZWZpbmVkLWluLW5leHQtanMtcmVhY3QtYXBw">Window is not defined in Next.js React app<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uY24vcy9yZWFjdCUyMHdpbmRvdyUyMGlzJTIwbm90JTIwZGVmaW5lZCUyMG5leHQlMjBqcw==">如何修复Next.js中的 “window is not defined”？ - 掘金<i class="fa fa-external-link-alt"></i></span></li>
</ul>
<h2 id="問題二：在-use-client-頁面實作動態路由顯示-missing-generateStaticParams-error"><a href="#問題二：在-use-client-頁面實作動態路由顯示-missing-generateStaticParams-error" class="headerlink" title="問題二：在 use client 頁面實作動態路由顯示 missing generateStaticParams() error"></a>問題二：在 use client 頁面實作動態路由顯示 <code>missing generateStaticParams()</code> error</h2><p>事情發生在開發 Next.js APP，實作 dynamic routing 時（如：<code>server/[evo]/page.tsx</code>），會顯示以下錯誤：</p>
<p><img src="https://hackmd.io/_uploads/HJ8MieYbA.png" alt="error"></p>
<p>上述錯誤訊息中的<code>&quot;output: export&quot;</code>，是 Next.js 提供支援 <span class="exturl" data-url="aHR0cHM6Ly9uZXh0anMub3JnL2RvY3MvYXBwL2J1aWxkaW5nLXlvdXItYXBwbGljYXRpb24vZGVwbG95aW5nL3N0YXRpYy1leHBvcnRz">Static Exports（靜態導出）<i class="fa fa-external-link-alt"></i></span>，透過在設定檔 <code>next.config.js</code> 加上參數：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/** @type &#123;import('next').NextConfig&#125; */</span>
<span class="token keyword">const</span> nextConfig <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  output<span class="token operator">:</span> <span class="token string">'export'</span><span class="token punctuation">,</span> <span class="token comment">// Outputs a Single-Page Application (SPA)</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> nextConfig<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>如此一來，即可在 <code>next build</code> 建置時實現 SPA （single-page application），將會在 <code>out</code> 資料夾底下生成靜態檔案，將每個路由分解為單獨的 HTML 檔案，避免在 Client 端載入不必要的 JS 程式碼，減少 bundle 大小以提高頁面效能。</p>
<h3 id="發生原因-1"><a href="#發生原因-1" class="headerlink" title="發生原因"></a>發生原因</h3><p>但在 Next.js 若想要實現 Dynamic Routes（動態路由），必須加上 <code>generateStaticParams()</code> 方法，這段 function 只能在 Server Component 執行，在 Client Component 並不支援。</p>
<p><span class="exturl" data-url="aHR0cHM6Ly9uZXh0anMub3JnL2RvY3MvYXBwL2J1aWxkaW5nLXlvdXItYXBwbGljYXRpb24vZGVwbG95aW5nL3N0YXRpYy1leHBvcnRzI3Vuc3VwcG9ydGVkLWZlYXR1cmVz">官方文件（Deploying: Static Exports | Next.js）<i class="fa fa-external-link-alt"></i></span> 也提到 App Routing 若想要 Dynamic Routes 必須搭配「只能在 SSR 運行的 <code>generateStaticParams()</code>」：</p>
<p><img src="https://hackmd.io/_uploads/S1xrigt-A.png" alt="unsupported"></p>
<h3 id="如何解決？-1"><a href="#如何解決？-1" class="headerlink" title="如何解決？"></a>如何解決？</h3><p>如果想要輸出 SPA，又希望能在 <code>&#39;use client&#39;</code> 情境中實現動態路由，則需要將元件拆成兩個部分實作：</p>
<ul>
<li>在 Server Component 引入 <code>generateStaticParams()</code> 方法，以實現動態路由</li>
<li>接著引入 Client Component，即可使用 Hooks</li>
</ul>
<p>以下是範例程式碼，詳細可參考這篇文章<span class="exturl" data-url="aHR0cHM6Ly9tZWRpdW0uY29tL0BnaXZ2ZW1lZWUvdXNhZ2Utb2YtZ2VuZXJhdGVzdGF0aWNwYXJhbXMtd2l0aC11c2UtY2xpZW50LWEwNTljMjNmNzMxNg==">《usage of generateStaticParams with use client | by Vivi - Medium》<i class="fa fa-external-link-alt"></i></span></p>
<ul>
<li><code>server/[evo]/page.tsx</code>：在 Server Component 引入 <code>generateStaticParams()</code> 方法，以實現動態路由</li>
</ul>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">// server/[evo]/page.tsx</span>

<span class="token keyword">import</span> EvoPage<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> Props <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"."</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">generateStaticParams</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token punctuation">[</span>
    <span class="token punctuation">&#123;</span> evo<span class="token operator">:</span> <span class="token string">'test'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#123;</span> evo<span class="token operator">:</span> <span class="token string">'stage'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#123;</span> evo<span class="token operator">:</span> <span class="token string">'public'</span> <span class="token punctuation">&#125;</span>
  <span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">ServerEvoPage</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> params <span class="token punctuation">&#125;</span><span class="token operator">:</span> Props<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'[ServerEvoPage] params'</span><span class="token punctuation">,</span> params<span class="token punctuation">)</span>
  <span class="token keyword">return</span> <span class="token operator">&lt;</span>EvoPage params<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> evo<span class="token operator">:</span> params<span class="token punctuation">.</span>evo <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li><code>server/[evo]/index.tsx</code>：在上述 Server Component 引入 Client Component，即可使用 Hooks：</li>
</ul>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">// server/[evo]/index.tsx</span>

<span class="token string">'use client'</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">type</span> <span class="token class-name">Props</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  params<span class="token operator">:</span> <span class="token punctuation">&#123;</span> evo<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">EvoPage</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> params <span class="token punctuation">&#125;</span><span class="token operator">:</span> Props<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'[EvoPage] params: '</span><span class="token punctuation">,</span> params<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span>data<span class="token punctuation">,</span> setData<span class="token punctuation">]</span> <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">useState</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token operator">&lt;</span>div<span class="token operator">></span>
        This <span class="token keyword">is</span> Client Component<span class="token punctuation">.</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>


<h3 id="參考資料-1"><a href="#參考資料-1" class="headerlink" title="參考資料"></a>參考資料</h3><ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3ZlcmNlbC9uZXh0LmpzL2lzc3Vlcy80NjczNQ==">[NEXT-1049] use client with generateStaticParams will opt out of static generation #46735<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3ZlcmNlbC9uZXh0LmpzL2lzc3Vlcy80ODAyMg==">[NEXT-1030] output: ‘export’ with use client in dynamic routes doesn’t work #48022<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3ZlcmNlbC9uZXh0LmpzL2lzc3Vlcy81NDM5Mw==">App Router with output: export does not support useParams() on client #54393<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cueXVhbnN1ZG9uZy5uZXQvZG9jdW1lbnQvTmV4dEpzLzM1LiVFOSU5RCU5OSVFNiU4MCU4MSVFNSVBRiVCQyVFNSU4NyVCQS5odG1s">NextJs-静态导出<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9pdGhlbHAuaXRob21lLmNvbS50dy9hcnRpY2xlcy8xMDMyMjI2MQ==">Day 19 - Next.js 13 App Router 動態路由 Dynamic Routes &amp; getStaticParams()<i class="fa fa-external-link-alt"></i></span></li>
</ul>
]]></content>
      <categories>
        <category>Front-End</category>
        <category>React</category>
      </categories>
      <tags>
        <tag>Front-End</tag>
        <tag>React</tag>
        <tag>Next.js</tag>
      </tags>
  </entry>
  <entry>
    <title>【學習筆記】JavaScript 的浮點數計算、平方根</title>
    <url>/javascript-floating-number/</url>
    <content><![CDATA[<p>最近又開始用 <span class="exturl" data-url="aHR0cHM6Ly93d3cuY29kZXdhcnMuY29tL2Rhc2hib2FyZA==">Codewars<i class="fa fa-external-link-alt"></i></span> 來練習刷題，也嘗試開一個 Repository：<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2hlaWRpbGl1MjAyMC9jb2Rld2Fycy1jaGFsbGVuZ2Vz">codewars-challenges<i class="fa fa-external-link-alt"></i></span> 記錄作答結果，蠻喜歡這種能夠慢慢升級的感覺，答題結束還能參考其他人的解法，才恍然大悟原來還有更簡潔的思路。</p>
<p>發現自己對於一些 JavaScript 函式使用還是不太熟，把之前寫過的筆記重新複習過，本篇主要整理 JS 常見的內建函式，列表如下：</p>
<span id="more"></span>

<ul>
<li>Math.floor(x)：無條件捨去，回傳「小於等於」所給數字的最大整數</li>
<li>Bitwise NOT (~)：位元反向運算子（波浪號）</li>
<li>Math.ceil(x)：無條件進位，回傳「大於等於」所給數字的最小整數</li>
<li>Math.round(x)：四捨五入</li>
<li>toFixed(x)：四捨六入五留雙</li>
<li>Math.sqrt(x)：返回一個數的平方根</li>
<li>Math.abs(x)：返回一個數的絕對值</li>
</ul>
<h2 id="Math-floor-x-：無條件捨去，回傳「小於等於」所給數字的最大整數"><a href="#Math-floor-x-：無條件捨去，回傳「小於等於」所給數字的最大整數" class="headerlink" title="Math.floor(x)：無條件捨去，回傳「小於等於」所給數字的最大整數"></a><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvemgtVFcvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvTWF0aC9mbG9vcg==">Math.floor(x)<i class="fa fa-external-link-alt"></i></span>：無條件捨去，回傳「小於等於」所給數字的最大整數</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token number">.95</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 0</span>
Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// 4</span>
Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token number">7.004</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 7</span>
Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">0.95</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// -1</span>
Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// -4</span>
Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">7.004</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// -8</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="Bitwise-NOT-：位元反向運算子（波浪號）"><a href="#Bitwise-NOT-：位元反向運算子（波浪號）" class="headerlink" title="Bitwise NOT (~)：位元反向運算子（波浪號）"></a><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvT3BlcmF0b3JzL0JpdHdpc2VfTk9U">Bitwise NOT<i class="fa fa-external-link-alt"></i></span> (<code>~</code>)：位元反向運算子（波浪號）</h2><ul>
<li>Bitwise NOT（<code>~</code>）作用是將數字 <code>x</code> 轉換為 <code>-(x + 1)</code></li>
<li>Double Bitwise NOT(<code>~~</code>)：雙位元元反向運算子（兩個波浪號），對正數的作用類似 <code>Math.floor(x)</code> 的無條件捨去，但對負數則結果不同</li>
</ul>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">~</span><span class="token number">10</span>    <span class="token comment">// -11</span>
<span class="token operator">~</span><span class="token operator">-</span><span class="token number">10</span>   <span class="token comment">// 9</span>
<span class="token operator">~</span><span class="token number">10.5</span>  <span class="token comment">// -11</span>
<span class="token operator">~</span><span class="token operator">-</span><span class="token number">10.5</span> <span class="token comment">// 9</span>

<span class="token operator">~</span><span class="token operator">~</span><span class="token number">10</span>    <span class="token comment">// 10</span>
<span class="token operator">~</span><span class="token operator">~</span><span class="token operator">-</span><span class="token number">10</span>   <span class="token comment">// -10</span>
<span class="token operator">~</span><span class="token operator">~</span><span class="token number">10.5</span>  <span class="token comment">// 10</span>
<span class="token operator">~</span><span class="token operator">~</span><span class="token operator">-</span><span class="token number">10.5</span> <span class="token comment">// -10</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="Math-ceil-x-：無條件進位，回傳「大於等於」所給數字的最小整數"><a href="#Math-ceil-x-：無條件進位，回傳「大於等於」所給數字的最小整數" class="headerlink" title="Math.ceil(x)：無條件進位，回傳「大於等於」所給數字的最小整數"></a><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvemgtVFcvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvTWF0aC9jZWls">Math.ceil(x)<i class="fa fa-external-link-alt"></i></span>：無條件進位，回傳「大於等於」所給數字的最小整數</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">Math<span class="token punctuation">.</span><span class="token function">ceil</span><span class="token punctuation">(</span><span class="token number">.95</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// 1</span>
Math<span class="token punctuation">.</span><span class="token function">ceil</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">// 4</span>
Math<span class="token punctuation">.</span><span class="token function">ceil</span><span class="token punctuation">(</span><span class="token number">7.004</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 8</span>
Math<span class="token punctuation">.</span><span class="token function">ceil</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">0.95</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// -0</span>
Math<span class="token punctuation">.</span><span class="token function">ceil</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">7.004</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// -7</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="Math-round-x-：四捨五入"><a href="#Math-round-x-：四捨五入" class="headerlink" title="Math.round(x)：四捨五入"></a><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvemgtVFcvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvTWF0aC9yb3VuZA==">Math.round(x)<i class="fa fa-external-link-alt"></i></span>：四捨五入</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">Math<span class="token punctuation">.</span><span class="token function">round</span><span class="token punctuation">(</span><span class="token number">20.49</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 20</span>
Math<span class="token punctuation">.</span><span class="token function">round</span><span class="token punctuation">(</span><span class="token number">20.5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 21</span>
Math<span class="token punctuation">.</span><span class="token function">round</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">20.5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// -20</span>
Math<span class="token punctuation">.</span><span class="token function">round</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">20.51</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// -21</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="toFixed-x-：四捨六入五留雙"><a href="#toFixed-x-：四捨六入五留雙" class="headerlink" title="toFixed(x)：四捨六入五留雙"></a><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvemgtVFcvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvTnVtYmVyL3RvRml4ZWQ=">toFixed(x)<i class="fa fa-external-link-alt"></i></span>：四捨六入五留雙</h2><ul>
<li>以字串返回，精確至「小數點後」的數字，小數部分依指定長度補充零</li>
</ul>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token number">1.23</span><span class="token punctuation">.</span><span class="token function">toFixed</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// '1.23'</span>
<span class="token number">1.234</span><span class="token punctuation">.</span><span class="token function">toFixed</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// '1.23'</span>
<span class="token number">1.235</span><span class="token punctuation">.</span><span class="token function">toFixed</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// '1.24'</span>
<span class="token number">1.236</span><span class="token punctuation">.</span><span class="token function">toFixed</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// '1.24'</span>
<span class="token number">1.244</span><span class="token punctuation">.</span><span class="token function">toFixed</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// '1.24'</span>
<span class="token number">1.245</span><span class="token punctuation">.</span><span class="token function">toFixed</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// '1.25'</span>
<span class="token number">1.246</span><span class="token punctuation">.</span><span class="token function">toFixed</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// '1.25'</span>

<span class="token punctuation">(</span><span class="token number">36</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toFixed</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>     <span class="token comment">// '36.0000'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>


<h2 id="Math-sqrt-x-：返回一個數的平方根"><a href="#Math-sqrt-x-：返回一個數的平方根" class="headerlink" title="Math.sqrt(x)：返回一個數的平方根"></a><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvemgtQ04vZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvTWF0aC9zcXJ0">Math.sqrt(x)<i class="fa fa-external-link-alt"></i></span>：返回一個數的平方根</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">Math<span class="token punctuation">.</span><span class="token function">sqrt</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 1.4142135623730951</span>
Math<span class="token punctuation">.</span><span class="token function">sqrt</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 2</span>
Math<span class="token punctuation">.</span><span class="token function">sqrt</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// NaN</span>
Math<span class="token punctuation">.</span><span class="token function">sqrt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="Math-abs-x-：返回一個數的絕對值"><a href="#Math-abs-x-：返回一個數的絕對值" class="headerlink" title="Math.abs(x)：返回一個數的絕對值"></a><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvTWF0aC9hYnM=">Math.abs(x)<i class="fa fa-external-link-alt"></i></span>：返回一個數的絕對值</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">difference</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>a <span class="token operator">-</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token function">difference</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 2</span>
<span class="token function">difference</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 2</span>
<span class="token function">difference</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9wamNoZW5kZXIuZGV2L2phdmFzY3JpcHQvanMtb3BlcmF0b3Iv">[JS] JavaScript 運算子（Operator）<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cDovL3d3dy5hdWEuY29tLnR3L2Jsb2dnZXIvP1BpZD0xMTcz">JavaScript 四捨五入、無條件捨去、無條件進位<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmh1bGkudHcvMjAyMi8wMy8xNC9qYXZhc2NyaXB0LW51bWJlci8=">使用 JavaScript 的數字時的常見錯誤<i class="fa fa-external-link-alt"></i></span></li>
</ul>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>Front-End</tag>
        <tag>JavaScript</tag>
      </tags>
  </entry>
</search>
